{"version":3,"sources":["meteor://ðŸ’»app/meteor-data-mixin.jsx"],"names":[],"mappings":"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","file":"/packages/react-meteor-data.js","sourcesContent":["ReactMeteorData = {\n  componentWillMount() {\n    this.data = {};\n    this._meteorDataManager = new MeteorDataManager(this);\n    const newData = this._meteorDataManager.calculateData();\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUpdate(nextProps, nextState) {\n    const saveProps = this.props;\n    const saveState = this.state;\n    let newData;\n    try {\n      // Temporarily assign this.state and this.props,\n      // so that they are seen by getMeteorData!\n      // This is a simulation of how the proposed Observe API\n      // for React will work, which calls observe() after\n      // componentWillUpdate and after props and state are\n      // updated, but before render() is called.\n      // See https://github.com/facebook/react/issues/3398.\n      this.props = nextProps;\n      this.state = nextState;\n      newData = this._meteorDataManager.calculateData();\n    } finally {\n      this.props = saveProps;\n      this.state = saveState;\n    }\n\n    this._meteorDataManager.updateData(newData);\n  },\n  componentWillUnmount() {\n    this._meteorDataManager.dispose();\n  }\n};\n\n// A class to keep the state and utility methods needed to manage\n// the Meteor data for a component.\nclass MeteorDataManager {\n  constructor(component) {\n    this.component = component;\n    this.computation = null;\n    this.oldData = null;\n  }\n\n  dispose() {\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n  }\n\n  calculateData() {\n    const component = this.component;\n    const {props, state} = component;\n\n    if (! component.getMeteorData) {\n      return null;\n    }\n\n    // When rendering on the server, we don't want to use the Tracker.\n    // We only do the first rendering on the server so we can get the data right away\n    if (Meteor.isServer) {\n      return component.getMeteorData();\n    }\n\n    if (this.computation) {\n      this.computation.stop();\n      this.computation = null;\n    }\n\n    let data;\n    // Use Tracker.nonreactive in case we are inside a Tracker Computation.\n    // This can happen if someone calls `React.render` inside a Computation.\n    // In that case, we want to opt out of the normal behavior of nested\n    // Computations, where if the outer one is invalidated or stopped,\n    // it stops the inner one.\n    this.computation = Tracker.nonreactive(() => {\n      return Tracker.autorun((c) => {\n        if (c.firstRun) {\n          const savedSetState = component.setState;\n          try {\n            component.setState = () => {\n              throw new Error(\n\"Can't call `setState` inside `getMeteorData` as this could cause an endless\" +\n\" loop. To respond to Meteor data changing, consider making this component\" +\n\" a \\\"wrapper component\\\" that only fetches data and passes it in as props to\" +\n\" a child component. Then you can use `componentWillReceiveProps` in that\" +\n\" child component.\");\n            };\n\n            data = component.getMeteorData();\n          } finally {\n            component.setState = savedSetState;\n          }\n        } else {\n          // Stop this computation instead of using the re-run.\n          // We use a brand-new autorun for each call to getMeteorData\n          // to capture dependencies on any reactive data sources that\n          // are accessed.  The reason we can't use a single autorun\n          // for the lifetime of the component is that Tracker only\n          // re-runs autoruns at flush time, while we need to be able to\n          // re-call getMeteorData synchronously whenever we want, e.g.\n          // from componentWillUpdate.\n          c.stop();\n          // Calling forceUpdate() triggers componentWillUpdate which\n          // recalculates getMeteorData() and re-renders the component.\n          component.forceUpdate();\n        }\n      });\n    });\n    \n    if (Package.mongo && Package.mongo.Mongo) {\n      Object.keys(data).forEach(function (key) {\n        if (data[key] instanceof Package.mongo.Mongo.Cursor) {\n          console.warn(\n  \"Warning: you are returning a Mongo cursor from getMeteorData. This value \" +\n  \"will not be reactive. You probably want to call `.fetch()` on the cursor \" +\n  \"before returning it.\");\n        }\n      });\n    }\n\n    return data;\n  }\n\n  updateData(newData) {\n    const component = this.component;\n    const oldData = this.oldData;\n\n    if (! (newData && (typeof newData) === 'object')) {\n      throw new Error(\"Expected object returned from getMeteorData\");\n    }\n    // update componentData in place based on newData\n    for (let key in newData) {\n      component.data[key] = newData[key];\n    }\n    // if there is oldData (which is every time this method is called\n    // except the first), delete keys in newData that aren't in\n    // oldData.  don't interfere with other keys, in case we are\n    // co-existing with something else that writes to a component's\n    // this.data.\n    if (oldData) {\n      for (let key in oldData) {\n        if (!(key in newData)) {\n          delete component.data[key];\n        }\n      }\n    }\n    this.oldData = newData;\n  }\n}\n"]}