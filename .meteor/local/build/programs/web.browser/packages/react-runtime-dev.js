//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var Object_create, Object_freeze, require, React, ReactDev;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/react-runtime-dev/detect-shims.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// React contains this code, but it doesn't run it soon enough to be helpful.                                          // 1
// Also, this way we get to print a meteor-specific error message, though                                              // 2
// in addition we modify React's error message with a search-and-replace in                                            // 3
// the Browserify options.                                                                                             // 4
                                                                                                                       // 5
var expectedFeatures = [                                                                                               // 6
  Array.isArray,                                                                                                       // 7
  Array.prototype.every,                                                                                               // 8
  Array.prototype.forEach,                                                                                             // 9
  Array.prototype.indexOf,                                                                                             // 10
  Array.prototype.map,                                                                                                 // 11
  Date.now,                                                                                                            // 12
  Function.prototype.bind,                                                                                             // 13
  Object.keys,                                                                                                         // 14
  String.prototype.split,                                                                                              // 15
  String.prototype.trim                                                                                                // 16
];                                                                                                                     // 17
                                                                                                                       // 18
for (var i = 0; i < expectedFeatures.length; i++) {                                                                    // 19
  if (!expectedFeatures[i]) {                                                                                          // 20
    console.error(                                                                                                     // 21
      'One or more ES5 shims expected by React are not available: ' +                                                  // 22
        'Add the es5-shim package with `meteor add es5-shim`'                                                          // 23
    );                                                                                                                 // 24
    break;                                                                                                             // 25
  }                                                                                                                    // 26
}                                                                                                                      // 27
                                                                                                                       // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/react-runtime-dev/shams.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// This file is duplicated between react-runtime-prod and react-runtime-dev,                                           // 1
// so be sure to keep them in sync.                                                                                    // 2
//                                                                                                                     // 3
// These private helpers that approximate Object.create and Object.freeze,                                             // 4
// in conjunction with a browserify transform that does a search-and-replace                                           // 5
// on the React code, remove React's dependence on es5-sham.  See also                                                 // 6
// https://github.com/facebook/react/issues/4189.                                                                      // 7
                                                                                                                       // 8
Object_create = (Object.create || function (proto, props) {                                                            // 9
  if (proto === null) {                                                                                                // 10
    throw new Error("This sham does not support Object.create(null)");                                                 // 11
  } else if (props) {                                                                                                  // 12
    throw new Error("This sham does not support Object.create(..., props)");                                           // 13
  }                                                                                                                    // 14
                                                                                                                       // 15
  var Type = function Type() {}; // An empty constructor.                                                              // 16
  Type.prototype = proto;                                                                                              // 17
  return new Type();                                                                                                   // 18
});                                                                                                                    // 19
                                                                                                                       // 20
Object_freeze = (Object.freeze || function (obj) { return obj; });                                                     // 21
                                                                                                                       // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/react-runtime-dev/react.browserify.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser                                                                                   // 2
                                                                                                                       // 3
var process = module.exports = {};                                                                                     // 4
var queue = [];                                                                                                        // 5
var draining = false;                                                                                                  // 6
                                                                                                                       // 7
function drainQueue() {                                                                                                // 8
    if (draining) {                                                                                                    // 9
        return;                                                                                                        // 10
    }                                                                                                                  // 11
    draining = true;                                                                                                   // 12
    var currentQueue;                                                                                                  // 13
    var len = queue.length;                                                                                            // 14
    while(len) {                                                                                                       // 15
        currentQueue = queue;                                                                                          // 16
        queue = [];                                                                                                    // 17
        var i = -1;                                                                                                    // 18
        while (++i < len) {                                                                                            // 19
            currentQueue[i]();                                                                                         // 20
        }                                                                                                              // 21
        len = queue.length;                                                                                            // 22
    }                                                                                                                  // 23
    draining = false;                                                                                                  // 24
}                                                                                                                      // 25
process.nextTick = function (fun) {                                                                                    // 26
    queue.push(fun);                                                                                                   // 27
    if (!draining) {                                                                                                   // 28
        setTimeout(drainQueue, 0);                                                                                     // 29
    }                                                                                                                  // 30
};                                                                                                                     // 31
                                                                                                                       // 32
process.title = 'browser';                                                                                             // 33
process.browser = true;                                                                                                // 34
process.env = {};                                                                                                      // 35
process.argv = [];                                                                                                     // 36
process.version = ''; // empty string to avoid regexp issues                                                           // 37
process.versions = {};                                                                                                 // 38
                                                                                                                       // 39
function noop() {}                                                                                                     // 40
                                                                                                                       // 41
process.on = noop;                                                                                                     // 42
process.addListener = noop;                                                                                            // 43
process.once = noop;                                                                                                   // 44
process.off = noop;                                                                                                    // 45
process.removeListener = noop;                                                                                         // 46
process.removeAllListeners = noop;                                                                                     // 47
process.emit = noop;                                                                                                   // 48
                                                                                                                       // 49
process.binding = function (name) {                                                                                    // 50
    throw new Error('process.binding is not supported');                                                               // 51
};                                                                                                                     // 52
                                                                                                                       // 53
// TODO(shtylman)                                                                                                      // 54
process.cwd = function () { return '/' };                                                                              // 55
process.chdir = function (dir) {                                                                                       // 56
    throw new Error('process.chdir is not supported');                                                                 // 57
};                                                                                                                     // 58
process.umask = function() { return 0; };                                                                              // 59
                                                                                                                       // 60
},{}],2:[function(require,module,exports){                                                                             // 61
React = require("react/addons");                                                                                       // 62
                                                                                                                       // 63
},{"react/addons":"react/addons"}],"react/addons":[function(require,module,exports){                                   // 64
module.exports = require('./lib/ReactWithAddons');                                                                     // 65
                                                                                                                       // 66
},{"./lib/ReactWithAddons":"react/lib/ReactWithAddons"}],"react/lib/AutoFocusMixin":[function(require,module,exports){
/**                                                                                                                    // 68
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 69
 * All rights reserved.                                                                                                // 70
 *                                                                                                                     // 71
 * This source code is licensed under the BSD-style license found in the                                               // 72
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 73
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 74
 *                                                                                                                     // 75
 * @providesModule AutoFocusMixin                                                                                      // 76
 * @typechecks static-only                                                                                             // 77
 */                                                                                                                    // 78
                                                                                                                       // 79
'use strict';                                                                                                          // 80
                                                                                                                       // 81
var focusNode = require("./focusNode");                                                                                // 82
                                                                                                                       // 83
var AutoFocusMixin = {                                                                                                 // 84
  componentDidMount: function() {                                                                                      // 85
    if (this.props.autoFocus) {                                                                                        // 86
      focusNode(this.getDOMNode());                                                                                    // 87
    }                                                                                                                  // 88
  }                                                                                                                    // 89
};                                                                                                                     // 90
                                                                                                                       // 91
module.exports = AutoFocusMixin;                                                                                       // 92
                                                                                                                       // 93
},{"./focusNode":"react/lib/focusNode"}],"react/lib/BeforeInputEventPlugin":[function(require,module,exports){         // 94
/**                                                                                                                    // 95
 * Copyright 2013-2015 Facebook, Inc.                                                                                  // 96
 * All rights reserved.                                                                                                // 97
 *                                                                                                                     // 98
 * This source code is licensed under the BSD-style license found in the                                               // 99
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 100
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 101
 *                                                                                                                     // 102
 * @providesModule BeforeInputEventPlugin                                                                              // 103
 * @typechecks static-only                                                                                             // 104
 */                                                                                                                    // 105
                                                                                                                       // 106
'use strict';                                                                                                          // 107
                                                                                                                       // 108
var EventConstants = require("./EventConstants");                                                                      // 109
var EventPropagators = require("./EventPropagators");                                                                  // 110
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 111
var FallbackCompositionState = require("./FallbackCompositionState");                                                  // 112
var SyntheticCompositionEvent = require("./SyntheticCompositionEvent");                                                // 113
var SyntheticInputEvent = require("./SyntheticInputEvent");                                                            // 114
                                                                                                                       // 115
var keyOf = require("./keyOf");                                                                                        // 116
                                                                                                                       // 117
var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space                                                         // 118
var START_KEYCODE = 229;                                                                                               // 119
                                                                                                                       // 120
var canUseCompositionEvent = (                                                                                         // 121
  ExecutionEnvironment.canUseDOM &&                                                                                    // 122
  'CompositionEvent' in window                                                                                         // 123
);                                                                                                                     // 124
                                                                                                                       // 125
var documentMode = null;                                                                                               // 126
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {                                                    // 127
  documentMode = document.documentMode;                                                                                // 128
}                                                                                                                      // 129
                                                                                                                       // 130
// Webkit offers a very useful `textInput` event that can be used to                                                   // 131
// directly represent `beforeInput`. The IE `textinput` event is not as                                                // 132
// useful, so we don't use it.                                                                                         // 133
var canUseTextInputEvent = (                                                                                           // 134
  ExecutionEnvironment.canUseDOM &&                                                                                    // 135
  'TextEvent' in window &&                                                                                             // 136
  !documentMode &&                                                                                                     // 137
  !isPresto()                                                                                                          // 138
);                                                                                                                     // 139
                                                                                                                       // 140
// In IE9+, we have access to composition events, but the data supplied                                                // 141
// by the native compositionend event may be incorrect. Japanese ideographic                                           // 142
// spaces, for instance (\u3000) are not recorded correctly.                                                           // 143
var useFallbackCompositionData = (                                                                                     // 144
  ExecutionEnvironment.canUseDOM &&                                                                                    // 145
  (                                                                                                                    // 146
    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)                                // 147
  )                                                                                                                    // 148
);                                                                                                                     // 149
                                                                                                                       // 150
/**                                                                                                                    // 151
 * Opera <= 12 includes TextEvent in window, but does not fire                                                         // 152
 * text input events. Rely on keypress instead.                                                                        // 153
 */                                                                                                                    // 154
function isPresto() {                                                                                                  // 155
  var opera = window.opera;                                                                                            // 156
  return (                                                                                                             // 157
    typeof opera === 'object' &&                                                                                       // 158
    typeof opera.version === 'function' &&                                                                             // 159
    parseInt(opera.version(), 10) <= 12                                                                                // 160
  );                                                                                                                   // 161
}                                                                                                                      // 162
                                                                                                                       // 163
var SPACEBAR_CODE = 32;                                                                                                // 164
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);                                                                // 165
                                                                                                                       // 166
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 167
                                                                                                                       // 168
// Events and their corresponding property names.                                                                      // 169
var eventTypes = {                                                                                                     // 170
  beforeInput: {                                                                                                       // 171
    phasedRegistrationNames: {                                                                                         // 172
      bubbled: keyOf({onBeforeInput: null}),                                                                           // 173
      captured: keyOf({onBeforeInputCapture: null})                                                                    // 174
    },                                                                                                                 // 175
    dependencies: [                                                                                                    // 176
      topLevelTypes.topCompositionEnd,                                                                                 // 177
      topLevelTypes.topKeyPress,                                                                                       // 178
      topLevelTypes.topTextInput,                                                                                      // 179
      topLevelTypes.topPaste                                                                                           // 180
    ]                                                                                                                  // 181
  },                                                                                                                   // 182
  compositionEnd: {                                                                                                    // 183
    phasedRegistrationNames: {                                                                                         // 184
      bubbled: keyOf({onCompositionEnd: null}),                                                                        // 185
      captured: keyOf({onCompositionEndCapture: null})                                                                 // 186
    },                                                                                                                 // 187
    dependencies: [                                                                                                    // 188
      topLevelTypes.topBlur,                                                                                           // 189
      topLevelTypes.topCompositionEnd,                                                                                 // 190
      topLevelTypes.topKeyDown,                                                                                        // 191
      topLevelTypes.topKeyPress,                                                                                       // 192
      topLevelTypes.topKeyUp,                                                                                          // 193
      topLevelTypes.topMouseDown                                                                                       // 194
    ]                                                                                                                  // 195
  },                                                                                                                   // 196
  compositionStart: {                                                                                                  // 197
    phasedRegistrationNames: {                                                                                         // 198
      bubbled: keyOf({onCompositionStart: null}),                                                                      // 199
      captured: keyOf({onCompositionStartCapture: null})                                                               // 200
    },                                                                                                                 // 201
    dependencies: [                                                                                                    // 202
      topLevelTypes.topBlur,                                                                                           // 203
      topLevelTypes.topCompositionStart,                                                                               // 204
      topLevelTypes.topKeyDown,                                                                                        // 205
      topLevelTypes.topKeyPress,                                                                                       // 206
      topLevelTypes.topKeyUp,                                                                                          // 207
      topLevelTypes.topMouseDown                                                                                       // 208
    ]                                                                                                                  // 209
  },                                                                                                                   // 210
  compositionUpdate: {                                                                                                 // 211
    phasedRegistrationNames: {                                                                                         // 212
      bubbled: keyOf({onCompositionUpdate: null}),                                                                     // 213
      captured: keyOf({onCompositionUpdateCapture: null})                                                              // 214
    },                                                                                                                 // 215
    dependencies: [                                                                                                    // 216
      topLevelTypes.topBlur,                                                                                           // 217
      topLevelTypes.topCompositionUpdate,                                                                              // 218
      topLevelTypes.topKeyDown,                                                                                        // 219
      topLevelTypes.topKeyPress,                                                                                       // 220
      topLevelTypes.topKeyUp,                                                                                          // 221
      topLevelTypes.topMouseDown                                                                                       // 222
    ]                                                                                                                  // 223
  }                                                                                                                    // 224
};                                                                                                                     // 225
                                                                                                                       // 226
// Track whether we've ever handled a keypress on the space key.                                                       // 227
var hasSpaceKeypress = false;                                                                                          // 228
                                                                                                                       // 229
/**                                                                                                                    // 230
 * Return whether a native keypress event is assumed to be a command.                                                  // 231
 * This is required because Firefox fires `keypress` events for key commands                                           // 232
 * (cut, copy, select-all, etc.) even though no character is inserted.                                                 // 233
 */                                                                                                                    // 234
function isKeypressCommand(nativeEvent) {                                                                              // 235
  return (                                                                                                             // 236
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&                                              // 237
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.                                                 // 238
    !(nativeEvent.ctrlKey && nativeEvent.altKey)                                                                       // 239
  );                                                                                                                   // 240
}                                                                                                                      // 241
                                                                                                                       // 242
                                                                                                                       // 243
/**                                                                                                                    // 244
 * Translate native top level events into event types.                                                                 // 245
 *                                                                                                                     // 246
 * @param {string} topLevelType                                                                                        // 247
 * @return {object}                                                                                                    // 248
 */                                                                                                                    // 249
function getCompositionEventType(topLevelType) {                                                                       // 250
  switch (topLevelType) {                                                                                              // 251
    case topLevelTypes.topCompositionStart:                                                                            // 252
      return eventTypes.compositionStart;                                                                              // 253
    case topLevelTypes.topCompositionEnd:                                                                              // 254
      return eventTypes.compositionEnd;                                                                                // 255
    case topLevelTypes.topCompositionUpdate:                                                                           // 256
      return eventTypes.compositionUpdate;                                                                             // 257
  }                                                                                                                    // 258
}                                                                                                                      // 259
                                                                                                                       // 260
/**                                                                                                                    // 261
 * Does our fallback best-guess model think this event signifies that                                                  // 262
 * composition has begun?                                                                                              // 263
 *                                                                                                                     // 264
 * @param {string} topLevelType                                                                                        // 265
 * @param {object} nativeEvent                                                                                         // 266
 * @return {boolean}                                                                                                   // 267
 */                                                                                                                    // 268
function isFallbackCompositionStart(topLevelType, nativeEvent) {                                                       // 269
  return (                                                                                                             // 270
    topLevelType === topLevelTypes.topKeyDown &&                                                                       // 271
    nativeEvent.keyCode === START_KEYCODE                                                                              // 272
  );                                                                                                                   // 273
}                                                                                                                      // 274
                                                                                                                       // 275
/**                                                                                                                    // 276
 * Does our fallback mode think that this event is the end of composition?                                             // 277
 *                                                                                                                     // 278
 * @param {string} topLevelType                                                                                        // 279
 * @param {object} nativeEvent                                                                                         // 280
 * @return {boolean}                                                                                                   // 281
 */                                                                                                                    // 282
function isFallbackCompositionEnd(topLevelType, nativeEvent) {                                                         // 283
  switch (topLevelType) {                                                                                              // 284
    case topLevelTypes.topKeyUp:                                                                                       // 285
      // Command keys insert or clear IME input.                                                                       // 286
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);                                                       // 287
    case topLevelTypes.topKeyDown:                                                                                     // 288
      // Expect IME keyCode on each keydown. If we get any other                                                       // 289
      // code we must have exited earlier.                                                                             // 290
      return (nativeEvent.keyCode !== START_KEYCODE);                                                                  // 291
    case topLevelTypes.topKeyPress:                                                                                    // 292
    case topLevelTypes.topMouseDown:                                                                                   // 293
    case topLevelTypes.topBlur:                                                                                        // 294
      // Events are not possible without cancelling IME.                                                               // 295
      return true;                                                                                                     // 296
    default:                                                                                                           // 297
      return false;                                                                                                    // 298
  }                                                                                                                    // 299
}                                                                                                                      // 300
                                                                                                                       // 301
/**                                                                                                                    // 302
 * Google Input Tools provides composition data via a CustomEvent,                                                     // 303
 * with the `data` property populated in the `detail` object. If this                                                  // 304
 * is available on the event object, use it. If not, this is a plain                                                   // 305
 * composition event and we have nothing special to extract.                                                           // 306
 *                                                                                                                     // 307
 * @param {object} nativeEvent                                                                                         // 308
 * @return {?string}                                                                                                   // 309
 */                                                                                                                    // 310
function getDataFromCustomEvent(nativeEvent) {                                                                         // 311
  var detail = nativeEvent.detail;                                                                                     // 312
  if (typeof detail === 'object' && 'data' in detail) {                                                                // 313
    return detail.data;                                                                                                // 314
  }                                                                                                                    // 315
  return null;                                                                                                         // 316
}                                                                                                                      // 317
                                                                                                                       // 318
// Track the current IME composition fallback object, if any.                                                          // 319
var currentComposition = null;                                                                                         // 320
                                                                                                                       // 321
/**                                                                                                                    // 322
 * @param {string} topLevelType Record from `EventConstants`.                                                          // 323
 * @param {DOMEventTarget} topLevelTarget The listening component root node.                                           // 324
 * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                            // 325
 * @param {object} nativeEvent Native browser event.                                                                   // 326
 * @return {?object} A SyntheticCompositionEvent.                                                                      // 327
 */                                                                                                                    // 328
function extractCompositionEvent(                                                                                      // 329
  topLevelType,                                                                                                        // 330
  topLevelTarget,                                                                                                      // 331
  topLevelTargetID,                                                                                                    // 332
  nativeEvent                                                                                                          // 333
) {                                                                                                                    // 334
  var eventType;                                                                                                       // 335
  var fallbackData;                                                                                                    // 336
                                                                                                                       // 337
  if (canUseCompositionEvent) {                                                                                        // 338
    eventType = getCompositionEventType(topLevelType);                                                                 // 339
  } else if (!currentComposition) {                                                                                    // 340
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {                                                       // 341
      eventType = eventTypes.compositionStart;                                                                         // 342
    }                                                                                                                  // 343
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {                                                    // 344
    eventType = eventTypes.compositionEnd;                                                                             // 345
  }                                                                                                                    // 346
                                                                                                                       // 347
  if (!eventType) {                                                                                                    // 348
    return null;                                                                                                       // 349
  }                                                                                                                    // 350
                                                                                                                       // 351
  if (useFallbackCompositionData) {                                                                                    // 352
    // The current composition is stored statically and must not be                                                    // 353
    // overwritten while composition continues.                                                                        // 354
    if (!currentComposition && eventType === eventTypes.compositionStart) {                                            // 355
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);                                         // 356
    } else if (eventType === eventTypes.compositionEnd) {                                                              // 357
      if (currentComposition) {                                                                                        // 358
        fallbackData = currentComposition.getData();                                                                   // 359
      }                                                                                                                // 360
    }                                                                                                                  // 361
  }                                                                                                                    // 362
                                                                                                                       // 363
  var event = SyntheticCompositionEvent.getPooled(                                                                     // 364
    eventType,                                                                                                         // 365
    topLevelTargetID,                                                                                                  // 366
    nativeEvent                                                                                                        // 367
  );                                                                                                                   // 368
                                                                                                                       // 369
  if (fallbackData) {                                                                                                  // 370
    // Inject data generated from fallback path into the synthetic event.                                              // 371
    // This matches the property of native CompositionEventInterface.                                                  // 372
    event.data = fallbackData;                                                                                         // 373
  } else {                                                                                                             // 374
    var customData = getDataFromCustomEvent(nativeEvent);                                                              // 375
    if (customData !== null) {                                                                                         // 376
      event.data = customData;                                                                                         // 377
    }                                                                                                                  // 378
  }                                                                                                                    // 379
                                                                                                                       // 380
  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 381
  return event;                                                                                                        // 382
}                                                                                                                      // 383
                                                                                                                       // 384
/**                                                                                                                    // 385
 * @param {string} topLevelType Record from `EventConstants`.                                                          // 386
 * @param {object} nativeEvent Native browser event.                                                                   // 387
 * @return {?string} The string corresponding to this `beforeInput` event.                                             // 388
 */                                                                                                                    // 389
function getNativeBeforeInputChars(topLevelType, nativeEvent) {                                                        // 390
  switch (topLevelType) {                                                                                              // 391
    case topLevelTypes.topCompositionEnd:                                                                              // 392
      return getDataFromCustomEvent(nativeEvent);                                                                      // 393
    case topLevelTypes.topKeyPress:                                                                                    // 394
      /**                                                                                                              // 395
       * If native `textInput` events are available, our goal is to make                                               // 396
       * use of them. However, there is a special case: the spacebar key.                                              // 397
       * In Webkit, preventing default on a spacebar `textInput` event                                                 // 398
       * cancels character insertion, but it *also* causes the browser                                                 // 399
       * to fall back to its default spacebar behavior of scrolling the                                                // 400
       * page.                                                                                                         // 401
       *                                                                                                               // 402
       * Tracking at:                                                                                                  // 403
       * https://code.google.com/p/chromium/issues/detail?id=355103                                                    // 404
       *                                                                                                               // 405
       * To avoid this issue, use the keypress event as if no `textInput`                                              // 406
       * event is available.                                                                                           // 407
       */                                                                                                              // 408
      var which = nativeEvent.which;                                                                                   // 409
      if (which !== SPACEBAR_CODE) {                                                                                   // 410
        return null;                                                                                                   // 411
      }                                                                                                                // 412
                                                                                                                       // 413
      hasSpaceKeypress = true;                                                                                         // 414
      return SPACEBAR_CHAR;                                                                                            // 415
                                                                                                                       // 416
    case topLevelTypes.topTextInput:                                                                                   // 417
      // Record the characters to be added to the DOM.                                                                 // 418
      var chars = nativeEvent.data;                                                                                    // 419
                                                                                                                       // 420
      // If it's a spacebar character, assume that we have already handled                                             // 421
      // it at the keypress level and bail immediately. Android Chrome                                                 // 422
      // doesn't give us keycodes, so we need to blacklist it.                                                         // 423
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {                                                               // 424
        return null;                                                                                                   // 425
      }                                                                                                                // 426
                                                                                                                       // 427
      return chars;                                                                                                    // 428
                                                                                                                       // 429
    default:                                                                                                           // 430
      // For other native event types, do nothing.                                                                     // 431
      return null;                                                                                                     // 432
  }                                                                                                                    // 433
}                                                                                                                      // 434
                                                                                                                       // 435
/**                                                                                                                    // 436
 * For browsers that do not provide the `textInput` event, extract the                                                 // 437
 * appropriate string to use for SyntheticInputEvent.                                                                  // 438
 *                                                                                                                     // 439
 * @param {string} topLevelType Record from `EventConstants`.                                                          // 440
 * @param {object} nativeEvent Native browser event.                                                                   // 441
 * @return {?string} The fallback string for this `beforeInput` event.                                                 // 442
 */                                                                                                                    // 443
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {                                                      // 444
  // If we are currently composing (IME) and using a fallback to do so,                                                // 445
  // try to extract the composed characters from the fallback object.                                                  // 446
  if (currentComposition) {                                                                                            // 447
    if (                                                                                                               // 448
      topLevelType === topLevelTypes.topCompositionEnd ||                                                              // 449
      isFallbackCompositionEnd(topLevelType, nativeEvent)                                                              // 450
    ) {                                                                                                                // 451
      var chars = currentComposition.getData();                                                                        // 452
      FallbackCompositionState.release(currentComposition);                                                            // 453
      currentComposition = null;                                                                                       // 454
      return chars;                                                                                                    // 455
    }                                                                                                                  // 456
    return null;                                                                                                       // 457
  }                                                                                                                    // 458
                                                                                                                       // 459
  switch (topLevelType) {                                                                                              // 460
    case topLevelTypes.topPaste:                                                                                       // 461
      // If a paste event occurs after a keypress, throw out the input                                                 // 462
      // chars. Paste events should not lead to BeforeInput events.                                                    // 463
      return null;                                                                                                     // 464
    case topLevelTypes.topKeyPress:                                                                                    // 465
      /**                                                                                                              // 466
       * As of v27, Firefox may fire keypress events even when no character                                            // 467
       * will be inserted. A few possibilities:                                                                        // 468
       *                                                                                                               // 469
       * - `which` is `0`. Arrow keys, Esc key, etc.                                                                   // 470
       *                                                                                                               // 471
       * - `which` is the pressed key code, but no char is available.                                                  // 472
       *   Ex: 'AltGr + d` in Polish. There is no modified character for                                               // 473
       *   this key combination and no character is inserted into the                                                  // 474
       *   document, but FF fires the keypress for char code `100` anyway.                                             // 475
       *   No `input` event will occur.                                                                                // 476
       *                                                                                                               // 477
       * - `which` is the pressed key code, but a command combination is                                               // 478
       *   being used. Ex: `Cmd+C`. No character is inserted, and no                                                   // 479
       *   `input` event will occur.                                                                                   // 480
       */                                                                                                              // 481
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {                                                      // 482
        return String.fromCharCode(nativeEvent.which);                                                                 // 483
      }                                                                                                                // 484
      return null;                                                                                                     // 485
    case topLevelTypes.topCompositionEnd:                                                                              // 486
      return useFallbackCompositionData ? null : nativeEvent.data;                                                     // 487
    default:                                                                                                           // 488
      return null;                                                                                                     // 489
  }                                                                                                                    // 490
}                                                                                                                      // 491
                                                                                                                       // 492
/**                                                                                                                    // 493
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native                                             // 494
 * `textInput` or fallback behavior.                                                                                   // 495
 *                                                                                                                     // 496
 * @param {string} topLevelType Record from `EventConstants`.                                                          // 497
 * @param {DOMEventTarget} topLevelTarget The listening component root node.                                           // 498
 * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                            // 499
 * @param {object} nativeEvent Native browser event.                                                                   // 500
 * @return {?object} A SyntheticInputEvent.                                                                            // 501
 */                                                                                                                    // 502
function extractBeforeInputEvent(                                                                                      // 503
  topLevelType,                                                                                                        // 504
  topLevelTarget,                                                                                                      // 505
  topLevelTargetID,                                                                                                    // 506
  nativeEvent                                                                                                          // 507
) {                                                                                                                    // 508
  var chars;                                                                                                           // 509
                                                                                                                       // 510
  if (canUseTextInputEvent) {                                                                                          // 511
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);                                                      // 512
  } else {                                                                                                             // 513
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);                                                    // 514
  }                                                                                                                    // 515
                                                                                                                       // 516
  // If no characters are being inserted, no BeforeInput event should                                                  // 517
  // be fired.                                                                                                         // 518
  if (!chars) {                                                                                                        // 519
    return null;                                                                                                       // 520
  }                                                                                                                    // 521
                                                                                                                       // 522
  var event = SyntheticInputEvent.getPooled(                                                                           // 523
    eventTypes.beforeInput,                                                                                            // 524
    topLevelTargetID,                                                                                                  // 525
    nativeEvent                                                                                                        // 526
  );                                                                                                                   // 527
                                                                                                                       // 528
  event.data = chars;                                                                                                  // 529
  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 530
  return event;                                                                                                        // 531
}                                                                                                                      // 532
                                                                                                                       // 533
/**                                                                                                                    // 534
 * Create an `onBeforeInput` event to match                                                                            // 535
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.                                       // 536
 *                                                                                                                     // 537
 * This event plugin is based on the native `textInput` event                                                          // 538
 * available in Chrome, Safari, Opera, and IE. This event fires after                                                  // 539
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.                                                          // 540
 *                                                                                                                     // 541
 * `beforeInput` is spec'd but not implemented in any browsers, and                                                    // 542
 * the `input` event does not provide any useful information about what has                                            // 543
 * actually been added, contrary to the spec. Thus, `textInput` is the best                                            // 544
 * available event to identify the characters that have actually been inserted                                         // 545
 * into the target node.                                                                                               // 546
 *                                                                                                                     // 547
 * This plugin is also responsible for emitting `composition` events, thus                                             // 548
 * allowing us to share composition fallback code for both `beforeInput` and                                           // 549
 * `composition` event types.                                                                                          // 550
 */                                                                                                                    // 551
var BeforeInputEventPlugin = {                                                                                         // 552
                                                                                                                       // 553
  eventTypes: eventTypes,                                                                                              // 554
                                                                                                                       // 555
  /**                                                                                                                  // 556
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 557
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 558
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 559
   * @param {object} nativeEvent Native browser event.                                                                 // 560
   * @return {*} An accumulation of synthetic events.                                                                  // 561
   * @see {EventPluginHub.extractEvents}                                                                               // 562
   */                                                                                                                  // 563
  extractEvents: function(                                                                                             // 564
    topLevelType,                                                                                                      // 565
    topLevelTarget,                                                                                                    // 566
    topLevelTargetID,                                                                                                  // 567
    nativeEvent                                                                                                        // 568
  ) {                                                                                                                  // 569
    return [                                                                                                           // 570
      extractCompositionEvent(                                                                                         // 571
        topLevelType,                                                                                                  // 572
        topLevelTarget,                                                                                                // 573
        topLevelTargetID,                                                                                              // 574
        nativeEvent                                                                                                    // 575
      ),                                                                                                               // 576
      extractBeforeInputEvent(                                                                                         // 577
        topLevelType,                                                                                                  // 578
        topLevelTarget,                                                                                                // 579
        topLevelTargetID,                                                                                              // 580
        nativeEvent                                                                                                    // 581
      )                                                                                                                // 582
    ];                                                                                                                 // 583
  }                                                                                                                    // 584
};                                                                                                                     // 585
                                                                                                                       // 586
module.exports = BeforeInputEventPlugin;                                                                               // 587
                                                                                                                       // 588
},{"./EventConstants":"react/lib/EventConstants","./EventPropagators":"react/lib/EventPropagators","./ExecutionEnvironment":"react/lib/ExecutionEnvironment","./FallbackCompositionState":"react/lib/FallbackCompositionState","./SyntheticCompositionEvent":"react/lib/SyntheticCompositionEvent","./SyntheticInputEvent":"react/lib/SyntheticInputEvent","./keyOf":"react/lib/keyOf"}],"react/lib/CSSCore":[function(require,module,exports){
(function (process){                                                                                                   // 590
/**                                                                                                                    // 591
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 592
 * All rights reserved.                                                                                                // 593
 *                                                                                                                     // 594
 * This source code is licensed under the BSD-style license found in the                                               // 595
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 596
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 597
 *                                                                                                                     // 598
 * @providesModule CSSCore                                                                                             // 599
 * @typechecks                                                                                                         // 600
 */                                                                                                                    // 601
                                                                                                                       // 602
var invariant = require("./invariant");                                                                                // 603
                                                                                                                       // 604
/**                                                                                                                    // 605
 * The CSSCore module specifies the API (and implements most of the methods)                                           // 606
 * that should be used when dealing with the display of elements (via their                                            // 607
 * CSS classes and visibility on screen. It is an API focused on mutating the                                          // 608
 * display and not reading it as no logical state should be encoded in the                                             // 609
 * display of elements.                                                                                                // 610
 */                                                                                                                    // 611
                                                                                                                       // 612
var CSSCore = {                                                                                                        // 613
                                                                                                                       // 614
  /**                                                                                                                  // 615
   * Adds the class passed in to the element if it doesn't already have it.                                            // 616
   *                                                                                                                   // 617
   * @param {DOMElement} element the element to set the class on                                                       // 618
   * @param {string} className the CSS className                                                                       // 619
   * @return {DOMElement} the element passed in                                                                        // 620
   */                                                                                                                  // 621
  addClass: function(element, className) {                                                                             // 622
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 623
      !/\s/.test(className),                                                                                           // 624
      'CSSCore.addClass takes only a single class name. "%s" contains ' +                                              // 625
      'multiple classes.', className                                                                                   // 626
    ) : invariant(!/\s/.test(className)));                                                                             // 627
                                                                                                                       // 628
    if (className) {                                                                                                   // 629
      if (element.classList) {                                                                                         // 630
        element.classList.add(className);                                                                              // 631
      } else if (!CSSCore.hasClass(element, className)) {                                                              // 632
        element.className = element.className + ' ' + className;                                                       // 633
      }                                                                                                                // 634
    }                                                                                                                  // 635
    return element;                                                                                                    // 636
  },                                                                                                                   // 637
                                                                                                                       // 638
  /**                                                                                                                  // 639
   * Removes the class passed in from the element                                                                      // 640
   *                                                                                                                   // 641
   * @param {DOMElement} element the element to set the class on                                                       // 642
   * @param {string} className the CSS className                                                                       // 643
   * @return {DOMElement} the element passed in                                                                        // 644
   */                                                                                                                  // 645
  removeClass: function(element, className) {                                                                          // 646
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 647
      !/\s/.test(className),                                                                                           // 648
      'CSSCore.removeClass takes only a single class name. "%s" contains ' +                                           // 649
      'multiple classes.', className                                                                                   // 650
    ) : invariant(!/\s/.test(className)));                                                                             // 651
                                                                                                                       // 652
    if (className) {                                                                                                   // 653
      if (element.classList) {                                                                                         // 654
        element.classList.remove(className);                                                                           // 655
      } else if (CSSCore.hasClass(element, className)) {                                                               // 656
        element.className = element.className                                                                          // 657
          .replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')                                         // 658
          .replace(/\s+/g, ' ') // multiple spaces to one                                                              // 659
          .replace(/^\s*|\s*$/g, ''); // trim the ends                                                                 // 660
      }                                                                                                                // 661
    }                                                                                                                  // 662
    return element;                                                                                                    // 663
  },                                                                                                                   // 664
                                                                                                                       // 665
  /**                                                                                                                  // 666
   * Helper to add or remove a class from an element based on a condition.                                             // 667
   *                                                                                                                   // 668
   * @param {DOMElement} element the element to set the class on                                                       // 669
   * @param {string} className the CSS className                                                                       // 670
   * @param {*} bool condition to whether to add or remove the class                                                   // 671
   * @return {DOMElement} the element passed in                                                                        // 672
   */                                                                                                                  // 673
  conditionClass: function(element, className, bool) {                                                                 // 674
    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);                                        // 675
  },                                                                                                                   // 676
                                                                                                                       // 677
  /**                                                                                                                  // 678
   * Tests whether the element has the class specified.                                                                // 679
   *                                                                                                                   // 680
   * @param {DOMNode|DOMWindow} element the element to set the class on                                                // 681
   * @param {string} className the CSS className                                                                       // 682
   * @return {boolean} true if the element has the class, false if not                                                 // 683
   */                                                                                                                  // 684
  hasClass: function(element, className) {                                                                             // 685
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 686
      !/\s/.test(className),                                                                                           // 687
      'CSS.hasClass takes only a single class name.'                                                                   // 688
    ) : invariant(!/\s/.test(className)));                                                                             // 689
    if (element.classList) {                                                                                           // 690
      return !!className && element.classList.contains(className);                                                     // 691
    }                                                                                                                  // 692
    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;                                        // 693
  }                                                                                                                    // 694
                                                                                                                       // 695
};                                                                                                                     // 696
                                                                                                                       // 697
module.exports = CSSCore;                                                                                              // 698
                                                                                                                       // 699
}).call(this,require('_process'))                                                                                      // 700
                                                                                                                       // 701
},{"./invariant":"react/lib/invariant","_process":1}],"react/lib/CSSPropertyOperations":[function(require,module,exports){
(function (process){                                                                                                   // 703
/**                                                                                                                    // 704
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 705
 * All rights reserved.                                                                                                // 706
 *                                                                                                                     // 707
 * This source code is licensed under the BSD-style license found in the                                               // 708
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 709
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 710
 *                                                                                                                     // 711
 * @providesModule CSSPropertyOperations                                                                               // 712
 * @typechecks static-only                                                                                             // 713
 */                                                                                                                    // 714
                                                                                                                       // 715
'use strict';                                                                                                          // 716
                                                                                                                       // 717
var CSSProperty = require("./CSSProperty");                                                                            // 718
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 719
                                                                                                                       // 720
var camelizeStyleName = require("./camelizeStyleName");                                                                // 721
var dangerousStyleValue = require("./dangerousStyleValue");                                                            // 722
var hyphenateStyleName = require("./hyphenateStyleName");                                                              // 723
var memoizeStringOnly = require("./memoizeStringOnly");                                                                // 724
var warning = require("./warning");                                                                                    // 725
                                                                                                                       // 726
var processStyleName = memoizeStringOnly(function(styleName) {                                                         // 727
  return hyphenateStyleName(styleName);                                                                                // 728
});                                                                                                                    // 729
                                                                                                                       // 730
var styleFloatAccessor = 'cssFloat';                                                                                   // 731
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 732
  // IE8 only supports accessing cssFloat (standard) as styleFloat                                                     // 733
  if (document.documentElement.style.cssFloat === undefined) {                                                         // 734
    styleFloatAccessor = 'styleFloat';                                                                                 // 735
  }                                                                                                                    // 736
}                                                                                                                      // 737
                                                                                                                       // 738
if ("production" !== process.env.NODE_ENV) {                                                                           // 739
  // 'msTransform' is correct, but the other prefixes should be capitalized                                            // 740
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;                                                          // 741
                                                                                                                       // 742
  // style values shouldn't contain a semicolon                                                                        // 743
  var badStyleValueWithSemicolonPattern = /;\s*$/;                                                                     // 744
                                                                                                                       // 745
  var warnedStyleNames = {};                                                                                           // 746
  var warnedStyleValues = {};                                                                                          // 747
                                                                                                                       // 748
  var warnHyphenatedStyleName = function(name) {                                                                       // 749
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {                                             // 750
      return;                                                                                                          // 751
    }                                                                                                                  // 752
                                                                                                                       // 753
    warnedStyleNames[name] = true;                                                                                     // 754
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 755
      false,                                                                                                           // 756
      'Unsupported style property %s. Did you mean %s?',                                                               // 757
      name,                                                                                                            // 758
      camelizeStyleName(name)                                                                                          // 759
    ) : null);                                                                                                         // 760
  };                                                                                                                   // 761
                                                                                                                       // 762
  var warnBadVendoredStyleName = function(name) {                                                                      // 763
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {                                             // 764
      return;                                                                                                          // 765
    }                                                                                                                  // 766
                                                                                                                       // 767
    warnedStyleNames[name] = true;                                                                                     // 768
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 769
      false,                                                                                                           // 770
      'Unsupported vendor-prefixed style property %s. Did you mean %s?',                                               // 771
      name,                                                                                                            // 772
      name.charAt(0).toUpperCase() + name.slice(1)                                                                     // 773
    ) : null);                                                                                                         // 774
  };                                                                                                                   // 775
                                                                                                                       // 776
  var warnStyleValueWithSemicolon = function(name, value) {                                                            // 777
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {                                         // 778
      return;                                                                                                          // 779
    }                                                                                                                  // 780
                                                                                                                       // 781
    warnedStyleValues[value] = true;                                                                                   // 782
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 783
      false,                                                                                                           // 784
      'Style property values shouldn\'t contain a semicolon. ' +                                                       // 785
      'Try "%s: %s" instead.',                                                                                         // 786
      name,                                                                                                            // 787
      value.replace(badStyleValueWithSemicolonPattern, '')                                                             // 788
    ) : null);                                                                                                         // 789
  };                                                                                                                   // 790
                                                                                                                       // 791
  /**                                                                                                                  // 792
   * @param {string} name                                                                                              // 793
   * @param {*} value                                                                                                  // 794
   */                                                                                                                  // 795
  var warnValidStyle = function(name, value) {                                                                         // 796
    if (name.indexOf('-') > -1) {                                                                                      // 797
      warnHyphenatedStyleName(name);                                                                                   // 798
    } else if (badVendoredStyleNamePattern.test(name)) {                                                               // 799
      warnBadVendoredStyleName(name);                                                                                  // 800
    } else if (badStyleValueWithSemicolonPattern.test(value)) {                                                        // 801
      warnStyleValueWithSemicolon(name, value);                                                                        // 802
    }                                                                                                                  // 803
  };                                                                                                                   // 804
}                                                                                                                      // 805
                                                                                                                       // 806
/**                                                                                                                    // 807
 * Operations for dealing with CSS properties.                                                                         // 808
 */                                                                                                                    // 809
var CSSPropertyOperations = {                                                                                          // 810
                                                                                                                       // 811
  /**                                                                                                                  // 812
   * Serializes a mapping of style properties for use as inline styles:                                                // 813
   *                                                                                                                   // 814
   *   > createMarkupForStyles({width: '200px', height: 0})                                                            // 815
   *   "width:200px;height:0;"                                                                                         // 816
   *                                                                                                                   // 817
   * Undefined values are ignored so that declarative programming is easier.                                           // 818
   * The result should be HTML-escaped before insertion into the DOM.                                                  // 819
   *                                                                                                                   // 820
   * @param {object} styles                                                                                            // 821
   * @return {?string}                                                                                                 // 822
   */                                                                                                                  // 823
  createMarkupForStyles: function(styles) {                                                                            // 824
    var serialized = '';                                                                                               // 825
    for (var styleName in styles) {                                                                                    // 826
      if (!styles.hasOwnProperty(styleName)) {                                                                         // 827
        continue;                                                                                                      // 828
      }                                                                                                                // 829
      var styleValue = styles[styleName];                                                                              // 830
      if ("production" !== process.env.NODE_ENV) {                                                                     // 831
        warnValidStyle(styleName, styleValue);                                                                         // 832
      }                                                                                                                // 833
      if (styleValue != null) {                                                                                        // 834
        serialized += processStyleName(styleName) + ':';                                                               // 835
        serialized += dangerousStyleValue(styleName, styleValue) + ';';                                                // 836
      }                                                                                                                // 837
    }                                                                                                                  // 838
    return serialized || null;                                                                                         // 839
  },                                                                                                                   // 840
                                                                                                                       // 841
  /**                                                                                                                  // 842
   * Sets the value for multiple styles on a node.  If a value is specified as                                         // 843
   * '' (empty string), the corresponding style property will be unset.                                                // 844
   *                                                                                                                   // 845
   * @param {DOMElement} node                                                                                          // 846
   * @param {object} styles                                                                                            // 847
   */                                                                                                                  // 848
  setValueForStyles: function(node, styles) {                                                                          // 849
    var style = node.style;                                                                                            // 850
    for (var styleName in styles) {                                                                                    // 851
      if (!styles.hasOwnProperty(styleName)) {                                                                         // 852
        continue;                                                                                                      // 853
      }                                                                                                                // 854
      if ("production" !== process.env.NODE_ENV) {                                                                     // 855
        warnValidStyle(styleName, styles[styleName]);                                                                  // 856
      }                                                                                                                // 857
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);                                              // 858
      if (styleName === 'float') {                                                                                     // 859
        styleName = styleFloatAccessor;                                                                                // 860
      }                                                                                                                // 861
      if (styleValue) {                                                                                                // 862
        style[styleName] = styleValue;                                                                                 // 863
      } else {                                                                                                         // 864
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];                                            // 865
        if (expansion) {                                                                                               // 866
          // Shorthand property that IE8 won't like unsetting, so unset each                                           // 867
          // component to placate it                                                                                   // 868
          for (var individualStyleName in expansion) {                                                                 // 869
            style[individualStyleName] = '';                                                                           // 870
          }                                                                                                            // 871
        } else {                                                                                                       // 872
          style[styleName] = '';                                                                                       // 873
        }                                                                                                              // 874
      }                                                                                                                // 875
    }                                                                                                                  // 876
  }                                                                                                                    // 877
                                                                                                                       // 878
};                                                                                                                     // 879
                                                                                                                       // 880
module.exports = CSSPropertyOperations;                                                                                // 881
                                                                                                                       // 882
}).call(this,require('_process'))                                                                                      // 883
                                                                                                                       // 884
},{"./CSSProperty":"react/lib/CSSProperty","./ExecutionEnvironment":"react/lib/ExecutionEnvironment","./camelizeStyleName":"react/lib/camelizeStyleName","./dangerousStyleValue":"react/lib/dangerousStyleValue","./hyphenateStyleName":"react/lib/hyphenateStyleName","./memoizeStringOnly":"react/lib/memoizeStringOnly","./warning":"react/lib/warning","_process":1}],"react/lib/CSSProperty":[function(require,module,exports){
/**                                                                                                                    // 886
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 887
 * All rights reserved.                                                                                                // 888
 *                                                                                                                     // 889
 * This source code is licensed under the BSD-style license found in the                                               // 890
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 891
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 892
 *                                                                                                                     // 893
 * @providesModule CSSProperty                                                                                         // 894
 */                                                                                                                    // 895
                                                                                                                       // 896
'use strict';                                                                                                          // 897
                                                                                                                       // 898
/**                                                                                                                    // 899
 * CSS properties which accept numbers but are not in units of "px".                                                   // 900
 */                                                                                                                    // 901
var isUnitlessNumber = {                                                                                               // 902
  boxFlex: true,                                                                                                       // 903
  boxFlexGroup: true,                                                                                                  // 904
  columnCount: true,                                                                                                   // 905
  flex: true,                                                                                                          // 906
  flexGrow: true,                                                                                                      // 907
  flexPositive: true,                                                                                                  // 908
  flexShrink: true,                                                                                                    // 909
  flexNegative: true,                                                                                                  // 910
  fontWeight: true,                                                                                                    // 911
  lineClamp: true,                                                                                                     // 912
  lineHeight: true,                                                                                                    // 913
  opacity: true,                                                                                                       // 914
  order: true,                                                                                                         // 915
  orphans: true,                                                                                                       // 916
  widows: true,                                                                                                        // 917
  zIndex: true,                                                                                                        // 918
  zoom: true,                                                                                                          // 919
                                                                                                                       // 920
  // SVG-related properties                                                                                            // 921
  fillOpacity: true,                                                                                                   // 922
  strokeDashoffset: true,                                                                                              // 923
  strokeOpacity: true,                                                                                                 // 924
  strokeWidth: true                                                                                                    // 925
};                                                                                                                     // 926
                                                                                                                       // 927
/**                                                                                                                    // 928
 * @param {string} prefix vendor-specific prefix, eg: Webkit                                                           // 929
 * @param {string} key style name, eg: transitionDuration                                                              // 930
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:                                        // 931
 * WebkitTransitionDuration                                                                                            // 932
 */                                                                                                                    // 933
function prefixKey(prefix, key) {                                                                                      // 934
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);                                                      // 935
}                                                                                                                      // 936
                                                                                                                       // 937
/**                                                                                                                    // 938
 * Support style names that may come passed in prefixed by adding permutations                                         // 939
 * of vendor prefixes.                                                                                                 // 940
 */                                                                                                                    // 941
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];                                                                           // 942
                                                                                                                       // 943
// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an                                        // 944
// infinite loop, because it iterates over the newly added props too.                                                  // 945
Object.keys(isUnitlessNumber).forEach(function(prop) {                                                                 // 946
  prefixes.forEach(function(prefix) {                                                                                  // 947
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];                                                // 948
  });                                                                                                                  // 949
});                                                                                                                    // 950
                                                                                                                       // 951
/**                                                                                                                    // 952
 * Most style properties can be unset by doing .style[prop] = '' but IE8                                               // 953
 * doesn't like doing that with shorthand properties so for the properties that                                        // 954
 * IE8 breaks on, which are listed here, we instead unset each of the                                                  // 955
 * individual properties. See http://bugs.jquery.com/ticket/12385.                                                     // 956
 * The 4-value 'clock' properties like margin, padding, border-width seem to                                           // 957
 * behave without any problems. Curiously, list-style works too without any                                            // 958
 * special prodding.                                                                                                   // 959
 */                                                                                                                    // 960
var shorthandPropertyExpansions = {                                                                                    // 961
  background: {                                                                                                        // 962
    backgroundImage: true,                                                                                             // 963
    backgroundPosition: true,                                                                                          // 964
    backgroundRepeat: true,                                                                                            // 965
    backgroundColor: true                                                                                              // 966
  },                                                                                                                   // 967
  border: {                                                                                                            // 968
    borderWidth: true,                                                                                                 // 969
    borderStyle: true,                                                                                                 // 970
    borderColor: true                                                                                                  // 971
  },                                                                                                                   // 972
  borderBottom: {                                                                                                      // 973
    borderBottomWidth: true,                                                                                           // 974
    borderBottomStyle: true,                                                                                           // 975
    borderBottomColor: true                                                                                            // 976
  },                                                                                                                   // 977
  borderLeft: {                                                                                                        // 978
    borderLeftWidth: true,                                                                                             // 979
    borderLeftStyle: true,                                                                                             // 980
    borderLeftColor: true                                                                                              // 981
  },                                                                                                                   // 982
  borderRight: {                                                                                                       // 983
    borderRightWidth: true,                                                                                            // 984
    borderRightStyle: true,                                                                                            // 985
    borderRightColor: true                                                                                             // 986
  },                                                                                                                   // 987
  borderTop: {                                                                                                         // 988
    borderTopWidth: true,                                                                                              // 989
    borderTopStyle: true,                                                                                              // 990
    borderTopColor: true                                                                                               // 991
  },                                                                                                                   // 992
  font: {                                                                                                              // 993
    fontStyle: true,                                                                                                   // 994
    fontVariant: true,                                                                                                 // 995
    fontWeight: true,                                                                                                  // 996
    fontSize: true,                                                                                                    // 997
    lineHeight: true,                                                                                                  // 998
    fontFamily: true                                                                                                   // 999
  }                                                                                                                    // 1000
};                                                                                                                     // 1001
                                                                                                                       // 1002
var CSSProperty = {                                                                                                    // 1003
  isUnitlessNumber: isUnitlessNumber,                                                                                  // 1004
  shorthandPropertyExpansions: shorthandPropertyExpansions                                                             // 1005
};                                                                                                                     // 1006
                                                                                                                       // 1007
module.exports = CSSProperty;                                                                                          // 1008
                                                                                                                       // 1009
},{}],"react/lib/CallbackQueue":[function(require,module,exports){                                                     // 1010
(function (process){                                                                                                   // 1011
/**                                                                                                                    // 1012
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 1013
 * All rights reserved.                                                                                                // 1014
 *                                                                                                                     // 1015
 * This source code is licensed under the BSD-style license found in the                                               // 1016
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 1017
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 1018
 *                                                                                                                     // 1019
 * @providesModule CallbackQueue                                                                                       // 1020
 */                                                                                                                    // 1021
                                                                                                                       // 1022
'use strict';                                                                                                          // 1023
                                                                                                                       // 1024
var PooledClass = require("./PooledClass");                                                                            // 1025
                                                                                                                       // 1026
var assign = require("./Object.assign");                                                                               // 1027
var invariant = require("./invariant");                                                                                // 1028
                                                                                                                       // 1029
/**                                                                                                                    // 1030
 * A specialized pseudo-event module to help keep track of components waiting to                                       // 1031
 * be notified when their DOM representations are available for use.                                                   // 1032
 *                                                                                                                     // 1033
 * This implements `PooledClass`, so you should never need to instantiate this.                                        // 1034
 * Instead, use `CallbackQueue.getPooled()`.                                                                           // 1035
 *                                                                                                                     // 1036
 * @class ReactMountReady                                                                                              // 1037
 * @implements PooledClass                                                                                             // 1038
 * @internal                                                                                                           // 1039
 */                                                                                                                    // 1040
function CallbackQueue() {                                                                                             // 1041
  this._callbacks = null;                                                                                              // 1042
  this._contexts = null;                                                                                               // 1043
}                                                                                                                      // 1044
                                                                                                                       // 1045
assign(CallbackQueue.prototype, {                                                                                      // 1046
                                                                                                                       // 1047
  /**                                                                                                                  // 1048
   * Enqueues a callback to be invoked when `notifyAll` is invoked.                                                    // 1049
   *                                                                                                                   // 1050
   * @param {function} callback Invoked when `notifyAll` is invoked.                                                   // 1051
   * @param {?object} context Context to call `callback` with.                                                         // 1052
   * @internal                                                                                                         // 1053
   */                                                                                                                  // 1054
  enqueue: function(callback, context) {                                                                               // 1055
    this._callbacks = this._callbacks || [];                                                                           // 1056
    this._contexts = this._contexts || [];                                                                             // 1057
    this._callbacks.push(callback);                                                                                    // 1058
    this._contexts.push(context);                                                                                      // 1059
  },                                                                                                                   // 1060
                                                                                                                       // 1061
  /**                                                                                                                  // 1062
   * Invokes all enqueued callbacks and clears the queue. This is invoked after                                        // 1063
   * the DOM representation of a component has been created or updated.                                                // 1064
   *                                                                                                                   // 1065
   * @internal                                                                                                         // 1066
   */                                                                                                                  // 1067
  notifyAll: function() {                                                                                              // 1068
    var callbacks = this._callbacks;                                                                                   // 1069
    var contexts = this._contexts;                                                                                     // 1070
    if (callbacks) {                                                                                                   // 1071
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 1072
        callbacks.length === contexts.length,                                                                          // 1073
        'Mismatched list of contexts in callback queue'                                                                // 1074
      ) : invariant(callbacks.length === contexts.length));                                                            // 1075
      this._callbacks = null;                                                                                          // 1076
      this._contexts = null;                                                                                           // 1077
      for (var i = 0, l = callbacks.length; i < l; i++) {                                                              // 1078
        callbacks[i].call(contexts[i]);                                                                                // 1079
      }                                                                                                                // 1080
      callbacks.length = 0;                                                                                            // 1081
      contexts.length = 0;                                                                                             // 1082
    }                                                                                                                  // 1083
  },                                                                                                                   // 1084
                                                                                                                       // 1085
  /**                                                                                                                  // 1086
   * Resets the internal queue.                                                                                        // 1087
   *                                                                                                                   // 1088
   * @internal                                                                                                         // 1089
   */                                                                                                                  // 1090
  reset: function() {                                                                                                  // 1091
    this._callbacks = null;                                                                                            // 1092
    this._contexts = null;                                                                                             // 1093
  },                                                                                                                   // 1094
                                                                                                                       // 1095
  /**                                                                                                                  // 1096
   * `PooledClass` looks for this.                                                                                     // 1097
   */                                                                                                                  // 1098
  destructor: function() {                                                                                             // 1099
    this.reset();                                                                                                      // 1100
  }                                                                                                                    // 1101
                                                                                                                       // 1102
});                                                                                                                    // 1103
                                                                                                                       // 1104
PooledClass.addPoolingTo(CallbackQueue);                                                                               // 1105
                                                                                                                       // 1106
module.exports = CallbackQueue;                                                                                        // 1107
                                                                                                                       // 1108
}).call(this,require('_process'))                                                                                      // 1109
                                                                                                                       // 1110
},{"./Object.assign":"react/lib/Object.assign","./PooledClass":"react/lib/PooledClass","./invariant":"react/lib/invariant","_process":1}],"react/lib/ChangeEventPlugin":[function(require,module,exports){
/**                                                                                                                    // 1112
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 1113
 * All rights reserved.                                                                                                // 1114
 *                                                                                                                     // 1115
 * This source code is licensed under the BSD-style license found in the                                               // 1116
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 1117
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 1118
 *                                                                                                                     // 1119
 * @providesModule ChangeEventPlugin                                                                                   // 1120
 */                                                                                                                    // 1121
                                                                                                                       // 1122
'use strict';                                                                                                          // 1123
                                                                                                                       // 1124
var EventConstants = require("./EventConstants");                                                                      // 1125
var EventPluginHub = require("./EventPluginHub");                                                                      // 1126
var EventPropagators = require("./EventPropagators");                                                                  // 1127
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 1128
var ReactUpdates = require("./ReactUpdates");                                                                          // 1129
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 1130
                                                                                                                       // 1131
var isEventSupported = require("./isEventSupported");                                                                  // 1132
var isTextInputElement = require("./isTextInputElement");                                                              // 1133
var keyOf = require("./keyOf");                                                                                        // 1134
                                                                                                                       // 1135
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 1136
                                                                                                                       // 1137
var eventTypes = {                                                                                                     // 1138
  change: {                                                                                                            // 1139
    phasedRegistrationNames: {                                                                                         // 1140
      bubbled: keyOf({onChange: null}),                                                                                // 1141
      captured: keyOf({onChangeCapture: null})                                                                         // 1142
    },                                                                                                                 // 1143
    dependencies: [                                                                                                    // 1144
      topLevelTypes.topBlur,                                                                                           // 1145
      topLevelTypes.topChange,                                                                                         // 1146
      topLevelTypes.topClick,                                                                                          // 1147
      topLevelTypes.topFocus,                                                                                          // 1148
      topLevelTypes.topInput,                                                                                          // 1149
      topLevelTypes.topKeyDown,                                                                                        // 1150
      topLevelTypes.topKeyUp,                                                                                          // 1151
      topLevelTypes.topSelectionChange                                                                                 // 1152
    ]                                                                                                                  // 1153
  }                                                                                                                    // 1154
};                                                                                                                     // 1155
                                                                                                                       // 1156
/**                                                                                                                    // 1157
 * For IE shims                                                                                                        // 1158
 */                                                                                                                    // 1159
var activeElement = null;                                                                                              // 1160
var activeElementID = null;                                                                                            // 1161
var activeElementValue = null;                                                                                         // 1162
var activeElementValueProp = null;                                                                                     // 1163
                                                                                                                       // 1164
/**                                                                                                                    // 1165
 * SECTION: handle `change` event                                                                                      // 1166
 */                                                                                                                    // 1167
function shouldUseChangeEvent(elem) {                                                                                  // 1168
  return (                                                                                                             // 1169
    elem.nodeName === 'SELECT' ||                                                                                      // 1170
    (elem.nodeName === 'INPUT' && elem.type === 'file')                                                                // 1171
  );                                                                                                                   // 1172
}                                                                                                                      // 1173
                                                                                                                       // 1174
var doesChangeEventBubble = false;                                                                                     // 1175
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 1176
  // See `handleChange` comment below                                                                                  // 1177
  doesChangeEventBubble = isEventSupported('change') && (                                                              // 1178
    (!('documentMode' in document) || document.documentMode > 8)                                                       // 1179
  );                                                                                                                   // 1180
}                                                                                                                      // 1181
                                                                                                                       // 1182
function manualDispatchChangeEvent(nativeEvent) {                                                                      // 1183
  var event = SyntheticEvent.getPooled(                                                                                // 1184
    eventTypes.change,                                                                                                 // 1185
    activeElementID,                                                                                                   // 1186
    nativeEvent                                                                                                        // 1187
  );                                                                                                                   // 1188
  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 1189
                                                                                                                       // 1190
  // If change and propertychange bubbled, we'd just bind to it like all the                                           // 1191
  // other events and have it go through ReactBrowserEventEmitter. Since it                                            // 1192
  // doesn't, we manually listen for the events and so we have to enqueue and                                          // 1193
  // process the abstract event manually.                                                                              // 1194
  //                                                                                                                   // 1195
  // Batching is necessary here in order to ensure that all event handlers run                                         // 1196
  // before the next rerender (including event handlers attached to ancestor                                           // 1197
  // elements instead of directly on the input). Without this, controlled                                              // 1198
  // components don't work properly in conjunction with event bubbling because                                         // 1199
  // the component is rerendered and the value reverted before all the event                                           // 1200
  // handlers can run. See https://github.com/facebook/react/issues/708.                                               // 1201
  ReactUpdates.batchedUpdates(runEventInBatch, event);                                                                 // 1202
}                                                                                                                      // 1203
                                                                                                                       // 1204
function runEventInBatch(event) {                                                                                      // 1205
  EventPluginHub.enqueueEvents(event);                                                                                 // 1206
  EventPluginHub.processEventQueue();                                                                                  // 1207
}                                                                                                                      // 1208
                                                                                                                       // 1209
function startWatchingForChangeEventIE8(target, targetID) {                                                            // 1210
  activeElement = target;                                                                                              // 1211
  activeElementID = targetID;                                                                                          // 1212
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);                                                    // 1213
}                                                                                                                      // 1214
                                                                                                                       // 1215
function stopWatchingForChangeEventIE8() {                                                                             // 1216
  if (!activeElement) {                                                                                                // 1217
    return;                                                                                                            // 1218
  }                                                                                                                    // 1219
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);                                                    // 1220
  activeElement = null;                                                                                                // 1221
  activeElementID = null;                                                                                              // 1222
}                                                                                                                      // 1223
                                                                                                                       // 1224
function getTargetIDForChangeEvent(                                                                                    // 1225
    topLevelType,                                                                                                      // 1226
    topLevelTarget,                                                                                                    // 1227
    topLevelTargetID) {                                                                                                // 1228
  if (topLevelType === topLevelTypes.topChange) {                                                                      // 1229
    return topLevelTargetID;                                                                                           // 1230
  }                                                                                                                    // 1231
}                                                                                                                      // 1232
function handleEventsForChangeEventIE8(                                                                                // 1233
    topLevelType,                                                                                                      // 1234
    topLevelTarget,                                                                                                    // 1235
    topLevelTargetID) {                                                                                                // 1236
  if (topLevelType === topLevelTypes.topFocus) {                                                                       // 1237
    // stopWatching() should be a noop here but we call it just in case we                                             // 1238
    // missed a blur event somehow.                                                                                    // 1239
    stopWatchingForChangeEventIE8();                                                                                   // 1240
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);                                                  // 1241
  } else if (topLevelType === topLevelTypes.topBlur) {                                                                 // 1242
    stopWatchingForChangeEventIE8();                                                                                   // 1243
  }                                                                                                                    // 1244
}                                                                                                                      // 1245
                                                                                                                       // 1246
                                                                                                                       // 1247
/**                                                                                                                    // 1248
 * SECTION: handle `input` event                                                                                       // 1249
 */                                                                                                                    // 1250
var isInputEventSupported = false;                                                                                     // 1251
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 1252
  // IE9 claims to support the input event but fails to trigger it when                                                // 1253
  // deleting text, so we ignore its input events                                                                      // 1254
  isInputEventSupported = isEventSupported('input') && (                                                               // 1255
    (!('documentMode' in document) || document.documentMode > 9)                                                       // 1256
  );                                                                                                                   // 1257
}                                                                                                                      // 1258
                                                                                                                       // 1259
/**                                                                                                                    // 1260
 * (For old IE.) Replacement getter/setter for the `value` property that gets                                          // 1261
 * set on the active element.                                                                                          // 1262
 */                                                                                                                    // 1263
var newValueProp =  {                                                                                                  // 1264
  get: function() {                                                                                                    // 1265
    return activeElementValueProp.get.call(this);                                                                      // 1266
  },                                                                                                                   // 1267
  set: function(val) {                                                                                                 // 1268
    // Cast to a string so we can do equality checks.                                                                  // 1269
    activeElementValue = '' + val;                                                                                     // 1270
    activeElementValueProp.set.call(this, val);                                                                        // 1271
  }                                                                                                                    // 1272
};                                                                                                                     // 1273
                                                                                                                       // 1274
/**                                                                                                                    // 1275
 * (For old IE.) Starts tracking propertychange events on the passed-in element                                        // 1276
 * and override the value property so that we can distinguish user events from                                         // 1277
 * value changes in JS.                                                                                                // 1278
 */                                                                                                                    // 1279
function startWatchingForValueChange(target, targetID) {                                                               // 1280
  activeElement = target;                                                                                              // 1281
  activeElementID = targetID;                                                                                          // 1282
  activeElementValue = target.value;                                                                                   // 1283
  activeElementValueProp = Object.getOwnPropertyDescriptor(                                                            // 1284
    target.constructor.prototype,                                                                                      // 1285
    'value'                                                                                                            // 1286
  );                                                                                                                   // 1287
                                                                                                                       // 1288
  Object.defineProperty(activeElement, 'value', newValueProp);                                                         // 1289
  activeElement.attachEvent('onpropertychange', handlePropertyChange);                                                 // 1290
}                                                                                                                      // 1291
                                                                                                                       // 1292
/**                                                                                                                    // 1293
 * (For old IE.) Removes the event listeners from the currently-tracked element,                                       // 1294
 * if any exists.                                                                                                      // 1295
 */                                                                                                                    // 1296
function stopWatchingForValueChange() {                                                                                // 1297
  if (!activeElement) {                                                                                                // 1298
    return;                                                                                                            // 1299
  }                                                                                                                    // 1300
                                                                                                                       // 1301
  // delete restores the original property definition                                                                  // 1302
  delete activeElement.value;                                                                                          // 1303
  activeElement.detachEvent('onpropertychange', handlePropertyChange);                                                 // 1304
                                                                                                                       // 1305
  activeElement = null;                                                                                                // 1306
  activeElementID = null;                                                                                              // 1307
  activeElementValue = null;                                                                                           // 1308
  activeElementValueProp = null;                                                                                       // 1309
}                                                                                                                      // 1310
                                                                                                                       // 1311
/**                                                                                                                    // 1312
 * (For old IE.) Handles a propertychange event, sending a `change` event if                                           // 1313
 * the value of the active element has changed.                                                                        // 1314
 */                                                                                                                    // 1315
function handlePropertyChange(nativeEvent) {                                                                           // 1316
  if (nativeEvent.propertyName !== 'value') {                                                                          // 1317
    return;                                                                                                            // 1318
  }                                                                                                                    // 1319
  var value = nativeEvent.srcElement.value;                                                                            // 1320
  if (value === activeElementValue) {                                                                                  // 1321
    return;                                                                                                            // 1322
  }                                                                                                                    // 1323
  activeElementValue = value;                                                                                          // 1324
                                                                                                                       // 1325
  manualDispatchChangeEvent(nativeEvent);                                                                              // 1326
}                                                                                                                      // 1327
                                                                                                                       // 1328
/**                                                                                                                    // 1329
 * If a `change` event should be fired, returns the target's ID.                                                       // 1330
 */                                                                                                                    // 1331
function getTargetIDForInputEvent(                                                                                     // 1332
    topLevelType,                                                                                                      // 1333
    topLevelTarget,                                                                                                    // 1334
    topLevelTargetID) {                                                                                                // 1335
  if (topLevelType === topLevelTypes.topInput) {                                                                       // 1336
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly                                           // 1337
    // what we want so fall through here and trigger an abstract event                                                 // 1338
    return topLevelTargetID;                                                                                           // 1339
  }                                                                                                                    // 1340
}                                                                                                                      // 1341
                                                                                                                       // 1342
// For IE8 and IE9.                                                                                                    // 1343
function handleEventsForInputEventIE(                                                                                  // 1344
    topLevelType,                                                                                                      // 1345
    topLevelTarget,                                                                                                    // 1346
    topLevelTargetID) {                                                                                                // 1347
  if (topLevelType === topLevelTypes.topFocus) {                                                                       // 1348
    // In IE8, we can capture almost all .value changes by adding a                                                    // 1349
    // propertychange handler and looking for events with propertyName                                                 // 1350
    // equal to 'value'                                                                                                // 1351
    // In IE9, propertychange fires for most input events but is buggy and                                             // 1352
    // doesn't fire when text is deleted, but conveniently, selectionchange                                            // 1353
    // appears to fire in all of the remaining cases so we catch those and                                             // 1354
    // forward the event if the value has changed                                                                      // 1355
    // In either case, we don't want to call the event handler if the value                                            // 1356
    // is changed from JS so we redefine a setter for `.value` that updates                                            // 1357
    // our activeElementValue variable, allowing us to ignore those changes                                            // 1358
    //                                                                                                                 // 1359
    // stopWatching() should be a noop here but we call it just in case we                                             // 1360
    // missed a blur event somehow.                                                                                    // 1361
    stopWatchingForValueChange();                                                                                      // 1362
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);                                                     // 1363
  } else if (topLevelType === topLevelTypes.topBlur) {                                                                 // 1364
    stopWatchingForValueChange();                                                                                      // 1365
  }                                                                                                                    // 1366
}                                                                                                                      // 1367
                                                                                                                       // 1368
// For IE8 and IE9.                                                                                                    // 1369
function getTargetIDForInputEventIE(                                                                                   // 1370
    topLevelType,                                                                                                      // 1371
    topLevelTarget,                                                                                                    // 1372
    topLevelTargetID) {                                                                                                // 1373
  if (topLevelType === topLevelTypes.topSelectionChange ||                                                             // 1374
      topLevelType === topLevelTypes.topKeyUp ||                                                                       // 1375
      topLevelType === topLevelTypes.topKeyDown) {                                                                     // 1376
    // On the selectionchange event, the target is just document which isn't                                           // 1377
    // helpful for us so just check activeElement instead.                                                             // 1378
    //                                                                                                                 // 1379
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire                                          // 1380
    // propertychange on the first input event after setting `value` from a                                            // 1381
    // script and fires only keydown, keypress, keyup. Catching keyup usually                                          // 1382
    // gets it and catching keydown lets us fire an event for the first                                                // 1383
    // keystroke if user does a key repeat (it'll be a little delayed: right                                           // 1384
    // before the second keystroke). Other input methods (e.g., paste) seem to                                         // 1385
    // fire selectionchange normally.                                                                                  // 1386
    if (activeElement && activeElement.value !== activeElementValue) {                                                 // 1387
      activeElementValue = activeElement.value;                                                                        // 1388
      return activeElementID;                                                                                          // 1389
    }                                                                                                                  // 1390
  }                                                                                                                    // 1391
}                                                                                                                      // 1392
                                                                                                                       // 1393
                                                                                                                       // 1394
/**                                                                                                                    // 1395
 * SECTION: handle `click` event                                                                                       // 1396
 */                                                                                                                    // 1397
function shouldUseClickEvent(elem) {                                                                                   // 1398
  // Use the `click` event to detect changes to checkbox and radio inputs.                                             // 1399
  // This approach works across all browsers, whereas `change` does not fire                                           // 1400
  // until `blur` in IE8.                                                                                              // 1401
  return (                                                                                                             // 1402
    elem.nodeName === 'INPUT' &&                                                                                       // 1403
    (elem.type === 'checkbox' || elem.type === 'radio')                                                                // 1404
  );                                                                                                                   // 1405
}                                                                                                                      // 1406
                                                                                                                       // 1407
function getTargetIDForClickEvent(                                                                                     // 1408
    topLevelType,                                                                                                      // 1409
    topLevelTarget,                                                                                                    // 1410
    topLevelTargetID) {                                                                                                // 1411
  if (topLevelType === topLevelTypes.topClick) {                                                                       // 1412
    return topLevelTargetID;                                                                                           // 1413
  }                                                                                                                    // 1414
}                                                                                                                      // 1415
                                                                                                                       // 1416
/**                                                                                                                    // 1417
 * This plugin creates an `onChange` event that normalizes change events                                               // 1418
 * across form elements. This event fires at a time when it's possible to                                              // 1419
 * change the element's value without seeing a flicker.                                                                // 1420
 *                                                                                                                     // 1421
 * Supported elements are:                                                                                             // 1422
 * - input (see `isTextInputElement`)                                                                                  // 1423
 * - textarea                                                                                                          // 1424
 * - select                                                                                                            // 1425
 */                                                                                                                    // 1426
var ChangeEventPlugin = {                                                                                              // 1427
                                                                                                                       // 1428
  eventTypes: eventTypes,                                                                                              // 1429
                                                                                                                       // 1430
  /**                                                                                                                  // 1431
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 1432
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 1433
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 1434
   * @param {object} nativeEvent Native browser event.                                                                 // 1435
   * @return {*} An accumulation of synthetic events.                                                                  // 1436
   * @see {EventPluginHub.extractEvents}                                                                               // 1437
   */                                                                                                                  // 1438
  extractEvents: function(                                                                                             // 1439
      topLevelType,                                                                                                    // 1440
      topLevelTarget,                                                                                                  // 1441
      topLevelTargetID,                                                                                                // 1442
      nativeEvent) {                                                                                                   // 1443
                                                                                                                       // 1444
    var getTargetIDFunc, handleEventFunc;                                                                              // 1445
    if (shouldUseChangeEvent(topLevelTarget)) {                                                                        // 1446
      if (doesChangeEventBubble) {                                                                                     // 1447
        getTargetIDFunc = getTargetIDForChangeEvent;                                                                   // 1448
      } else {                                                                                                         // 1449
        handleEventFunc = handleEventsForChangeEventIE8;                                                               // 1450
      }                                                                                                                // 1451
    } else if (isTextInputElement(topLevelTarget)) {                                                                   // 1452
      if (isInputEventSupported) {                                                                                     // 1453
        getTargetIDFunc = getTargetIDForInputEvent;                                                                    // 1454
      } else {                                                                                                         // 1455
        getTargetIDFunc = getTargetIDForInputEventIE;                                                                  // 1456
        handleEventFunc = handleEventsForInputEventIE;                                                                 // 1457
      }                                                                                                                // 1458
    } else if (shouldUseClickEvent(topLevelTarget)) {                                                                  // 1459
      getTargetIDFunc = getTargetIDForClickEvent;                                                                      // 1460
    }                                                                                                                  // 1461
                                                                                                                       // 1462
    if (getTargetIDFunc) {                                                                                             // 1463
      var targetID = getTargetIDFunc(                                                                                  // 1464
        topLevelType,                                                                                                  // 1465
        topLevelTarget,                                                                                                // 1466
        topLevelTargetID                                                                                               // 1467
      );                                                                                                               // 1468
      if (targetID) {                                                                                                  // 1469
        var event = SyntheticEvent.getPooled(                                                                          // 1470
          eventTypes.change,                                                                                           // 1471
          targetID,                                                                                                    // 1472
          nativeEvent                                                                                                  // 1473
        );                                                                                                             // 1474
        EventPropagators.accumulateTwoPhaseDispatches(event);                                                          // 1475
        return event;                                                                                                  // 1476
      }                                                                                                                // 1477
    }                                                                                                                  // 1478
                                                                                                                       // 1479
    if (handleEventFunc) {                                                                                             // 1480
      handleEventFunc(                                                                                                 // 1481
        topLevelType,                                                                                                  // 1482
        topLevelTarget,                                                                                                // 1483
        topLevelTargetID                                                                                               // 1484
      );                                                                                                               // 1485
    }                                                                                                                  // 1486
  }                                                                                                                    // 1487
                                                                                                                       // 1488
};                                                                                                                     // 1489
                                                                                                                       // 1490
module.exports = ChangeEventPlugin;                                                                                    // 1491
                                                                                                                       // 1492
},{"./EventConstants":"react/lib/EventConstants","./EventPluginHub":"react/lib/EventPluginHub","./EventPropagators":"react/lib/EventPropagators","./ExecutionEnvironment":"react/lib/ExecutionEnvironment","./ReactUpdates":"react/lib/ReactUpdates","./SyntheticEvent":"react/lib/SyntheticEvent","./isEventSupported":"react/lib/isEventSupported","./isTextInputElement":"react/lib/isTextInputElement","./keyOf":"react/lib/keyOf"}],"react/lib/ClientReactRootIndex":[function(require,module,exports){
/**                                                                                                                    // 1494
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 1495
 * All rights reserved.                                                                                                // 1496
 *                                                                                                                     // 1497
 * This source code is licensed under the BSD-style license found in the                                               // 1498
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 1499
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 1500
 *                                                                                                                     // 1501
 * @providesModule ClientReactRootIndex                                                                                // 1502
 * @typechecks                                                                                                         // 1503
 */                                                                                                                    // 1504
                                                                                                                       // 1505
'use strict';                                                                                                          // 1506
                                                                                                                       // 1507
var nextReactRootIndex = 0;                                                                                            // 1508
                                                                                                                       // 1509
var ClientReactRootIndex = {                                                                                           // 1510
  createReactRootIndex: function() {                                                                                   // 1511
    return nextReactRootIndex++;                                                                                       // 1512
  }                                                                                                                    // 1513
};                                                                                                                     // 1514
                                                                                                                       // 1515
module.exports = ClientReactRootIndex;                                                                                 // 1516
                                                                                                                       // 1517
},{}],"react/lib/DOMChildrenOperations":[function(require,module,exports){                                             // 1518
(function (process){                                                                                                   // 1519
/**                                                                                                                    // 1520
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 1521
 * All rights reserved.                                                                                                // 1522
 *                                                                                                                     // 1523
 * This source code is licensed under the BSD-style license found in the                                               // 1524
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 1525
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 1526
 *                                                                                                                     // 1527
 * @providesModule DOMChildrenOperations                                                                               // 1528
 * @typechecks static-only                                                                                             // 1529
 */                                                                                                                    // 1530
                                                                                                                       // 1531
'use strict';                                                                                                          // 1532
                                                                                                                       // 1533
var Danger = require("./Danger");                                                                                      // 1534
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");                                              // 1535
                                                                                                                       // 1536
var setTextContent = require("./setTextContent");                                                                      // 1537
var invariant = require("./invariant");                                                                                // 1538
                                                                                                                       // 1539
/**                                                                                                                    // 1540
 * Inserts `childNode` as a child of `parentNode` at the `index`.                                                      // 1541
 *                                                                                                                     // 1542
 * @param {DOMElement} parentNode Parent node in which to insert.                                                      // 1543
 * @param {DOMElement} childNode Child node to insert.                                                                 // 1544
 * @param {number} index Index at which to insert the child.                                                           // 1545
 * @internal                                                                                                           // 1546
 */                                                                                                                    // 1547
function insertChildAt(parentNode, childNode, index) {                                                                 // 1548
  // By exploiting arrays returning `undefined` for an undefined index, we can                                         // 1549
  // rely exclusively on `insertBefore(node, null)` instead of also using                                              // 1550
  // `appendChild(node)`. However, using `undefined` is not allowed by all                                             // 1551
  // browsers so we must replace it with `null`.                                                                       // 1552
  parentNode.insertBefore(                                                                                             // 1553
    childNode,                                                                                                         // 1554
    parentNode.childNodes[index] || null                                                                               // 1555
  );                                                                                                                   // 1556
}                                                                                                                      // 1557
                                                                                                                       // 1558
/**                                                                                                                    // 1559
 * Operations for updating with DOM children.                                                                          // 1560
 */                                                                                                                    // 1561
var DOMChildrenOperations = {                                                                                          // 1562
                                                                                                                       // 1563
  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,                                           // 1564
                                                                                                                       // 1565
  updateTextContent: setTextContent,                                                                                   // 1566
                                                                                                                       // 1567
  /**                                                                                                                  // 1568
   * Updates a component's children by processing a series of updates. The                                             // 1569
   * update configurations are each expected to have a `parentNode` property.                                          // 1570
   *                                                                                                                   // 1571
   * @param {array<object>} updates List of update configurations.                                                     // 1572
   * @param {array<string>} markupList List of markup strings.                                                         // 1573
   * @internal                                                                                                         // 1574
   */                                                                                                                  // 1575
  processUpdates: function(updates, markupList) {                                                                      // 1576
    var update;                                                                                                        // 1577
    // Mapping from parent IDs to initial child orderings.                                                             // 1578
    var initialChildren = null;                                                                                        // 1579
    // List of children that will be moved or removed.                                                                 // 1580
    var updatedChildren = null;                                                                                        // 1581
                                                                                                                       // 1582
    for (var i = 0; i < updates.length; i++) {                                                                         // 1583
      update = updates[i];                                                                                             // 1584
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||                                                  // 1585
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {                                                    // 1586
        var updatedIndex = update.fromIndex;                                                                           // 1587
        var updatedChild = update.parentNode.childNodes[updatedIndex];                                                 // 1588
        var parentID = update.parentID;                                                                                // 1589
                                                                                                                       // 1590
        ("production" !== process.env.NODE_ENV ? invariant(                                                            // 1591
          updatedChild,                                                                                                // 1592
          'processUpdates(): Unable to find child %s of element. This ' +                                              // 1593
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +                                           // 1594
          'browser), usually due to forgetting a <tbody> when using tables, ' +                                        // 1595
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +                                        // 1596
          'in an <svg> parent. Try inspecting the child nodes of the element ' +                                       // 1597
          'with React ID `%s`.',                                                                                       // 1598
          updatedIndex,                                                                                                // 1599
          parentID                                                                                                     // 1600
        ) : invariant(updatedChild));                                                                                  // 1601
                                                                                                                       // 1602
        initialChildren = initialChildren || {};                                                                       // 1603
        initialChildren[parentID] = initialChildren[parentID] || [];                                                   // 1604
        initialChildren[parentID][updatedIndex] = updatedChild;                                                        // 1605
                                                                                                                       // 1606
        updatedChildren = updatedChildren || [];                                                                       // 1607
        updatedChildren.push(updatedChild);                                                                            // 1608
      }                                                                                                                // 1609
    }                                                                                                                  // 1610
                                                                                                                       // 1611
    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);                                                   // 1612
                                                                                                                       // 1613
    // Remove updated children first so that `toIndex` is consistent.                                                  // 1614
    if (updatedChildren) {                                                                                             // 1615
      for (var j = 0; j < updatedChildren.length; j++) {                                                               // 1616
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);                                                 // 1617
      }                                                                                                                // 1618
    }                                                                                                                  // 1619
                                                                                                                       // 1620
    for (var k = 0; k < updates.length; k++) {                                                                         // 1621
      update = updates[k];                                                                                             // 1622
      switch (update.type) {                                                                                           // 1623
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:                                                                 // 1624
          insertChildAt(                                                                                               // 1625
            update.parentNode,                                                                                         // 1626
            renderedMarkup[update.markupIndex],                                                                        // 1627
            update.toIndex                                                                                             // 1628
          );                                                                                                           // 1629
          break;                                                                                                       // 1630
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:                                                                 // 1631
          insertChildAt(                                                                                               // 1632
            update.parentNode,                                                                                         // 1633
            initialChildren[update.parentID][update.fromIndex],                                                        // 1634
            update.toIndex                                                                                             // 1635
          );                                                                                                           // 1636
          break;                                                                                                       // 1637
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:                                                                  // 1638
          setTextContent(                                                                                              // 1639
            update.parentNode,                                                                                         // 1640
            update.textContent                                                                                         // 1641
          );                                                                                                           // 1642
          break;                                                                                                       // 1643
        case ReactMultiChildUpdateTypes.REMOVE_NODE:                                                                   // 1644
          // Already removed by the for-loop above.                                                                    // 1645
          break;                                                                                                       // 1646
      }                                                                                                                // 1647
    }                                                                                                                  // 1648
  }                                                                                                                    // 1649
                                                                                                                       // 1650
};                                                                                                                     // 1651
                                                                                                                       // 1652
module.exports = DOMChildrenOperations;                                                                                // 1653
                                                                                                                       // 1654
}).call(this,require('_process'))                                                                                      // 1655
                                                                                                                       // 1656
},{"./Danger":"react/lib/Danger","./ReactMultiChildUpdateTypes":"react/lib/ReactMultiChildUpdateTypes","./invariant":"react/lib/invariant","./setTextContent":"react/lib/setTextContent","_process":1}],"react/lib/DOMPropertyOperations":[function(require,module,exports){
(function (process){                                                                                                   // 1658
/**                                                                                                                    // 1659
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 1660
 * All rights reserved.                                                                                                // 1661
 *                                                                                                                     // 1662
 * This source code is licensed under the BSD-style license found in the                                               // 1663
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 1664
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 1665
 *                                                                                                                     // 1666
 * @providesModule DOMPropertyOperations                                                                               // 1667
 * @typechecks static-only                                                                                             // 1668
 */                                                                                                                    // 1669
                                                                                                                       // 1670
'use strict';                                                                                                          // 1671
                                                                                                                       // 1672
var DOMProperty = require("./DOMProperty");                                                                            // 1673
                                                                                                                       // 1674
var quoteAttributeValueForBrowser = require("./quoteAttributeValueForBrowser");                                        // 1675
var warning = require("./warning");                                                                                    // 1676
                                                                                                                       // 1677
function shouldIgnoreValue(name, value) {                                                                              // 1678
  return value == null ||                                                                                              // 1679
    (DOMProperty.hasBooleanValue[name] && !value) ||                                                                   // 1680
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||                                                             // 1681
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||                                                      // 1682
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);                                                  // 1683
}                                                                                                                      // 1684
                                                                                                                       // 1685
if ("production" !== process.env.NODE_ENV) {                                                                           // 1686
  var reactProps = {                                                                                                   // 1687
    children: true,                                                                                                    // 1688
    dangerouslySetInnerHTML: true,                                                                                     // 1689
    key: true,                                                                                                         // 1690
    ref: true                                                                                                          // 1691
  };                                                                                                                   // 1692
  var warnedProperties = {};                                                                                           // 1693
                                                                                                                       // 1694
  var warnUnknownProperty = function(name) {                                                                           // 1695
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||                                                         // 1696
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {                                             // 1697
      return;                                                                                                          // 1698
    }                                                                                                                  // 1699
                                                                                                                       // 1700
    warnedProperties[name] = true;                                                                                     // 1701
    var lowerCasedName = name.toLowerCase();                                                                           // 1702
                                                                                                                       // 1703
    // data-* attributes should be lowercase; suggest the lowercase version                                            // 1704
    var standardName = (                                                                                               // 1705
      DOMProperty.isCustomAttribute(lowerCasedName) ?                                                                  // 1706
        lowerCasedName :                                                                                               // 1707
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?                                             // 1708
        DOMProperty.getPossibleStandardName[lowerCasedName] :                                                          // 1709
        null                                                                                                           // 1710
    );                                                                                                                 // 1711
                                                                                                                       // 1712
    // For now, only warn when we have a suggested correction. This prevents                                           // 1713
    // logging too much when using transferPropsTo.                                                                    // 1714
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 1715
      standardName == null,                                                                                            // 1716
      'Unknown DOM property %s. Did you mean %s?',                                                                     // 1717
      name,                                                                                                            // 1718
      standardName                                                                                                     // 1719
    ) : null);                                                                                                         // 1720
                                                                                                                       // 1721
  };                                                                                                                   // 1722
}                                                                                                                      // 1723
                                                                                                                       // 1724
/**                                                                                                                    // 1725
 * Operations for dealing with DOM properties.                                                                         // 1726
 */                                                                                                                    // 1727
var DOMPropertyOperations = {                                                                                          // 1728
                                                                                                                       // 1729
  /**                                                                                                                  // 1730
   * Creates markup for the ID property.                                                                               // 1731
   *                                                                                                                   // 1732
   * @param {string} id Unescaped ID.                                                                                  // 1733
   * @return {string} Markup string.                                                                                   // 1734
   */                                                                                                                  // 1735
  createMarkupForID: function(id) {                                                                                    // 1736
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +                                                                       // 1737
      quoteAttributeValueForBrowser(id);                                                                               // 1738
  },                                                                                                                   // 1739
                                                                                                                       // 1740
  /**                                                                                                                  // 1741
   * Creates markup for a property.                                                                                    // 1742
   *                                                                                                                   // 1743
   * @param {string} name                                                                                              // 1744
   * @param {*} value                                                                                                  // 1745
   * @return {?string} Markup string, or null if the property was invalid.                                             // 1746
   */                                                                                                                  // 1747
  createMarkupForProperty: function(name, value) {                                                                     // 1748
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&                                                             // 1749
        DOMProperty.isStandardName[name]) {                                                                            // 1750
      if (shouldIgnoreValue(name, value)) {                                                                            // 1751
        return '';                                                                                                     // 1752
      }                                                                                                                // 1753
      var attributeName = DOMProperty.getAttributeName[name];                                                          // 1754
      if (DOMProperty.hasBooleanValue[name] ||                                                                         // 1755
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {                                           // 1756
        return attributeName;                                                                                          // 1757
      }                                                                                                                // 1758
      return attributeName + '=' + quoteAttributeValueForBrowser(value);                                               // 1759
    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 1760
      if (value == null) {                                                                                             // 1761
        return '';                                                                                                     // 1762
      }                                                                                                                // 1763
      return name + '=' + quoteAttributeValueForBrowser(value);                                                        // 1764
    } else if ("production" !== process.env.NODE_ENV) {                                                                // 1765
      warnUnknownProperty(name);                                                                                       // 1766
    }                                                                                                                  // 1767
    return null;                                                                                                       // 1768
  },                                                                                                                   // 1769
                                                                                                                       // 1770
  /**                                                                                                                  // 1771
   * Sets the value for a property on a node.                                                                          // 1772
   *                                                                                                                   // 1773
   * @param {DOMElement} node                                                                                          // 1774
   * @param {string} name                                                                                              // 1775
   * @param {*} value                                                                                                  // 1776
   */                                                                                                                  // 1777
  setValueForProperty: function(node, name, value) {                                                                   // 1778
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&                                                             // 1779
        DOMProperty.isStandardName[name]) {                                                                            // 1780
      var mutationMethod = DOMProperty.getMutationMethod[name];                                                        // 1781
      if (mutationMethod) {                                                                                            // 1782
        mutationMethod(node, value);                                                                                   // 1783
      } else if (shouldIgnoreValue(name, value)) {                                                                     // 1784
        this.deleteValueForProperty(node, name);                                                                       // 1785
      } else if (DOMProperty.mustUseAttribute[name]) {                                                                 // 1786
        // `setAttribute` with objects becomes only `[object]` in IE8/9,                                               // 1787
        // ('' + value) makes it output the correct toString()-value.                                                  // 1788
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);                                             // 1789
      } else {                                                                                                         // 1790
        var propName = DOMProperty.getPropertyName[name];                                                              // 1791
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the                                          // 1792
        // property type before comparing; only `value` does and is string.                                            // 1793
        if (!DOMProperty.hasSideEffects[name] ||                                                                       // 1794
            ('' + node[propName]) !== ('' + value)) {                                                                  // 1795
          // Contrary to `setAttribute`, object properties are properly                                                // 1796
          // `toString`ed by IE8/9.                                                                                    // 1797
          node[propName] = value;                                                                                      // 1798
        }                                                                                                              // 1799
      }                                                                                                                // 1800
    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 1801
      if (value == null) {                                                                                             // 1802
        node.removeAttribute(name);                                                                                    // 1803
      } else {                                                                                                         // 1804
        node.setAttribute(name, '' + value);                                                                           // 1805
      }                                                                                                                // 1806
    } else if ("production" !== process.env.NODE_ENV) {                                                                // 1807
      warnUnknownProperty(name);                                                                                       // 1808
    }                                                                                                                  // 1809
  },                                                                                                                   // 1810
                                                                                                                       // 1811
  /**                                                                                                                  // 1812
   * Deletes the value for a property on a node.                                                                       // 1813
   *                                                                                                                   // 1814
   * @param {DOMElement} node                                                                                          // 1815
   * @param {string} name                                                                                              // 1816
   */                                                                                                                  // 1817
  deleteValueForProperty: function(node, name) {                                                                       // 1818
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&                                                             // 1819
        DOMProperty.isStandardName[name]) {                                                                            // 1820
      var mutationMethod = DOMProperty.getMutationMethod[name];                                                        // 1821
      if (mutationMethod) {                                                                                            // 1822
        mutationMethod(node, undefined);                                                                               // 1823
      } else if (DOMProperty.mustUseAttribute[name]) {                                                                 // 1824
        node.removeAttribute(DOMProperty.getAttributeName[name]);                                                      // 1825
      } else {                                                                                                         // 1826
        var propName = DOMProperty.getPropertyName[name];                                                              // 1827
        var defaultValue = DOMProperty.getDefaultValueForProperty(                                                     // 1828
          node.nodeName,                                                                                               // 1829
          propName                                                                                                     // 1830
        );                                                                                                             // 1831
        if (!DOMProperty.hasSideEffects[name] ||                                                                       // 1832
            ('' + node[propName]) !== defaultValue) {                                                                  // 1833
          node[propName] = defaultValue;                                                                               // 1834
        }                                                                                                              // 1835
      }                                                                                                                // 1836
    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 1837
      node.removeAttribute(name);                                                                                      // 1838
    } else if ("production" !== process.env.NODE_ENV) {                                                                // 1839
      warnUnknownProperty(name);                                                                                       // 1840
    }                                                                                                                  // 1841
  }                                                                                                                    // 1842
                                                                                                                       // 1843
};                                                                                                                     // 1844
                                                                                                                       // 1845
module.exports = DOMPropertyOperations;                                                                                // 1846
                                                                                                                       // 1847
}).call(this,require('_process'))                                                                                      // 1848
                                                                                                                       // 1849
},{"./DOMProperty":"react/lib/DOMProperty","./quoteAttributeValueForBrowser":"react/lib/quoteAttributeValueForBrowser","./warning":"react/lib/warning","_process":1}],"react/lib/DOMProperty":[function(require,module,exports){
(function (process){                                                                                                   // 1851
/**                                                                                                                    // 1852
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 1853
 * All rights reserved.                                                                                                // 1854
 *                                                                                                                     // 1855
 * This source code is licensed under the BSD-style license found in the                                               // 1856
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 1857
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 1858
 *                                                                                                                     // 1859
 * @providesModule DOMProperty                                                                                         // 1860
 * @typechecks static-only                                                                                             // 1861
 */                                                                                                                    // 1862
                                                                                                                       // 1863
/*jslint bitwise: true */                                                                                              // 1864
                                                                                                                       // 1865
'use strict';                                                                                                          // 1866
                                                                                                                       // 1867
var invariant = require("./invariant");                                                                                // 1868
                                                                                                                       // 1869
function checkMask(value, bitmask) {                                                                                   // 1870
  return (value & bitmask) === bitmask;                                                                                // 1871
}                                                                                                                      // 1872
                                                                                                                       // 1873
var DOMPropertyInjection = {                                                                                           // 1874
  /**                                                                                                                  // 1875
   * Mapping from normalized, camelcased property names to a configuration that                                        // 1876
   * specifies how the associated DOM property should be accessed or rendered.                                         // 1877
   */                                                                                                                  // 1878
  MUST_USE_ATTRIBUTE: 0x1,                                                                                             // 1879
  MUST_USE_PROPERTY: 0x2,                                                                                              // 1880
  HAS_SIDE_EFFECTS: 0x4,                                                                                               // 1881
  HAS_BOOLEAN_VALUE: 0x8,                                                                                              // 1882
  HAS_NUMERIC_VALUE: 0x10,                                                                                             // 1883
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,                                                                             // 1884
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,                                                                                  // 1885
                                                                                                                       // 1886
  /**                                                                                                                  // 1887
   * Inject some specialized knowledge about the DOM. This takes a config object                                       // 1888
   * with the following properties:                                                                                    // 1889
   *                                                                                                                   // 1890
   * isCustomAttribute: function that given an attribute name will return true                                         // 1891
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*                                          // 1892
   * attributes where it's impossible to enumerate all of the possible                                                 // 1893
   * attribute names,                                                                                                  // 1894
   *                                                                                                                   // 1895
   * Properties: object mapping DOM property name to one of the                                                        // 1896
   * DOMPropertyInjection constants or null. If your attribute isn't in here,                                          // 1897
   * it won't get written to the DOM.                                                                                  // 1898
   *                                                                                                                   // 1899
   * DOMAttributeNames: object mapping React attribute name to the DOM                                                 // 1900
   * attribute name. Attribute names not specified use the **lowercase**                                               // 1901
   * normalized name.                                                                                                  // 1902
   *                                                                                                                   // 1903
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.                                            // 1904
   * Property names not specified use the normalized name.                                                             // 1905
   *                                                                                                                   // 1906
   * DOMMutationMethods: Properties that require special mutation methods. If                                          // 1907
   * `value` is undefined, the mutation method should unset the property.                                              // 1908
   *                                                                                                                   // 1909
   * @param {object} domPropertyConfig the config as described above.                                                  // 1910
   */                                                                                                                  // 1911
  injectDOMPropertyConfig: function(domPropertyConfig) {                                                               // 1912
    var Properties = domPropertyConfig.Properties || {};                                                               // 1913
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};                                                 // 1914
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};                                                   // 1915
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};                                               // 1916
                                                                                                                       // 1917
    if (domPropertyConfig.isCustomAttribute) {                                                                         // 1918
      DOMProperty._isCustomAttributeFunctions.push(                                                                    // 1919
        domPropertyConfig.isCustomAttribute                                                                            // 1920
      );                                                                                                               // 1921
    }                                                                                                                  // 1922
                                                                                                                       // 1923
    for (var propName in Properties) {                                                                                 // 1924
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 1925
        !DOMProperty.isStandardName.hasOwnProperty(propName),                                                          // 1926
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +                                       // 1927
        '\'%s\' which has already been injected. You may be accidentally ' +                                           // 1928
        'injecting the same DOM property config twice, or you may be ' +                                               // 1929
        'injecting two configs that have conflicting property names.',                                                 // 1930
        propName                                                                                                       // 1931
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));                                            // 1932
                                                                                                                       // 1933
      DOMProperty.isStandardName[propName] = true;                                                                     // 1934
                                                                                                                       // 1935
      var lowerCased = propName.toLowerCase();                                                                         // 1936
      DOMProperty.getPossibleStandardName[lowerCased] = propName;                                                      // 1937
                                                                                                                       // 1938
      if (DOMAttributeNames.hasOwnProperty(propName)) {                                                                // 1939
        var attributeName = DOMAttributeNames[propName];                                                               // 1940
        DOMProperty.getPossibleStandardName[attributeName] = propName;                                                 // 1941
        DOMProperty.getAttributeName[propName] = attributeName;                                                        // 1942
      } else {                                                                                                         // 1943
        DOMProperty.getAttributeName[propName] = lowerCased;                                                           // 1944
      }                                                                                                                // 1945
                                                                                                                       // 1946
      DOMProperty.getPropertyName[propName] =                                                                          // 1947
        DOMPropertyNames.hasOwnProperty(propName) ?                                                                    // 1948
          DOMPropertyNames[propName] :                                                                                 // 1949
          propName;                                                                                                    // 1950
                                                                                                                       // 1951
      if (DOMMutationMethods.hasOwnProperty(propName)) {                                                               // 1952
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];                                        // 1953
      } else {                                                                                                         // 1954
        DOMProperty.getMutationMethod[propName] = null;                                                                // 1955
      }                                                                                                                // 1956
                                                                                                                       // 1957
      var propConfig = Properties[propName];                                                                           // 1958
      DOMProperty.mustUseAttribute[propName] =                                                                         // 1959
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);                                                // 1960
      DOMProperty.mustUseProperty[propName] =                                                                          // 1961
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);                                                 // 1962
      DOMProperty.hasSideEffects[propName] =                                                                           // 1963
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);                                                  // 1964
      DOMProperty.hasBooleanValue[propName] =                                                                          // 1965
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);                                                 // 1966
      DOMProperty.hasNumericValue[propName] =                                                                          // 1967
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);                                                 // 1968
      DOMProperty.hasPositiveNumericValue[propName] =                                                                  // 1969
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);                                        // 1970
      DOMProperty.hasOverloadedBooleanValue[propName] =                                                                // 1971
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);                                      // 1972
                                                                                                                       // 1973
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 1974
        !DOMProperty.mustUseAttribute[propName] ||                                                                     // 1975
          !DOMProperty.mustUseProperty[propName],                                                                      // 1976
        'DOMProperty: Cannot require using both attribute and property: %s',                                           // 1977
        propName                                                                                                       // 1978
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||                                                         // 1979
        !DOMProperty.mustUseProperty[propName]));                                                                      // 1980
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 1981
        DOMProperty.mustUseProperty[propName] ||                                                                       // 1982
          !DOMProperty.hasSideEffects[propName],                                                                       // 1983
        'DOMProperty: Properties that have side effects must use property: %s',                                        // 1984
        propName                                                                                                       // 1985
      ) : invariant(DOMProperty.mustUseProperty[propName] ||                                                           // 1986
        !DOMProperty.hasSideEffects[propName]));                                                                       // 1987
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 1988
        !!DOMProperty.hasBooleanValue[propName] +                                                                      // 1989
          !!DOMProperty.hasNumericValue[propName] +                                                                    // 1990
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,                                                      // 1991
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +                                          // 1992
        'numeric value, but not a combination: %s',                                                                    // 1993
        propName                                                                                                       // 1994
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +                                                          // 1995
        !!DOMProperty.hasNumericValue[propName] +                                                                      // 1996
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));                                                      // 1997
    }                                                                                                                  // 1998
  }                                                                                                                    // 1999
};                                                                                                                     // 2000
var defaultValueCache = {};                                                                                            // 2001
                                                                                                                       // 2002
/**                                                                                                                    // 2003
 * DOMProperty exports lookup objects that can be used like functions:                                                 // 2004
 *                                                                                                                     // 2005
 *   > DOMProperty.isValid['id']                                                                                       // 2006
 *   true                                                                                                              // 2007
 *   > DOMProperty.isValid['foobar']                                                                                   // 2008
 *   undefined                                                                                                         // 2009
 *                                                                                                                     // 2010
 * Although this may be confusing, it performs better in general.                                                      // 2011
 *                                                                                                                     // 2012
 * @see http://jsperf.com/key-exists                                                                                   // 2013
 * @see http://jsperf.com/key-missing                                                                                  // 2014
 */                                                                                                                    // 2015
var DOMProperty = {                                                                                                    // 2016
                                                                                                                       // 2017
  ID_ATTRIBUTE_NAME: 'data-reactid',                                                                                   // 2018
                                                                                                                       // 2019
  /**                                                                                                                  // 2020
   * Checks whether a property name is a standard property.                                                            // 2021
   * @type {Object}                                                                                                    // 2022
   */                                                                                                                  // 2023
  isStandardName: {},                                                                                                  // 2024
                                                                                                                       // 2025
  /**                                                                                                                  // 2026
   * Mapping from lowercase property names to the properly cased version, used                                         // 2027
   * to warn in the case of missing properties.                                                                        // 2028
   * @type {Object}                                                                                                    // 2029
   */                                                                                                                  // 2030
  getPossibleStandardName: {},                                                                                         // 2031
                                                                                                                       // 2032
  /**                                                                                                                  // 2033
   * Mapping from normalized names to attribute names that differ. Attribute                                           // 2034
   * names are used when rendering markup or with `*Attribute()`.                                                      // 2035
   * @type {Object}                                                                                                    // 2036
   */                                                                                                                  // 2037
  getAttributeName: {},                                                                                                // 2038
                                                                                                                       // 2039
  /**                                                                                                                  // 2040
   * Mapping from normalized names to properties on DOM node instances.                                                // 2041
   * (This includes properties that mutate due to external factors.)                                                   // 2042
   * @type {Object}                                                                                                    // 2043
   */                                                                                                                  // 2044
  getPropertyName: {},                                                                                                 // 2045
                                                                                                                       // 2046
  /**                                                                                                                  // 2047
   * Mapping from normalized names to mutation methods. This will only exist if                                        // 2048
   * mutation cannot be set simply by the property or `setAttribute()`.                                                // 2049
   * @type {Object}                                                                                                    // 2050
   */                                                                                                                  // 2051
  getMutationMethod: {},                                                                                               // 2052
                                                                                                                       // 2053
  /**                                                                                                                  // 2054
   * Whether the property must be accessed and mutated as an object property.                                          // 2055
   * @type {Object}                                                                                                    // 2056
   */                                                                                                                  // 2057
  mustUseAttribute: {},                                                                                                // 2058
                                                                                                                       // 2059
  /**                                                                                                                  // 2060
   * Whether the property must be accessed and mutated using `*Attribute()`.                                           // 2061
   * (This includes anything that fails `<propName> in <element>`.)                                                    // 2062
   * @type {Object}                                                                                                    // 2063
   */                                                                                                                  // 2064
  mustUseProperty: {},                                                                                                 // 2065
                                                                                                                       // 2066
  /**                                                                                                                  // 2067
   * Whether or not setting a value causes side effects such as triggering                                             // 2068
   * resources to be loaded or text selection changes. We must ensure that                                             // 2069
   * the value is only set if it has changed.                                                                          // 2070
   * @type {Object}                                                                                                    // 2071
   */                                                                                                                  // 2072
  hasSideEffects: {},                                                                                                  // 2073
                                                                                                                       // 2074
  /**                                                                                                                  // 2075
   * Whether the property should be removed when set to a falsey value.                                                // 2076
   * @type {Object}                                                                                                    // 2077
   */                                                                                                                  // 2078
  hasBooleanValue: {},                                                                                                 // 2079
                                                                                                                       // 2080
  /**                                                                                                                  // 2081
   * Whether the property must be numeric or parse as a                                                                // 2082
   * numeric and should be removed when set to a falsey value.                                                         // 2083
   * @type {Object}                                                                                                    // 2084
   */                                                                                                                  // 2085
  hasNumericValue: {},                                                                                                 // 2086
                                                                                                                       // 2087
  /**                                                                                                                  // 2088
   * Whether the property must be positive numeric or parse as a positive                                              // 2089
   * numeric and should be removed when set to a falsey value.                                                         // 2090
   * @type {Object}                                                                                                    // 2091
   */                                                                                                                  // 2092
  hasPositiveNumericValue: {},                                                                                         // 2093
                                                                                                                       // 2094
  /**                                                                                                                  // 2095
   * Whether the property can be used as a flag as well as with a value. Removed                                       // 2096
   * when strictly equal to false; present without a value when strictly equal                                         // 2097
   * to true; present with a value otherwise.                                                                          // 2098
   * @type {Object}                                                                                                    // 2099
   */                                                                                                                  // 2100
  hasOverloadedBooleanValue: {},                                                                                       // 2101
                                                                                                                       // 2102
  /**                                                                                                                  // 2103
   * All of the isCustomAttribute() functions that have been injected.                                                 // 2104
   */                                                                                                                  // 2105
  _isCustomAttributeFunctions: [],                                                                                     // 2106
                                                                                                                       // 2107
  /**                                                                                                                  // 2108
   * Checks whether a property name is a custom attribute.                                                             // 2109
   * @method                                                                                                           // 2110
   */                                                                                                                  // 2111
  isCustomAttribute: function(attributeName) {                                                                         // 2112
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {                                         // 2113
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];                                            // 2114
      if (isCustomAttributeFn(attributeName)) {                                                                        // 2115
        return true;                                                                                                   // 2116
      }                                                                                                                // 2117
    }                                                                                                                  // 2118
    return false;                                                                                                      // 2119
  },                                                                                                                   // 2120
                                                                                                                       // 2121
  /**                                                                                                                  // 2122
   * Returns the default property value for a DOM property (i.e., not an                                               // 2123
   * attribute). Most default values are '' or false, but not all. Worse yet,                                          // 2124
   * some (in particular, `type`) vary depending on the type of element.                                               // 2125
   *                                                                                                                   // 2126
   * TODO: Is it better to grab all the possible properties when creating an                                           // 2127
   * element to avoid having to create the same element twice?                                                         // 2128
   */                                                                                                                  // 2129
  getDefaultValueForProperty: function(nodeName, prop) {                                                               // 2130
    var nodeDefaults = defaultValueCache[nodeName];                                                                    // 2131
    var testElement;                                                                                                   // 2132
    if (!nodeDefaults) {                                                                                               // 2133
      defaultValueCache[nodeName] = nodeDefaults = {};                                                                 // 2134
    }                                                                                                                  // 2135
    if (!(prop in nodeDefaults)) {                                                                                     // 2136
      testElement = document.createElement(nodeName);                                                                  // 2137
      nodeDefaults[prop] = testElement[prop];                                                                          // 2138
    }                                                                                                                  // 2139
    return nodeDefaults[prop];                                                                                         // 2140
  },                                                                                                                   // 2141
                                                                                                                       // 2142
  injection: DOMPropertyInjection                                                                                      // 2143
};                                                                                                                     // 2144
                                                                                                                       // 2145
module.exports = DOMProperty;                                                                                          // 2146
                                                                                                                       // 2147
}).call(this,require('_process'))                                                                                      // 2148
                                                                                                                       // 2149
},{"./invariant":"react/lib/invariant","_process":1}],"react/lib/Danger":[function(require,module,exports){            // 2150
(function (process){                                                                                                   // 2151
/**                                                                                                                    // 2152
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2153
 * All rights reserved.                                                                                                // 2154
 *                                                                                                                     // 2155
 * This source code is licensed under the BSD-style license found in the                                               // 2156
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 2157
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 2158
 *                                                                                                                     // 2159
 * @providesModule Danger                                                                                              // 2160
 * @typechecks static-only                                                                                             // 2161
 */                                                                                                                    // 2162
                                                                                                                       // 2163
/*jslint evil: true, sub: true */                                                                                      // 2164
                                                                                                                       // 2165
'use strict';                                                                                                          // 2166
                                                                                                                       // 2167
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 2168
                                                                                                                       // 2169
var createNodesFromMarkup = require("./createNodesFromMarkup");                                                        // 2170
var emptyFunction = require("./emptyFunction");                                                                        // 2171
var getMarkupWrap = require("./getMarkupWrap");                                                                        // 2172
var invariant = require("./invariant");                                                                                // 2173
                                                                                                                       // 2174
var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;                                                                                // 2175
var RESULT_INDEX_ATTR = 'data-danger-index';                                                                           // 2176
                                                                                                                       // 2177
/**                                                                                                                    // 2178
 * Extracts the `nodeName` from a string of markup.                                                                    // 2179
 *                                                                                                                     // 2180
 * NOTE: Extracting the `nodeName` does not require a regular expression match                                         // 2181
 * because we make assumptions about React-generated markup (i.e. there are no                                         // 2182
 * spaces surrounding the opening tag and there is at least one attribute).                                            // 2183
 *                                                                                                                     // 2184
 * @param {string} markup String of markup.                                                                            // 2185
 * @return {string} Node name of the supplied markup.                                                                  // 2186
 * @see http://jsperf.com/extract-nodename                                                                             // 2187
 */                                                                                                                    // 2188
function getNodeName(markup) {                                                                                         // 2189
  return markup.substring(1, markup.indexOf(' '));                                                                     // 2190
}                                                                                                                      // 2191
                                                                                                                       // 2192
var Danger = {                                                                                                         // 2193
                                                                                                                       // 2194
  /**                                                                                                                  // 2195
   * Renders markup into an array of nodes. The markup is expected to render                                           // 2196
   * into a list of root nodes. Also, the length of `resultList` and                                                   // 2197
   * `markupList` should be the same.                                                                                  // 2198
   *                                                                                                                   // 2199
   * @param {array<string>} markupList List of markup strings to render.                                               // 2200
   * @return {array<DOMElement>} List of rendered nodes.                                                               // 2201
   * @internal                                                                                                         // 2202
   */                                                                                                                  // 2203
  dangerouslyRenderMarkup: function(markupList) {                                                                      // 2204
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 2205
      ExecutionEnvironment.canUseDOM,                                                                                  // 2206
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +                                              // 2207
      'thread. Make sure `window` and `document` are available globally ' +                                            // 2208
      'before requiring React when unit testing or use ' +                                                             // 2209
      'React.renderToString for server rendering.'                                                                     // 2210
    ) : invariant(ExecutionEnvironment.canUseDOM));                                                                    // 2211
    var nodeName;                                                                                                      // 2212
    var markupByNodeName = {};                                                                                         // 2213
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.                                                 // 2214
    for (var i = 0; i < markupList.length; i++) {                                                                      // 2215
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 2216
        markupList[i],                                                                                                 // 2217
        'dangerouslyRenderMarkup(...): Missing markup.'                                                                // 2218
      ) : invariant(markupList[i]));                                                                                   // 2219
      nodeName = getNodeName(markupList[i]);                                                                           // 2220
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';                                                             // 2221
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];                                                   // 2222
      markupByNodeName[nodeName][i] = markupList[i];                                                                   // 2223
    }                                                                                                                  // 2224
    var resultList = [];                                                                                               // 2225
    var resultListAssignmentCount = 0;                                                                                 // 2226
    for (nodeName in markupByNodeName) {                                                                               // 2227
      if (!markupByNodeName.hasOwnProperty(nodeName)) {                                                                // 2228
        continue;                                                                                                      // 2229
      }                                                                                                                // 2230
      var markupListByNodeName = markupByNodeName[nodeName];                                                           // 2231
                                                                                                                       // 2232
      // This for-in loop skips the holes of the sparse array. The order of                                            // 2233
      // iteration should follow the order of assignment, which happens to match                                       // 2234
      // numerical index order, but we don't rely on that.                                                             // 2235
      var resultIndex;                                                                                                 // 2236
      for (resultIndex in markupListByNodeName) {                                                                      // 2237
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {                                                        // 2238
          var markup = markupListByNodeName[resultIndex];                                                              // 2239
                                                                                                                       // 2240
          // Push the requested markup with an additional RESULT_INDEX_ATTR                                            // 2241
          // attribute.  If the markup does not start with a < character, it                                           // 2242
          // will be discarded below (with an appropriate console.error).                                              // 2243
          markupListByNodeName[resultIndex] = markup.replace(                                                          // 2244
            OPEN_TAG_NAME_EXP,                                                                                         // 2245
            // This index will be parsed back out below.                                                               // 2246
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '                                                      // 2247
          );                                                                                                           // 2248
        }                                                                                                              // 2249
      }                                                                                                                // 2250
                                                                                                                       // 2251
      // Render each group of markup with similar wrapping `nodeName`.                                                 // 2252
      var renderNodes = createNodesFromMarkup(                                                                         // 2253
        markupListByNodeName.join(''),                                                                                 // 2254
        emptyFunction // Do nothing special with <script> tags.                                                        // 2255
      );                                                                                                               // 2256
                                                                                                                       // 2257
      for (var j = 0; j < renderNodes.length; ++j) {                                                                   // 2258
        var renderNode = renderNodes[j];                                                                               // 2259
        if (renderNode.hasAttribute &&                                                                                 // 2260
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {                                                              // 2261
                                                                                                                       // 2262
          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);                                                   // 2263
          renderNode.removeAttribute(RESULT_INDEX_ATTR);                                                               // 2264
                                                                                                                       // 2265
          ("production" !== process.env.NODE_ENV ? invariant(                                                          // 2266
            !resultList.hasOwnProperty(resultIndex),                                                                   // 2267
            'Danger: Assigning to an already-occupied result index.'                                                   // 2268
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));                                                     // 2269
                                                                                                                       // 2270
          resultList[resultIndex] = renderNode;                                                                        // 2271
                                                                                                                       // 2272
          // This should match resultList.length and markupList.length when                                            // 2273
          // we're done.                                                                                               // 2274
          resultListAssignmentCount += 1;                                                                              // 2275
                                                                                                                       // 2276
        } else if ("production" !== process.env.NODE_ENV) {                                                            // 2277
          console.error(                                                                                               // 2278
            'Danger: Discarding unexpected node:',                                                                     // 2279
            renderNode                                                                                                 // 2280
          );                                                                                                           // 2281
        }                                                                                                              // 2282
      }                                                                                                                // 2283
    }                                                                                                                  // 2284
                                                                                                                       // 2285
    // Although resultList was populated out of order, it should now be a dense                                        // 2286
    // array.                                                                                                          // 2287
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 2288
      resultListAssignmentCount === resultList.length,                                                                 // 2289
      'Danger: Did not assign to every index of resultList.'                                                           // 2290
    ) : invariant(resultListAssignmentCount === resultList.length));                                                   // 2291
                                                                                                                       // 2292
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 2293
      resultList.length === markupList.length,                                                                         // 2294
      'Danger: Expected markup to render %s nodes, but rendered %s.',                                                  // 2295
      markupList.length,                                                                                               // 2296
      resultList.length                                                                                                // 2297
    ) : invariant(resultList.length === markupList.length));                                                           // 2298
                                                                                                                       // 2299
    return resultList;                                                                                                 // 2300
  },                                                                                                                   // 2301
                                                                                                                       // 2302
  /**                                                                                                                  // 2303
   * Replaces a node with a string of markup at its current position within its                                        // 2304
   * parent. The markup must render into a single root node.                                                           // 2305
   *                                                                                                                   // 2306
   * @param {DOMElement} oldChild Child node to replace.                                                               // 2307
   * @param {string} markup Markup to render in place of the child node.                                               // 2308
   * @internal                                                                                                         // 2309
   */                                                                                                                  // 2310
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {                                                       // 2311
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 2312
      ExecutionEnvironment.canUseDOM,                                                                                  // 2313
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +                                            // 2314
      'worker thread. Make sure `window` and `document` are available ' +                                              // 2315
      'globally before requiring React when unit testing or use ' +                                                    // 2316
      'React.renderToString for server rendering.'                                                                     // 2317
    ) : invariant(ExecutionEnvironment.canUseDOM));                                                                    // 2318
    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 2320
      oldChild.tagName.toLowerCase() !== 'html',                                                                       // 2321
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +                                         // 2322
      '<html> node. This is because browser quirks make this unreliable ' +                                            // 2323
      'and/or slow. If you want to render to the root you must use ' +                                                 // 2324
      'server rendering. See React.renderToString().'                                                                  // 2325
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));                                                         // 2326
                                                                                                                       // 2327
    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];                                                    // 2328
    oldChild.parentNode.replaceChild(newChild, oldChild);                                                              // 2329
  }                                                                                                                    // 2330
                                                                                                                       // 2331
};                                                                                                                     // 2332
                                                                                                                       // 2333
module.exports = Danger;                                                                                               // 2334
                                                                                                                       // 2335
}).call(this,require('_process'))                                                                                      // 2336
                                                                                                                       // 2337
},{"./ExecutionEnvironment":"react/lib/ExecutionEnvironment","./createNodesFromMarkup":"react/lib/createNodesFromMarkup","./emptyFunction":"react/lib/emptyFunction","./getMarkupWrap":"react/lib/getMarkupWrap","./invariant":"react/lib/invariant","_process":1}],"react/lib/DefaultEventPluginOrder":[function(require,module,exports){
/**                                                                                                                    // 2339
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2340
 * All rights reserved.                                                                                                // 2341
 *                                                                                                                     // 2342
 * This source code is licensed under the BSD-style license found in the                                               // 2343
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 2344
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 2345
 *                                                                                                                     // 2346
 * @providesModule DefaultEventPluginOrder                                                                             // 2347
 */                                                                                                                    // 2348
                                                                                                                       // 2349
'use strict';                                                                                                          // 2350
                                                                                                                       // 2351
var keyOf = require("./keyOf");                                                                                        // 2352
                                                                                                                       // 2353
/**                                                                                                                    // 2354
 * Module that is injectable into `EventPluginHub`, that specifies a                                                   // 2355
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about                                          // 2356
 * plugins, without having to package every one of them. This is better than                                           // 2357
 * having plugins be ordered in the same order that they are injected because                                          // 2358
 * that ordering would be influenced by the packaging order.                                                           // 2359
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that                                                // 2360
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.                                         // 2361
 */                                                                                                                    // 2362
var DefaultEventPluginOrder = [                                                                                        // 2363
  keyOf({ResponderEventPlugin: null}),                                                                                 // 2364
  keyOf({SimpleEventPlugin: null}),                                                                                    // 2365
  keyOf({TapEventPlugin: null}),                                                                                       // 2366
  keyOf({EnterLeaveEventPlugin: null}),                                                                                // 2367
  keyOf({ChangeEventPlugin: null}),                                                                                    // 2368
  keyOf({SelectEventPlugin: null}),                                                                                    // 2369
  keyOf({BeforeInputEventPlugin: null}),                                                                               // 2370
  keyOf({AnalyticsEventPlugin: null}),                                                                                 // 2371
  keyOf({MobileSafariClickEventPlugin: null})                                                                          // 2372
];                                                                                                                     // 2373
                                                                                                                       // 2374
module.exports = DefaultEventPluginOrder;                                                                              // 2375
                                                                                                                       // 2376
},{"./keyOf":"react/lib/keyOf"}],"react/lib/EnterLeaveEventPlugin":[function(require,module,exports){                  // 2377
/**                                                                                                                    // 2378
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2379
 * All rights reserved.                                                                                                // 2380
 *                                                                                                                     // 2381
 * This source code is licensed under the BSD-style license found in the                                               // 2382
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 2383
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 2384
 *                                                                                                                     // 2385
 * @providesModule EnterLeaveEventPlugin                                                                               // 2386
 * @typechecks static-only                                                                                             // 2387
 */                                                                                                                    // 2388
                                                                                                                       // 2389
'use strict';                                                                                                          // 2390
                                                                                                                       // 2391
var EventConstants = require("./EventConstants");                                                                      // 2392
var EventPropagators = require("./EventPropagators");                                                                  // 2393
var SyntheticMouseEvent = require("./SyntheticMouseEvent");                                                            // 2394
                                                                                                                       // 2395
var ReactMount = require("./ReactMount");                                                                              // 2396
var keyOf = require("./keyOf");                                                                                        // 2397
                                                                                                                       // 2398
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 2399
var getFirstReactDOM = ReactMount.getFirstReactDOM;                                                                    // 2400
                                                                                                                       // 2401
var eventTypes = {                                                                                                     // 2402
  mouseEnter: {                                                                                                        // 2403
    registrationName: keyOf({onMouseEnter: null}),                                                                     // 2404
    dependencies: [                                                                                                    // 2405
      topLevelTypes.topMouseOut,                                                                                       // 2406
      topLevelTypes.topMouseOver                                                                                       // 2407
    ]                                                                                                                  // 2408
  },                                                                                                                   // 2409
  mouseLeave: {                                                                                                        // 2410
    registrationName: keyOf({onMouseLeave: null}),                                                                     // 2411
    dependencies: [                                                                                                    // 2412
      topLevelTypes.topMouseOut,                                                                                       // 2413
      topLevelTypes.topMouseOver                                                                                       // 2414
    ]                                                                                                                  // 2415
  }                                                                                                                    // 2416
};                                                                                                                     // 2417
                                                                                                                       // 2418
var extractedEvents = [null, null];                                                                                    // 2419
                                                                                                                       // 2420
var EnterLeaveEventPlugin = {                                                                                          // 2421
                                                                                                                       // 2422
  eventTypes: eventTypes,                                                                                              // 2423
                                                                                                                       // 2424
  /**                                                                                                                  // 2425
   * For almost every interaction we care about, there will be both a top-level                                        // 2426
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that                                         // 2427
   * we do not extract duplicate events. However, moving the mouse into the                                            // 2428
   * browser from outside will not fire a `mouseout` event. In this case, we use                                       // 2429
   * the `mouseover` top-level event.                                                                                  // 2430
   *                                                                                                                   // 2431
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 2432
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 2433
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 2434
   * @param {object} nativeEvent Native browser event.                                                                 // 2435
   * @return {*} An accumulation of synthetic events.                                                                  // 2436
   * @see {EventPluginHub.extractEvents}                                                                               // 2437
   */                                                                                                                  // 2438
  extractEvents: function(                                                                                             // 2439
      topLevelType,                                                                                                    // 2440
      topLevelTarget,                                                                                                  // 2441
      topLevelTargetID,                                                                                                // 2442
      nativeEvent) {                                                                                                   // 2443
    if (topLevelType === topLevelTypes.topMouseOver &&                                                                 // 2444
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {                                                      // 2445
      return null;                                                                                                     // 2446
    }                                                                                                                  // 2447
    if (topLevelType !== topLevelTypes.topMouseOut &&                                                                  // 2448
        topLevelType !== topLevelTypes.topMouseOver) {                                                                 // 2449
      // Must not be a mouse in or mouse out - ignoring.                                                               // 2450
      return null;                                                                                                     // 2451
    }                                                                                                                  // 2452
                                                                                                                       // 2453
    var win;                                                                                                           // 2454
    if (topLevelTarget.window === topLevelTarget) {                                                                    // 2455
      // `topLevelTarget` is probably a window object.                                                                 // 2456
      win = topLevelTarget;                                                                                            // 2457
    } else {                                                                                                           // 2458
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                           // 2459
      var doc = topLevelTarget.ownerDocument;                                                                          // 2460
      if (doc) {                                                                                                       // 2461
        win = doc.defaultView || doc.parentWindow;                                                                     // 2462
      } else {                                                                                                         // 2463
        win = window;                                                                                                  // 2464
      }                                                                                                                // 2465
    }                                                                                                                  // 2466
                                                                                                                       // 2467
    var from, to;                                                                                                      // 2468
    if (topLevelType === topLevelTypes.topMouseOut) {                                                                  // 2469
      from = topLevelTarget;                                                                                           // 2470
      to =                                                                                                             // 2471
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||                                        // 2472
        win;                                                                                                           // 2473
    } else {                                                                                                           // 2474
      from = win;                                                                                                      // 2475
      to = topLevelTarget;                                                                                             // 2476
    }                                                                                                                  // 2477
                                                                                                                       // 2478
    if (from === to) {                                                                                                 // 2479
      // Nothing pertains to our managed components.                                                                   // 2480
      return null;                                                                                                     // 2481
    }                                                                                                                  // 2482
                                                                                                                       // 2483
    var fromID = from ? ReactMount.getID(from) : '';                                                                   // 2484
    var toID = to ? ReactMount.getID(to) : '';                                                                         // 2485
                                                                                                                       // 2486
    var leave = SyntheticMouseEvent.getPooled(                                                                         // 2487
      eventTypes.mouseLeave,                                                                                           // 2488
      fromID,                                                                                                          // 2489
      nativeEvent                                                                                                      // 2490
    );                                                                                                                 // 2491
    leave.type = 'mouseleave';                                                                                         // 2492
    leave.target = from;                                                                                               // 2493
    leave.relatedTarget = to;                                                                                          // 2494
                                                                                                                       // 2495
    var enter = SyntheticMouseEvent.getPooled(                                                                         // 2496
      eventTypes.mouseEnter,                                                                                           // 2497
      toID,                                                                                                            // 2498
      nativeEvent                                                                                                      // 2499
    );                                                                                                                 // 2500
    enter.type = 'mouseenter';                                                                                         // 2501
    enter.target = to;                                                                                                 // 2502
    enter.relatedTarget = from;                                                                                        // 2503
                                                                                                                       // 2504
    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);                                       // 2505
                                                                                                                       // 2506
    extractedEvents[0] = leave;                                                                                        // 2507
    extractedEvents[1] = enter;                                                                                        // 2508
                                                                                                                       // 2509
    return extractedEvents;                                                                                            // 2510
  }                                                                                                                    // 2511
                                                                                                                       // 2512
};                                                                                                                     // 2513
                                                                                                                       // 2514
module.exports = EnterLeaveEventPlugin;                                                                                // 2515
                                                                                                                       // 2516
},{"./EventConstants":"react/lib/EventConstants","./EventPropagators":"react/lib/EventPropagators","./ReactMount":"react/lib/ReactMount","./SyntheticMouseEvent":"react/lib/SyntheticMouseEvent","./keyOf":"react/lib/keyOf"}],"react/lib/EventConstants":[function(require,module,exports){
/**                                                                                                                    // 2518
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2519
 * All rights reserved.                                                                                                // 2520
 *                                                                                                                     // 2521
 * This source code is licensed under the BSD-style license found in the                                               // 2522
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 2523
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 2524
 *                                                                                                                     // 2525
 * @providesModule EventConstants                                                                                      // 2526
 */                                                                                                                    // 2527
                                                                                                                       // 2528
'use strict';                                                                                                          // 2529
                                                                                                                       // 2530
var keyMirror = require("./keyMirror");                                                                                // 2531
                                                                                                                       // 2532
var PropagationPhases = keyMirror({bubbled: null, captured: null});                                                    // 2533
                                                                                                                       // 2534
/**                                                                                                                    // 2535
 * Types of raw signals from the browser caught at the top level.                                                      // 2536
 */                                                                                                                    // 2537
var topLevelTypes = keyMirror({                                                                                        // 2538
  topBlur: null,                                                                                                       // 2539
  topChange: null,                                                                                                     // 2540
  topClick: null,                                                                                                      // 2541
  topCompositionEnd: null,                                                                                             // 2542
  topCompositionStart: null,                                                                                           // 2543
  topCompositionUpdate: null,                                                                                          // 2544
  topContextMenu: null,                                                                                                // 2545
  topCopy: null,                                                                                                       // 2546
  topCut: null,                                                                                                        // 2547
  topDoubleClick: null,                                                                                                // 2548
  topDrag: null,                                                                                                       // 2549
  topDragEnd: null,                                                                                                    // 2550
  topDragEnter: null,                                                                                                  // 2551
  topDragExit: null,                                                                                                   // 2552
  topDragLeave: null,                                                                                                  // 2553
  topDragOver: null,                                                                                                   // 2554
  topDragStart: null,                                                                                                  // 2555
  topDrop: null,                                                                                                       // 2556
  topError: null,                                                                                                      // 2557
  topFocus: null,                                                                                                      // 2558
  topInput: null,                                                                                                      // 2559
  topKeyDown: null,                                                                                                    // 2560
  topKeyPress: null,                                                                                                   // 2561
  topKeyUp: null,                                                                                                      // 2562
  topLoad: null,                                                                                                       // 2563
  topMouseDown: null,                                                                                                  // 2564
  topMouseMove: null,                                                                                                  // 2565
  topMouseOut: null,                                                                                                   // 2566
  topMouseOver: null,                                                                                                  // 2567
  topMouseUp: null,                                                                                                    // 2568
  topPaste: null,                                                                                                      // 2569
  topReset: null,                                                                                                      // 2570
  topScroll: null,                                                                                                     // 2571
  topSelectionChange: null,                                                                                            // 2572
  topSubmit: null,                                                                                                     // 2573
  topTextInput: null,                                                                                                  // 2574
  topTouchCancel: null,                                                                                                // 2575
  topTouchEnd: null,                                                                                                   // 2576
  topTouchMove: null,                                                                                                  // 2577
  topTouchStart: null,                                                                                                 // 2578
  topWheel: null                                                                                                       // 2579
});                                                                                                                    // 2580
                                                                                                                       // 2581
var EventConstants = {                                                                                                 // 2582
  topLevelTypes: topLevelTypes,                                                                                        // 2583
  PropagationPhases: PropagationPhases                                                                                 // 2584
};                                                                                                                     // 2585
                                                                                                                       // 2586
module.exports = EventConstants;                                                                                       // 2587
                                                                                                                       // 2588
},{"./keyMirror":"react/lib/keyMirror"}],"react/lib/EventListener":[function(require,module,exports){                  // 2589
(function (process){                                                                                                   // 2590
/**                                                                                                                    // 2591
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2592
 *                                                                                                                     // 2593
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 2594
 * you may not use this file except in compliance with the License.                                                    // 2595
 * You may obtain a copy of the License at                                                                             // 2596
 *                                                                                                                     // 2597
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2598
 *                                                                                                                     // 2599
 * Unless required by applicable law or agreed to in writing, software                                                 // 2600
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 2601
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2602
 * See the License for the specific language governing permissions and                                                 // 2603
 * limitations under the License.                                                                                      // 2604
 *                                                                                                                     // 2605
 * @providesModule EventListener                                                                                       // 2606
 * @typechecks                                                                                                         // 2607
 */                                                                                                                    // 2608
                                                                                                                       // 2609
var emptyFunction = require("./emptyFunction");                                                                        // 2610
                                                                                                                       // 2611
/**                                                                                                                    // 2612
 * Upstream version of event listener. Does not take into account specific                                             // 2613
 * nature of platform.                                                                                                 // 2614
 */                                                                                                                    // 2615
var EventListener = {                                                                                                  // 2616
  /**                                                                                                                  // 2617
   * Listen to DOM events during the bubble phase.                                                                     // 2618
   *                                                                                                                   // 2619
   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 2620
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 2621
   * @param {function} callback Callback function.                                                                     // 2622
   * @return {object} Object with a `remove` method.                                                                   // 2623
   */                                                                                                                  // 2624
  listen: function(target, eventType, callback) {                                                                      // 2625
    if (target.addEventListener) {                                                                                     // 2626
      target.addEventListener(eventType, callback, false);                                                             // 2627
      return {                                                                                                         // 2628
        remove: function() {                                                                                           // 2629
          target.removeEventListener(eventType, callback, false);                                                      // 2630
        }                                                                                                              // 2631
      };                                                                                                               // 2632
    } else if (target.attachEvent) {                                                                                   // 2633
      target.attachEvent('on' + eventType, callback);                                                                  // 2634
      return {                                                                                                         // 2635
        remove: function() {                                                                                           // 2636
          target.detachEvent('on' + eventType, callback);                                                              // 2637
        }                                                                                                              // 2638
      };                                                                                                               // 2639
    }                                                                                                                  // 2640
  },                                                                                                                   // 2641
                                                                                                                       // 2642
  /**                                                                                                                  // 2643
   * Listen to DOM events during the capture phase.                                                                    // 2644
   *                                                                                                                   // 2645
   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 2646
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 2647
   * @param {function} callback Callback function.                                                                     // 2648
   * @return {object} Object with a `remove` method.                                                                   // 2649
   */                                                                                                                  // 2650
  capture: function(target, eventType, callback) {                                                                     // 2651
    if (!target.addEventListener) {                                                                                    // 2652
      if ("production" !== process.env.NODE_ENV) {                                                                     // 2653
        console.error(                                                                                                 // 2654
          'Attempted to listen to events during the capture phase on a ' +                                             // 2655
          'browser that does not support the capture phase. Your application ' +                                       // 2656
          'will not receive some events.'                                                                              // 2657
        );                                                                                                             // 2658
      }                                                                                                                // 2659
      return {                                                                                                         // 2660
        remove: emptyFunction                                                                                          // 2661
      };                                                                                                               // 2662
    } else {                                                                                                           // 2663
      target.addEventListener(eventType, callback, true);                                                              // 2664
      return {                                                                                                         // 2665
        remove: function() {                                                                                           // 2666
          target.removeEventListener(eventType, callback, true);                                                       // 2667
        }                                                                                                              // 2668
      };                                                                                                               // 2669
    }                                                                                                                  // 2670
  },                                                                                                                   // 2671
                                                                                                                       // 2672
  registerDefault: function() {}                                                                                       // 2673
};                                                                                                                     // 2674
                                                                                                                       // 2675
module.exports = EventListener;                                                                                        // 2676
                                                                                                                       // 2677
}).call(this,require('_process'))                                                                                      // 2678
                                                                                                                       // 2679
},{"./emptyFunction":"react/lib/emptyFunction","_process":1}],"react/lib/EventPluginHub":[function(require,module,exports){
(function (process){                                                                                                   // 2681
/**                                                                                                                    // 2682
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2683
 * All rights reserved.                                                                                                // 2684
 *                                                                                                                     // 2685
 * This source code is licensed under the BSD-style license found in the                                               // 2686
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 2687
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 2688
 *                                                                                                                     // 2689
 * @providesModule EventPluginHub                                                                                      // 2690
 */                                                                                                                    // 2691
                                                                                                                       // 2692
'use strict';                                                                                                          // 2693
                                                                                                                       // 2694
var EventPluginRegistry = require("./EventPluginRegistry");                                                            // 2695
var EventPluginUtils = require("./EventPluginUtils");                                                                  // 2696
                                                                                                                       // 2697
var accumulateInto = require("./accumulateInto");                                                                      // 2698
var forEachAccumulated = require("./forEachAccumulated");                                                              // 2699
var invariant = require("./invariant");                                                                                // 2700
                                                                                                                       // 2701
/**                                                                                                                    // 2702
 * Internal store for event listeners                                                                                  // 2703
 */                                                                                                                    // 2704
var listenerBank = {};                                                                                                 // 2705
                                                                                                                       // 2706
/**                                                                                                                    // 2707
 * Internal queue of events that have accumulated their dispatches and are                                             // 2708
 * waiting to have their dispatches executed.                                                                          // 2709
 */                                                                                                                    // 2710
var eventQueue = null;                                                                                                 // 2711
                                                                                                                       // 2712
/**                                                                                                                    // 2713
 * Dispatches an event and releases it back into the pool, unless persistent.                                          // 2714
 *                                                                                                                     // 2715
 * @param {?object} event Synthetic event to be dispatched.                                                            // 2716
 * @private                                                                                                            // 2717
 */                                                                                                                    // 2718
var executeDispatchesAndRelease = function(event) {                                                                    // 2719
  if (event) {                                                                                                         // 2720
    var executeDispatch = EventPluginUtils.executeDispatch;                                                            // 2721
    // Plugins can provide custom behavior when dispatching events.                                                    // 2722
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);                                             // 2723
    if (PluginModule && PluginModule.executeDispatch) {                                                                // 2724
      executeDispatch = PluginModule.executeDispatch;                                                                  // 2725
    }                                                                                                                  // 2726
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);                                                 // 2727
                                                                                                                       // 2728
    if (!event.isPersistent()) {                                                                                       // 2729
      event.constructor.release(event);                                                                                // 2730
    }                                                                                                                  // 2731
  }                                                                                                                    // 2732
};                                                                                                                     // 2733
                                                                                                                       // 2734
/**                                                                                                                    // 2735
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM                                       // 2736
 *   hierarchy given ids of the logical DOM elements involved.                                                         // 2737
 */                                                                                                                    // 2738
var InstanceHandle = null;                                                                                             // 2739
                                                                                                                       // 2740
function validateInstanceHandle() {                                                                                    // 2741
  var valid =                                                                                                          // 2742
    InstanceHandle &&                                                                                                  // 2743
    InstanceHandle.traverseTwoPhase &&                                                                                 // 2744
    InstanceHandle.traverseEnterLeave;                                                                                 // 2745
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 2746
    valid,                                                                                                             // 2747
    'InstanceHandle not injected before use!'                                                                          // 2748
  ) : invariant(valid));                                                                                               // 2749
}                                                                                                                      // 2750
                                                                                                                       // 2751
/**                                                                                                                    // 2752
 * This is a unified interface for event plugins to be installed and configured.                                       // 2753
 *                                                                                                                     // 2754
 * Event plugins can implement the following properties:                                                               // 2755
 *                                                                                                                     // 2756
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}                                             // 2757
 *     Required. When a top-level event is fired, this method is expected to                                           // 2758
 *     extract synthetic events that will in turn be queued and dispatched.                                            // 2759
 *                                                                                                                     // 2760
 *   `eventTypes` {object}                                                                                             // 2761
 *     Optional, plugins that fire events must publish a mapping of registration                                       // 2762
 *     names that are used to register listeners. Values of this mapping must                                          // 2763
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.                                        // 2764
 *                                                                                                                     // 2765
 *   `executeDispatch` {function(object, function, string)}                                                            // 2766
 *     Optional, allows plugins to override how an event gets dispatched. By                                           // 2767
 *     default, the listener is simply invoked.                                                                        // 2768
 *                                                                                                                     // 2769
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.                                        // 2770
 *                                                                                                                     // 2771
 * @public                                                                                                             // 2772
 */                                                                                                                    // 2773
var EventPluginHub = {                                                                                                 // 2774
                                                                                                                       // 2775
  /**                                                                                                                  // 2776
   * Methods for injecting dependencies.                                                                               // 2777
   */                                                                                                                  // 2778
  injection: {                                                                                                         // 2779
                                                                                                                       // 2780
    /**                                                                                                                // 2781
     * @param {object} InjectedMount                                                                                   // 2782
     * @public                                                                                                         // 2783
     */                                                                                                                // 2784
    injectMount: EventPluginUtils.injection.injectMount,                                                               // 2785
                                                                                                                       // 2786
    /**                                                                                                                // 2787
     * @param {object} InjectedInstanceHandle                                                                          // 2788
     * @public                                                                                                         // 2789
     */                                                                                                                // 2790
    injectInstanceHandle: function(InjectedInstanceHandle) {                                                           // 2791
      InstanceHandle = InjectedInstanceHandle;                                                                         // 2792
      if ("production" !== process.env.NODE_ENV) {                                                                     // 2793
        validateInstanceHandle();                                                                                      // 2794
      }                                                                                                                // 2795
    },                                                                                                                 // 2796
                                                                                                                       // 2797
    getInstanceHandle: function() {                                                                                    // 2798
      if ("production" !== process.env.NODE_ENV) {                                                                     // 2799
        validateInstanceHandle();                                                                                      // 2800
      }                                                                                                                // 2801
      return InstanceHandle;                                                                                           // 2802
    },                                                                                                                 // 2803
                                                                                                                       // 2804
    /**                                                                                                                // 2805
     * @param {array} InjectedEventPluginOrder                                                                         // 2806
     * @public                                                                                                         // 2807
     */                                                                                                                // 2808
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,                                                // 2809
                                                                                                                       // 2810
    /**                                                                                                                // 2811
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                        // 2812
     */                                                                                                                // 2813
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName                                             // 2814
                                                                                                                       // 2815
  },                                                                                                                   // 2816
                                                                                                                       // 2817
  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,                                              // 2818
                                                                                                                       // 2819
  registrationNameModules: EventPluginRegistry.registrationNameModules,                                                // 2820
                                                                                                                       // 2821
  /**                                                                                                                  // 2822
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.                                         // 2823
   *                                                                                                                   // 2824
   * @param {string} id ID of the DOM element.                                                                         // 2825
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 2826
   * @param {?function} listener The callback to store.                                                                // 2827
   */                                                                                                                  // 2828
  putListener: function(id, registrationName, listener) {                                                              // 2829
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 2830
      !listener || typeof listener === 'function',                                                                     // 2831
      'Expected %s listener to be a function, instead got type %s',                                                    // 2832
      registrationName, typeof listener                                                                                // 2833
    ) : invariant(!listener || typeof listener === 'function'));                                                       // 2834
                                                                                                                       // 2835
    var bankForRegistrationName =                                                                                      // 2836
      listenerBank[registrationName] || (listenerBank[registrationName] = {});                                         // 2837
    bankForRegistrationName[id] = listener;                                                                            // 2838
  },                                                                                                                   // 2839
                                                                                                                       // 2840
  /**                                                                                                                  // 2841
   * @param {string} id ID of the DOM element.                                                                         // 2842
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 2843
   * @return {?function} The stored callback.                                                                          // 2844
   */                                                                                                                  // 2845
  getListener: function(id, registrationName) {                                                                        // 2846
    var bankForRegistrationName = listenerBank[registrationName];                                                      // 2847
    return bankForRegistrationName && bankForRegistrationName[id];                                                     // 2848
  },                                                                                                                   // 2849
                                                                                                                       // 2850
  /**                                                                                                                  // 2851
   * Deletes a listener from the registration bank.                                                                    // 2852
   *                                                                                                                   // 2853
   * @param {string} id ID of the DOM element.                                                                         // 2854
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 2855
   */                                                                                                                  // 2856
  deleteListener: function(id, registrationName) {                                                                     // 2857
    var bankForRegistrationName = listenerBank[registrationName];                                                      // 2858
    if (bankForRegistrationName) {                                                                                     // 2859
      delete bankForRegistrationName[id];                                                                              // 2860
    }                                                                                                                  // 2861
  },                                                                                                                   // 2862
                                                                                                                       // 2863
  /**                                                                                                                  // 2864
   * Deletes all listeners for the DOM element with the supplied ID.                                                   // 2865
   *                                                                                                                   // 2866
   * @param {string} id ID of the DOM element.                                                                         // 2867
   */                                                                                                                  // 2868
  deleteAllListeners: function(id) {                                                                                   // 2869
    for (var registrationName in listenerBank) {                                                                       // 2870
      delete listenerBank[registrationName][id];                                                                       // 2871
    }                                                                                                                  // 2872
  },                                                                                                                   // 2873
                                                                                                                       // 2874
  /**                                                                                                                  // 2875
   * Allows registered plugins an opportunity to extract events from top-level                                         // 2876
   * native browser events.                                                                                            // 2877
   *                                                                                                                   // 2878
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 2879
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 2880
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 2881
   * @param {object} nativeEvent Native browser event.                                                                 // 2882
   * @return {*} An accumulation of synthetic events.                                                                  // 2883
   * @internal                                                                                                         // 2884
   */                                                                                                                  // 2885
  extractEvents: function(                                                                                             // 2886
      topLevelType,                                                                                                    // 2887
      topLevelTarget,                                                                                                  // 2888
      topLevelTargetID,                                                                                                // 2889
      nativeEvent) {                                                                                                   // 2890
    var events;                                                                                                        // 2891
    var plugins = EventPluginRegistry.plugins;                                                                         // 2892
    for (var i = 0, l = plugins.length; i < l; i++) {                                                                  // 2893
      // Not every plugin in the ordering may be loaded at runtime.                                                    // 2894
      var possiblePlugin = plugins[i];                                                                                 // 2895
      if (possiblePlugin) {                                                                                            // 2896
        var extractedEvents = possiblePlugin.extractEvents(                                                            // 2897
          topLevelType,                                                                                                // 2898
          topLevelTarget,                                                                                              // 2899
          topLevelTargetID,                                                                                            // 2900
          nativeEvent                                                                                                  // 2901
        );                                                                                                             // 2902
        if (extractedEvents) {                                                                                         // 2903
          events = accumulateInto(events, extractedEvents);                                                            // 2904
        }                                                                                                              // 2905
      }                                                                                                                // 2906
    }                                                                                                                  // 2907
    return events;                                                                                                     // 2908
  },                                                                                                                   // 2909
                                                                                                                       // 2910
  /**                                                                                                                  // 2911
   * Enqueues a synthetic event that should be dispatched when                                                         // 2912
   * `processEventQueue` is invoked.                                                                                   // 2913
   *                                                                                                                   // 2914
   * @param {*} events An accumulation of synthetic events.                                                            // 2915
   * @internal                                                                                                         // 2916
   */                                                                                                                  // 2917
  enqueueEvents: function(events) {                                                                                    // 2918
    if (events) {                                                                                                      // 2919
      eventQueue = accumulateInto(eventQueue, events);                                                                 // 2920
    }                                                                                                                  // 2921
  },                                                                                                                   // 2922
                                                                                                                       // 2923
  /**                                                                                                                  // 2924
   * Dispatches all synthetic events on the event queue.                                                               // 2925
   *                                                                                                                   // 2926
   * @internal                                                                                                         // 2927
   */                                                                                                                  // 2928
  processEventQueue: function() {                                                                                      // 2929
    // Set `eventQueue` to null before processing it so that we can tell if more                                       // 2930
    // events get enqueued while processing.                                                                           // 2931
    var processingEventQueue = eventQueue;                                                                             // 2932
    eventQueue = null;                                                                                                 // 2933
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);                                             // 2934
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 2935
      !eventQueue,                                                                                                     // 2936
      'processEventQueue(): Additional events were enqueued while processing ' +                                       // 2937
      'an event queue. Support for this has not yet been implemented.'                                                 // 2938
    ) : invariant(!eventQueue));                                                                                       // 2939
  },                                                                                                                   // 2940
                                                                                                                       // 2941
  /**                                                                                                                  // 2942
   * These are needed for tests only. Do not use!                                                                      // 2943
   */                                                                                                                  // 2944
  __purge: function() {                                                                                                // 2945
    listenerBank = {};                                                                                                 // 2946
  },                                                                                                                   // 2947
                                                                                                                       // 2948
  __getListenerBank: function() {                                                                                      // 2949
    return listenerBank;                                                                                               // 2950
  }                                                                                                                    // 2951
                                                                                                                       // 2952
};                                                                                                                     // 2953
                                                                                                                       // 2954
module.exports = EventPluginHub;                                                                                       // 2955
                                                                                                                       // 2956
}).call(this,require('_process'))                                                                                      // 2957
                                                                                                                       // 2958
},{"./EventPluginRegistry":"react/lib/EventPluginRegistry","./EventPluginUtils":"react/lib/EventPluginUtils","./accumulateInto":"react/lib/accumulateInto","./forEachAccumulated":"react/lib/forEachAccumulated","./invariant":"react/lib/invariant","_process":1}],"react/lib/EventPluginRegistry":[function(require,module,exports){
(function (process){                                                                                                   // 2960
/**                                                                                                                    // 2961
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2962
 * All rights reserved.                                                                                                // 2963
 *                                                                                                                     // 2964
 * This source code is licensed under the BSD-style license found in the                                               // 2965
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 2966
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 2967
 *                                                                                                                     // 2968
 * @providesModule EventPluginRegistry                                                                                 // 2969
 * @typechecks static-only                                                                                             // 2970
 */                                                                                                                    // 2971
                                                                                                                       // 2972
'use strict';                                                                                                          // 2973
                                                                                                                       // 2974
var invariant = require("./invariant");                                                                                // 2975
                                                                                                                       // 2976
/**                                                                                                                    // 2977
 * Injectable ordering of event plugins.                                                                               // 2978
 */                                                                                                                    // 2979
var EventPluginOrder = null;                                                                                           // 2980
                                                                                                                       // 2981
/**                                                                                                                    // 2982
 * Injectable mapping from names to event plugin modules.                                                              // 2983
 */                                                                                                                    // 2984
var namesToPlugins = {};                                                                                               // 2985
                                                                                                                       // 2986
/**                                                                                                                    // 2987
 * Recomputes the plugin list using the injected plugins and plugin ordering.                                          // 2988
 *                                                                                                                     // 2989
 * @private                                                                                                            // 2990
 */                                                                                                                    // 2991
function recomputePluginOrdering() {                                                                                   // 2992
  if (!EventPluginOrder) {                                                                                             // 2993
    // Wait until an `EventPluginOrder` is injected.                                                                   // 2994
    return;                                                                                                            // 2995
  }                                                                                                                    // 2996
  for (var pluginName in namesToPlugins) {                                                                             // 2997
    var PluginModule = namesToPlugins[pluginName];                                                                     // 2998
    var pluginIndex = EventPluginOrder.indexOf(pluginName);                                                            // 2999
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 3000
      pluginIndex > -1,                                                                                                // 3001
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +                                       // 3002
      'the plugin ordering, `%s`.',                                                                                    // 3003
      pluginName                                                                                                       // 3004
    ) : invariant(pluginIndex > -1));                                                                                  // 3005
    if (EventPluginRegistry.plugins[pluginIndex]) {                                                                    // 3006
      continue;                                                                                                        // 3007
    }                                                                                                                  // 3008
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 3009
      PluginModule.extractEvents,                                                                                      // 3010
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +                                        // 3011
      'method, but `%s` does not.',                                                                                    // 3012
      pluginName                                                                                                       // 3013
    ) : invariant(PluginModule.extractEvents));                                                                        // 3014
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;                                                           // 3015
    var publishedEvents = PluginModule.eventTypes;                                                                     // 3016
    for (var eventName in publishedEvents) {                                                                           // 3017
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 3018
        publishEventForPlugin(                                                                                         // 3019
          publishedEvents[eventName],                                                                                  // 3020
          PluginModule,                                                                                                // 3021
          eventName                                                                                                    // 3022
        ),                                                                                                             // 3023
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',                                          // 3024
        eventName,                                                                                                     // 3025
        pluginName                                                                                                     // 3026
      ) : invariant(publishEventForPlugin(                                                                             // 3027
        publishedEvents[eventName],                                                                                    // 3028
        PluginModule,                                                                                                  // 3029
        eventName                                                                                                      // 3030
      )));                                                                                                             // 3031
    }                                                                                                                  // 3032
  }                                                                                                                    // 3033
}                                                                                                                      // 3034
                                                                                                                       // 3035
/**                                                                                                                    // 3036
 * Publishes an event so that it can be dispatched by the supplied plugin.                                             // 3037
 *                                                                                                                     // 3038
 * @param {object} dispatchConfig Dispatch configuration for the event.                                                // 3039
 * @param {object} PluginModule Plugin publishing the event.                                                           // 3040
 * @return {boolean} True if the event was successfully published.                                                     // 3041
 * @private                                                                                                            // 3042
 */                                                                                                                    // 3043
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {                                              // 3044
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 3045
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),                                           // 3046
    'EventPluginHub: More than one plugin attempted to publish the same ' +                                            // 3047
    'event name, `%s`.',                                                                                               // 3048
    eventName                                                                                                          // 3049
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));                             // 3050
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;                                            // 3051
                                                                                                                       // 3052
  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;                                                // 3053
  if (phasedRegistrationNames) {                                                                                       // 3054
    for (var phaseName in phasedRegistrationNames) {                                                                   // 3055
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {                                                         // 3056
        var phasedRegistrationName = phasedRegistrationNames[phaseName];                                               // 3057
        publishRegistrationName(                                                                                       // 3058
          phasedRegistrationName,                                                                                      // 3059
          PluginModule,                                                                                                // 3060
          eventName                                                                                                    // 3061
        );                                                                                                             // 3062
      }                                                                                                                // 3063
    }                                                                                                                  // 3064
    return true;                                                                                                       // 3065
  } else if (dispatchConfig.registrationName) {                                                                        // 3066
    publishRegistrationName(                                                                                           // 3067
      dispatchConfig.registrationName,                                                                                 // 3068
      PluginModule,                                                                                                    // 3069
      eventName                                                                                                        // 3070
    );                                                                                                                 // 3071
    return true;                                                                                                       // 3072
  }                                                                                                                    // 3073
  return false;                                                                                                        // 3074
}                                                                                                                      // 3075
                                                                                                                       // 3076
/**                                                                                                                    // 3077
 * Publishes a registration name that is used to identify dispatched events and                                        // 3078
 * can be used with `EventPluginHub.putListener` to register listeners.                                                // 3079
 *                                                                                                                     // 3080
 * @param {string} registrationName Registration name to add.                                                          // 3081
 * @param {object} PluginModule Plugin publishing the event.                                                           // 3082
 * @private                                                                                                            // 3083
 */                                                                                                                    // 3084
function publishRegistrationName(registrationName, PluginModule, eventName) {                                          // 3085
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 3086
    !EventPluginRegistry.registrationNameModules[registrationName],                                                    // 3087
    'EventPluginHub: More than one plugin attempted to publish the same ' +                                            // 3088
    'registration name, `%s`.',                                                                                        // 3089
    registrationName                                                                                                   // 3090
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));                                      // 3091
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;                                        // 3092
  EventPluginRegistry.registrationNameDependencies[registrationName] =                                                 // 3093
    PluginModule.eventTypes[eventName].dependencies;                                                                   // 3094
}                                                                                                                      // 3095
                                                                                                                       // 3096
/**                                                                                                                    // 3097
 * Registers plugins so that they can extract and dispatch events.                                                     // 3098
 *                                                                                                                     // 3099
 * @see {EventPluginHub}                                                                                               // 3100
 */                                                                                                                    // 3101
var EventPluginRegistry = {                                                                                            // 3102
                                                                                                                       // 3103
  /**                                                                                                                  // 3104
   * Ordered list of injected plugins.                                                                                 // 3105
   */                                                                                                                  // 3106
  plugins: [],                                                                                                         // 3107
                                                                                                                       // 3108
  /**                                                                                                                  // 3109
   * Mapping from event name to dispatch config                                                                        // 3110
   */                                                                                                                  // 3111
  eventNameDispatchConfigs: {},                                                                                        // 3112
                                                                                                                       // 3113
  /**                                                                                                                  // 3114
   * Mapping from registration name to plugin module                                                                   // 3115
   */                                                                                                                  // 3116
  registrationNameModules: {},                                                                                         // 3117
                                                                                                                       // 3118
  /**                                                                                                                  // 3119
   * Mapping from registration name to event name                                                                      // 3120
   */                                                                                                                  // 3121
  registrationNameDependencies: {},                                                                                    // 3122
                                                                                                                       // 3123
  /**                                                                                                                  // 3124
   * Injects an ordering of plugins (by plugin name). This allows the ordering                                         // 3125
   * to be decoupled from injection of the actual plugins so that ordering is                                          // 3126
   * always deterministic regardless of packaging, on-the-fly injection, etc.                                          // 3127
   *                                                                                                                   // 3128
   * @param {array} InjectedEventPluginOrder                                                                           // 3129
   * @internal                                                                                                         // 3130
   * @see {EventPluginHub.injection.injectEventPluginOrder}                                                            // 3131
   */                                                                                                                  // 3132
  injectEventPluginOrder: function(InjectedEventPluginOrder) {                                                         // 3133
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 3134
      !EventPluginOrder,                                                                                               // 3135
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +                                          // 3136
      'once. You are likely trying to load more than one copy of React.'                                               // 3137
    ) : invariant(!EventPluginOrder));                                                                                 // 3138
    // Clone the ordering so it cannot be dynamically mutated.                                                         // 3139
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);                                           // 3140
    recomputePluginOrdering();                                                                                         // 3141
  },                                                                                                                   // 3142
                                                                                                                       // 3143
  /**                                                                                                                  // 3144
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be                                          // 3145
   * in the ordering injected by `injectEventPluginOrder`.                                                             // 3146
   *                                                                                                                   // 3147
   * Plugins can be injected as part of page initialization or on-the-fly.                                             // 3148
   *                                                                                                                   // 3149
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                          // 3150
   * @internal                                                                                                         // 3151
   * @see {EventPluginHub.injection.injectEventPluginsByName}                                                          // 3152
   */                                                                                                                  // 3153
  injectEventPluginsByName: function(injectedNamesToPlugins) {                                                         // 3154
    var isOrderingDirty = false;                                                                                       // 3155
    for (var pluginName in injectedNamesToPlugins) {                                                                   // 3156
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {                                                        // 3157
        continue;                                                                                                      // 3158
      }                                                                                                                // 3159
      var PluginModule = injectedNamesToPlugins[pluginName];                                                           // 3160
      if (!namesToPlugins.hasOwnProperty(pluginName) ||                                                                // 3161
          namesToPlugins[pluginName] !== PluginModule) {                                                               // 3162
        ("production" !== process.env.NODE_ENV ? invariant(                                                            // 3163
          !namesToPlugins[pluginName],                                                                                 // 3164
          'EventPluginRegistry: Cannot inject two different event plugins ' +                                          // 3165
          'using the same name, `%s`.',                                                                                // 3166
          pluginName                                                                                                   // 3167
        ) : invariant(!namesToPlugins[pluginName]));                                                                   // 3168
        namesToPlugins[pluginName] = PluginModule;                                                                     // 3169
        isOrderingDirty = true;                                                                                        // 3170
      }                                                                                                                // 3171
    }                                                                                                                  // 3172
    if (isOrderingDirty) {                                                                                             // 3173
      recomputePluginOrdering();                                                                                       // 3174
    }                                                                                                                  // 3175
  },                                                                                                                   // 3176
                                                                                                                       // 3177
  /**                                                                                                                  // 3178
   * Looks up the plugin for the supplied event.                                                                       // 3179
   *                                                                                                                   // 3180
   * @param {object} event A synthetic event.                                                                          // 3181
   * @return {?object} The plugin that created the supplied event.                                                     // 3182
   * @internal                                                                                                         // 3183
   */                                                                                                                  // 3184
  getPluginModuleForEvent: function(event) {                                                                           // 3185
    var dispatchConfig = event.dispatchConfig;                                                                         // 3186
    if (dispatchConfig.registrationName) {                                                                             // 3187
      return EventPluginRegistry.registrationNameModules[                                                              // 3188
        dispatchConfig.registrationName                                                                                // 3189
      ] || null;                                                                                                       // 3190
    }                                                                                                                  // 3191
    for (var phase in dispatchConfig.phasedRegistrationNames) {                                                        // 3192
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {                                             // 3193
        continue;                                                                                                      // 3194
      }                                                                                                                // 3195
      var PluginModule = EventPluginRegistry.registrationNameModules[                                                  // 3196
        dispatchConfig.phasedRegistrationNames[phase]                                                                  // 3197
      ];                                                                                                               // 3198
      if (PluginModule) {                                                                                              // 3199
        return PluginModule;                                                                                           // 3200
      }                                                                                                                // 3201
    }                                                                                                                  // 3202
    return null;                                                                                                       // 3203
  },                                                                                                                   // 3204
                                                                                                                       // 3205
  /**                                                                                                                  // 3206
   * Exposed for unit testing.                                                                                         // 3207
   * @private                                                                                                          // 3208
   */                                                                                                                  // 3209
  _resetEventPlugins: function() {                                                                                     // 3210
    EventPluginOrder = null;                                                                                           // 3211
    for (var pluginName in namesToPlugins) {                                                                           // 3212
      if (namesToPlugins.hasOwnProperty(pluginName)) {                                                                 // 3213
        delete namesToPlugins[pluginName];                                                                             // 3214
      }                                                                                                                // 3215
    }                                                                                                                  // 3216
    EventPluginRegistry.plugins.length = 0;                                                                            // 3217
                                                                                                                       // 3218
    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;                                       // 3219
    for (var eventName in eventNameDispatchConfigs) {                                                                  // 3220
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {                                                        // 3221
        delete eventNameDispatchConfigs[eventName];                                                                    // 3222
      }                                                                                                                // 3223
    }                                                                                                                  // 3224
                                                                                                                       // 3225
    var registrationNameModules = EventPluginRegistry.registrationNameModules;                                         // 3226
    for (var registrationName in registrationNameModules) {                                                            // 3227
      if (registrationNameModules.hasOwnProperty(registrationName)) {                                                  // 3228
        delete registrationNameModules[registrationName];                                                              // 3229
      }                                                                                                                // 3230
    }                                                                                                                  // 3231
  }                                                                                                                    // 3232
                                                                                                                       // 3233
};                                                                                                                     // 3234
                                                                                                                       // 3235
module.exports = EventPluginRegistry;                                                                                  // 3236
                                                                                                                       // 3237
}).call(this,require('_process'))                                                                                      // 3238
                                                                                                                       // 3239
},{"./invariant":"react/lib/invariant","_process":1}],"react/lib/EventPluginUtils":[function(require,module,exports){  // 3240
(function (process){                                                                                                   // 3241
/**                                                                                                                    // 3242
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3243
 * All rights reserved.                                                                                                // 3244
 *                                                                                                                     // 3245
 * This source code is licensed under the BSD-style license found in the                                               // 3246
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 3247
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 3248
 *                                                                                                                     // 3249
 * @providesModule EventPluginUtils                                                                                    // 3250
 */                                                                                                                    // 3251
                                                                                                                       // 3252
'use strict';                                                                                                          // 3253
                                                                                                                       // 3254
var EventConstants = require("./EventConstants");                                                                      // 3255
                                                                                                                       // 3256
var invariant = require("./invariant");                                                                                // 3257
                                                                                                                       // 3258
/**                                                                                                                    // 3259
 * Injected dependencies:                                                                                              // 3260
 */                                                                                                                    // 3261
                                                                                                                       // 3262
/**                                                                                                                    // 3263
 * - `Mount`: [required] Module that can convert between React dom IDs and                                             // 3264
 *   actual node references.                                                                                           // 3265
 */                                                                                                                    // 3266
var injection = {                                                                                                      // 3267
  Mount: null,                                                                                                         // 3268
  injectMount: function(InjectedMount) {                                                                               // 3269
    injection.Mount = InjectedMount;                                                                                   // 3270
    if ("production" !== process.env.NODE_ENV) {                                                                       // 3271
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 3272
        InjectedMount && InjectedMount.getNode,                                                                        // 3273
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +                                        // 3274
        'is missing getNode.'                                                                                          // 3275
      ) : invariant(InjectedMount && InjectedMount.getNode));                                                          // 3276
    }                                                                                                                  // 3277
  }                                                                                                                    // 3278
};                                                                                                                     // 3279
                                                                                                                       // 3280
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 3281
                                                                                                                       // 3282
function isEndish(topLevelType) {                                                                                      // 3283
  return topLevelType === topLevelTypes.topMouseUp ||                                                                  // 3284
         topLevelType === topLevelTypes.topTouchEnd ||                                                                 // 3285
         topLevelType === topLevelTypes.topTouchCancel;                                                                // 3286
}                                                                                                                      // 3287
                                                                                                                       // 3288
function isMoveish(topLevelType) {                                                                                     // 3289
  return topLevelType === topLevelTypes.topMouseMove ||                                                                // 3290
         topLevelType === topLevelTypes.topTouchMove;                                                                  // 3291
}                                                                                                                      // 3292
function isStartish(topLevelType) {                                                                                    // 3293
  return topLevelType === topLevelTypes.topMouseDown ||                                                                // 3294
         topLevelType === topLevelTypes.topTouchStart;                                                                 // 3295
}                                                                                                                      // 3296
                                                                                                                       // 3297
                                                                                                                       // 3298
var validateEventDispatches;                                                                                           // 3299
if ("production" !== process.env.NODE_ENV) {                                                                           // 3300
  validateEventDispatches = function(event) {                                                                          // 3301
    var dispatchListeners = event._dispatchListeners;                                                                  // 3302
    var dispatchIDs = event._dispatchIDs;                                                                              // 3303
                                                                                                                       // 3304
    var listenersIsArr = Array.isArray(dispatchListeners);                                                             // 3305
    var idsIsArr = Array.isArray(dispatchIDs);                                                                         // 3306
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;                                                  // 3307
    var listenersLen = listenersIsArr ?                                                                                // 3308
      dispatchListeners.length :                                                                                       // 3309
      dispatchListeners ? 1 : 0;                                                                                       // 3310
                                                                                                                       // 3311
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 3312
      idsIsArr === listenersIsArr && IDsLen === listenersLen,                                                          // 3313
      'EventPluginUtils: Invalid `event`.'                                                                             // 3314
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));                                            // 3315
  };                                                                                                                   // 3316
}                                                                                                                      // 3317
                                                                                                                       // 3318
/**                                                                                                                    // 3319
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is                                                 // 3320
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are                                         // 3321
 * kept separate to conserve memory.                                                                                   // 3322
 */                                                                                                                    // 3323
function forEachEventDispatch(event, cb) {                                                                             // 3324
  var dispatchListeners = event._dispatchListeners;                                                                    // 3325
  var dispatchIDs = event._dispatchIDs;                                                                                // 3326
  if ("production" !== process.env.NODE_ENV) {                                                                         // 3327
    validateEventDispatches(event);                                                                                    // 3328
  }                                                                                                                    // 3329
  if (Array.isArray(dispatchListeners)) {                                                                              // 3330
    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 3331
      if (event.isPropagationStopped()) {                                                                              // 3332
        break;                                                                                                         // 3333
      }                                                                                                                // 3334
      // Listeners and IDs are two parallel arrays that are always in sync.                                            // 3335
      cb(event, dispatchListeners[i], dispatchIDs[i]);                                                                 // 3336
    }                                                                                                                  // 3337
  } else if (dispatchListeners) {                                                                                      // 3338
    cb(event, dispatchListeners, dispatchIDs);                                                                         // 3339
  }                                                                                                                    // 3340
}                                                                                                                      // 3341
                                                                                                                       // 3342
/**                                                                                                                    // 3343
 * Default implementation of PluginModule.executeDispatch().                                                           // 3344
 * @param {SyntheticEvent} SyntheticEvent to handle                                                                    // 3345
 * @param {function} Application-level callback                                                                        // 3346
 * @param {string} domID DOM id to pass to the callback.                                                               // 3347
 */                                                                                                                    // 3348
function executeDispatch(event, listener, domID) {                                                                     // 3349
  event.currentTarget = injection.Mount.getNode(domID);                                                                // 3350
  var returnValue = listener(event, domID);                                                                            // 3351
  event.currentTarget = null;                                                                                          // 3352
  return returnValue;                                                                                                  // 3353
}                                                                                                                      // 3354
                                                                                                                       // 3355
/**                                                                                                                    // 3356
 * Standard/simple iteration through an event's collected dispatches.                                                  // 3357
 */                                                                                                                    // 3358
function executeDispatchesInOrder(event, cb) {                                                                         // 3359
  forEachEventDispatch(event, cb);                                                                                     // 3360
  event._dispatchListeners = null;                                                                                     // 3361
  event._dispatchIDs = null;                                                                                           // 3362
}                                                                                                                      // 3363
                                                                                                                       // 3364
/**                                                                                                                    // 3365
 * Standard/simple iteration through an event's collected dispatches, but stops                                        // 3366
 * at the first dispatch execution returning true, and returns that id.                                                // 3367
 *                                                                                                                     // 3368
 * @return id of the first dispatch execution who's listener returns true, or                                          // 3369
 * null if no listener returned true.                                                                                  // 3370
 */                                                                                                                    // 3371
function executeDispatchesInOrderStopAtTrueImpl(event) {                                                               // 3372
  var dispatchListeners = event._dispatchListeners;                                                                    // 3373
  var dispatchIDs = event._dispatchIDs;                                                                                // 3374
  if ("production" !== process.env.NODE_ENV) {                                                                         // 3375
    validateEventDispatches(event);                                                                                    // 3376
  }                                                                                                                    // 3377
  if (Array.isArray(dispatchListeners)) {                                                                              // 3378
    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 3379
      if (event.isPropagationStopped()) {                                                                              // 3380
        break;                                                                                                         // 3381
      }                                                                                                                // 3382
      // Listeners and IDs are two parallel arrays that are always in sync.                                            // 3383
      if (dispatchListeners[i](event, dispatchIDs[i])) {                                                               // 3384
        return dispatchIDs[i];                                                                                         // 3385
      }                                                                                                                // 3386
    }                                                                                                                  // 3387
  } else if (dispatchListeners) {                                                                                      // 3388
    if (dispatchListeners(event, dispatchIDs)) {                                                                       // 3389
      return dispatchIDs;                                                                                              // 3390
    }                                                                                                                  // 3391
  }                                                                                                                    // 3392
  return null;                                                                                                         // 3393
}                                                                                                                      // 3394
                                                                                                                       // 3395
/**                                                                                                                    // 3396
 * @see executeDispatchesInOrderStopAtTrueImpl                                                                         // 3397
 */                                                                                                                    // 3398
function executeDispatchesInOrderStopAtTrue(event) {                                                                   // 3399
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);                                                             // 3400
  event._dispatchIDs = null;                                                                                           // 3401
  event._dispatchListeners = null;                                                                                     // 3402
  return ret;                                                                                                          // 3403
}                                                                                                                      // 3404
                                                                                                                       // 3405
/**                                                                                                                    // 3406
 * Execution of a "direct" dispatch - there must be at most one dispatch                                               // 3407
 * accumulated on the event or it is considered an error. It doesn't really make                                       // 3408
 * sense for an event with multiple dispatches (bubbled) to keep track of the                                          // 3409
 * return values at each dispatch execution, but it does tend to make sense when                                       // 3410
 * dealing with "direct" dispatches.                                                                                   // 3411
 *                                                                                                                     // 3412
 * @return The return value of executing the single dispatch.                                                          // 3413
 */                                                                                                                    // 3414
function executeDirectDispatch(event) {                                                                                // 3415
  if ("production" !== process.env.NODE_ENV) {                                                                         // 3416
    validateEventDispatches(event);                                                                                    // 3417
  }                                                                                                                    // 3418
  var dispatchListener = event._dispatchListeners;                                                                     // 3419
  var dispatchID = event._dispatchIDs;                                                                                 // 3420
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 3421
    !Array.isArray(dispatchListener),                                                                                  // 3422
    'executeDirectDispatch(...): Invalid `event`.'                                                                     // 3423
  ) : invariant(!Array.isArray(dispatchListener)));                                                                    // 3424
  var res = dispatchListener ?                                                                                         // 3425
    dispatchListener(event, dispatchID) :                                                                              // 3426
    null;                                                                                                              // 3427
  event._dispatchListeners = null;                                                                                     // 3428
  event._dispatchIDs = null;                                                                                           // 3429
  return res;                                                                                                          // 3430
}                                                                                                                      // 3431
                                                                                                                       // 3432
/**                                                                                                                    // 3433
 * @param {SyntheticEvent} event                                                                                       // 3434
 * @return {bool} True iff number of dispatches accumulated is greater than 0.                                         // 3435
 */                                                                                                                    // 3436
function hasDispatches(event) {                                                                                        // 3437
  return !!event._dispatchListeners;                                                                                   // 3438
}                                                                                                                      // 3439
                                                                                                                       // 3440
/**                                                                                                                    // 3441
 * General utilities that are useful in creating custom Event Plugins.                                                 // 3442
 */                                                                                                                    // 3443
var EventPluginUtils = {                                                                                               // 3444
  isEndish: isEndish,                                                                                                  // 3445
  isMoveish: isMoveish,                                                                                                // 3446
  isStartish: isStartish,                                                                                              // 3447
                                                                                                                       // 3448
  executeDirectDispatch: executeDirectDispatch,                                                                        // 3449
  executeDispatch: executeDispatch,                                                                                    // 3450
  executeDispatchesInOrder: executeDispatchesInOrder,                                                                  // 3451
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,                                              // 3452
  hasDispatches: hasDispatches,                                                                                        // 3453
  injection: injection,                                                                                                // 3454
  useTouchEvents: false                                                                                                // 3455
};                                                                                                                     // 3456
                                                                                                                       // 3457
module.exports = EventPluginUtils;                                                                                     // 3458
                                                                                                                       // 3459
}).call(this,require('_process'))                                                                                      // 3460
                                                                                                                       // 3461
},{"./EventConstants":"react/lib/EventConstants","./invariant":"react/lib/invariant","_process":1}],"react/lib/EventPropagators":[function(require,module,exports){
(function (process){                                                                                                   // 3463
/**                                                                                                                    // 3464
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3465
 * All rights reserved.                                                                                                // 3466
 *                                                                                                                     // 3467
 * This source code is licensed under the BSD-style license found in the                                               // 3468
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 3469
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 3470
 *                                                                                                                     // 3471
 * @providesModule EventPropagators                                                                                    // 3472
 */                                                                                                                    // 3473
                                                                                                                       // 3474
'use strict';                                                                                                          // 3475
                                                                                                                       // 3476
var EventConstants = require("./EventConstants");                                                                      // 3477
var EventPluginHub = require("./EventPluginHub");                                                                      // 3478
                                                                                                                       // 3479
var accumulateInto = require("./accumulateInto");                                                                      // 3480
var forEachAccumulated = require("./forEachAccumulated");                                                              // 3481
                                                                                                                       // 3482
var PropagationPhases = EventConstants.PropagationPhases;                                                              // 3483
var getListener = EventPluginHub.getListener;                                                                          // 3484
                                                                                                                       // 3485
/**                                                                                                                    // 3486
 * Some event types have a notion of different registration names for different                                        // 3487
 * "phases" of propagation. This finds listeners by a given phase.                                                     // 3488
 */                                                                                                                    // 3489
function listenerAtPhase(id, event, propagationPhase) {                                                                // 3490
  var registrationName =                                                                                               // 3491
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];                                                    // 3492
  return getListener(id, registrationName);                                                                            // 3493
}                                                                                                                      // 3494
                                                                                                                       // 3495
/**                                                                                                                    // 3496
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function                                           // 3497
 * here, allows us to not have to bind or create functions for each event.                                             // 3498
 * Mutating the event's members allows us to not have to create a wrapping                                             // 3499
 * "dispatch" object that pairs the event with the listener.                                                           // 3500
 */                                                                                                                    // 3501
function accumulateDirectionalDispatches(domID, upwards, event) {                                                      // 3502
  if ("production" !== process.env.NODE_ENV) {                                                                         // 3503
    if (!domID) {                                                                                                      // 3504
      throw new Error('Dispatching id must not be null');                                                              // 3505
    }                                                                                                                  // 3506
  }                                                                                                                    // 3507
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;                                        // 3508
  var listener = listenerAtPhase(domID, event, phase);                                                                 // 3509
  if (listener) {                                                                                                      // 3510
    event._dispatchListeners =                                                                                         // 3511
      accumulateInto(event._dispatchListeners, listener);                                                              // 3512
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);                                                    // 3513
  }                                                                                                                    // 3514
}                                                                                                                      // 3515
                                                                                                                       // 3516
/**                                                                                                                    // 3517
 * Collect dispatches (must be entirely collected before dispatching - see unit                                        // 3518
 * tests). Lazily allocate the array to conserve memory.  We must loop through                                         // 3519
 * each event and perform the traversal for each one. We can not perform a                                             // 3520
 * single traversal for the entire collection of events because each event may                                         // 3521
 * have a different target.                                                                                            // 3522
 */                                                                                                                    // 3523
function accumulateTwoPhaseDispatchesSingle(event) {                                                                   // 3524
  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 3525
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(                                                     // 3526
      event.dispatchMarker,                                                                                            // 3527
      accumulateDirectionalDispatches,                                                                                 // 3528
      event                                                                                                            // 3529
    );                                                                                                                 // 3530
  }                                                                                                                    // 3531
}                                                                                                                      // 3532
                                                                                                                       // 3533
                                                                                                                       // 3534
/**                                                                                                                    // 3535
 * Accumulates without regard to direction, does not look for phased                                                   // 3536
 * registration names. Same as `accumulateDirectDispatchesSingle` but without                                          // 3537
 * requiring that the `dispatchMarker` be the same as the dispatched ID.                                               // 3538
 */                                                                                                                    // 3539
function accumulateDispatches(id, ignoredDirection, event) {                                                           // 3540
  if (event && event.dispatchConfig.registrationName) {                                                                // 3541
    var registrationName = event.dispatchConfig.registrationName;                                                      // 3542
    var listener = getListener(id, registrationName);                                                                  // 3543
    if (listener) {                                                                                                    // 3544
      event._dispatchListeners =                                                                                       // 3545
        accumulateInto(event._dispatchListeners, listener);                                                            // 3546
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);                                                     // 3547
    }                                                                                                                  // 3548
  }                                                                                                                    // 3549
}                                                                                                                      // 3550
                                                                                                                       // 3551
/**                                                                                                                    // 3552
 * Accumulates dispatches on an `SyntheticEvent`, but only for the                                                     // 3553
 * `dispatchMarker`.                                                                                                   // 3554
 * @param {SyntheticEvent} event                                                                                       // 3555
 */                                                                                                                    // 3556
function accumulateDirectDispatchesSingle(event) {                                                                     // 3557
  if (event && event.dispatchConfig.registrationName) {                                                                // 3558
    accumulateDispatches(event.dispatchMarker, null, event);                                                           // 3559
  }                                                                                                                    // 3560
}                                                                                                                      // 3561
                                                                                                                       // 3562
function accumulateTwoPhaseDispatches(events) {                                                                        // 3563
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);                                                      // 3564
}                                                                                                                      // 3565
                                                                                                                       // 3566
function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {                                                  // 3567
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(                                                     // 3568
    fromID,                                                                                                            // 3569
    toID,                                                                                                              // 3570
    accumulateDispatches,                                                                                              // 3571
    leave,                                                                                                             // 3572
    enter                                                                                                              // 3573
  );                                                                                                                   // 3574
}                                                                                                                      // 3575
                                                                                                                       // 3576
                                                                                                                       // 3577
function accumulateDirectDispatches(events) {                                                                          // 3578
  forEachAccumulated(events, accumulateDirectDispatchesSingle);                                                        // 3579
}                                                                                                                      // 3580
                                                                                                                       // 3581
                                                                                                                       // 3582
                                                                                                                       // 3583
/**                                                                                                                    // 3584
 * A small set of propagation patterns, each of which will accept a small amount                                       // 3585
 * of information, and generate a set of "dispatch ready event objects" - which                                        // 3586
 * are sets of events that have already been annotated with a set of dispatched                                        // 3587
 * listener functions/ids. The API is designed this way to discourage these                                            // 3588
 * propagation strategies from actually executing the dispatches, since we                                             // 3589
 * always want to collect the entire set of dispatches before executing event a                                        // 3590
 * single one.                                                                                                         // 3591
 *                                                                                                                     // 3592
 * @constructor EventPropagators                                                                                       // 3593
 */                                                                                                                    // 3594
var EventPropagators = {                                                                                               // 3595
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,                                                          // 3596
  accumulateDirectDispatches: accumulateDirectDispatches,                                                              // 3597
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches                                                       // 3598
};                                                                                                                     // 3599
                                                                                                                       // 3600
module.exports = EventPropagators;                                                                                     // 3601
                                                                                                                       // 3602
}).call(this,require('_process'))                                                                                      // 3603
                                                                                                                       // 3604
},{"./EventConstants":"react/lib/EventConstants","./EventPluginHub":"react/lib/EventPluginHub","./accumulateInto":"react/lib/accumulateInto","./forEachAccumulated":"react/lib/forEachAccumulated","_process":1}],"react/lib/ExecutionEnvironment":[function(require,module,exports){
/**                                                                                                                    // 3606
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3607
 * All rights reserved.                                                                                                // 3608
 *                                                                                                                     // 3609
 * This source code is licensed under the BSD-style license found in the                                               // 3610
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 3611
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 3612
 *                                                                                                                     // 3613
 * @providesModule ExecutionEnvironment                                                                                // 3614
 */                                                                                                                    // 3615
                                                                                                                       // 3616
/*jslint evil: true */                                                                                                 // 3617
                                                                                                                       // 3618
"use strict";                                                                                                          // 3619
                                                                                                                       // 3620
var canUseDOM = !!(                                                                                                    // 3621
  (typeof window !== 'undefined' &&                                                                                    // 3622
  window.document && window.document.createElement)                                                                    // 3623
);                                                                                                                     // 3624
                                                                                                                       // 3625
/**                                                                                                                    // 3626
 * Simple, lightweight module assisting with the detection and context of                                              // 3627
 * Worker. Helps avoid circular dependencies and allows code to reason about                                           // 3628
 * whether or not they are in a Worker, even if they never include the main                                            // 3629
 * `ReactWorker` dependency.                                                                                           // 3630
 */                                                                                                                    // 3631
var ExecutionEnvironment = {                                                                                           // 3632
                                                                                                                       // 3633
  canUseDOM: canUseDOM,                                                                                                // 3634
                                                                                                                       // 3635
  canUseWorkers: typeof Worker !== 'undefined',                                                                        // 3636
                                                                                                                       // 3637
  canUseEventListeners:                                                                                                // 3638
    canUseDOM && !!(window.addEventListener || window.attachEvent),                                                    // 3639
                                                                                                                       // 3640
  canUseViewport: canUseDOM && !!window.screen,                                                                        // 3641
                                                                                                                       // 3642
  isInWorker: !canUseDOM // For now, this is true - might change in the future.                                        // 3643
                                                                                                                       // 3644
};                                                                                                                     // 3645
                                                                                                                       // 3646
module.exports = ExecutionEnvironment;                                                                                 // 3647
                                                                                                                       // 3648
},{}],"react/lib/FallbackCompositionState":[function(require,module,exports){                                          // 3649
/**                                                                                                                    // 3650
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3651
 * All rights reserved.                                                                                                // 3652
 *                                                                                                                     // 3653
 * This source code is licensed under the BSD-style license found in the                                               // 3654
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 3655
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 3656
 *                                                                                                                     // 3657
 * @providesModule FallbackCompositionState                                                                            // 3658
 * @typechecks static-only                                                                                             // 3659
 */                                                                                                                    // 3660
                                                                                                                       // 3661
'use strict';                                                                                                          // 3662
                                                                                                                       // 3663
var PooledClass = require("./PooledClass");                                                                            // 3664
                                                                                                                       // 3665
var assign = require("./Object.assign");                                                                               // 3666
var getTextContentAccessor = require("./getTextContentAccessor");                                                      // 3667
                                                                                                                       // 3668
/**                                                                                                                    // 3669
 * This helper class stores information about text content of a target node,                                           // 3670
 * allowing comparison of content before and after a given event.                                                      // 3671
 *                                                                                                                     // 3672
 * Identify the node where selection currently begins, then observe                                                    // 3673
 * both its text content and its current position in the DOM. Since the                                                // 3674
 * browser may natively replace the target node during composition, we can                                             // 3675
 * use its position to find its replacement.                                                                           // 3676
 *                                                                                                                     // 3677
 * @param {DOMEventTarget} root                                                                                        // 3678
 */                                                                                                                    // 3679
function FallbackCompositionState(root) {                                                                              // 3680
  this._root = root;                                                                                                   // 3681
  this._startText = this.getText();                                                                                    // 3682
  this._fallbackText = null;                                                                                           // 3683
}                                                                                                                      // 3684
                                                                                                                       // 3685
assign(FallbackCompositionState.prototype, {                                                                           // 3686
  /**                                                                                                                  // 3687
   * Get current text of input.                                                                                        // 3688
   *                                                                                                                   // 3689
   * @return {string}                                                                                                  // 3690
   */                                                                                                                  // 3691
  getText: function() {                                                                                                // 3692
    if ('value' in this._root) {                                                                                       // 3693
      return this._root.value;                                                                                         // 3694
    }                                                                                                                  // 3695
    return this._root[getTextContentAccessor()];                                                                       // 3696
  },                                                                                                                   // 3697
                                                                                                                       // 3698
  /**                                                                                                                  // 3699
   * Determine the differing substring between the initially stored                                                    // 3700
   * text content and the current content.                                                                             // 3701
   *                                                                                                                   // 3702
   * @return {string}                                                                                                  // 3703
   */                                                                                                                  // 3704
  getData: function() {                                                                                                // 3705
    if (this._fallbackText) {                                                                                          // 3706
      return this._fallbackText;                                                                                       // 3707
    }                                                                                                                  // 3708
                                                                                                                       // 3709
    var start;                                                                                                         // 3710
    var startValue = this._startText;                                                                                  // 3711
    var startLength = startValue.length;                                                                               // 3712
    var end;                                                                                                           // 3713
    var endValue = this.getText();                                                                                     // 3714
    var endLength = endValue.length;                                                                                   // 3715
                                                                                                                       // 3716
    for (start = 0; start < startLength; start++) {                                                                    // 3717
      if (startValue[start] !== endValue[start]) {                                                                     // 3718
        break;                                                                                                         // 3719
      }                                                                                                                // 3720
    }                                                                                                                  // 3721
                                                                                                                       // 3722
    var minEnd = startLength - start;                                                                                  // 3723
    for (end = 1; end <= minEnd; end++) {                                                                              // 3724
      if (startValue[startLength - end] !== endValue[endLength - end]) {                                               // 3725
        break;                                                                                                         // 3726
      }                                                                                                                // 3727
    }                                                                                                                  // 3728
                                                                                                                       // 3729
    var sliceTail = end > 1 ? 1 - end : undefined;                                                                     // 3730
    this._fallbackText = endValue.slice(start, sliceTail);                                                             // 3731
    return this._fallbackText;                                                                                         // 3732
  }                                                                                                                    // 3733
});                                                                                                                    // 3734
                                                                                                                       // 3735
PooledClass.addPoolingTo(FallbackCompositionState);                                                                    // 3736
                                                                                                                       // 3737
module.exports = FallbackCompositionState;                                                                             // 3738
                                                                                                                       // 3739
},{"./Object.assign":"react/lib/Object.assign","./PooledClass":"react/lib/PooledClass","./getTextContentAccessor":"react/lib/getTextContentAccessor"}],"react/lib/HTMLDOMPropertyConfig":[function(require,module,exports){
/**                                                                                                                    // 3741
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3742
 * All rights reserved.                                                                                                // 3743
 *                                                                                                                     // 3744
 * This source code is licensed under the BSD-style license found in the                                               // 3745
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 3746
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 3747
 *                                                                                                                     // 3748
 * @providesModule HTMLDOMPropertyConfig                                                                               // 3749
 */                                                                                                                    // 3750
                                                                                                                       // 3751
/*jslint bitwise: true*/                                                                                               // 3752
                                                                                                                       // 3753
'use strict';                                                                                                          // 3754
                                                                                                                       // 3755
var DOMProperty = require("./DOMProperty");                                                                            // 3756
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 3757
                                                                                                                       // 3758
var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;                                                     // 3759
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;                                                       // 3760
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;                                                       // 3761
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;                                                         // 3762
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;                                                       // 3763
var HAS_POSITIVE_NUMERIC_VALUE =                                                                                       // 3764
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;                                                                    // 3765
var HAS_OVERLOADED_BOOLEAN_VALUE =                                                                                     // 3766
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;                                                                  // 3767
                                                                                                                       // 3768
var hasSVG;                                                                                                            // 3769
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 3770
  var implementation = document.implementation;                                                                        // 3771
  hasSVG = (                                                                                                           // 3772
    implementation &&                                                                                                  // 3773
    implementation.hasFeature &&                                                                                       // 3774
    implementation.hasFeature(                                                                                         // 3775
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',                                                             // 3776
      '1.1'                                                                                                            // 3777
    )                                                                                                                  // 3778
  );                                                                                                                   // 3779
}                                                                                                                      // 3780
                                                                                                                       // 3781
                                                                                                                       // 3782
var HTMLDOMPropertyConfig = {                                                                                          // 3783
  isCustomAttribute: RegExp.prototype.test.bind(                                                                       // 3784
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/                                                                                 // 3785
  ),                                                                                                                   // 3786
  Properties: {                                                                                                        // 3787
    /**                                                                                                                // 3788
     * Standard Properties                                                                                             // 3789
     */                                                                                                                // 3790
    accept: null,                                                                                                      // 3791
    acceptCharset: null,                                                                                               // 3792
    accessKey: null,                                                                                                   // 3793
    action: null,                                                                                                      // 3794
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                           // 3795
    allowTransparency: MUST_USE_ATTRIBUTE,                                                                             // 3796
    alt: null,                                                                                                         // 3797
    async: HAS_BOOLEAN_VALUE,                                                                                          // 3798
    autoComplete: null,                                                                                                // 3799
    // autoFocus is polyfilled/normalized by AutoFocusMixin                                                            // 3800
    // autoFocus: HAS_BOOLEAN_VALUE,                                                                                   // 3801
    autoPlay: HAS_BOOLEAN_VALUE,                                                                                       // 3802
    cellPadding: null,                                                                                                 // 3803
    cellSpacing: null,                                                                                                 // 3804
    charSet: MUST_USE_ATTRIBUTE,                                                                                       // 3805
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                    // 3806
    classID: MUST_USE_ATTRIBUTE,                                                                                       // 3807
    // To set className on SVG elements, it's necessary to use .setAttribute;                                          // 3808
    // this works on HTML elements too in all browsers except IE8. Conveniently,                                       // 3809
    // IE8 doesn't support SVG and so we can simply use the attribute in                                               // 3810
    // browsers that support SVG and the property in browsers that don't,                                              // 3811
    // regardless of whether the element is HTML or SVG.                                                               // 3812
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,                                                        // 3813
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 3814
    colSpan: null,                                                                                                     // 3815
    content: null,                                                                                                     // 3816
    contentEditable: null,                                                                                             // 3817
    contextMenu: MUST_USE_ATTRIBUTE,                                                                                   // 3818
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 3819
    coords: null,                                                                                                      // 3820
    crossOrigin: null,                                                                                                 // 3821
    data: null, // For `<object />` acts as `src`.                                                                     // 3822
    dateTime: MUST_USE_ATTRIBUTE,                                                                                      // 3823
    defer: HAS_BOOLEAN_VALUE,                                                                                          // 3824
    dir: null,                                                                                                         // 3825
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                  // 3826
    download: HAS_OVERLOADED_BOOLEAN_VALUE,                                                                            // 3827
    draggable: null,                                                                                                   // 3828
    encType: null,                                                                                                     // 3829
    form: MUST_USE_ATTRIBUTE,                                                                                          // 3830
    formAction: MUST_USE_ATTRIBUTE,                                                                                    // 3831
    formEncType: MUST_USE_ATTRIBUTE,                                                                                   // 3832
    formMethod: MUST_USE_ATTRIBUTE,                                                                                    // 3833
    formNoValidate: HAS_BOOLEAN_VALUE,                                                                                 // 3834
    formTarget: MUST_USE_ATTRIBUTE,                                                                                    // 3835
    frameBorder: MUST_USE_ATTRIBUTE,                                                                                   // 3836
    headers: null,                                                                                                     // 3837
    height: MUST_USE_ATTRIBUTE,                                                                                        // 3838
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                    // 3839
    high: null,                                                                                                        // 3840
    href: null,                                                                                                        // 3841
    hrefLang: null,                                                                                                    // 3842
    htmlFor: null,                                                                                                     // 3843
    httpEquiv: null,                                                                                                   // 3844
    icon: null,                                                                                                        // 3845
    id: MUST_USE_PROPERTY,                                                                                             // 3846
    label: null,                                                                                                       // 3847
    lang: null,                                                                                                        // 3848
    list: MUST_USE_ATTRIBUTE,                                                                                          // 3849
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                       // 3850
    low: null,                                                                                                         // 3851
    manifest: MUST_USE_ATTRIBUTE,                                                                                      // 3852
    marginHeight: null,                                                                                                // 3853
    marginWidth: null,                                                                                                 // 3854
    max: null,                                                                                                         // 3855
    maxLength: MUST_USE_ATTRIBUTE,                                                                                     // 3856
    media: MUST_USE_ATTRIBUTE,                                                                                         // 3857
    mediaGroup: null,                                                                                                  // 3858
    method: null,                                                                                                      // 3859
    min: null,                                                                                                         // 3860
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 3861
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                      // 3862
    name: null,                                                                                                        // 3863
    noValidate: HAS_BOOLEAN_VALUE,                                                                                     // 3864
    open: HAS_BOOLEAN_VALUE,                                                                                           // 3865
    optimum: null,                                                                                                     // 3866
    pattern: null,                                                                                                     // 3867
    placeholder: null,                                                                                                 // 3868
    poster: null,                                                                                                      // 3869
    preload: null,                                                                                                     // 3870
    radioGroup: null,                                                                                                  // 3871
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 3872
    rel: null,                                                                                                         // 3873
    required: HAS_BOOLEAN_VALUE,                                                                                       // 3874
    role: MUST_USE_ATTRIBUTE,                                                                                          // 3875
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 3876
    rowSpan: null,                                                                                                     // 3877
    sandbox: null,                                                                                                     // 3878
    scope: null,                                                                                                       // 3879
    scoped: HAS_BOOLEAN_VALUE,                                                                                         // 3880
    scrolling: null,                                                                                                   // 3881
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                  // 3882
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 3883
    shape: null,                                                                                                       // 3884
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 3885
    sizes: MUST_USE_ATTRIBUTE,                                                                                         // 3886
    span: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 3887
    spellCheck: null,                                                                                                  // 3888
    src: null,                                                                                                         // 3889
    srcDoc: MUST_USE_PROPERTY,                                                                                         // 3890
    srcSet: MUST_USE_ATTRIBUTE,                                                                                        // 3891
    start: HAS_NUMERIC_VALUE,                                                                                          // 3892
    step: null,                                                                                                        // 3893
    style: null,                                                                                                       // 3894
    tabIndex: null,                                                                                                    // 3895
    target: null,                                                                                                      // 3896
    title: null,                                                                                                       // 3897
    type: null,                                                                                                        // 3898
    useMap: null,                                                                                                      // 3899
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,                                                                       // 3900
    width: MUST_USE_ATTRIBUTE,                                                                                         // 3901
    wmode: MUST_USE_ATTRIBUTE,                                                                                         // 3902
                                                                                                                       // 3903
    /**                                                                                                                // 3904
     * Non-standard Properties                                                                                         // 3905
     */                                                                                                                // 3906
    // autoCapitalize and autoCorrect are supported in Mobile Safari for                                               // 3907
    // keyboard hints.                                                                                                 // 3908
    autoCapitalize: null,                                                                                              // 3909
    autoCorrect: null,                                                                                                 // 3910
    // itemProp, itemScope, itemType are for                                                                           // 3911
    // Microdata support. See http://schema.org/docs/gs.html                                                           // 3912
    itemProp: MUST_USE_ATTRIBUTE,                                                                                      // 3913
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                 // 3914
    itemType: MUST_USE_ATTRIBUTE,                                                                                      // 3915
    // itemID and itemRef are for Microdata support as well but                                                        // 3916
    // only specified in the the WHATWG spec document. See                                                             // 3917
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api                                         // 3918
    itemID: MUST_USE_ATTRIBUTE,                                                                                        // 3919
    itemRef: MUST_USE_ATTRIBUTE,                                                                                       // 3920
    // property is supported for OpenGraph in meta tags.                                                               // 3921
    property: null,                                                                                                    // 3922
    // IE-only attribute that controls focus behavior                                                                  // 3923
    unselectable: MUST_USE_ATTRIBUTE                                                                                   // 3924
  },                                                                                                                   // 3925
  DOMAttributeNames: {                                                                                                 // 3926
    acceptCharset: 'accept-charset',                                                                                   // 3927
    className: 'class',                                                                                                // 3928
    htmlFor: 'for',                                                                                                    // 3929
    httpEquiv: 'http-equiv'                                                                                            // 3930
  },                                                                                                                   // 3931
  DOMPropertyNames: {                                                                                                  // 3932
    autoCapitalize: 'autocapitalize',                                                                                  // 3933
    autoComplete: 'autocomplete',                                                                                      // 3934
    autoCorrect: 'autocorrect',                                                                                        // 3935
    autoFocus: 'autofocus',                                                                                            // 3936
    autoPlay: 'autoplay',                                                                                              // 3937
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.                                           // 3938
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding                                                           // 3939
    encType: 'encoding',                                                                                               // 3940
    hrefLang: 'hreflang',                                                                                              // 3941
    radioGroup: 'radiogroup',                                                                                          // 3942
    spellCheck: 'spellcheck',                                                                                          // 3943
    srcDoc: 'srcdoc',                                                                                                  // 3944
    srcSet: 'srcset'                                                                                                   // 3945
  }                                                                                                                    // 3946
};                                                                                                                     // 3947
                                                                                                                       // 3948
module.exports = HTMLDOMPropertyConfig;                                                                                // 3949
                                                                                                                       // 3950
},{"./DOMProperty":"react/lib/DOMProperty","./ExecutionEnvironment":"react/lib/ExecutionEnvironment"}],"react/lib/LinkedStateMixin":[function(require,module,exports){
/**                                                                                                                    // 3952
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3953
 * All rights reserved.                                                                                                // 3954
 *                                                                                                                     // 3955
 * This source code is licensed under the BSD-style license found in the                                               // 3956
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 3957
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 3958
 *                                                                                                                     // 3959
 * @providesModule LinkedStateMixin                                                                                    // 3960
 * @typechecks static-only                                                                                             // 3961
 */                                                                                                                    // 3962
                                                                                                                       // 3963
'use strict';                                                                                                          // 3964
                                                                                                                       // 3965
var ReactLink = require("./ReactLink");                                                                                // 3966
var ReactStateSetters = require("./ReactStateSetters");                                                                // 3967
                                                                                                                       // 3968
/**                                                                                                                    // 3969
 * A simple mixin around ReactLink.forState().                                                                         // 3970
 */                                                                                                                    // 3971
var LinkedStateMixin = {                                                                                               // 3972
  /**                                                                                                                  // 3973
   * Create a ReactLink that's linked to part of this component's state. The                                           // 3974
   * ReactLink will have the current value of this.state[key] and will call                                            // 3975
   * setState() when a change is requested.                                                                            // 3976
   *                                                                                                                   // 3977
   * @param {string} key state key to update. Note: you may want to use keyOf()                                        // 3978
   * if you're using Google Closure Compiler advanced mode.                                                            // 3979
   * @return {ReactLink} ReactLink instance linking to the state.                                                      // 3980
   */                                                                                                                  // 3981
  linkState: function(key) {                                                                                           // 3982
    return new ReactLink(                                                                                              // 3983
      this.state[key],                                                                                                 // 3984
      ReactStateSetters.createStateKeySetter(this, key)                                                                // 3985
    );                                                                                                                 // 3986
  }                                                                                                                    // 3987
};                                                                                                                     // 3988
                                                                                                                       // 3989
module.exports = LinkedStateMixin;                                                                                     // 3990
                                                                                                                       // 3991
},{"./ReactLink":"react/lib/ReactLink","./ReactStateSetters":"react/lib/ReactStateSetters"}],"react/lib/LinkedValueUtils":[function(require,module,exports){
(function (process){                                                                                                   // 3993
/**                                                                                                                    // 3994
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3995
 * All rights reserved.                                                                                                // 3996
 *                                                                                                                     // 3997
 * This source code is licensed under the BSD-style license found in the                                               // 3998
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 3999
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 4000
 *                                                                                                                     // 4001
 * @providesModule LinkedValueUtils                                                                                    // 4002
 * @typechecks static-only                                                                                             // 4003
 */                                                                                                                    // 4004
                                                                                                                       // 4005
'use strict';                                                                                                          // 4006
                                                                                                                       // 4007
var ReactPropTypes = require("./ReactPropTypes");                                                                      // 4008
                                                                                                                       // 4009
var invariant = require("./invariant");                                                                                // 4010
                                                                                                                       // 4011
var hasReadOnlyValue = {                                                                                               // 4012
  'button': true,                                                                                                      // 4013
  'checkbox': true,                                                                                                    // 4014
  'image': true,                                                                                                       // 4015
  'hidden': true,                                                                                                      // 4016
  'radio': true,                                                                                                       // 4017
  'reset': true,                                                                                                       // 4018
  'submit': true                                                                                                       // 4019
};                                                                                                                     // 4020
                                                                                                                       // 4021
function _assertSingleLink(input) {                                                                                    // 4022
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 4023
    input.props.checkedLink == null || input.props.valueLink == null,                                                  // 4024
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +                                              // 4025
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'                                           // 4026
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));                                    // 4027
}                                                                                                                      // 4028
function _assertValueLink(input) {                                                                                     // 4029
  _assertSingleLink(input);                                                                                            // 4030
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 4031
    input.props.value == null && input.props.onChange == null,                                                         // 4032
    'Cannot provide a valueLink and a value or onChange event. If you want ' +                                         // 4033
    'to use value or onChange, you probably don\'t want to use valueLink.'                                             // 4034
  ) : invariant(input.props.value == null && input.props.onChange == null));                                           // 4035
}                                                                                                                      // 4036
                                                                                                                       // 4037
function _assertCheckedLink(input) {                                                                                   // 4038
  _assertSingleLink(input);                                                                                            // 4039
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 4040
    input.props.checked == null && input.props.onChange == null,                                                       // 4041
    'Cannot provide a checkedLink and a checked property or onChange event. ' +                                        // 4042
    'If you want to use checked or onChange, you probably don\'t want to ' +                                           // 4043
    'use checkedLink'                                                                                                  // 4044
  ) : invariant(input.props.checked == null && input.props.onChange == null));                                         // 4045
}                                                                                                                      // 4046
                                                                                                                       // 4047
/**                                                                                                                    // 4048
 * @param {SyntheticEvent} e change event to handle                                                                    // 4049
 */                                                                                                                    // 4050
function _handleLinkedValueChange(e) {                                                                                 // 4051
  /*jshint validthis:true */                                                                                           // 4052
  this.props.valueLink.requestChange(e.target.value);                                                                  // 4053
}                                                                                                                      // 4054
                                                                                                                       // 4055
/**                                                                                                                    // 4056
  * @param {SyntheticEvent} e change event to handle                                                                   // 4057
  */                                                                                                                   // 4058
function _handleLinkedCheckChange(e) {                                                                                 // 4059
  /*jshint validthis:true */                                                                                           // 4060
  this.props.checkedLink.requestChange(e.target.checked);                                                              // 4061
}                                                                                                                      // 4062
                                                                                                                       // 4063
/**                                                                                                                    // 4064
 * Provide a linked `value` attribute for controlled forms. You should not use                                         // 4065
 * this outside of the ReactDOM controlled form components.                                                            // 4066
 */                                                                                                                    // 4067
var LinkedValueUtils = {                                                                                               // 4068
  Mixin: {                                                                                                             // 4069
    propTypes: {                                                                                                       // 4070
      value: function(props, propName, componentName) {                                                                // 4071
        if (!props[propName] ||                                                                                        // 4072
            hasReadOnlyValue[props.type] ||                                                                            // 4073
            props.onChange ||                                                                                          // 4074
            props.readOnly ||                                                                                          // 4075
            props.disabled) {                                                                                          // 4076
          return null;                                                                                                 // 4077
        }                                                                                                              // 4078
        return new Error(                                                                                              // 4079
          'You provided a `value` prop to a form field without an ' +                                                  // 4080
          '`onChange` handler. This will render a read-only field. If ' +                                              // 4081
          'the field should be mutable use `defaultValue`. Otherwise, ' +                                              // 4082
          'set either `onChange` or `readOnly`.'                                                                       // 4083
        );                                                                                                             // 4084
      },                                                                                                               // 4085
      checked: function(props, propName, componentName) {                                                              // 4086
        if (!props[propName] ||                                                                                        // 4087
            props.onChange ||                                                                                          // 4088
            props.readOnly ||                                                                                          // 4089
            props.disabled) {                                                                                          // 4090
          return null;                                                                                                 // 4091
        }                                                                                                              // 4092
        return new Error(                                                                                              // 4093
          'You provided a `checked` prop to a form field without an ' +                                                // 4094
          '`onChange` handler. This will render a read-only field. If ' +                                              // 4095
          'the field should be mutable use `defaultChecked`. Otherwise, ' +                                            // 4096
          'set either `onChange` or `readOnly`.'                                                                       // 4097
        );                                                                                                             // 4098
      },                                                                                                               // 4099
      onChange: ReactPropTypes.func                                                                                    // 4100
    }                                                                                                                  // 4101
  },                                                                                                                   // 4102
                                                                                                                       // 4103
  /**                                                                                                                  // 4104
   * @param {ReactComponent} input Form component                                                                      // 4105
   * @return {*} current value of the input either from value prop or link.                                            // 4106
   */                                                                                                                  // 4107
  getValue: function(input) {                                                                                          // 4108
    if (input.props.valueLink) {                                                                                       // 4109
      _assertValueLink(input);                                                                                         // 4110
      return input.props.valueLink.value;                                                                              // 4111
    }                                                                                                                  // 4112
    return input.props.value;                                                                                          // 4113
  },                                                                                                                   // 4114
                                                                                                                       // 4115
  /**                                                                                                                  // 4116
   * @param {ReactComponent} input Form component                                                                      // 4117
   * @return {*} current checked status of the input either from checked prop                                          // 4118
   *             or link.                                                                                              // 4119
   */                                                                                                                  // 4120
  getChecked: function(input) {                                                                                        // 4121
    if (input.props.checkedLink) {                                                                                     // 4122
      _assertCheckedLink(input);                                                                                       // 4123
      return input.props.checkedLink.value;                                                                            // 4124
    }                                                                                                                  // 4125
    return input.props.checked;                                                                                        // 4126
  },                                                                                                                   // 4127
                                                                                                                       // 4128
  /**                                                                                                                  // 4129
   * @param {ReactComponent} input Form component                                                                      // 4130
   * @return {function} change callback either from onChange prop or link.                                             // 4131
   */                                                                                                                  // 4132
  getOnChange: function(input) {                                                                                       // 4133
    if (input.props.valueLink) {                                                                                       // 4134
      _assertValueLink(input);                                                                                         // 4135
      return _handleLinkedValueChange;                                                                                 // 4136
    } else if (input.props.checkedLink) {                                                                              // 4137
      _assertCheckedLink(input);                                                                                       // 4138
      return _handleLinkedCheckChange;                                                                                 // 4139
    }                                                                                                                  // 4140
    return input.props.onChange;                                                                                       // 4141
  }                                                                                                                    // 4142
};                                                                                                                     // 4143
                                                                                                                       // 4144
module.exports = LinkedValueUtils;                                                                                     // 4145
                                                                                                                       // 4146
}).call(this,require('_process'))                                                                                      // 4147
                                                                                                                       // 4148
},{"./ReactPropTypes":"react/lib/ReactPropTypes","./invariant":"react/lib/invariant","_process":1}],"react/lib/LocalEventTrapMixin":[function(require,module,exports){
(function (process){                                                                                                   // 4150
/**                                                                                                                    // 4151
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 4152
 * All rights reserved.                                                                                                // 4153
 *                                                                                                                     // 4154
 * This source code is licensed under the BSD-style license found in the                                               // 4155
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 4156
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 4157
 *                                                                                                                     // 4158
 * @providesModule LocalEventTrapMixin                                                                                 // 4159
 */                                                                                                                    // 4160
                                                                                                                       // 4161
'use strict';                                                                                                          // 4162
                                                                                                                       // 4163
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");                                                  // 4164
                                                                                                                       // 4165
var accumulateInto = require("./accumulateInto");                                                                      // 4166
var forEachAccumulated = require("./forEachAccumulated");                                                              // 4167
var invariant = require("./invariant");                                                                                // 4168
                                                                                                                       // 4169
function remove(event) {                                                                                               // 4170
  event.remove();                                                                                                      // 4171
}                                                                                                                      // 4172
                                                                                                                       // 4173
var LocalEventTrapMixin = {                                                                                            // 4174
  trapBubbledEvent:function(topLevelType, handlerBaseName) {                                                           // 4175
    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    // If a component renders to null or if another component fatals and causes                                        // 4177
    // the state of the tree to be corrupted, `node` here can be null.                                                 // 4178
    var node = this.getDOMNode();                                                                                      // 4179
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 4180
      node,                                                                                                            // 4181
      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'                                       // 4182
    ) : invariant(node));                                                                                              // 4183
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(                                                          // 4184
      topLevelType,                                                                                                    // 4185
      handlerBaseName,                                                                                                 // 4186
      node                                                                                                             // 4187
    );                                                                                                                 // 4188
    this._localEventListeners =                                                                                        // 4189
      accumulateInto(this._localEventListeners, listener);                                                             // 4190
  },                                                                                                                   // 4191
                                                                                                                       // 4192
  // trapCapturedEvent would look nearly identical. We don't implement that                                            // 4193
  // method because it isn't currently needed.                                                                         // 4194
                                                                                                                       // 4195
  componentWillUnmount:function() {                                                                                    // 4196
    if (this._localEventListeners) {                                                                                   // 4197
      forEachAccumulated(this._localEventListeners, remove);                                                           // 4198
    }                                                                                                                  // 4199
  }                                                                                                                    // 4200
};                                                                                                                     // 4201
                                                                                                                       // 4202
module.exports = LocalEventTrapMixin;                                                                                  // 4203
                                                                                                                       // 4204
}).call(this,require('_process'))                                                                                      // 4205
                                                                                                                       // 4206
},{"./ReactBrowserEventEmitter":"react/lib/ReactBrowserEventEmitter","./accumulateInto":"react/lib/accumulateInto","./forEachAccumulated":"react/lib/forEachAccumulated","./invariant":"react/lib/invariant","_process":1}],"react/lib/MobileSafariClickEventPlugin":[function(require,module,exports){
/**                                                                                                                    // 4208
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 4209
 * All rights reserved.                                                                                                // 4210
 *                                                                                                                     // 4211
 * This source code is licensed under the BSD-style license found in the                                               // 4212
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 4213
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 4214
 *                                                                                                                     // 4215
 * @providesModule MobileSafariClickEventPlugin                                                                        // 4216
 * @typechecks static-only                                                                                             // 4217
 */                                                                                                                    // 4218
                                                                                                                       // 4219
'use strict';                                                                                                          // 4220
                                                                                                                       // 4221
var EventConstants = require("./EventConstants");                                                                      // 4222
                                                                                                                       // 4223
var emptyFunction = require("./emptyFunction");                                                                        // 4224
                                                                                                                       // 4225
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 4226
                                                                                                                       // 4227
/**                                                                                                                    // 4228
 * Mobile Safari does not fire properly bubble click events on non-interactive                                         // 4229
 * elements, which means delegated click listeners do not fire. The workaround                                         // 4230
 * for this bug involves attaching an empty click listener on the target node.                                         // 4231
 *                                                                                                                     // 4232
 * This particular plugin works around the bug by attaching an empty click                                             // 4233
 * listener on `touchstart` (which does fire on every element).                                                        // 4234
 */                                                                                                                    // 4235
var MobileSafariClickEventPlugin = {                                                                                   // 4236
                                                                                                                       // 4237
  eventTypes: null,                                                                                                    // 4238
                                                                                                                       // 4239
  /**                                                                                                                  // 4240
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 4241
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 4242
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 4243
   * @param {object} nativeEvent Native browser event.                                                                 // 4244
   * @return {*} An accumulation of synthetic events.                                                                  // 4245
   * @see {EventPluginHub.extractEvents}                                                                               // 4246
   */                                                                                                                  // 4247
  extractEvents: function(                                                                                             // 4248
      topLevelType,                                                                                                    // 4249
      topLevelTarget,                                                                                                  // 4250
      topLevelTargetID,                                                                                                // 4251
      nativeEvent) {                                                                                                   // 4252
    if (topLevelType === topLevelTypes.topTouchStart) {                                                                // 4253
      var target = nativeEvent.target;                                                                                 // 4254
      if (target && !target.onclick) {                                                                                 // 4255
        target.onclick = emptyFunction;                                                                                // 4256
      }                                                                                                                // 4257
    }                                                                                                                  // 4258
  }                                                                                                                    // 4259
                                                                                                                       // 4260
};                                                                                                                     // 4261
                                                                                                                       // 4262
module.exports = MobileSafariClickEventPlugin;                                                                         // 4263
                                                                                                                       // 4264
},{"./EventConstants":"react/lib/EventConstants","./emptyFunction":"react/lib/emptyFunction"}],"react/lib/Object.assign":[function(require,module,exports){
/**                                                                                                                    // 4266
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 4267
 * All rights reserved.                                                                                                // 4268
 *                                                                                                                     // 4269
 * This source code is licensed under the BSD-style license found in the                                               // 4270
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 4271
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 4272
 *                                                                                                                     // 4273
 * @providesModule Object.assign                                                                                       // 4274
 */                                                                                                                    // 4275
                                                                                                                       // 4276
// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign                                             // 4277
                                                                                                                       // 4278
'use strict';                                                                                                          // 4279
                                                                                                                       // 4280
function assign(target, sources) {                                                                                     // 4281
  if (target == null) {                                                                                                // 4282
    throw new TypeError('Object.assign target cannot be null or undefined');                                           // 4283
  }                                                                                                                    // 4284
                                                                                                                       // 4285
  var to = Object(target);                                                                                             // 4286
  var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                // 4287
                                                                                                                       // 4288
  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {                                                 // 4289
    var nextSource = arguments[nextIndex];                                                                             // 4290
    if (nextSource == null) {                                                                                          // 4291
      continue;                                                                                                        // 4292
    }                                                                                                                  // 4293
                                                                                                                       // 4294
    var from = Object(nextSource);                                                                                     // 4295
                                                                                                                       // 4296
    // We don't currently support accessors nor proxies. Therefore this                                                // 4297
    // copy cannot throw. If we ever supported this then we must handle                                                // 4298
    // exceptions and side-effects. We don't support symbols so they won't                                             // 4299
    // be transferred.                                                                                                 // 4300
                                                                                                                       // 4301
    for (var key in from) {                                                                                            // 4302
      if (hasOwnProperty.call(from, key)) {                                                                            // 4303
        to[key] = from[key];                                                                                           // 4304
      }                                                                                                                // 4305
    }                                                                                                                  // 4306
  }                                                                                                                    // 4307
                                                                                                                       // 4308
  return to;                                                                                                           // 4309
}                                                                                                                      // 4310
                                                                                                                       // 4311
module.exports = assign;                                                                                               // 4312
                                                                                                                       // 4313
},{}],"react/lib/PooledClass":[function(require,module,exports){                                                       // 4314
(function (process){                                                                                                   // 4315
/**                                                                                                                    // 4316
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 4317
 * All rights reserved.                                                                                                // 4318
 *                                                                                                                     // 4319
 * This source code is licensed under the BSD-style license found in the                                               // 4320
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 4321
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 4322
 *                                                                                                                     // 4323
 * @providesModule PooledClass                                                                                         // 4324
 */                                                                                                                    // 4325
                                                                                                                       // 4326
'use strict';                                                                                                          // 4327
                                                                                                                       // 4328
var invariant = require("./invariant");                                                                                // 4329
                                                                                                                       // 4330
/**                                                                                                                    // 4331
 * Static poolers. Several custom versions for each potential number of                                                // 4332
 * arguments. A completely generic pooler is easy to implement, but would                                              // 4333
 * require accessing the `arguments` object. In each of these, `this` refers to                                        // 4334
 * the Class itself, not an instance. If any others are needed, simply add them                                        // 4335
 * here, or in their own files.                                                                                        // 4336
 */                                                                                                                    // 4337
var oneArgumentPooler = function(copyFieldsFrom) {                                                                     // 4338
  var Klass = this;                                                                                                    // 4339
  if (Klass.instancePool.length) {                                                                                     // 4340
    var instance = Klass.instancePool.pop();                                                                           // 4341
    Klass.call(instance, copyFieldsFrom);                                                                              // 4342
    return instance;                                                                                                   // 4343
  } else {                                                                                                             // 4344
    return new Klass(copyFieldsFrom);                                                                                  // 4345
  }                                                                                                                    // 4346
};                                                                                                                     // 4347
                                                                                                                       // 4348
var twoArgumentPooler = function(a1, a2) {                                                                             // 4349
  var Klass = this;                                                                                                    // 4350
  if (Klass.instancePool.length) {                                                                                     // 4351
    var instance = Klass.instancePool.pop();                                                                           // 4352
    Klass.call(instance, a1, a2);                                                                                      // 4353
    return instance;                                                                                                   // 4354
  } else {                                                                                                             // 4355
    return new Klass(a1, a2);                                                                                          // 4356
  }                                                                                                                    // 4357
};                                                                                                                     // 4358
                                                                                                                       // 4359
var threeArgumentPooler = function(a1, a2, a3) {                                                                       // 4360
  var Klass = this;                                                                                                    // 4361
  if (Klass.instancePool.length) {                                                                                     // 4362
    var instance = Klass.instancePool.pop();                                                                           // 4363
    Klass.call(instance, a1, a2, a3);                                                                                  // 4364
    return instance;                                                                                                   // 4365
  } else {                                                                                                             // 4366
    return new Klass(a1, a2, a3);                                                                                      // 4367
  }                                                                                                                    // 4368
};                                                                                                                     // 4369
                                                                                                                       // 4370
var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {                                                                // 4371
  var Klass = this;                                                                                                    // 4372
  if (Klass.instancePool.length) {                                                                                     // 4373
    var instance = Klass.instancePool.pop();                                                                           // 4374
    Klass.call(instance, a1, a2, a3, a4, a5);                                                                          // 4375
    return instance;                                                                                                   // 4376
  } else {                                                                                                             // 4377
    return new Klass(a1, a2, a3, a4, a5);                                                                              // 4378
  }                                                                                                                    // 4379
};                                                                                                                     // 4380
                                                                                                                       // 4381
var standardReleaser = function(instance) {                                                                            // 4382
  var Klass = this;                                                                                                    // 4383
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 4384
    instance instanceof Klass,                                                                                         // 4385
    'Trying to release an instance into a pool of a different type.'                                                   // 4386
  ) : invariant(instance instanceof Klass));                                                                           // 4387
  if (instance.destructor) {                                                                                           // 4388
    instance.destructor();                                                                                             // 4389
  }                                                                                                                    // 4390
  if (Klass.instancePool.length < Klass.poolSize) {                                                                    // 4391
    Klass.instancePool.push(instance);                                                                                 // 4392
  }                                                                                                                    // 4393
};                                                                                                                     // 4394
                                                                                                                       // 4395
var DEFAULT_POOL_SIZE = 10;                                                                                            // 4396
var DEFAULT_POOLER = oneArgumentPooler;                                                                                // 4397
                                                                                                                       // 4398
/**                                                                                                                    // 4399
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class                                        // 4400
 * itself (statically) not adding any prototypical fields. Any CopyConstructor                                         // 4401
 * you give this may have a `poolSize` property, and will look for a                                                   // 4402
 * prototypical `destructor` on instances (optional).                                                                  // 4403
 *                                                                                                                     // 4404
 * @param {Function} CopyConstructor Constructor that can be used to reset.                                            // 4405
 * @param {Function} pooler Customizable pooler.                                                                       // 4406
 */                                                                                                                    // 4407
var addPoolingTo = function(CopyConstructor, pooler) {                                                                 // 4408
  var NewKlass = CopyConstructor;                                                                                      // 4409
  NewKlass.instancePool = [];                                                                                          // 4410
  NewKlass.getPooled = pooler || DEFAULT_POOLER;                                                                       // 4411
  if (!NewKlass.poolSize) {                                                                                            // 4412
    NewKlass.poolSize = DEFAULT_POOL_SIZE;                                                                             // 4413
  }                                                                                                                    // 4414
  NewKlass.release = standardReleaser;                                                                                 // 4415
  return NewKlass;                                                                                                     // 4416
};                                                                                                                     // 4417
                                                                                                                       // 4418
var PooledClass = {                                                                                                    // 4419
  addPoolingTo: addPoolingTo,                                                                                          // 4420
  oneArgumentPooler: oneArgumentPooler,                                                                                // 4421
  twoArgumentPooler: twoArgumentPooler,                                                                                // 4422
  threeArgumentPooler: threeArgumentPooler,                                                                            // 4423
  fiveArgumentPooler: fiveArgumentPooler                                                                               // 4424
};                                                                                                                     // 4425
                                                                                                                       // 4426
module.exports = PooledClass;                                                                                          // 4427
                                                                                                                       // 4428
}).call(this,require('_process'))                                                                                      // 4429
                                                                                                                       // 4430
},{"./invariant":"react/lib/invariant","_process":1}],"react/lib/ReactBrowserComponentMixin":[function(require,module,exports){
/**                                                                                                                    // 4432
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 4433
 * All rights reserved.                                                                                                // 4434
 *                                                                                                                     // 4435
 * This source code is licensed under the BSD-style license found in the                                               // 4436
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 4437
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 4438
 *                                                                                                                     // 4439
 * @providesModule ReactBrowserComponentMixin                                                                          // 4440
 */                                                                                                                    // 4441
                                                                                                                       // 4442
'use strict';                                                                                                          // 4443
                                                                                                                       // 4444
var findDOMNode = require("./findDOMNode");                                                                            // 4445
                                                                                                                       // 4446
var ReactBrowserComponentMixin = {                                                                                     // 4447
  /**                                                                                                                  // 4448
   * Returns the DOM node rendered by this component.                                                                  // 4449
   *                                                                                                                   // 4450
   * @return {DOMElement} The root node of this component.                                                             // 4451
   * @final                                                                                                            // 4452
   * @protected                                                                                                        // 4453
   */                                                                                                                  // 4454
  getDOMNode: function() {                                                                                             // 4455
    return findDOMNode(this);                                                                                          // 4456
  }                                                                                                                    // 4457
};                                                                                                                     // 4458
                                                                                                                       // 4459
module.exports = ReactBrowserComponentMixin;                                                                           // 4460
                                                                                                                       // 4461
},{"./findDOMNode":"react/lib/findDOMNode"}],"react/lib/ReactBrowserEventEmitter":[function(require,module,exports){   // 4462
/**                                                                                                                    // 4463
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 4464
 * All rights reserved.                                                                                                // 4465
 *                                                                                                                     // 4466
 * This source code is licensed under the BSD-style license found in the                                               // 4467
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 4468
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 4469
 *                                                                                                                     // 4470
 * @providesModule ReactBrowserEventEmitter                                                                            // 4471
 * @typechecks static-only                                                                                             // 4472
 */                                                                                                                    // 4473
                                                                                                                       // 4474
'use strict';                                                                                                          // 4475
                                                                                                                       // 4476
var EventConstants = require("./EventConstants");                                                                      // 4477
var EventPluginHub = require("./EventPluginHub");                                                                      // 4478
var EventPluginRegistry = require("./EventPluginRegistry");                                                            // 4479
var ReactEventEmitterMixin = require("./ReactEventEmitterMixin");                                                      // 4480
var ViewportMetrics = require("./ViewportMetrics");                                                                    // 4481
                                                                                                                       // 4482
var assign = require("./Object.assign");                                                                               // 4483
var isEventSupported = require("./isEventSupported");                                                                  // 4484
                                                                                                                       // 4485
/**                                                                                                                    // 4486
 * Summary of `ReactBrowserEventEmitter` event handling:                                                               // 4487
 *                                                                                                                     // 4488
 *  - Top-level delegation is used to trap most native browser events. This                                            // 4489
 *    may only occur in the main thread and is the responsibility of                                                   // 4490
 *    ReactEventListener, which is injected and can therefore support pluggable                                        // 4491
 *    event sources. This is the only work that occurs in the main thread.                                             // 4492
 *                                                                                                                     // 4493
 *  - We normalize and de-duplicate events to account for browser quirks. This                                         // 4494
 *    may be done in the worker thread.                                                                                // 4495
 *                                                                                                                     // 4496
 *  - Forward these native events (with the associated top-level type used to                                          // 4497
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want                                        // 4498
 *    to extract any synthetic events.                                                                                 // 4499
 *                                                                                                                     // 4500
 *  - The `EventPluginHub` will then process each event by annotating them with                                        // 4501
 *    "dispatches", a sequence of listeners and IDs that care about that event.                                        // 4502
 *                                                                                                                     // 4503
 *  - The `EventPluginHub` then dispatches the events.                                                                 // 4504
 *                                                                                                                     // 4505
 * Overview of React and the event system:                                                                             // 4506
 *                                                                                                                     // 4507
 * +------------+    .                                                                                                 // 4508
 * |    DOM     |    .                                                                                                 // 4509
 * +------------+    .                                                                                                 // 4510
 *       |           .                                                                                                 // 4511
 *       v           .                                                                                                 // 4512
 * +------------+    .                                                                                                 // 4513
 * | ReactEvent |    .                                                                                                 // 4514
 * |  Listener  |    .                                                                                                 // 4515
 * +------------+    .                         +-----------+                                                           // 4516
 *       |           .               +--------+|SimpleEvent|                                                           // 4517
 *       |           .               |         |Plugin     |                                                           // 4518
 * +-----|------+    .               v         +-----------+                                                           // 4519
 * |     |      |    .    +--------------+                    +------------+                                           // 4520
 * |     +-----------.--->|EventPluginHub|                    |    Event   |                                           // 4521
 * |            |    .    |              |     +-----------+  | Propagators|                                           // 4522
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|                                           // 4523
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|                                           // 4524
 * |            |    .    |              |     +-----------+  |  utilities |                                           // 4525
 * |     +-----------.--->|              |                    +------------+                                           // 4526
 * |     |      |    .    +--------------+                                                                             // 4527
 * +-----|------+    .                ^        +-----------+                                                           // 4528
 *       |           .                |        |Enter/Leave|                                                           // 4529
 *       +           .                +-------+|Plugin     |                                                           // 4530
 * +-------------+   .                         +-----------+                                                           // 4531
 * | application |   .                                                                                                 // 4532
 * |-------------|   .                                                                                                 // 4533
 * |             |   .                                                                                                 // 4534
 * |             |   .                                                                                                 // 4535
 * +-------------+   .                                                                                                 // 4536
 *                   .                                                                                                 // 4537
 *    React Core     .  General Purpose Event Plugin System                                                            // 4538
 */                                                                                                                    // 4539
                                                                                                                       // 4540
var alreadyListeningTo = {};                                                                                           // 4541
var isMonitoringScrollValue = false;                                                                                   // 4542
var reactTopListenersCounter = 0;                                                                                      // 4543
                                                                                                                       // 4544
// For events like 'submit' which don't consistently bubble (which we trap at a                                        // 4545
// lower node than `document`), binding at `document` would cause duplicate                                            // 4546
// events so we don't include them here                                                                                // 4547
var topEventMapping = {                                                                                                // 4548
  topBlur: 'blur',                                                                                                     // 4549
  topChange: 'change',                                                                                                 // 4550
  topClick: 'click',                                                                                                   // 4551
  topCompositionEnd: 'compositionend',                                                                                 // 4552
  topCompositionStart: 'compositionstart',                                                                             // 4553
  topCompositionUpdate: 'compositionupdate',                                                                           // 4554
  topContextMenu: 'contextmenu',                                                                                       // 4555
  topCopy: 'copy',                                                                                                     // 4556
  topCut: 'cut',                                                                                                       // 4557
  topDoubleClick: 'dblclick',                                                                                          // 4558
  topDrag: 'drag',                                                                                                     // 4559
  topDragEnd: 'dragend',                                                                                               // 4560
  topDragEnter: 'dragenter',                                                                                           // 4561
  topDragExit: 'dragexit',                                                                                             // 4562
  topDragLeave: 'dragleave',                                                                                           // 4563
  topDragOver: 'dragover',                                                                                             // 4564
  topDragStart: 'dragstart',                                                                                           // 4565
  topDrop: 'drop',                                                                                                     // 4566
  topFocus: 'focus',                                                                                                   // 4567
  topInput: 'input',                                                                                                   // 4568
  topKeyDown: 'keydown',                                                                                               // 4569
  topKeyPress: 'keypress',                                                                                             // 4570
  topKeyUp: 'keyup',                                                                                                   // 4571
  topMouseDown: 'mousedown',                                                                                           // 4572
  topMouseMove: 'mousemove',                                                                                           // 4573
  topMouseOut: 'mouseout',                                                                                             // 4574
  topMouseOver: 'mouseover',                                                                                           // 4575
  topMouseUp: 'mouseup',                                                                                               // 4576
  topPaste: 'paste',                                                                                                   // 4577
  topScroll: 'scroll',                                                                                                 // 4578
  topSelectionChange: 'selectionchange',                                                                               // 4579
  topTextInput: 'textInput',                                                                                           // 4580
  topTouchCancel: 'touchcancel',                                                                                       // 4581
  topTouchEnd: 'touchend',                                                                                             // 4582
  topTouchMove: 'touchmove',                                                                                           // 4583
  topTouchStart: 'touchstart',                                                                                         // 4584
  topWheel: 'wheel'                                                                                                    // 4585
};                                                                                                                     // 4586
                                                                                                                       // 4587
/**                                                                                                                    // 4588
 * To ensure no conflicts with other potential React instances on the page                                             // 4589
 */                                                                                                                    // 4590
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);                                          // 4591
                                                                                                                       // 4592
function getListeningForDocument(mountAt) {                                                                            // 4593
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`                                              // 4594
  // directly.                                                                                                         // 4595
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {                                             // 4596
    mountAt[topListenersIDKey] = reactTopListenersCounter++;                                                           // 4597
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};                                                               // 4598
  }                                                                                                                    // 4599
  return alreadyListeningTo[mountAt[topListenersIDKey]];                                                               // 4600
}                                                                                                                      // 4601
                                                                                                                       // 4602
/**                                                                                                                    // 4603
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For                                         // 4604
 * example:                                                                                                            // 4605
 *                                                                                                                     // 4606
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);                                              // 4607
 *                                                                                                                     // 4608
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.                                        // 4609
 *                                                                                                                     // 4610
 * @internal                                                                                                           // 4611
 */                                                                                                                    // 4612
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {                                                    // 4613
                                                                                                                       // 4614
  /**                                                                                                                  // 4615
   * Injectable event backend                                                                                          // 4616
   */                                                                                                                  // 4617
  ReactEventListener: null,                                                                                            // 4618
                                                                                                                       // 4619
  injection: {                                                                                                         // 4620
    /**                                                                                                                // 4621
     * @param {object} ReactEventListener                                                                              // 4622
     */                                                                                                                // 4623
    injectReactEventListener: function(ReactEventListener) {                                                           // 4624
      ReactEventListener.setHandleTopLevel(                                                                            // 4625
        ReactBrowserEventEmitter.handleTopLevel                                                                        // 4626
      );                                                                                                               // 4627
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;                                                // 4628
    }                                                                                                                  // 4629
  },                                                                                                                   // 4630
                                                                                                                       // 4631
  /**                                                                                                                  // 4632
   * Sets whether or not any created callbacks should be enabled.                                                      // 4633
   *                                                                                                                   // 4634
   * @param {boolean} enabled True if callbacks should be enabled.                                                     // 4635
   */                                                                                                                  // 4636
  setEnabled: function(enabled) {                                                                                      // 4637
    if (ReactBrowserEventEmitter.ReactEventListener) {                                                                 // 4638
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);                                                 // 4639
    }                                                                                                                  // 4640
  },                                                                                                                   // 4641
                                                                                                                       // 4642
  /**                                                                                                                  // 4643
   * @return {boolean} True if callbacks are enabled.                                                                  // 4644
   */                                                                                                                  // 4645
  isEnabled: function() {                                                                                              // 4646
    return !!(                                                                                                         // 4647
      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())         // 4648
    );                                                                                                                 // 4649
  },                                                                                                                   // 4650
                                                                                                                       // 4651
  /**                                                                                                                  // 4652
   * We listen for bubbled touch events on the document object.                                                        // 4653
   *                                                                                                                   // 4654
   * Firefox v8.01 (and possibly others) exhibited strange behavior when                                               // 4655
   * mounting `onmousemove` events at some node that was not the document                                              // 4656
   * element. The symptoms were that if your mouse is not moving over something                                        // 4657
   * contained within that mount point (for example on the background) the                                             // 4658
   * top-level listeners for `onmousemove` won't be called. However, if you                                            // 4659
   * register the `mousemove` on the document object, then it will of course                                           // 4660
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting                                         // 4661
   * top-level listeners to the document object only, at least for these                                               // 4662
   * movement types of events and possibly all events.                                                                 // 4663
   *                                                                                                                   // 4664
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html                                         // 4665
   *                                                                                                                   // 4666
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but                                         // 4667
   * they bubble to document.                                                                                          // 4668
   *                                                                                                                   // 4669
   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 4670
   * @param {object} contentDocumentHandle Document which owns the container                                           // 4671
   */                                                                                                                  // 4672
  listenTo: function(registrationName, contentDocumentHandle) {                                                        // 4673
    var mountAt = contentDocumentHandle;                                                                               // 4674
    var isListening = getListeningForDocument(mountAt);                                                                // 4675
    var dependencies = EventPluginRegistry.                                                                            // 4676
      registrationNameDependencies[registrationName];                                                                  // 4677
                                                                                                                       // 4678
    var topLevelTypes = EventConstants.topLevelTypes;                                                                  // 4679
    for (var i = 0, l = dependencies.length; i < l; i++) {                                                             // 4680
      var dependency = dependencies[i];                                                                                // 4681
      if (!(                                                                                                           // 4682
            (isListening.hasOwnProperty(dependency) && isListening[dependency])                                        // 4683
          )) {                                                                                                         // 4684
        if (dependency === topLevelTypes.topWheel) {                                                                   // 4685
          if (isEventSupported('wheel')) {                                                                             // 4686
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                              // 4687
              topLevelTypes.topWheel,                                                                                  // 4688
              'wheel',                                                                                                 // 4689
              mountAt                                                                                                  // 4690
            );                                                                                                         // 4691
          } else if (isEventSupported('mousewheel')) {                                                                 // 4692
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                              // 4693
              topLevelTypes.topWheel,                                                                                  // 4694
              'mousewheel',                                                                                            // 4695
              mountAt                                                                                                  // 4696
            );                                                                                                         // 4697
          } else {                                                                                                     // 4698
            // Firefox needs to capture a different mouse scroll event.                                                // 4699
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html                                             // 4700
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                              // 4701
              topLevelTypes.topWheel,                                                                                  // 4702
              'DOMMouseScroll',                                                                                        // 4703
              mountAt                                                                                                  // 4704
            );                                                                                                         // 4705
          }                                                                                                            // 4706
        } else if (dependency === topLevelTypes.topScroll) {                                                           // 4707
                                                                                                                       // 4708
          if (isEventSupported('scroll', true)) {                                                                      // 4709
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(                                             // 4710
              topLevelTypes.topScroll,                                                                                 // 4711
              'scroll',                                                                                                // 4712
              mountAt                                                                                                  // 4713
            );                                                                                                         // 4714
          } else {                                                                                                     // 4715
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                              // 4716
              topLevelTypes.topScroll,                                                                                 // 4717
              'scroll',                                                                                                // 4718
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE                                                // 4719
            );                                                                                                         // 4720
          }                                                                                                            // 4721
        } else if (dependency === topLevelTypes.topFocus ||                                                            // 4722
            dependency === topLevelTypes.topBlur) {                                                                    // 4723
                                                                                                                       // 4724
          if (isEventSupported('focus', true)) {                                                                       // 4725
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(                                             // 4726
              topLevelTypes.topFocus,                                                                                  // 4727
              'focus',                                                                                                 // 4728
              mountAt                                                                                                  // 4729
            );                                                                                                         // 4730
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(                                             // 4731
              topLevelTypes.topBlur,                                                                                   // 4732
              'blur',                                                                                                  // 4733
              mountAt                                                                                                  // 4734
            );                                                                                                         // 4735
          } else if (isEventSupported('focusin')) {                                                                    // 4736
            // IE has `focusin` and `focusout` events which bubble.                                                    // 4737
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html                                // 4738
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                              // 4739
              topLevelTypes.topFocus,                                                                                  // 4740
              'focusin',                                                                                               // 4741
              mountAt                                                                                                  // 4742
            );                                                                                                         // 4743
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                              // 4744
              topLevelTypes.topBlur,                                                                                   // 4745
              'focusout',                                                                                              // 4746
              mountAt                                                                                                  // 4747
            );                                                                                                         // 4748
          }                                                                                                            // 4749
                                                                                                                       // 4750
          // to make sure blur and focus event listeners are only attached once                                        // 4751
          isListening[topLevelTypes.topBlur] = true;                                                                   // 4752
          isListening[topLevelTypes.topFocus] = true;                                                                  // 4753
        } else if (topEventMapping.hasOwnProperty(dependency)) {                                                       // 4754
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                                // 4755
            dependency,                                                                                                // 4756
            topEventMapping[dependency],                                                                               // 4757
            mountAt                                                                                                    // 4758
          );                                                                                                           // 4759
        }                                                                                                              // 4760
                                                                                                                       // 4761
        isListening[dependency] = true;                                                                                // 4762
      }                                                                                                                // 4763
    }                                                                                                                  // 4764
  },                                                                                                                   // 4765
                                                                                                                       // 4766
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {                                                  // 4767
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                               // 4768
      topLevelType,                                                                                                    // 4769
      handlerBaseName,                                                                                                 // 4770
      handle                                                                                                           // 4771
    );                                                                                                                 // 4772
  },                                                                                                                   // 4773
                                                                                                                       // 4774
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {                                                 // 4775
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(                                              // 4776
      topLevelType,                                                                                                    // 4777
      handlerBaseName,                                                                                                 // 4778
      handle                                                                                                           // 4779
    );                                                                                                                 // 4780
  },                                                                                                                   // 4781
                                                                                                                       // 4782
  /**                                                                                                                  // 4783
   * Listens to window scroll and resize events. We cache scroll values so that                                        // 4784
   * application code can access them without triggering reflows.                                                      // 4785
   *                                                                                                                   // 4786
   * NOTE: Scroll events do not bubble.                                                                                // 4787
   *                                                                                                                   // 4788
   * @see http://www.quirksmode.org/dom/events/scroll.html                                                             // 4789
   */                                                                                                                  // 4790
  ensureScrollValueMonitoring: function() {                                                                            // 4791
    if (!isMonitoringScrollValue) {                                                                                    // 4792
      var refresh = ViewportMetrics.refreshScrollValues;                                                               // 4793
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);                                         // 4794
      isMonitoringScrollValue = true;                                                                                  // 4795
    }                                                                                                                  // 4796
  },                                                                                                                   // 4797
                                                                                                                       // 4798
  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,                                                   // 4799
                                                                                                                       // 4800
  registrationNameModules: EventPluginHub.registrationNameModules,                                                     // 4801
                                                                                                                       // 4802
  putListener: EventPluginHub.putListener,                                                                             // 4803
                                                                                                                       // 4804
  getListener: EventPluginHub.getListener,                                                                             // 4805
                                                                                                                       // 4806
  deleteListener: EventPluginHub.deleteListener,                                                                       // 4807
                                                                                                                       // 4808
  deleteAllListeners: EventPluginHub.deleteAllListeners                                                                // 4809
                                                                                                                       // 4810
});                                                                                                                    // 4811
                                                                                                                       // 4812
module.exports = ReactBrowserEventEmitter;                                                                             // 4813
                                                                                                                       // 4814
},{"./EventConstants":"react/lib/EventConstants","./EventPluginHub":"react/lib/EventPluginHub","./EventPluginRegistry":"react/lib/EventPluginRegistry","./Object.assign":"react/lib/Object.assign","./ReactEventEmitterMixin":"react/lib/ReactEventEmitterMixin","./ViewportMetrics":"react/lib/ViewportMetrics","./isEventSupported":"react/lib/isEventSupported"}],"react/lib/ReactCSSTransitionGroupChild":[function(require,module,exports){
(function (process){                                                                                                   // 4816
/**                                                                                                                    // 4817
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 4818
 * All rights reserved.                                                                                                // 4819
 *                                                                                                                     // 4820
 * This source code is licensed under the BSD-style license found in the                                               // 4821
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 4822
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 4823
 *                                                                                                                     // 4824
 * @typechecks                                                                                                         // 4825
 * @providesModule ReactCSSTransitionGroupChild                                                                        // 4826
 */                                                                                                                    // 4827
                                                                                                                       // 4828
'use strict';                                                                                                          // 4829
                                                                                                                       // 4830
var React = require("./React");                                                                                        // 4831
                                                                                                                       // 4832
var CSSCore = require("./CSSCore");                                                                                    // 4833
var ReactTransitionEvents = require("./ReactTransitionEvents");                                                        // 4834
                                                                                                                       // 4835
var onlyChild = require("./onlyChild");                                                                                // 4836
var warning = require("./warning");                                                                                    // 4837
                                                                                                                       // 4838
// We don't remove the element from the DOM until we receive an animationend or                                        // 4839
// transitionend event. If the user screws up and forgets to add an animation                                          // 4840
// their node will be stuck in the DOM forever, so we detect if an animation                                           // 4841
// does not start and if it doesn't, we just call the end listener immediately.                                        // 4842
var TICK = 17;                                                                                                         // 4843
var NO_EVENT_TIMEOUT = 5000;                                                                                           // 4844
                                                                                                                       // 4845
var noEventListener = null;                                                                                            // 4846
                                                                                                                       // 4847
                                                                                                                       // 4848
if ("production" !== process.env.NODE_ENV) {                                                                           // 4849
  noEventListener = function() {                                                                                       // 4850
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 4851
      false,                                                                                                           // 4852
      'transition(): tried to perform an animation without ' +                                                         // 4853
      'an animationend or transitionend event after timeout (' +                                                       // 4854
      '%sms). You should either disable this ' +                                                                       // 4855
      'transition in JS or add a CSS animation/transition.',                                                           // 4856
      NO_EVENT_TIMEOUT                                                                                                 // 4857
    ) : null);                                                                                                         // 4858
  };                                                                                                                   // 4859
}                                                                                                                      // 4860
                                                                                                                       // 4861
var ReactCSSTransitionGroupChild = React.createClass({                                                                 // 4862
  displayName: 'ReactCSSTransitionGroupChild',                                                                         // 4863
                                                                                                                       // 4864
  transition: function(animationType, finishCallback) {                                                                // 4865
    var node = this.getDOMNode();                                                                                      // 4866
    var className = this.props.name + '-' + animationType;                                                             // 4867
    var activeClassName = className + '-active';                                                                       // 4868
    var noEventTimeout = null;                                                                                         // 4869
                                                                                                                       // 4870
    var endListener = function(e) {                                                                                    // 4871
      if (e && e.target !== node) {                                                                                    // 4872
        return;                                                                                                        // 4873
      }                                                                                                                // 4874
      if ("production" !== process.env.NODE_ENV) {                                                                     // 4875
        clearTimeout(noEventTimeout);                                                                                  // 4876
      }                                                                                                                // 4877
                                                                                                                       // 4878
      CSSCore.removeClass(node, className);                                                                            // 4879
      CSSCore.removeClass(node, activeClassName);                                                                      // 4880
                                                                                                                       // 4881
      ReactTransitionEvents.removeEndEventListener(node, endListener);                                                 // 4882
                                                                                                                       // 4883
      // Usually this optional callback is used for informing an owner of                                              // 4884
      // a leave animation and telling it to remove the child.                                                         // 4885
      if (finishCallback) {                                                                                            // 4886
        finishCallback();                                                                                              // 4887
      }                                                                                                                // 4888
    };                                                                                                                 // 4889
                                                                                                                       // 4890
    ReactTransitionEvents.addEndEventListener(node, endListener);                                                      // 4891
                                                                                                                       // 4892
    CSSCore.addClass(node, className);                                                                                 // 4893
                                                                                                                       // 4894
    // Need to do this to actually trigger a transition.                                                               // 4895
    this.queueClass(activeClassName);                                                                                  // 4896
                                                                                                                       // 4897
    if ("production" !== process.env.NODE_ENV) {                                                                       // 4898
      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);                                                  // 4899
    }                                                                                                                  // 4900
  },                                                                                                                   // 4901
                                                                                                                       // 4902
  queueClass: function(className) {                                                                                    // 4903
    this.classNameQueue.push(className);                                                                               // 4904
                                                                                                                       // 4905
    if (!this.timeout) {                                                                                               // 4906
      this.timeout = setTimeout(this.flushClassNameQueue, TICK);                                                       // 4907
    }                                                                                                                  // 4908
  },                                                                                                                   // 4909
                                                                                                                       // 4910
  flushClassNameQueue: function() {                                                                                    // 4911
    if (this.isMounted()) {                                                                                            // 4912
      this.classNameQueue.forEach(                                                                                     // 4913
        CSSCore.addClass.bind(CSSCore, this.getDOMNode())                                                              // 4914
      );                                                                                                               // 4915
    }                                                                                                                  // 4916
    this.classNameQueue.length = 0;                                                                                    // 4917
    this.timeout = null;                                                                                               // 4918
  },                                                                                                                   // 4919
                                                                                                                       // 4920
  componentWillMount: function() {                                                                                     // 4921
    this.classNameQueue = [];                                                                                          // 4922
  },                                                                                                                   // 4923
                                                                                                                       // 4924
  componentWillUnmount: function() {                                                                                   // 4925
    if (this.timeout) {                                                                                                // 4926
      clearTimeout(this.timeout);                                                                                      // 4927
    }                                                                                                                  // 4928
  },                                                                                                                   // 4929
                                                                                                                       // 4930
  componentWillAppear: function(done) {                                                                                // 4931
    if (this.props.appear) {                                                                                           // 4932
      this.transition('appear', done);                                                                                 // 4933
    } else {                                                                                                           // 4934
      done();                                                                                                          // 4935
    }                                                                                                                  // 4936
  },                                                                                                                   // 4937
                                                                                                                       // 4938
  componentWillEnter: function(done) {                                                                                 // 4939
    if (this.props.enter) {                                                                                            // 4940
      this.transition('enter', done);                                                                                  // 4941
    } else {                                                                                                           // 4942
      done();                                                                                                          // 4943
    }                                                                                                                  // 4944
  },                                                                                                                   // 4945
                                                                                                                       // 4946
  componentWillLeave: function(done) {                                                                                 // 4947
    if (this.props.leave) {                                                                                            // 4948
      this.transition('leave', done);                                                                                  // 4949
    } else {                                                                                                           // 4950
      done();                                                                                                          // 4951
    }                                                                                                                  // 4952
  },                                                                                                                   // 4953
                                                                                                                       // 4954
  render: function() {                                                                                                 // 4955
    return onlyChild(this.props.children);                                                                             // 4956
  }                                                                                                                    // 4957
});                                                                                                                    // 4958
                                                                                                                       // 4959
module.exports = ReactCSSTransitionGroupChild;                                                                         // 4960
                                                                                                                       // 4961
}).call(this,require('_process'))                                                                                      // 4962
                                                                                                                       // 4963
},{"./CSSCore":"react/lib/CSSCore","./React":"react/lib/React","./ReactTransitionEvents":"react/lib/ReactTransitionEvents","./onlyChild":"react/lib/onlyChild","./warning":"react/lib/warning","_process":1}],"react/lib/ReactCSSTransitionGroup":[function(require,module,exports){
/**                                                                                                                    // 4965
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 4966
 * All rights reserved.                                                                                                // 4967
 *                                                                                                                     // 4968
 * This source code is licensed under the BSD-style license found in the                                               // 4969
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 4970
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 4971
 *                                                                                                                     // 4972
 * @typechecks                                                                                                         // 4973
 * @providesModule ReactCSSTransitionGroup                                                                             // 4974
 */                                                                                                                    // 4975
                                                                                                                       // 4976
'use strict';                                                                                                          // 4977
                                                                                                                       // 4978
var React = require("./React");                                                                                        // 4979
                                                                                                                       // 4980
var assign = require("./Object.assign");                                                                               // 4981
                                                                                                                       // 4982
var ReactTransitionGroup = React.createFactory(                                                                        // 4983
  require("./ReactTransitionGroup")                                                                                    // 4984
);                                                                                                                     // 4985
var ReactCSSTransitionGroupChild = React.createFactory(                                                                // 4986
  require("./ReactCSSTransitionGroupChild")                                                                            // 4987
);                                                                                                                     // 4988
                                                                                                                       // 4989
var ReactCSSTransitionGroup = React.createClass({                                                                      // 4990
  displayName: 'ReactCSSTransitionGroup',                                                                              // 4991
                                                                                                                       // 4992
  propTypes: {                                                                                                         // 4993
    transitionName: React.PropTypes.string.isRequired,                                                                 // 4994
    transitionAppear: React.PropTypes.bool,                                                                            // 4995
    transitionEnter: React.PropTypes.bool,                                                                             // 4996
    transitionLeave: React.PropTypes.bool                                                                              // 4997
  },                                                                                                                   // 4998
                                                                                                                       // 4999
  getDefaultProps: function() {                                                                                        // 5000
    return {                                                                                                           // 5001
      transitionAppear: false,                                                                                         // 5002
      transitionEnter: true,                                                                                           // 5003
      transitionLeave: true                                                                                            // 5004
    };                                                                                                                 // 5005
  },                                                                                                                   // 5006
                                                                                                                       // 5007
  _wrapChild: function(child) {                                                                                        // 5008
    // We need to provide this childFactory so that                                                                    // 5009
    // ReactCSSTransitionGroupChild can receive updates to name, enter, and                                            // 5010
    // leave while it is leaving.                                                                                      // 5011
    return ReactCSSTransitionGroupChild(                                                                               // 5012
      {                                                                                                                // 5013
        name: this.props.transitionName,                                                                               // 5014
        appear: this.props.transitionAppear,                                                                           // 5015
        enter: this.props.transitionEnter,                                                                             // 5016
        leave: this.props.transitionLeave                                                                              // 5017
      },                                                                                                               // 5018
      child                                                                                                            // 5019
    );                                                                                                                 // 5020
  },                                                                                                                   // 5021
                                                                                                                       // 5022
  render: function() {                                                                                                 // 5023
    return (                                                                                                           // 5024
      ReactTransitionGroup(                                                                                            // 5025
        assign({}, this.props, {childFactory: this._wrapChild})                                                        // 5026
      )                                                                                                                // 5027
    );                                                                                                                 // 5028
  }                                                                                                                    // 5029
});                                                                                                                    // 5030
                                                                                                                       // 5031
module.exports = ReactCSSTransitionGroup;                                                                              // 5032
                                                                                                                       // 5033
},{"./Object.assign":"react/lib/Object.assign","./React":"react/lib/React","./ReactCSSTransitionGroupChild":"react/lib/ReactCSSTransitionGroupChild","./ReactTransitionGroup":"react/lib/ReactTransitionGroup"}],"react/lib/ReactChildReconciler":[function(require,module,exports){
/**                                                                                                                    // 5035
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 5036
 * All rights reserved.                                                                                                // 5037
 *                                                                                                                     // 5038
 * This source code is licensed under the BSD-style license found in the                                               // 5039
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 5040
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 5041
 *                                                                                                                     // 5042
 * @providesModule ReactChildReconciler                                                                                // 5043
 * @typechecks static-only                                                                                             // 5044
 */                                                                                                                    // 5045
                                                                                                                       // 5046
'use strict';                                                                                                          // 5047
                                                                                                                       // 5048
var ReactReconciler = require("./ReactReconciler");                                                                    // 5049
                                                                                                                       // 5050
var flattenChildren = require("./flattenChildren");                                                                    // 5051
var instantiateReactComponent = require("./instantiateReactComponent");                                                // 5052
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");                                              // 5053
                                                                                                                       // 5054
/**                                                                                                                    // 5055
 * ReactChildReconciler provides helpers for initializing or updating a set of                                         // 5056
 * children. Its output is suitable for passing it onto ReactMultiChild which                                          // 5057
 * does diffed reordering and insertion.                                                                               // 5058
 */                                                                                                                    // 5059
var ReactChildReconciler = {                                                                                           // 5060
                                                                                                                       // 5061
  /**                                                                                                                  // 5062
   * Generates a "mount image" for each of the supplied children. In the case                                          // 5063
   * of `ReactDOMComponent`, a mount image is a string of markup.                                                      // 5064
   *                                                                                                                   // 5065
   * @param {?object} nestedChildNodes Nested child maps.                                                              // 5066
   * @return {?object} A set of child instances.                                                                       // 5067
   * @internal                                                                                                         // 5068
   */                                                                                                                  // 5069
  instantiateChildren: function(nestedChildNodes, transaction, context) {                                              // 5070
    var children = flattenChildren(nestedChildNodes);                                                                  // 5071
    for (var name in children) {                                                                                       // 5072
      if (children.hasOwnProperty(name)) {                                                                             // 5073
        var child = children[name];                                                                                    // 5074
        // The rendered children must be turned into instances as they're                                              // 5075
        // mounted.                                                                                                    // 5076
        var childInstance = instantiateReactComponent(child, null);                                                    // 5077
        children[name] = childInstance;                                                                                // 5078
      }                                                                                                                // 5079
    }                                                                                                                  // 5080
    return children;                                                                                                   // 5081
  },                                                                                                                   // 5082
                                                                                                                       // 5083
  /**                                                                                                                  // 5084
   * Updates the rendered children and returns a new set of children.                                                  // 5085
   *                                                                                                                   // 5086
   * @param {?object} prevChildren Previously initialized set of children.                                             // 5087
   * @param {?object} nextNestedChildNodes Nested child maps.                                                          // 5088
   * @param {ReactReconcileTransaction} transaction                                                                    // 5089
   * @param {object} context                                                                                           // 5090
   * @return {?object} A new set of child instances.                                                                   // 5091
   * @internal                                                                                                         // 5092
   */                                                                                                                  // 5093
  updateChildren: function(                                                                                            // 5094
    prevChildren,                                                                                                      // 5095
    nextNestedChildNodes,                                                                                              // 5096
    transaction,                                                                                                       // 5097
    context) {                                                                                                         // 5098
    // We currently don't have a way to track moves here but if we use iterators                                       // 5099
    // instead of for..in we can zip the iterators and check if an item has                                            // 5100
    // moved.                                                                                                          // 5101
    // TODO: If nothing has changed, return the prevChildren object so that we                                         // 5102
    // can quickly bailout if nothing has changed.                                                                     // 5103
    var nextChildren = flattenChildren(nextNestedChildNodes);                                                          // 5104
    if (!nextChildren && !prevChildren) {                                                                              // 5105
      return null;                                                                                                     // 5106
    }                                                                                                                  // 5107
    var name;                                                                                                          // 5108
    for (name in nextChildren) {                                                                                       // 5109
      if (!nextChildren.hasOwnProperty(name)) {                                                                        // 5110
        continue;                                                                                                      // 5111
      }                                                                                                                // 5112
      var prevChild = prevChildren && prevChildren[name];                                                              // 5113
      var prevElement = prevChild && prevChild._currentElement;                                                        // 5114
      var nextElement = nextChildren[name];                                                                            // 5115
      if (shouldUpdateReactComponent(prevElement, nextElement)) {                                                      // 5116
        ReactReconciler.receiveComponent(                                                                              // 5117
          prevChild, nextElement, transaction, context                                                                 // 5118
        );                                                                                                             // 5119
        nextChildren[name] = prevChild;                                                                                // 5120
      } else {                                                                                                         // 5121
        if (prevChild) {                                                                                               // 5122
          ReactReconciler.unmountComponent(prevChild, name);                                                           // 5123
        }                                                                                                              // 5124
        // The child must be instantiated before it's mounted.                                                         // 5125
        var nextChildInstance = instantiateReactComponent(                                                             // 5126
          nextElement,                                                                                                 // 5127
          null                                                                                                         // 5128
        );                                                                                                             // 5129
        nextChildren[name] = nextChildInstance;                                                                        // 5130
      }                                                                                                                // 5131
    }                                                                                                                  // 5132
    // Unmount children that are no longer present.                                                                    // 5133
    for (name in prevChildren) {                                                                                       // 5134
      if (prevChildren.hasOwnProperty(name) &&                                                                         // 5135
          !(nextChildren && nextChildren.hasOwnProperty(name))) {                                                      // 5136
        ReactReconciler.unmountComponent(prevChildren[name]);                                                          // 5137
      }                                                                                                                // 5138
    }                                                                                                                  // 5139
    return nextChildren;                                                                                               // 5140
  },                                                                                                                   // 5141
                                                                                                                       // 5142
  /**                                                                                                                  // 5143
   * Unmounts all rendered children. This should be used to clean up children                                          // 5144
   * when this component is unmounted.                                                                                 // 5145
   *                                                                                                                   // 5146
   * @param {?object} renderedChildren Previously initialized set of children.                                         // 5147
   * @internal                                                                                                         // 5148
   */                                                                                                                  // 5149
  unmountChildren: function(renderedChildren) {                                                                        // 5150
    for (var name in renderedChildren) {                                                                               // 5151
      var renderedChild = renderedChildren[name];                                                                      // 5152
      ReactReconciler.unmountComponent(renderedChild);                                                                 // 5153
    }                                                                                                                  // 5154
  }                                                                                                                    // 5155
                                                                                                                       // 5156
};                                                                                                                     // 5157
                                                                                                                       // 5158
module.exports = ReactChildReconciler;                                                                                 // 5159
                                                                                                                       // 5160
},{"./ReactReconciler":"react/lib/ReactReconciler","./flattenChildren":"react/lib/flattenChildren","./instantiateReactComponent":"react/lib/instantiateReactComponent","./shouldUpdateReactComponent":"react/lib/shouldUpdateReactComponent"}],"react/lib/ReactChildren":[function(require,module,exports){
(function (process){                                                                                                   // 5162
/**                                                                                                                    // 5163
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 5164
 * All rights reserved.                                                                                                // 5165
 *                                                                                                                     // 5166
 * This source code is licensed under the BSD-style license found in the                                               // 5167
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 5168
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 5169
 *                                                                                                                     // 5170
 * @providesModule ReactChildren                                                                                       // 5171
 */                                                                                                                    // 5172
                                                                                                                       // 5173
'use strict';                                                                                                          // 5174
                                                                                                                       // 5175
var PooledClass = require("./PooledClass");                                                                            // 5176
var ReactFragment = require("./ReactFragment");                                                                        // 5177
                                                                                                                       // 5178
var traverseAllChildren = require("./traverseAllChildren");                                                            // 5179
var warning = require("./warning");                                                                                    // 5180
                                                                                                                       // 5181
var twoArgumentPooler = PooledClass.twoArgumentPooler;                                                                 // 5182
var threeArgumentPooler = PooledClass.threeArgumentPooler;                                                             // 5183
                                                                                                                       // 5184
/**                                                                                                                    // 5185
 * PooledClass representing the bookkeeping associated with performing a child                                         // 5186
 * traversal. Allows avoiding binding callbacks.                                                                       // 5187
 *                                                                                                                     // 5188
 * @constructor ForEachBookKeeping                                                                                     // 5189
 * @param {!function} forEachFunction Function to perform traversal with.                                              // 5190
 * @param {?*} forEachContext Context to perform context with.                                                         // 5191
 */                                                                                                                    // 5192
function ForEachBookKeeping(forEachFunction, forEachContext) {                                                         // 5193
  this.forEachFunction = forEachFunction;                                                                              // 5194
  this.forEachContext = forEachContext;                                                                                // 5195
}                                                                                                                      // 5196
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);                                                       // 5197
                                                                                                                       // 5198
function forEachSingleChild(traverseContext, child, name, i) {                                                         // 5199
  var forEachBookKeeping = traverseContext;                                                                            // 5200
  forEachBookKeeping.forEachFunction.call(                                                                             // 5201
    forEachBookKeeping.forEachContext, child, i);                                                                      // 5202
}                                                                                                                      // 5203
                                                                                                                       // 5204
/**                                                                                                                    // 5205
 * Iterates through children that are typically specified as `props.children`.                                         // 5206
 *                                                                                                                     // 5207
 * The provided forEachFunc(child, index) will be called for each                                                      // 5208
 * leaf child.                                                                                                         // 5209
 *                                                                                                                     // 5210
 * @param {?*} children Children tree container.                                                                       // 5211
 * @param {function(*, int)} forEachFunc.                                                                              // 5212
 * @param {*} forEachContext Context for forEachContext.                                                               // 5213
 */                                                                                                                    // 5214
function forEachChildren(children, forEachFunc, forEachContext) {                                                      // 5215
  if (children == null) {                                                                                              // 5216
    return children;                                                                                                   // 5217
  }                                                                                                                    // 5218
                                                                                                                       // 5219
  var traverseContext =                                                                                                // 5220
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);                                                         // 5221
  traverseAllChildren(children, forEachSingleChild, traverseContext);                                                  // 5222
  ForEachBookKeeping.release(traverseContext);                                                                         // 5223
}                                                                                                                      // 5224
                                                                                                                       // 5225
/**                                                                                                                    // 5226
 * PooledClass representing the bookkeeping associated with performing a child                                         // 5227
 * mapping. Allows avoiding binding callbacks.                                                                         // 5228
 *                                                                                                                     // 5229
 * @constructor MapBookKeeping                                                                                         // 5230
 * @param {!*} mapResult Object containing the ordered map of results.                                                 // 5231
 * @param {!function} mapFunction Function to perform mapping with.                                                    // 5232
 * @param {?*} mapContext Context to perform mapping with.                                                             // 5233
 */                                                                                                                    // 5234
function MapBookKeeping(mapResult, mapFunction, mapContext) {                                                          // 5235
  this.mapResult = mapResult;                                                                                          // 5236
  this.mapFunction = mapFunction;                                                                                      // 5237
  this.mapContext = mapContext;                                                                                        // 5238
}                                                                                                                      // 5239
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);                                                         // 5240
                                                                                                                       // 5241
function mapSingleChildIntoContext(traverseContext, child, name, i) {                                                  // 5242
  var mapBookKeeping = traverseContext;                                                                                // 5243
  var mapResult = mapBookKeeping.mapResult;                                                                            // 5244
                                                                                                                       // 5245
  var keyUnique = !mapResult.hasOwnProperty(name);                                                                     // 5246
  if ("production" !== process.env.NODE_ENV) {                                                                         // 5247
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 5248
      keyUnique,                                                                                                       // 5249
      'ReactChildren.map(...): Encountered two children with the same key, ' +                                         // 5250
      '`%s`. Child keys must be unique; when two children share a key, only ' +                                        // 5251
      'the first child will be used.',                                                                                 // 5252
      name                                                                                                             // 5253
    ) : null);                                                                                                         // 5254
  }                                                                                                                    // 5255
                                                                                                                       // 5256
  if (keyUnique) {                                                                                                     // 5257
    var mappedChild =                                                                                                  // 5258
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);                                            // 5259
    mapResult[name] = mappedChild;                                                                                     // 5260
  }                                                                                                                    // 5261
}                                                                                                                      // 5262
                                                                                                                       // 5263
/**                                                                                                                    // 5264
 * Maps children that are typically specified as `props.children`.                                                     // 5265
 *                                                                                                                     // 5266
 * The provided mapFunction(child, key, index) will be called for each                                                 // 5267
 * leaf child.                                                                                                         // 5268
 *                                                                                                                     // 5269
 * TODO: This may likely break any calls to `ReactChildren.map` that were                                              // 5270
 * previously relying on the fact that we guarded against null children.                                               // 5271
 *                                                                                                                     // 5272
 * @param {?*} children Children tree container.                                                                       // 5273
 * @param {function(*, int)} mapFunction.                                                                              // 5274
 * @param {*} mapContext Context for mapFunction.                                                                      // 5275
 * @return {object} Object containing the ordered map of results.                                                      // 5276
 */                                                                                                                    // 5277
function mapChildren(children, func, context) {                                                                        // 5278
  if (children == null) {                                                                                              // 5279
    return children;                                                                                                   // 5280
  }                                                                                                                    // 5281
                                                                                                                       // 5282
  var mapResult = {};                                                                                                  // 5283
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);                                            // 5284
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);                                           // 5285
  MapBookKeeping.release(traverseContext);                                                                             // 5286
  return ReactFragment.create(mapResult);                                                                              // 5287
}                                                                                                                      // 5288
                                                                                                                       // 5289
function forEachSingleChildDummy(traverseContext, child, name, i) {                                                    // 5290
  return null;                                                                                                         // 5291
}                                                                                                                      // 5292
                                                                                                                       // 5293
/**                                                                                                                    // 5294
 * Count the number of children that are typically specified as                                                        // 5295
 * `props.children`.                                                                                                   // 5296
 *                                                                                                                     // 5297
 * @param {?*} children Children tree container.                                                                       // 5298
 * @return {number} The number of children.                                                                            // 5299
 */                                                                                                                    // 5300
function countChildren(children, context) {                                                                            // 5301
  return traverseAllChildren(children, forEachSingleChildDummy, null);                                                 // 5302
}                                                                                                                      // 5303
                                                                                                                       // 5304
var ReactChildren = {                                                                                                  // 5305
  forEach: forEachChildren,                                                                                            // 5306
  map: mapChildren,                                                                                                    // 5307
  count: countChildren                                                                                                 // 5308
};                                                                                                                     // 5309
                                                                                                                       // 5310
module.exports = ReactChildren;                                                                                        // 5311
                                                                                                                       // 5312
}).call(this,require('_process'))                                                                                      // 5313
                                                                                                                       // 5314
},{"./PooledClass":"react/lib/PooledClass","./ReactFragment":"react/lib/ReactFragment","./traverseAllChildren":"react/lib/traverseAllChildren","./warning":"react/lib/warning","_process":1}],"react/lib/ReactClass":[function(require,module,exports){
(function (process){                                                                                                   // 5316
/**                                                                                                                    // 5317
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 5318
 * All rights reserved.                                                                                                // 5319
 *                                                                                                                     // 5320
 * This source code is licensed under the BSD-style license found in the                                               // 5321
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 5322
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 5323
 *                                                                                                                     // 5324
 * @providesModule ReactClass                                                                                          // 5325
 */                                                                                                                    // 5326
                                                                                                                       // 5327
'use strict';                                                                                                          // 5328
                                                                                                                       // 5329
var ReactComponent = require("./ReactComponent");                                                                      // 5330
var ReactCurrentOwner = require("./ReactCurrentOwner");                                                                // 5331
var ReactElement = require("./ReactElement");                                                                          // 5332
var ReactErrorUtils = require("./ReactErrorUtils");                                                                    // 5333
var ReactInstanceMap = require("./ReactInstanceMap");                                                                  // 5334
var ReactLifeCycle = require("./ReactLifeCycle");                                                                      // 5335
var ReactPropTypeLocations = require("./ReactPropTypeLocations");                                                      // 5336
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");                                              // 5337
var ReactUpdateQueue = require("./ReactUpdateQueue");                                                                  // 5338
                                                                                                                       // 5339
var assign = require("./Object.assign");                                                                               // 5340
var invariant = require("./invariant");                                                                                // 5341
var keyMirror = require("./keyMirror");                                                                                // 5342
var keyOf = require("./keyOf");                                                                                        // 5343
var warning = require("./warning");                                                                                    // 5344
                                                                                                                       // 5345
var MIXINS_KEY = keyOf({mixins: null});                                                                                // 5346
                                                                                                                       // 5347
/**                                                                                                                    // 5348
 * Policies that describe methods in `ReactClassInterface`.                                                            // 5349
 */                                                                                                                    // 5350
var SpecPolicy = keyMirror({                                                                                           // 5351
  /**                                                                                                                  // 5352
   * These methods may be defined only once by the class specification or mixin.                                       // 5353
   */                                                                                                                  // 5354
  DEFINE_ONCE: null,                                                                                                   // 5355
  /**                                                                                                                  // 5356
   * These methods may be defined by both the class specification and mixins.                                          // 5357
   * Subsequent definitions will be chained. These methods must return void.                                           // 5358
   */                                                                                                                  // 5359
  DEFINE_MANY: null,                                                                                                   // 5360
  /**                                                                                                                  // 5361
   * These methods are overriding the base class.                                                                      // 5362
   */                                                                                                                  // 5363
  OVERRIDE_BASE: null,                                                                                                 // 5364
  /**                                                                                                                  // 5365
   * These methods are similar to DEFINE_MANY, except we assume they return                                            // 5366
   * objects. We try to merge the keys of the return values of all the mixed in                                        // 5367
   * functions. If there is a key conflict we throw.                                                                   // 5368
   */                                                                                                                  // 5369
  DEFINE_MANY_MERGED: null                                                                                             // 5370
});                                                                                                                    // 5371
                                                                                                                       // 5372
                                                                                                                       // 5373
var injectedMixins = [];                                                                                               // 5374
                                                                                                                       // 5375
/**                                                                                                                    // 5376
 * Composite components are higher-level components that compose other composite                                       // 5377
 * or native components.                                                                                               // 5378
 *                                                                                                                     // 5379
 * To create a new type of `ReactClass`, pass a specification of                                                       // 5380
 * your new class to `React.createClass`. The only requirement of your class                                           // 5381
 * specification is that you implement a `render` method.                                                              // 5382
 *                                                                                                                     // 5383
 *   var MyComponent = React.createClass({                                                                             // 5384
 *     render: function() {                                                                                            // 5385
 *       return <div>Hello World</div>;                                                                                // 5386
 *     }                                                                                                               // 5387
 *   });                                                                                                               // 5388
 *                                                                                                                     // 5389
 * The class specification supports a specific protocol of methods that have                                           // 5390
 * special meaning (e.g. `render`). See `ReactClassInterface` for                                                      // 5391
 * more the comprehensive protocol. Any other properties and methods in the                                            // 5392
 * class specification will available on the prototype.                                                                // 5393
 *                                                                                                                     // 5394
 * @interface ReactClassInterface                                                                                      // 5395
 * @internal                                                                                                           // 5396
 */                                                                                                                    // 5397
var ReactClassInterface = {                                                                                            // 5398
                                                                                                                       // 5399
  /**                                                                                                                  // 5400
   * An array of Mixin objects to include when defining your component.                                                // 5401
   *                                                                                                                   // 5402
   * @type {array}                                                                                                     // 5403
   * @optional                                                                                                         // 5404
   */                                                                                                                  // 5405
  mixins: SpecPolicy.DEFINE_MANY,                                                                                      // 5406
                                                                                                                       // 5407
  /**                                                                                                                  // 5408
   * An object containing properties and methods that should be defined on                                             // 5409
   * the component's constructor instead of its prototype (static methods).                                            // 5410
   *                                                                                                                   // 5411
   * @type {object}                                                                                                    // 5412
   * @optional                                                                                                         // 5413
   */                                                                                                                  // 5414
  statics: SpecPolicy.DEFINE_MANY,                                                                                     // 5415
                                                                                                                       // 5416
  /**                                                                                                                  // 5417
   * Definition of prop types for this component.                                                                      // 5418
   *                                                                                                                   // 5419
   * @type {object}                                                                                                    // 5420
   * @optional                                                                                                         // 5421
   */                                                                                                                  // 5422
  propTypes: SpecPolicy.DEFINE_MANY,                                                                                   // 5423
                                                                                                                       // 5424
  /**                                                                                                                  // 5425
   * Definition of context types for this component.                                                                   // 5426
   *                                                                                                                   // 5427
   * @type {object}                                                                                                    // 5428
   * @optional                                                                                                         // 5429
   */                                                                                                                  // 5430
  contextTypes: SpecPolicy.DEFINE_MANY,                                                                                // 5431
                                                                                                                       // 5432
  /**                                                                                                                  // 5433
   * Definition of context types this component sets for its children.                                                 // 5434
   *                                                                                                                   // 5435
   * @type {object}                                                                                                    // 5436
   * @optional                                                                                                         // 5437
   */                                                                                                                  // 5438
  childContextTypes: SpecPolicy.DEFINE_MANY,                                                                           // 5439
                                                                                                                       // 5440
  // ==== Definition methods ====                                                                                      // 5441
                                                                                                                       // 5442
  /**                                                                                                                  // 5443
   * Invoked when the component is mounted. Values in the mapping will be set on                                       // 5444
   * `this.props` if that prop is not specified (i.e. using an `in` check).                                            // 5445
   *                                                                                                                   // 5446
   * This method is invoked before `getInitialState` and therefore cannot rely                                         // 5447
   * on `this.state` or use `this.setState`.                                                                           // 5448
   *                                                                                                                   // 5449
   * @return {object}                                                                                                  // 5450
   * @optional                                                                                                         // 5451
   */                                                                                                                  // 5452
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 5453
                                                                                                                       // 5454
  /**                                                                                                                  // 5455
   * Invoked once before the component is mounted. The return value will be used                                       // 5456
   * as the initial value of `this.state`.                                                                             // 5457
   *                                                                                                                   // 5458
   *   getInitialState: function() {                                                                                   // 5459
   *     return {                                                                                                      // 5460
   *       isOn: false,                                                                                                // 5461
   *       fooBaz: new BazFoo()                                                                                        // 5462
   *     }                                                                                                             // 5463
   *   }                                                                                                               // 5464
   *                                                                                                                   // 5465
   * @return {object}                                                                                                  // 5466
   * @optional                                                                                                         // 5467
   */                                                                                                                  // 5468
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 5469
                                                                                                                       // 5470
  /**                                                                                                                  // 5471
   * @return {object}                                                                                                  // 5472
   * @optional                                                                                                         // 5473
   */                                                                                                                  // 5474
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 5475
                                                                                                                       // 5476
  /**                                                                                                                  // 5477
   * Uses props from `this.props` and state from `this.state` to render the                                            // 5478
   * structure of the component.                                                                                       // 5479
   *                                                                                                                   // 5480
   * No guarantees are made about when or how often this method is invoked, so                                         // 5481
   * it must not have side effects.                                                                                    // 5482
   *                                                                                                                   // 5483
   *   render: function() {                                                                                            // 5484
   *     var name = this.props.name;                                                                                   // 5485
   *     return <div>Hello, {name}!</div>;                                                                             // 5486
   *   }                                                                                                               // 5487
   *                                                                                                                   // 5488
   * @return {ReactComponent}                                                                                          // 5489
   * @nosideeffects                                                                                                    // 5490
   * @required                                                                                                         // 5491
   */                                                                                                                  // 5492
  render: SpecPolicy.DEFINE_ONCE,                                                                                      // 5493
                                                                                                                       // 5494
                                                                                                                       // 5495
                                                                                                                       // 5496
  // ==== Delegate methods ====                                                                                        // 5497
                                                                                                                       // 5498
  /**                                                                                                                  // 5499
   * Invoked when the component is initially created and about to be mounted.                                          // 5500
   * This may have side effects, but any external subscriptions or data created                                        // 5501
   * by this method must be cleaned up in `componentWillUnmount`.                                                      // 5502
   *                                                                                                                   // 5503
   * @optional                                                                                                         // 5504
   */                                                                                                                  // 5505
  componentWillMount: SpecPolicy.DEFINE_MANY,                                                                          // 5506
                                                                                                                       // 5507
  /**                                                                                                                  // 5508
   * Invoked when the component has been mounted and has a DOM representation.                                         // 5509
   * However, there is no guarantee that the DOM node is in the document.                                              // 5510
   *                                                                                                                   // 5511
   * Use this as an opportunity to operate on the DOM when the component has                                           // 5512
   * been mounted (initialized and rendered) for the first time.                                                       // 5513
   *                                                                                                                   // 5514
   * @param {DOMElement} rootNode DOM element representing the component.                                              // 5515
   * @optional                                                                                                         // 5516
   */                                                                                                                  // 5517
  componentDidMount: SpecPolicy.DEFINE_MANY,                                                                           // 5518
                                                                                                                       // 5519
  /**                                                                                                                  // 5520
   * Invoked before the component receives new props.                                                                  // 5521
   *                                                                                                                   // 5522
   * Use this as an opportunity to react to a prop transition by updating the                                          // 5523
   * state using `this.setState`. Current props are accessed via `this.props`.                                         // 5524
   *                                                                                                                   // 5525
   *   componentWillReceiveProps: function(nextProps, nextContext) {                                                   // 5526
   *     this.setState({                                                                                               // 5527
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount                                                 // 5528
   *     });                                                                                                           // 5529
   *   }                                                                                                               // 5530
   *                                                                                                                   // 5531
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop                                        // 5532
   * transition may cause a state change, but the opposite is not true. If you                                         // 5533
   * need it, you are probably looking for `componentWillUpdate`.                                                      // 5534
   *                                                                                                                   // 5535
   * @param {object} nextProps                                                                                         // 5536
   * @optional                                                                                                         // 5537
   */                                                                                                                  // 5538
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,                                                                   // 5539
                                                                                                                       // 5540
  /**                                                                                                                  // 5541
   * Invoked while deciding if the component should be updated as a result of                                          // 5542
   * receiving new props, state and/or context.                                                                        // 5543
   *                                                                                                                   // 5544
   * Use this as an opportunity to `return false` when you're certain that the                                         // 5545
   * transition to the new props/state/context will not require a component                                            // 5546
   * update.                                                                                                           // 5547
   *                                                                                                                   // 5548
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {                                            // 5549
   *     return !equal(nextProps, this.props) ||                                                                       // 5550
   *       !equal(nextState, this.state) ||                                                                            // 5551
   *       !equal(nextContext, this.context);                                                                          // 5552
   *   }                                                                                                               // 5553
   *                                                                                                                   // 5554
   * @param {object} nextProps                                                                                         // 5555
   * @param {?object} nextState                                                                                        // 5556
   * @param {?object} nextContext                                                                                      // 5557
   * @return {boolean} True if the component should update.                                                            // 5558
   * @optional                                                                                                         // 5559
   */                                                                                                                  // 5560
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,                                                                       // 5561
                                                                                                                       // 5562
  /**                                                                                                                  // 5563
   * Invoked when the component is about to update due to a transition from                                            // 5564
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`                                         // 5565
   * and `nextContext`.                                                                                                // 5566
   *                                                                                                                   // 5567
   * Use this as an opportunity to perform preparation before an update occurs.                                        // 5568
   *                                                                                                                   // 5569
   * NOTE: You **cannot** use `this.setState()` in this method.                                                        // 5570
   *                                                                                                                   // 5571
   * @param {object} nextProps                                                                                         // 5572
   * @param {?object} nextState                                                                                        // 5573
   * @param {?object} nextContext                                                                                      // 5574
   * @param {ReactReconcileTransaction} transaction                                                                    // 5575
   * @optional                                                                                                         // 5576
   */                                                                                                                  // 5577
  componentWillUpdate: SpecPolicy.DEFINE_MANY,                                                                         // 5578
                                                                                                                       // 5579
  /**                                                                                                                  // 5580
   * Invoked when the component's DOM representation has been updated.                                                 // 5581
   *                                                                                                                   // 5582
   * Use this as an opportunity to operate on the DOM when the component has                                           // 5583
   * been updated.                                                                                                     // 5584
   *                                                                                                                   // 5585
   * @param {object} prevProps                                                                                         // 5586
   * @param {?object} prevState                                                                                        // 5587
   * @param {?object} prevContext                                                                                      // 5588
   * @param {DOMElement} rootNode DOM element representing the component.                                              // 5589
   * @optional                                                                                                         // 5590
   */                                                                                                                  // 5591
  componentDidUpdate: SpecPolicy.DEFINE_MANY,                                                                          // 5592
                                                                                                                       // 5593
  /**                                                                                                                  // 5594
   * Invoked when the component is about to be removed from its parent and have                                        // 5595
   * its DOM representation destroyed.                                                                                 // 5596
   *                                                                                                                   // 5597
   * Use this as an opportunity to deallocate any external resources.                                                  // 5598
   *                                                                                                                   // 5599
   * NOTE: There is no `componentDidUnmount` since your component will have been                                       // 5600
   * destroyed by that point.                                                                                          // 5601
   *                                                                                                                   // 5602
   * @optional                                                                                                         // 5603
   */                                                                                                                  // 5604
  componentWillUnmount: SpecPolicy.DEFINE_MANY,                                                                        // 5605
                                                                                                                       // 5606
                                                                                                                       // 5607
                                                                                                                       // 5608
  // ==== Advanced methods ====                                                                                        // 5609
                                                                                                                       // 5610
  /**                                                                                                                  // 5611
   * Updates the component's currently mounted DOM representation.                                                     // 5612
   *                                                                                                                   // 5613
   * By default, this implements React's rendering and reconciliation algorithm.                                       // 5614
   * Sophisticated clients may wish to override this.                                                                  // 5615
   *                                                                                                                   // 5616
   * @param {ReactReconcileTransaction} transaction                                                                    // 5617
   * @internal                                                                                                         // 5618
   * @overridable                                                                                                      // 5619
   */                                                                                                                  // 5620
  updateComponent: SpecPolicy.OVERRIDE_BASE                                                                            // 5621
                                                                                                                       // 5622
};                                                                                                                     // 5623
                                                                                                                       // 5624
/**                                                                                                                    // 5625
 * Mapping from class specification keys to special processing functions.                                              // 5626
 *                                                                                                                     // 5627
 * Although these are declared like instance properties in the specification                                           // 5628
 * when defining classes using `React.createClass`, they are actually static                                           // 5629
 * and are accessible on the constructor instead of the prototype. Despite                                             // 5630
 * being static, they must be defined outside of the "statics" key under                                               // 5631
 * which all other static methods are defined.                                                                         // 5632
 */                                                                                                                    // 5633
var RESERVED_SPEC_KEYS = {                                                                                             // 5634
  displayName: function(Constructor, displayName) {                                                                    // 5635
    Constructor.displayName = displayName;                                                                             // 5636
  },                                                                                                                   // 5637
  mixins: function(Constructor, mixins) {                                                                              // 5638
    if (mixins) {                                                                                                      // 5639
      for (var i = 0; i < mixins.length; i++) {                                                                        // 5640
        mixSpecIntoComponent(Constructor, mixins[i]);                                                                  // 5641
      }                                                                                                                // 5642
    }                                                                                                                  // 5643
  },                                                                                                                   // 5644
  childContextTypes: function(Constructor, childContextTypes) {                                                        // 5645
    if ("production" !== process.env.NODE_ENV) {                                                                       // 5646
      validateTypeDef(                                                                                                 // 5647
        Constructor,                                                                                                   // 5648
        childContextTypes,                                                                                             // 5649
        ReactPropTypeLocations.childContext                                                                            // 5650
      );                                                                                                               // 5651
    }                                                                                                                  // 5652
    Constructor.childContextTypes = assign(                                                                            // 5653
      {},                                                                                                              // 5654
      Constructor.childContextTypes,                                                                                   // 5655
      childContextTypes                                                                                                // 5656
    );                                                                                                                 // 5657
  },                                                                                                                   // 5658
  contextTypes: function(Constructor, contextTypes) {                                                                  // 5659
    if ("production" !== process.env.NODE_ENV) {                                                                       // 5660
      validateTypeDef(                                                                                                 // 5661
        Constructor,                                                                                                   // 5662
        contextTypes,                                                                                                  // 5663
        ReactPropTypeLocations.context                                                                                 // 5664
      );                                                                                                               // 5665
    }                                                                                                                  // 5666
    Constructor.contextTypes = assign(                                                                                 // 5667
      {},                                                                                                              // 5668
      Constructor.contextTypes,                                                                                        // 5669
      contextTypes                                                                                                     // 5670
    );                                                                                                                 // 5671
  },                                                                                                                   // 5672
  /**                                                                                                                  // 5673
   * Special case getDefaultProps which should move into statics but requires                                          // 5674
   * automatic merging.                                                                                                // 5675
   */                                                                                                                  // 5676
  getDefaultProps: function(Constructor, getDefaultProps) {                                                            // 5677
    if (Constructor.getDefaultProps) {                                                                                 // 5678
      Constructor.getDefaultProps = createMergedResultFunction(                                                        // 5679
        Constructor.getDefaultProps,                                                                                   // 5680
        getDefaultProps                                                                                                // 5681
      );                                                                                                               // 5682
    } else {                                                                                                           // 5683
      Constructor.getDefaultProps = getDefaultProps;                                                                   // 5684
    }                                                                                                                  // 5685
  },                                                                                                                   // 5686
  propTypes: function(Constructor, propTypes) {                                                                        // 5687
    if ("production" !== process.env.NODE_ENV) {                                                                       // 5688
      validateTypeDef(                                                                                                 // 5689
        Constructor,                                                                                                   // 5690
        propTypes,                                                                                                     // 5691
        ReactPropTypeLocations.prop                                                                                    // 5692
      );                                                                                                               // 5693
    }                                                                                                                  // 5694
    Constructor.propTypes = assign(                                                                                    // 5695
      {},                                                                                                              // 5696
      Constructor.propTypes,                                                                                           // 5697
      propTypes                                                                                                        // 5698
    );                                                                                                                 // 5699
  },                                                                                                                   // 5700
  statics: function(Constructor, statics) {                                                                            // 5701
    mixStaticSpecIntoComponent(Constructor, statics);                                                                  // 5702
  }                                                                                                                    // 5703
};                                                                                                                     // 5704
                                                                                                                       // 5705
function validateTypeDef(Constructor, typeDef, location) {                                                             // 5706
  for (var propName in typeDef) {                                                                                      // 5707
    if (typeDef.hasOwnProperty(propName)) {                                                                            // 5708
      // use a warning instead of an invariant so components                                                           // 5709
      // don't show up in prod but not in __DEV__                                                                      // 5710
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 5711
        typeof typeDef[propName] === 'function',                                                                       // 5712
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +                                          // 5713
        'React.PropTypes.',                                                                                            // 5714
        Constructor.displayName || 'ReactClass',                                                                       // 5715
        ReactPropTypeLocationNames[location],                                                                          // 5716
        propName                                                                                                       // 5717
      ) : null);                                                                                                       // 5718
    }                                                                                                                  // 5719
  }                                                                                                                    // 5720
}                                                                                                                      // 5721
                                                                                                                       // 5722
function validateMethodOverride(proto, name) {                                                                         // 5723
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?                                                          // 5724
    ReactClassInterface[name] :                                                                                        // 5725
    null;                                                                                                              // 5726
                                                                                                                       // 5727
  // Disallow overriding of base class methods unless explicitly allowed.                                              // 5728
  if (ReactClassMixin.hasOwnProperty(name)) {                                                                          // 5729
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 5730
      specPolicy === SpecPolicy.OVERRIDE_BASE,                                                                         // 5731
      'ReactClassInterface: You are attempting to override ' +                                                         // 5732
      '`%s` from your class specification. Ensure that your method names ' +                                           // 5733
      'do not overlap with React methods.',                                                                            // 5734
      name                                                                                                             // 5735
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));                                                           // 5736
  }                                                                                                                    // 5737
                                                                                                                       // 5738
  // Disallow defining methods more than once unless explicitly allowed.                                               // 5739
  if (proto.hasOwnProperty(name)) {                                                                                    // 5740
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 5741
      specPolicy === SpecPolicy.DEFINE_MANY ||                                                                         // 5742
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,                                                                    // 5743
      'ReactClassInterface: You are attempting to define ' +                                                           // 5744
      '`%s` on your component more than once. This conflict may be due ' +                                             // 5745
      'to a mixin.',                                                                                                   // 5746
      name                                                                                                             // 5747
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||                                                             // 5748
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));                                                                    // 5749
  }                                                                                                                    // 5750
}                                                                                                                      // 5751
                                                                                                                       // 5752
/**                                                                                                                    // 5753
 * Mixin helper which handles policy validation and reserved                                                           // 5754
 * specification keys when building React classses.                                                                    // 5755
 */                                                                                                                    // 5756
function mixSpecIntoComponent(Constructor, spec) {                                                                     // 5757
  if (!spec) {                                                                                                         // 5758
    return;                                                                                                            // 5759
  }                                                                                                                    // 5760
                                                                                                                       // 5761
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 5762
    typeof spec !== 'function',                                                                                        // 5763
    'ReactClass: You\'re attempting to ' +                                                                             // 5764
    'use a component class as a mixin. Instead, just use a regular object.'                                            // 5765
  ) : invariant(typeof spec !== 'function'));                                                                          // 5766
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 5767
    !ReactElement.isValidElement(spec),                                                                                // 5768
    'ReactClass: You\'re attempting to ' +                                                                             // 5769
    'use a component as a mixin. Instead, just use a regular object.'                                                  // 5770
  ) : invariant(!ReactElement.isValidElement(spec)));                                                                  // 5771
                                                                                                                       // 5772
  var proto = Constructor.prototype;                                                                                   // 5773
                                                                                                                       // 5774
  // By handling mixins before any other properties, we ensure the same                                                // 5775
  // chaining order is applied to methods with DEFINE_MANY policy, whether                                             // 5776
  // mixins are listed before or after these methods in the spec.                                                      // 5777
  if (spec.hasOwnProperty(MIXINS_KEY)) {                                                                               // 5778
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);                                                               // 5779
  }                                                                                                                    // 5780
                                                                                                                       // 5781
  for (var name in spec) {                                                                                             // 5782
    if (!spec.hasOwnProperty(name)) {                                                                                  // 5783
      continue;                                                                                                        // 5784
    }                                                                                                                  // 5785
                                                                                                                       // 5786
    if (name === MIXINS_KEY) {                                                                                         // 5787
      // We have already handled mixins in a special case above                                                        // 5788
      continue;                                                                                                        // 5789
    }                                                                                                                  // 5790
                                                                                                                       // 5791
    var property = spec[name];                                                                                         // 5792
    validateMethodOverride(proto, name);                                                                               // 5793
                                                                                                                       // 5794
    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {                                                                     // 5795
      RESERVED_SPEC_KEYS[name](Constructor, property);                                                                 // 5796
    } else {                                                                                                           // 5797
      // Setup methods on prototype:                                                                                   // 5798
      // The following member methods should not be automatically bound:                                               // 5799
      // 1. Expected ReactClass methods (in the "interface").                                                          // 5800
      // 2. Overridden methods (that were mixed in).                                                                   // 5801
      var isReactClassMethod =                                                                                         // 5802
        ReactClassInterface.hasOwnProperty(name);                                                                      // 5803
      var isAlreadyDefined = proto.hasOwnProperty(name);                                                               // 5804
      var markedDontBind = property && property.__reactDontBind;                                                       // 5805
      var isFunction = typeof property === 'function';                                                                 // 5806
      var shouldAutoBind =                                                                                             // 5807
        isFunction &&                                                                                                  // 5808
        !isReactClassMethod &&                                                                                         // 5809
        !isAlreadyDefined &&                                                                                           // 5810
        !markedDontBind;                                                                                               // 5811
                                                                                                                       // 5812
      if (shouldAutoBind) {                                                                                            // 5813
        if (!proto.__reactAutoBindMap) {                                                                               // 5814
          proto.__reactAutoBindMap = {};                                                                               // 5815
        }                                                                                                              // 5816
        proto.__reactAutoBindMap[name] = property;                                                                     // 5817
        proto[name] = property;                                                                                        // 5818
      } else {                                                                                                         // 5819
        if (isAlreadyDefined) {                                                                                        // 5820
          var specPolicy = ReactClassInterface[name];                                                                  // 5821
                                                                                                                       // 5822
          // These cases should already be caught by validateMethodOverride                                            // 5823
          ("production" !== process.env.NODE_ENV ? invariant(                                                          // 5824
            isReactClassMethod && (                                                                                    // 5825
              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)                  // 5826
            ),                                                                                                         // 5827
            'ReactClass: Unexpected spec policy %s for key %s ' +                                                      // 5828
            'when mixing in component specs.',                                                                         // 5829
            specPolicy,                                                                                                // 5830
            name                                                                                                       // 5831
          ) : invariant(isReactClassMethod && (                                                                        // 5832
            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)                    // 5833
          )));                                                                                                         // 5834
                                                                                                                       // 5835
          // For methods which are defined more than once, call the existing                                           // 5836
          // methods before calling the new property, merging if appropriate.                                          // 5837
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {                                                          // 5838
            proto[name] = createMergedResultFunction(proto[name], property);                                           // 5839
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {                                                          // 5840
            proto[name] = createChainedFunction(proto[name], property);                                                // 5841
          }                                                                                                            // 5842
        } else {                                                                                                       // 5843
          proto[name] = property;                                                                                      // 5844
          if ("production" !== process.env.NODE_ENV) {                                                                 // 5845
            // Add verbose displayName to the function, which helps when looking                                       // 5846
            // at profiling tools.                                                                                     // 5847
            if (typeof property === 'function' && spec.displayName) {                                                  // 5848
              proto[name].displayName = spec.displayName + '_' + name;                                                 // 5849
            }                                                                                                          // 5850
          }                                                                                                            // 5851
        }                                                                                                              // 5852
      }                                                                                                                // 5853
    }                                                                                                                  // 5854
  }                                                                                                                    // 5855
}                                                                                                                      // 5856
                                                                                                                       // 5857
function mixStaticSpecIntoComponent(Constructor, statics) {                                                            // 5858
  if (!statics) {                                                                                                      // 5859
    return;                                                                                                            // 5860
  }                                                                                                                    // 5861
  for (var name in statics) {                                                                                          // 5862
    var property = statics[name];                                                                                      // 5863
    if (!statics.hasOwnProperty(name)) {                                                                               // 5864
      continue;                                                                                                        // 5865
    }                                                                                                                  // 5866
                                                                                                                       // 5867
    var isReserved = name in RESERVED_SPEC_KEYS;                                                                       // 5868
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 5869
      !isReserved,                                                                                                     // 5870
      'ReactClass: You are attempting to define a reserved ' +                                                         // 5871
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +                                          // 5872
      'as an instance property instead; it will still be accessible on the ' +                                         // 5873
      'constructor.',                                                                                                  // 5874
      name                                                                                                             // 5875
    ) : invariant(!isReserved));                                                                                       // 5876
                                                                                                                       // 5877
    var isInherited = name in Constructor;                                                                             // 5878
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 5879
      !isInherited,                                                                                                    // 5880
      'ReactClass: You are attempting to define ' +                                                                    // 5881
      '`%s` on your component more than once. This conflict may be ' +                                                 // 5882
      'due to a mixin.',                                                                                               // 5883
      name                                                                                                             // 5884
    ) : invariant(!isInherited));                                                                                      // 5885
    Constructor[name] = property;                                                                                      // 5886
  }                                                                                                                    // 5887
}                                                                                                                      // 5888
                                                                                                                       // 5889
/**                                                                                                                    // 5890
 * Merge two objects, but throw if both contain the same key.                                                          // 5891
 *                                                                                                                     // 5892
 * @param {object} one The first object, which is mutated.                                                             // 5893
 * @param {object} two The second object                                                                               // 5894
 * @return {object} one after it has been mutated to contain everything in two.                                        // 5895
 */                                                                                                                    // 5896
function mergeIntoWithNoDuplicateKeys(one, two) {                                                                      // 5897
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 5898
    one && two && typeof one === 'object' && typeof two === 'object',                                                  // 5899
    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'                                                        // 5900
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));                                    // 5901
                                                                                                                       // 5902
  for (var key in two) {                                                                                               // 5903
    if (two.hasOwnProperty(key)) {                                                                                     // 5904
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 5905
        one[key] === undefined,                                                                                        // 5906
        'mergeIntoWithNoDuplicateKeys(): ' +                                                                           // 5907
        'Tried to merge two objects with the same key: `%s`. This conflict ' +                                         // 5908
        'may be due to a mixin; in particular, this may be caused by two ' +                                           // 5909
        'getInitialState() or getDefaultProps() methods returning objects ' +                                          // 5910
        'with clashing keys.',                                                                                         // 5911
        key                                                                                                            // 5912
      ) : invariant(one[key] === undefined));                                                                          // 5913
      one[key] = two[key];                                                                                             // 5914
    }                                                                                                                  // 5915
  }                                                                                                                    // 5916
  return one;                                                                                                          // 5917
}                                                                                                                      // 5918
                                                                                                                       // 5919
/**                                                                                                                    // 5920
 * Creates a function that invokes two functions and merges their return values.                                       // 5921
 *                                                                                                                     // 5922
 * @param {function} one Function to invoke first.                                                                     // 5923
 * @param {function} two Function to invoke second.                                                                    // 5924
 * @return {function} Function that invokes the two argument functions.                                                // 5925
 * @private                                                                                                            // 5926
 */                                                                                                                    // 5927
function createMergedResultFunction(one, two) {                                                                        // 5928
  return function mergedResult() {                                                                                     // 5929
    var a = one.apply(this, arguments);                                                                                // 5930
    var b = two.apply(this, arguments);                                                                                // 5931
    if (a == null) {                                                                                                   // 5932
      return b;                                                                                                        // 5933
    } else if (b == null) {                                                                                            // 5934
      return a;                                                                                                        // 5935
    }                                                                                                                  // 5936
    var c = {};                                                                                                        // 5937
    mergeIntoWithNoDuplicateKeys(c, a);                                                                                // 5938
    mergeIntoWithNoDuplicateKeys(c, b);                                                                                // 5939
    return c;                                                                                                          // 5940
  };                                                                                                                   // 5941
}                                                                                                                      // 5942
                                                                                                                       // 5943
/**                                                                                                                    // 5944
 * Creates a function that invokes two functions and ignores their return vales.                                       // 5945
 *                                                                                                                     // 5946
 * @param {function} one Function to invoke first.                                                                     // 5947
 * @param {function} two Function to invoke second.                                                                    // 5948
 * @return {function} Function that invokes the two argument functions.                                                // 5949
 * @private                                                                                                            // 5950
 */                                                                                                                    // 5951
function createChainedFunction(one, two) {                                                                             // 5952
  return function chainedFunction() {                                                                                  // 5953
    one.apply(this, arguments);                                                                                        // 5954
    two.apply(this, arguments);                                                                                        // 5955
  };                                                                                                                   // 5956
}                                                                                                                      // 5957
                                                                                                                       // 5958
/**                                                                                                                    // 5959
 * Binds a method to the component.                                                                                    // 5960
 *                                                                                                                     // 5961
 * @param {object} component Component whose method is going to be bound.                                              // 5962
 * @param {function} method Method to be bound.                                                                        // 5963
 * @return {function} The bound method.                                                                                // 5964
 */                                                                                                                    // 5965
function bindAutoBindMethod(component, method) {                                                                       // 5966
  var boundMethod = method.bind(component);                                                                            // 5967
  if ("production" !== process.env.NODE_ENV) {                                                                         // 5968
    boundMethod.__reactBoundContext = component;                                                                       // 5969
    boundMethod.__reactBoundMethod = method;                                                                           // 5970
    boundMethod.__reactBoundArguments = null;                                                                          // 5971
    var componentName = component.constructor.displayName;                                                             // 5972
    var _bind = boundMethod.bind;                                                                                      // 5973
    /* eslint-disable block-scoped-var, no-undef */                                                                    // 5974
    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      // User is trying to bind() an autobound method; we effectively will                                             // 5976
      // ignore the value of "this" that the user is trying to use, so                                                 // 5977
      // let's warn.                                                                                                   // 5978
      if (newThis !== component && newThis !== null) {                                                                 // 5979
        ("production" !== process.env.NODE_ENV ? warning(                                                              // 5980
          false,                                                                                                       // 5981
          'bind(): React component methods may only be bound to the ' +                                                // 5982
          'component instance. See %s',                                                                                // 5983
          componentName                                                                                                // 5984
        ) : null);                                                                                                     // 5985
      } else if (!args.length) {                                                                                       // 5986
        ("production" !== process.env.NODE_ENV ? warning(                                                              // 5987
          false,                                                                                                       // 5988
          'bind(): You are binding a component method to the component. ' +                                            // 5989
          'React does this for you automatically in a high-performance ' +                                             // 5990
          'way, so you can safely remove this call. See %s',                                                           // 5991
          componentName                                                                                                // 5992
        ) : null);                                                                                                     // 5993
        return boundMethod;                                                                                            // 5994
      }                                                                                                                // 5995
      var reboundMethod = _bind.apply(boundMethod, arguments);                                                         // 5996
      reboundMethod.__reactBoundContext = component;                                                                   // 5997
      reboundMethod.__reactBoundMethod = method;                                                                       // 5998
      reboundMethod.__reactBoundArguments = args;                                                                      // 5999
      return reboundMethod;                                                                                            // 6000
      /* eslint-enable */                                                                                              // 6001
    };                                                                                                                 // 6002
  }                                                                                                                    // 6003
  return boundMethod;                                                                                                  // 6004
}                                                                                                                      // 6005
                                                                                                                       // 6006
/**                                                                                                                    // 6007
 * Binds all auto-bound methods in a component.                                                                        // 6008
 *                                                                                                                     // 6009
 * @param {object} component Component whose method is going to be bound.                                              // 6010
 */                                                                                                                    // 6011
function bindAutoBindMethods(component) {                                                                              // 6012
  for (var autoBindKey in component.__reactAutoBindMap) {                                                              // 6013
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {                                                    // 6014
      var method = component.__reactAutoBindMap[autoBindKey];                                                          // 6015
      component[autoBindKey] = bindAutoBindMethod(                                                                     // 6016
        component,                                                                                                     // 6017
        ReactErrorUtils.guard(                                                                                         // 6018
          method,                                                                                                      // 6019
          component.constructor.displayName + '.' + autoBindKey                                                        // 6020
        )                                                                                                              // 6021
      );                                                                                                               // 6022
    }                                                                                                                  // 6023
  }                                                                                                                    // 6024
}                                                                                                                      // 6025
                                                                                                                       // 6026
var typeDeprecationDescriptor = {                                                                                      // 6027
  enumerable: false,                                                                                                   // 6028
  get: function() {                                                                                                    // 6029
    var displayName = this.displayName || this.name || 'Component';                                                    // 6030
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 6031
      false,                                                                                                           // 6032
      '%s.type is deprecated. Use %s directly to access the class.',                                                   // 6033
      displayName,                                                                                                     // 6034
      displayName                                                                                                      // 6035
    ) : null);                                                                                                         // 6036
    Object.defineProperty(this, 'type', {                                                                              // 6037
      value: this                                                                                                      // 6038
    });                                                                                                                // 6039
    return this;                                                                                                       // 6040
  }                                                                                                                    // 6041
};                                                                                                                     // 6042
                                                                                                                       // 6043
/**                                                                                                                    // 6044
 * Add more to the ReactClass base class. These are all legacy features and                                            // 6045
 * therefore not already part of the modern ReactComponent.                                                            // 6046
 */                                                                                                                    // 6047
var ReactClassMixin = {                                                                                                // 6048
                                                                                                                       // 6049
  /**                                                                                                                  // 6050
   * TODO: This will be deprecated because state should always keep a consistent                                       // 6051
   * type signature and the only use case for this, is to avoid that.                                                  // 6052
   */                                                                                                                  // 6053
  replaceState: function(newState, callback) {                                                                         // 6054
    ReactUpdateQueue.enqueueReplaceState(this, newState);                                                              // 6055
    if (callback) {                                                                                                    // 6056
      ReactUpdateQueue.enqueueCallback(this, callback);                                                                // 6057
    }                                                                                                                  // 6058
  },                                                                                                                   // 6059
                                                                                                                       // 6060
  /**                                                                                                                  // 6061
   * Checks whether or not this composite component is mounted.                                                        // 6062
   * @return {boolean} True if mounted, false otherwise.                                                               // 6063
   * @protected                                                                                                        // 6064
   * @final                                                                                                            // 6065
   */                                                                                                                  // 6066
  isMounted: function() {                                                                                              // 6067
    if ("production" !== process.env.NODE_ENV) {                                                                       // 6068
      var owner = ReactCurrentOwner.current;                                                                           // 6069
      if (owner !== null) {                                                                                            // 6070
        ("production" !== process.env.NODE_ENV ? warning(                                                              // 6071
          owner._warnedAboutRefsInRender,                                                                              // 6072
          '%s is accessing isMounted inside its render() function. ' +                                                 // 6073
          'render() should be a pure function of props and state. It should ' +                                        // 6074
          'never access something that requires stale data from the previous ' +                                       // 6075
          'render, such as refs. Move this logic to componentDidMount and ' +                                          // 6076
          'componentDidUpdate instead.',                                                                               // 6077
          owner.getName() || 'A component'                                                                             // 6078
        ) : null);                                                                                                     // 6079
        owner._warnedAboutRefsInRender = true;                                                                         // 6080
      }                                                                                                                // 6081
    }                                                                                                                  // 6082
    var internalInstance = ReactInstanceMap.get(this);                                                                 // 6083
    return (                                                                                                           // 6084
      internalInstance &&                                                                                              // 6085
      internalInstance !== ReactLifeCycle.currentlyMountingInstance                                                    // 6086
    );                                                                                                                 // 6087
  },                                                                                                                   // 6088
                                                                                                                       // 6089
  /**                                                                                                                  // 6090
   * Sets a subset of the props.                                                                                       // 6091
   *                                                                                                                   // 6092
   * @param {object} partialProps Subset of the next props.                                                            // 6093
   * @param {?function} callback Called after props are updated.                                                       // 6094
   * @final                                                                                                            // 6095
   * @public                                                                                                           // 6096
   * @deprecated                                                                                                       // 6097
   */                                                                                                                  // 6098
  setProps: function(partialProps, callback) {                                                                         // 6099
    ReactUpdateQueue.enqueueSetProps(this, partialProps);                                                              // 6100
    if (callback) {                                                                                                    // 6101
      ReactUpdateQueue.enqueueCallback(this, callback);                                                                // 6102
    }                                                                                                                  // 6103
  },                                                                                                                   // 6104
                                                                                                                       // 6105
  /**                                                                                                                  // 6106
   * Replace all the props.                                                                                            // 6107
   *                                                                                                                   // 6108
   * @param {object} newProps Subset of the next props.                                                                // 6109
   * @param {?function} callback Called after props are updated.                                                       // 6110
   * @final                                                                                                            // 6111
   * @public                                                                                                           // 6112
   * @deprecated                                                                                                       // 6113
   */                                                                                                                  // 6114
  replaceProps: function(newProps, callback) {                                                                         // 6115
    ReactUpdateQueue.enqueueReplaceProps(this, newProps);                                                              // 6116
    if (callback) {                                                                                                    // 6117
      ReactUpdateQueue.enqueueCallback(this, callback);                                                                // 6118
    }                                                                                                                  // 6119
  }                                                                                                                    // 6120
};                                                                                                                     // 6121
                                                                                                                       // 6122
var ReactClassComponent = function() {};                                                                               // 6123
assign(                                                                                                                // 6124
  ReactClassComponent.prototype,                                                                                       // 6125
  ReactComponent.prototype,                                                                                            // 6126
  ReactClassMixin                                                                                                      // 6127
);                                                                                                                     // 6128
                                                                                                                       // 6129
/**                                                                                                                    // 6130
 * Module for creating composite components.                                                                           // 6131
 *                                                                                                                     // 6132
 * @class ReactClass                                                                                                   // 6133
 */                                                                                                                    // 6134
var ReactClass = {                                                                                                     // 6135
                                                                                                                       // 6136
  /**                                                                                                                  // 6137
   * Creates a composite component class given a class specification.                                                  // 6138
   *                                                                                                                   // 6139
   * @param {object} spec Class specification (which must define `render`).                                            // 6140
   * @return {function} Component constructor function.                                                                // 6141
   * @public                                                                                                           // 6142
   */                                                                                                                  // 6143
  createClass: function(spec) {                                                                                        // 6144
    var Constructor = function(props, context) {                                                                       // 6145
      // This constructor is overridden by mocks. The argument is used                                                 // 6146
      // by mocks to assert on what gets mounted.                                                                      // 6147
                                                                                                                       // 6148
      if ("production" !== process.env.NODE_ENV) {                                                                     // 6149
        ("production" !== process.env.NODE_ENV ? warning(                                                              // 6150
          this instanceof Constructor,                                                                                 // 6151
          'Something is calling a React component directly. Use a factory or ' +                                       // 6152
          'JSX instead. See: https://fb.me/react-legacyfactory'                                                        // 6153
        ) : null);                                                                                                     // 6154
      }                                                                                                                // 6155
                                                                                                                       // 6156
      // Wire up auto-binding                                                                                          // 6157
      if (this.__reactAutoBindMap) {                                                                                   // 6158
        bindAutoBindMethods(this);                                                                                     // 6159
      }                                                                                                                // 6160
                                                                                                                       // 6161
      this.props = props;                                                                                              // 6162
      this.context = context;                                                                                          // 6163
      this.state = null;                                                                                               // 6164
                                                                                                                       // 6165
      // ReactClasses doesn't have constructors. Instead, they use the                                                 // 6166
      // getInitialState and componentWillMount methods for initialization.                                            // 6167
                                                                                                                       // 6168
      var initialState = this.getInitialState ? this.getInitialState() : null;                                         // 6169
      if ("production" !== process.env.NODE_ENV) {                                                                     // 6170
        // We allow auto-mocks to proceed as if they're returning null.                                                // 6171
        if (typeof initialState === 'undefined' &&                                                                     // 6172
            this.getInitialState._isMockFunction) {                                                                    // 6173
          // This is probably bad practice. Consider warning here and                                                  // 6174
          // deprecating this convenience.                                                                             // 6175
          initialState = null;                                                                                         // 6176
        }                                                                                                              // 6177
      }                                                                                                                // 6178
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 6179
        typeof initialState === 'object' && !Array.isArray(initialState),                                              // 6180
        '%s.getInitialState(): must return an object or null',                                                         // 6181
        Constructor.displayName || 'ReactCompositeComponent'                                                           // 6182
      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));                                // 6183
                                                                                                                       // 6184
      this.state = initialState;                                                                                       // 6185
    };                                                                                                                 // 6186
    Constructor.prototype = new ReactClassComponent();                                                                 // 6187
    Constructor.prototype.constructor = Constructor;                                                                   // 6188
                                                                                                                       // 6189
    injectedMixins.forEach(                                                                                            // 6190
      mixSpecIntoComponent.bind(null, Constructor)                                                                     // 6191
    );                                                                                                                 // 6192
                                                                                                                       // 6193
    mixSpecIntoComponent(Constructor, spec);                                                                           // 6194
                                                                                                                       // 6195
    // Initialize the defaultProps property after all mixins have been merged                                          // 6196
    if (Constructor.getDefaultProps) {                                                                                 // 6197
      Constructor.defaultProps = Constructor.getDefaultProps();                                                        // 6198
    }                                                                                                                  // 6199
                                                                                                                       // 6200
    if ("production" !== process.env.NODE_ENV) {                                                                       // 6201
      // This is a tag to indicate that the use of these method names is ok,                                           // 6202
      // since it's used with createClass. If it's not, then it's likely a                                             // 6203
      // mistake so we'll warn you to use the static property, property                                                // 6204
      // initializer or constructor respectively.                                                                      // 6205
      if (Constructor.getDefaultProps) {                                                                               // 6206
        Constructor.getDefaultProps.isReactClassApproved = {};                                                         // 6207
      }                                                                                                                // 6208
      if (Constructor.prototype.getInitialState) {                                                                     // 6209
        Constructor.prototype.getInitialState.isReactClassApproved = {};                                               // 6210
      }                                                                                                                // 6211
    }                                                                                                                  // 6212
                                                                                                                       // 6213
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 6214
      Constructor.prototype.render,                                                                                    // 6215
      'createClass(...): Class specification must implement a `render` method.'                                        // 6216
    ) : invariant(Constructor.prototype.render));                                                                      // 6217
                                                                                                                       // 6218
    if ("production" !== process.env.NODE_ENV) {                                                                       // 6219
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 6220
        !Constructor.prototype.componentShouldUpdate,                                                                  // 6221
        '%s has a method called ' +                                                                                    // 6222
        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +                                            // 6223
        'The name is phrased as a question because the function is ' +                                                 // 6224
        'expected to return a value.',                                                                                 // 6225
        spec.displayName || 'A component'                                                                              // 6226
      ) : null);                                                                                                       // 6227
    }                                                                                                                  // 6228
                                                                                                                       // 6229
    // Reduce time spent doing lookups by setting these on the prototype.                                              // 6230
    for (var methodName in ReactClassInterface) {                                                                      // 6231
      if (!Constructor.prototype[methodName]) {                                                                        // 6232
        Constructor.prototype[methodName] = null;                                                                      // 6233
      }                                                                                                                // 6234
    }                                                                                                                  // 6235
                                                                                                                       // 6236
    // Legacy hook                                                                                                     // 6237
    Constructor.type = Constructor;                                                                                    // 6238
    if ("production" !== process.env.NODE_ENV) {                                                                       // 6239
      try {                                                                                                            // 6240
        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);                                         // 6241
      } catch (x) {                                                                                                    // 6242
        // IE will fail on defineProperty (es5-shim/sham too)                                                          // 6243
      }                                                                                                                // 6244
    }                                                                                                                  // 6245
                                                                                                                       // 6246
    return Constructor;                                                                                                // 6247
  },                                                                                                                   // 6248
                                                                                                                       // 6249
  injection: {                                                                                                         // 6250
    injectMixin: function(mixin) {                                                                                     // 6251
      injectedMixins.push(mixin);                                                                                      // 6252
    }                                                                                                                  // 6253
  }                                                                                                                    // 6254
                                                                                                                       // 6255
};                                                                                                                     // 6256
                                                                                                                       // 6257
module.exports = ReactClass;                                                                                           // 6258
                                                                                                                       // 6259
}).call(this,require('_process'))                                                                                      // 6260
                                                                                                                       // 6261
},{"./Object.assign":"react/lib/Object.assign","./ReactComponent":"react/lib/ReactComponent","./ReactCurrentOwner":"react/lib/ReactCurrentOwner","./ReactElement":"react/lib/ReactElement","./ReactErrorUtils":"react/lib/ReactErrorUtils","./ReactInstanceMap":"react/lib/ReactInstanceMap","./ReactLifeCycle":"react/lib/ReactLifeCycle","./ReactPropTypeLocationNames":"react/lib/ReactPropTypeLocationNames","./ReactPropTypeLocations":"react/lib/ReactPropTypeLocations","./ReactUpdateQueue":"react/lib/ReactUpdateQueue","./invariant":"react/lib/invariant","./keyMirror":"react/lib/keyMirror","./keyOf":"react/lib/keyOf","./warning":"react/lib/warning","_process":1}],"react/lib/ReactComponentBrowserEnvironment":[function(require,module,exports){
/**                                                                                                                    // 6263
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 6264
 * All rights reserved.                                                                                                // 6265
 *                                                                                                                     // 6266
 * This source code is licensed under the BSD-style license found in the                                               // 6267
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6268
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 6269
 *                                                                                                                     // 6270
 * @providesModule ReactComponentBrowserEnvironment                                                                    // 6271
 */                                                                                                                    // 6272
                                                                                                                       // 6273
/*jslint evil: true */                                                                                                 // 6274
                                                                                                                       // 6275
'use strict';                                                                                                          // 6276
                                                                                                                       // 6277
var ReactDOMIDOperations = require("./ReactDOMIDOperations");                                                          // 6278
var ReactMount = require("./ReactMount");                                                                              // 6279
                                                                                                                       // 6280
/**                                                                                                                    // 6281
 * Abstracts away all functionality of the reconciler that requires knowledge of                                       // 6282
 * the browser context. TODO: These callers should be refactored to avoid the                                          // 6283
 * need for this injection.                                                                                            // 6284
 */                                                                                                                    // 6285
var ReactComponentBrowserEnvironment = {                                                                               // 6286
                                                                                                                       // 6287
  processChildrenUpdates:                                                                                              // 6288
    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,                                                            // 6289
                                                                                                                       // 6290
  replaceNodeWithMarkupByID:                                                                                           // 6291
    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,                                                         // 6292
                                                                                                                       // 6293
  /**                                                                                                                  // 6294
   * If a particular environment requires that some resources be cleaned up,                                           // 6295
   * specify this in the injected Mixin. In the DOM, we would likely want to                                           // 6296
   * purge any cached node ID lookups.                                                                                 // 6297
   *                                                                                                                   // 6298
   * @private                                                                                                          // 6299
   */                                                                                                                  // 6300
  unmountIDFromEnvironment: function(rootNodeID) {                                                                     // 6301
    ReactMount.purgeID(rootNodeID);                                                                                    // 6302
  }                                                                                                                    // 6303
                                                                                                                       // 6304
};                                                                                                                     // 6305
                                                                                                                       // 6306
module.exports = ReactComponentBrowserEnvironment;                                                                     // 6307
                                                                                                                       // 6308
},{"./ReactDOMIDOperations":"react/lib/ReactDOMIDOperations","./ReactMount":"react/lib/ReactMount"}],"react/lib/ReactComponentEnvironment":[function(require,module,exports){
(function (process){                                                                                                   // 6310
/**                                                                                                                    // 6311
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 6312
 * All rights reserved.                                                                                                // 6313
 *                                                                                                                     // 6314
 * This source code is licensed under the BSD-style license found in the                                               // 6315
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6316
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 6317
 *                                                                                                                     // 6318
 * @providesModule ReactComponentEnvironment                                                                           // 6319
 */                                                                                                                    // 6320
                                                                                                                       // 6321
'use strict';                                                                                                          // 6322
                                                                                                                       // 6323
var invariant = require("./invariant");                                                                                // 6324
                                                                                                                       // 6325
var injected = false;                                                                                                  // 6326
                                                                                                                       // 6327
var ReactComponentEnvironment = {                                                                                      // 6328
                                                                                                                       // 6329
  /**                                                                                                                  // 6330
   * Optionally injectable environment dependent cleanup hook. (server vs.                                             // 6331
   * browser etc). Example: A browser system caches DOM nodes based on component                                       // 6332
   * ID and must remove that cache entry when this instance is unmounted.                                              // 6333
   */                                                                                                                  // 6334
  unmountIDFromEnvironment: null,                                                                                      // 6335
                                                                                                                       // 6336
  /**                                                                                                                  // 6337
   * Optionally injectable hook for swapping out mount images in the middle of                                         // 6338
   * the tree.                                                                                                         // 6339
   */                                                                                                                  // 6340
  replaceNodeWithMarkupByID: null,                                                                                     // 6341
                                                                                                                       // 6342
  /**                                                                                                                  // 6343
   * Optionally injectable hook for processing a queue of child updates. Will                                          // 6344
   * later move into MultiChildComponents.                                                                             // 6345
   */                                                                                                                  // 6346
  processChildrenUpdates: null,                                                                                        // 6347
                                                                                                                       // 6348
  injection: {                                                                                                         // 6349
    injectEnvironment: function(environment) {                                                                         // 6350
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 6351
        !injected,                                                                                                     // 6352
        'ReactCompositeComponent: injectEnvironment() can only be called once.'                                        // 6353
      ) : invariant(!injected));                                                                                       // 6354
      ReactComponentEnvironment.unmountIDFromEnvironment =                                                             // 6355
        environment.unmountIDFromEnvironment;                                                                          // 6356
      ReactComponentEnvironment.replaceNodeWithMarkupByID =                                                            // 6357
        environment.replaceNodeWithMarkupByID;                                                                         // 6358
      ReactComponentEnvironment.processChildrenUpdates =                                                               // 6359
        environment.processChildrenUpdates;                                                                            // 6360
      injected = true;                                                                                                 // 6361
    }                                                                                                                  // 6362
  }                                                                                                                    // 6363
                                                                                                                       // 6364
};                                                                                                                     // 6365
                                                                                                                       // 6366
module.exports = ReactComponentEnvironment;                                                                            // 6367
                                                                                                                       // 6368
}).call(this,require('_process'))                                                                                      // 6369
                                                                                                                       // 6370
},{"./invariant":"react/lib/invariant","_process":1}],"react/lib/ReactComponentWithPureRenderMixin":[function(require,module,exports){
/**                                                                                                                    // 6372
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 6373
 * All rights reserved.                                                                                                // 6374
 *                                                                                                                     // 6375
 * This source code is licensed under the BSD-style license found in the                                               // 6376
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6377
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 6378
 *                                                                                                                     // 6379
* @providesModule ReactComponentWithPureRenderMixin                                                                    // 6380
*/                                                                                                                     // 6381
                                                                                                                       // 6382
'use strict';                                                                                                          // 6383
                                                                                                                       // 6384
var shallowEqual = require("./shallowEqual");                                                                          // 6385
                                                                                                                       // 6386
/**                                                                                                                    // 6387
 * If your React component's render function is "pure", e.g. it will render the                                        // 6388
 * same result given the same props and state, provide this Mixin for a                                                // 6389
 * considerable performance boost.                                                                                     // 6390
 *                                                                                                                     // 6391
 * Most React components have pure render functions.                                                                   // 6392
 *                                                                                                                     // 6393
 * Example:                                                                                                            // 6394
 *                                                                                                                     // 6395
 *   var ReactComponentWithPureRenderMixin =                                                                           // 6396
 *     require('ReactComponentWithPureRenderMixin');                                                                   // 6397
 *   React.createClass({                                                                                               // 6398
 *     mixins: [ReactComponentWithPureRenderMixin],                                                                    // 6399
 *                                                                                                                     // 6400
 *     render: function() {                                                                                            // 6401
 *       return <div className={this.props.className}>foo</div>;                                                       // 6402
 *     }                                                                                                               // 6403
 *   });                                                                                                               // 6404
 *                                                                                                                     // 6405
 * Note: This only checks shallow equality for props and state. If these contain                                       // 6406
 * complex data structures this mixin may have false-negatives for deeper                                              // 6407
 * differences. Only mixin to components which have simple props and state, or                                         // 6408
 * use `forceUpdate()` when you know deep data structures have changed.                                                // 6409
 */                                                                                                                    // 6410
var ReactComponentWithPureRenderMixin = {                                                                              // 6411
  shouldComponentUpdate: function(nextProps, nextState) {                                                              // 6412
    return !shallowEqual(this.props, nextProps) ||                                                                     // 6413
           !shallowEqual(this.state, nextState);                                                                       // 6414
  }                                                                                                                    // 6415
};                                                                                                                     // 6416
                                                                                                                       // 6417
module.exports = ReactComponentWithPureRenderMixin;                                                                    // 6418
                                                                                                                       // 6419
},{"./shallowEqual":"react/lib/shallowEqual"}],"react/lib/ReactComponent":[function(require,module,exports){           // 6420
(function (process){                                                                                                   // 6421
/**                                                                                                                    // 6422
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 6423
 * All rights reserved.                                                                                                // 6424
 *                                                                                                                     // 6425
 * This source code is licensed under the BSD-style license found in the                                               // 6426
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6427
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 6428
 *                                                                                                                     // 6429
 * @providesModule ReactComponent                                                                                      // 6430
 */                                                                                                                    // 6431
                                                                                                                       // 6432
'use strict';                                                                                                          // 6433
                                                                                                                       // 6434
var ReactUpdateQueue = require("./ReactUpdateQueue");                                                                  // 6435
                                                                                                                       // 6436
var invariant = require("./invariant");                                                                                // 6437
var warning = require("./warning");                                                                                    // 6438
                                                                                                                       // 6439
/**                                                                                                                    // 6440
 * Base class helpers for the updating state of a component.                                                           // 6441
 */                                                                                                                    // 6442
function ReactComponent(props, context) {                                                                              // 6443
  this.props = props;                                                                                                  // 6444
  this.context = context;                                                                                              // 6445
}                                                                                                                      // 6446
                                                                                                                       // 6447
/**                                                                                                                    // 6448
 * Sets a subset of the state. Always use this to mutate                                                               // 6449
 * state. You should treat `this.state` as immutable.                                                                  // 6450
 *                                                                                                                     // 6451
 * There is no guarantee that `this.state` will be immediately updated, so                                             // 6452
 * accessing `this.state` after calling this method may return the old value.                                          // 6453
 *                                                                                                                     // 6454
 * There is no guarantee that calls to `setState` will run synchronously,                                              // 6455
 * as they may eventually be batched together.  You can provide an optional                                            // 6456
 * callback that will be executed when the call to setState is actually                                                // 6457
 * completed.                                                                                                          // 6458
 *                                                                                                                     // 6459
 * When a function is provided to setState, it will be called at some point in                                         // 6460
 * the future (not synchronously). It will be called with the up to date                                               // 6461
 * component arguments (state, props, context). These values can be different                                          // 6462
 * from this.* because your function may be called after receiveProps but before                                       // 6463
 * shouldComponentUpdate, and this new state, props, and context will not yet be                                       // 6464
 * assigned to this.                                                                                                   // 6465
 *                                                                                                                     // 6466
 * @param {object|function} partialState Next partial state or function to                                             // 6467
 *        produce next partial state to be merged with current state.                                                  // 6468
 * @param {?function} callback Called after state is updated.                                                          // 6469
 * @final                                                                                                              // 6470
 * @protected                                                                                                          // 6471
 */                                                                                                                    // 6472
ReactComponent.prototype.setState = function(partialState, callback) {                                                 // 6473
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 6474
    typeof partialState === 'object' ||                                                                                // 6475
    typeof partialState === 'function' ||                                                                              // 6476
    partialState == null,                                                                                              // 6477
    'setState(...): takes an object of state variables to update or a ' +                                              // 6478
    'function which returns an object of state variables.'                                                             // 6479
  ) : invariant(typeof partialState === 'object' ||                                                                    // 6480
  typeof partialState === 'function' ||                                                                                // 6481
  partialState == null));                                                                                              // 6482
  if ("production" !== process.env.NODE_ENV) {                                                                         // 6483
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 6484
      partialState != null,                                                                                            // 6485
      'setState(...): You passed an undefined or null state object; ' +                                                // 6486
      'instead, use forceUpdate().'                                                                                    // 6487
    ) : null);                                                                                                         // 6488
  }                                                                                                                    // 6489
  ReactUpdateQueue.enqueueSetState(this, partialState);                                                                // 6490
  if (callback) {                                                                                                      // 6491
    ReactUpdateQueue.enqueueCallback(this, callback);                                                                  // 6492
  }                                                                                                                    // 6493
};                                                                                                                     // 6494
                                                                                                                       // 6495
/**                                                                                                                    // 6496
 * Forces an update. This should only be invoked when it is known with                                                 // 6497
 * certainty that we are **not** in a DOM transaction.                                                                 // 6498
 *                                                                                                                     // 6499
 * You may want to call this when you know that some deeper aspect of the                                              // 6500
 * component's state has changed but `setState` was not called.                                                        // 6501
 *                                                                                                                     // 6502
 * This will not invoke `shouldComponentUpdate`, but it will invoke                                                    // 6503
 * `componentWillUpdate` and `componentDidUpdate`.                                                                     // 6504
 *                                                                                                                     // 6505
 * @param {?function} callback Called after update is complete.                                                        // 6506
 * @final                                                                                                              // 6507
 * @protected                                                                                                          // 6508
 */                                                                                                                    // 6509
ReactComponent.prototype.forceUpdate = function(callback) {                                                            // 6510
  ReactUpdateQueue.enqueueForceUpdate(this);                                                                           // 6511
  if (callback) {                                                                                                      // 6512
    ReactUpdateQueue.enqueueCallback(this, callback);                                                                  // 6513
  }                                                                                                                    // 6514
};                                                                                                                     // 6515
                                                                                                                       // 6516
/**                                                                                                                    // 6517
 * Deprecated APIs. These APIs used to exist on classic React classes but since                                        // 6518
 * we would like to deprecate them, we're not going to move them over to this                                          // 6519
 * modern base class. Instead, we define a getter that warns if it's accessed.                                         // 6520
 */                                                                                                                    // 6521
if ("production" !== process.env.NODE_ENV) {                                                                           // 6522
  var deprecatedAPIs = {                                                                                               // 6523
    getDOMNode: [                                                                                                      // 6524
      'getDOMNode',                                                                                                    // 6525
      'Use React.findDOMNode(component) instead.'                                                                      // 6526
    ],                                                                                                                 // 6527
    isMounted: [                                                                                                       // 6528
      'isMounted',                                                                                                     // 6529
      'Instead, make sure to clean up subscriptions and pending requests in ' +                                        // 6530
      'componentWillUnmount to prevent memory leaks.'                                                                  // 6531
    ],                                                                                                                 // 6532
    replaceProps: [                                                                                                    // 6533
      'replaceProps',                                                                                                  // 6534
      'Instead, call React.render again at the top level.'                                                             // 6535
    ],                                                                                                                 // 6536
    replaceState: [                                                                                                    // 6537
      'replaceState',                                                                                                  // 6538
      'Refactor your code to use setState instead (see ' +                                                             // 6539
      'https://github.com/facebook/react/issues/3236).'                                                                // 6540
    ],                                                                                                                 // 6541
    setProps: [                                                                                                        // 6542
      'setProps',                                                                                                      // 6543
      'Instead, call React.render again at the top level.'                                                             // 6544
    ]                                                                                                                  // 6545
  };                                                                                                                   // 6546
  var defineDeprecationWarning = function(methodName, info) {                                                          // 6547
    try {                                                                                                              // 6548
      Object.defineProperty(ReactComponent.prototype, methodName, {                                                    // 6549
        get: function() {                                                                                              // 6550
          ("production" !== process.env.NODE_ENV ? warning(                                                            // 6551
            false,                                                                                                     // 6552
            '%s(...) is deprecated in plain JavaScript React classes. %s',                                             // 6553
            info[0],                                                                                                   // 6554
            info[1]                                                                                                    // 6555
          ) : null);                                                                                                   // 6556
          return undefined;                                                                                            // 6557
        }                                                                                                              // 6558
      });                                                                                                              // 6559
    } catch (x) {                                                                                                      // 6560
      // IE will fail on defineProperty (es5-shim/sham too)                                                            // 6561
    }                                                                                                                  // 6562
  };                                                                                                                   // 6563
  for (var fnName in deprecatedAPIs) {                                                                                 // 6564
    if (deprecatedAPIs.hasOwnProperty(fnName)) {                                                                       // 6565
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);                                                        // 6566
    }                                                                                                                  // 6567
  }                                                                                                                    // 6568
}                                                                                                                      // 6569
                                                                                                                       // 6570
module.exports = ReactComponent;                                                                                       // 6571
                                                                                                                       // 6572
}).call(this,require('_process'))                                                                                      // 6573
                                                                                                                       // 6574
},{"./ReactUpdateQueue":"react/lib/ReactUpdateQueue","./invariant":"react/lib/invariant","./warning":"react/lib/warning","_process":1}],"react/lib/ReactCompositeComponent":[function(require,module,exports){
(function (process){                                                                                                   // 6576
/**                                                                                                                    // 6577
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 6578
 * All rights reserved.                                                                                                // 6579
 *                                                                                                                     // 6580
 * This source code is licensed under the BSD-style license found in the                                               // 6581
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6582
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 6583
 *                                                                                                                     // 6584
 * @providesModule ReactCompositeComponent                                                                             // 6585
 */                                                                                                                    // 6586
                                                                                                                       // 6587
'use strict';                                                                                                          // 6588
                                                                                                                       // 6589
var ReactComponentEnvironment = require("./ReactComponentEnvironment");                                                // 6590
var ReactContext = require("./ReactContext");                                                                          // 6591
var ReactCurrentOwner = require("./ReactCurrentOwner");                                                                // 6592
var ReactElement = require("./ReactElement");                                                                          // 6593
var ReactElementValidator = require("./ReactElementValidator");                                                        // 6594
var ReactInstanceMap = require("./ReactInstanceMap");                                                                  // 6595
var ReactLifeCycle = require("./ReactLifeCycle");                                                                      // 6596
var ReactNativeComponent = require("./ReactNativeComponent");                                                          // 6597
var ReactPerf = require("./ReactPerf");                                                                                // 6598
var ReactPropTypeLocations = require("./ReactPropTypeLocations");                                                      // 6599
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");                                              // 6600
var ReactReconciler = require("./ReactReconciler");                                                                    // 6601
var ReactUpdates = require("./ReactUpdates");                                                                          // 6602
                                                                                                                       // 6603
var assign = require("./Object.assign");                                                                               // 6604
var emptyObject = require("./emptyObject");                                                                            // 6605
var invariant = require("./invariant");                                                                                // 6606
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");                                              // 6607
var warning = require("./warning");                                                                                    // 6608
                                                                                                                       // 6609
function getDeclarationErrorAddendum(component) {                                                                      // 6610
  var owner = component._currentElement._owner || null;                                                                // 6611
  if (owner) {                                                                                                         // 6612
    var name = owner.getName();                                                                                        // 6613
    if (name) {                                                                                                        // 6614
      return ' Check the render method of `' + name + '`.';                                                            // 6615
    }                                                                                                                  // 6616
  }                                                                                                                    // 6617
  return '';                                                                                                           // 6618
}                                                                                                                      // 6619
                                                                                                                       // 6620
/**                                                                                                                    // 6621
 * ------------------ The Life-Cycle of a Composite Component ------------------                                       // 6622
 *                                                                                                                     // 6623
 * - constructor: Initialization of state. The instance is now retained.                                               // 6624
 *   - componentWillMount                                                                                              // 6625
 *   - render                                                                                                          // 6626
 *   - [children's constructors]                                                                                       // 6627
 *     - [children's componentWillMount and render]                                                                    // 6628
 *     - [children's componentDidMount]                                                                                // 6629
 *     - componentDidMount                                                                                             // 6630
 *                                                                                                                     // 6631
 *       Update Phases:                                                                                                // 6632
 *       - componentWillReceiveProps (only called if parent updated)                                                   // 6633
 *       - shouldComponentUpdate                                                                                       // 6634
 *         - componentWillUpdate                                                                                       // 6635
 *           - render                                                                                                  // 6636
 *           - [children's constructors or receive props phases]                                                       // 6637
 *         - componentDidUpdate                                                                                        // 6638
 *                                                                                                                     // 6639
 *     - componentWillUnmount                                                                                          // 6640
 *     - [children's componentWillUnmount]                                                                             // 6641
 *   - [children destroyed]                                                                                            // 6642
 * - (destroyed): The instance is now blank, released by React and ready for GC.                                       // 6643
 *                                                                                                                     // 6644
 * -----------------------------------------------------------------------------                                       // 6645
 */                                                                                                                    // 6646
                                                                                                                       // 6647
/**                                                                                                                    // 6648
 * An incrementing ID assigned to each component when it is mounted. This is                                           // 6649
 * used to enforce the order in which `ReactUpdates` updates dirty components.                                         // 6650
 *                                                                                                                     // 6651
 * @private                                                                                                            // 6652
 */                                                                                                                    // 6653
var nextMountID = 1;                                                                                                   // 6654
                                                                                                                       // 6655
/**                                                                                                                    // 6656
 * @lends {ReactCompositeComponent.prototype}                                                                          // 6657
 */                                                                                                                    // 6658
var ReactCompositeComponentMixin = {                                                                                   // 6659
                                                                                                                       // 6660
  /**                                                                                                                  // 6661
   * Base constructor for all composite component.                                                                     // 6662
   *                                                                                                                   // 6663
   * @param {ReactElement} element                                                                                     // 6664
   * @final                                                                                                            // 6665
   * @internal                                                                                                         // 6666
   */                                                                                                                  // 6667
  construct: function(element) {                                                                                       // 6668
    this._currentElement = element;                                                                                    // 6669
    this._rootNodeID = null;                                                                                           // 6670
    this._instance = null;                                                                                             // 6671
                                                                                                                       // 6672
    // See ReactUpdateQueue                                                                                            // 6673
    this._pendingElement = null;                                                                                       // 6674
    this._pendingStateQueue = null;                                                                                    // 6675
    this._pendingReplaceState = false;                                                                                 // 6676
    this._pendingForceUpdate = false;                                                                                  // 6677
                                                                                                                       // 6678
    this._renderedComponent = null;                                                                                    // 6679
                                                                                                                       // 6680
    this._context = null;                                                                                              // 6681
    this._mountOrder = 0;                                                                                              // 6682
    this._isTopLevel = false;                                                                                          // 6683
                                                                                                                       // 6684
    // See ReactUpdates and ReactUpdateQueue.                                                                          // 6685
    this._pendingCallbacks = null;                                                                                     // 6686
  },                                                                                                                   // 6687
                                                                                                                       // 6688
  /**                                                                                                                  // 6689
   * Initializes the component, renders markup, and registers event listeners.                                         // 6690
   *                                                                                                                   // 6691
   * @param {string} rootID DOM ID of the root node.                                                                   // 6692
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 6693
   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 6694
   * @final                                                                                                            // 6695
   * @internal                                                                                                         // 6696
   */                                                                                                                  // 6697
  mountComponent: function(rootID, transaction, context) {                                                             // 6698
    this._context = context;                                                                                           // 6699
    this._mountOrder = nextMountID++;                                                                                  // 6700
    this._rootNodeID = rootID;                                                                                         // 6701
                                                                                                                       // 6702
    var publicProps = this._processProps(this._currentElement.props);                                                  // 6703
    var publicContext = this._processContext(this._currentElement._context);                                           // 6704
                                                                                                                       // 6705
    var Component = ReactNativeComponent.getComponentClassForElement(                                                  // 6706
      this._currentElement                                                                                             // 6707
    );                                                                                                                 // 6708
                                                                                                                       // 6709
    // Initialize the public class                                                                                     // 6710
    var inst = new Component(publicProps, publicContext);                                                              // 6711
                                                                                                                       // 6712
    if ("production" !== process.env.NODE_ENV) {                                                                       // 6713
      // This will throw later in _renderValidatedComponent, but add an early                                          // 6714
      // warning now to help debugging                                                                                 // 6715
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 6716
        inst.render != null,                                                                                           // 6717
        '%s(...): No `render` method found on the returned component ' +                                               // 6718
        'instance: you may have forgotten to define `render` in your ' +                                               // 6719
        'component or you may have accidentally tried to render an element ' +                                         // 6720
        'whose type is a function that isn\'t a React component.',                                                     // 6721
        Component.displayName || Component.name || 'Component'                                                         // 6722
      ) : null);                                                                                                       // 6723
    }                                                                                                                  // 6724
                                                                                                                       // 6725
    // These should be set up in the constructor, but as a convenience for                                             // 6726
    // simpler class abstractions, we set them up after the fact.                                                      // 6727
    inst.props = publicProps;                                                                                          // 6728
    inst.context = publicContext;                                                                                      // 6729
    inst.refs = emptyObject;                                                                                           // 6730
                                                                                                                       // 6731
    this._instance = inst;                                                                                             // 6732
                                                                                                                       // 6733
    // Store a reference from the instance back to the internal representation                                         // 6734
    ReactInstanceMap.set(inst, this);                                                                                  // 6735
                                                                                                                       // 6736
    if ("production" !== process.env.NODE_ENV) {                                                                       // 6737
      this._warnIfContextsDiffer(this._currentElement._context, context);                                              // 6738
    }                                                                                                                  // 6739
                                                                                                                       // 6740
    if ("production" !== process.env.NODE_ENV) {                                                                       // 6741
      // Since plain JS classes are defined without any special initialization                                         // 6742
      // logic, we can not catch common errors early. Therefore, we have to                                            // 6743
      // catch them here, at initialization time, instead.                                                             // 6744
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 6745
        !inst.getInitialState ||                                                                                       // 6746
        inst.getInitialState.isReactClassApproved,                                                                     // 6747
        'getInitialState was defined on %s, a plain JavaScript class. ' +                                              // 6748
        'This is only supported for classes created using React.createClass. ' +                                       // 6749
        'Did you mean to define a state property instead?',                                                            // 6750
        this.getName() || 'a component'                                                                                // 6751
      ) : null);                                                                                                       // 6752
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 6753
        !inst.getDefaultProps ||                                                                                       // 6754
        inst.getDefaultProps.isReactClassApproved,                                                                     // 6755
        'getDefaultProps was defined on %s, a plain JavaScript class. ' +                                              // 6756
        'This is only supported for classes created using React.createClass. ' +                                       // 6757
        'Use a static property to define defaultProps instead.',                                                       // 6758
        this.getName() || 'a component'                                                                                // 6759
      ) : null);                                                                                                       // 6760
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 6761
        !inst.propTypes,                                                                                               // 6762
        'propTypes was defined as an instance property on %s. Use a static ' +                                         // 6763
        'property to define propTypes instead.',                                                                       // 6764
        this.getName() || 'a component'                                                                                // 6765
      ) : null);                                                                                                       // 6766
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 6767
        !inst.contextTypes,                                                                                            // 6768
        'contextTypes was defined as an instance property on %s. Use a ' +                                             // 6769
        'static property to define contextTypes instead.',                                                             // 6770
        this.getName() || 'a component'                                                                                // 6771
      ) : null);                                                                                                       // 6772
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 6773
        typeof inst.componentShouldUpdate !== 'function',                                                              // 6774
        '%s has a method called ' +                                                                                    // 6775
        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +                                            // 6776
        'The name is phrased as a question because the function is ' +                                                 // 6777
        'expected to return a value.',                                                                                 // 6778
        (this.getName() || 'A component')                                                                              // 6779
      ) : null);                                                                                                       // 6780
    }                                                                                                                  // 6781
                                                                                                                       // 6782
    var initialState = inst.state;                                                                                     // 6783
    if (initialState === undefined) {                                                                                  // 6784
      inst.state = initialState = null;                                                                                // 6785
    }                                                                                                                  // 6786
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 6787
      typeof initialState === 'object' && !Array.isArray(initialState),                                                // 6788
      '%s.state: must be set to an object or null',                                                                    // 6789
      this.getName() || 'ReactCompositeComponent'                                                                      // 6790
    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));                                  // 6791
                                                                                                                       // 6792
    this._pendingStateQueue = null;                                                                                    // 6793
    this._pendingReplaceState = false;                                                                                 // 6794
    this._pendingForceUpdate = false;                                                                                  // 6795
                                                                                                                       // 6796
    var childContext;                                                                                                  // 6797
    var renderedElement;                                                                                               // 6798
                                                                                                                       // 6799
    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;                                                 // 6800
    ReactLifeCycle.currentlyMountingInstance = this;                                                                   // 6801
    try {                                                                                                              // 6802
      if (inst.componentWillMount) {                                                                                   // 6803
        inst.componentWillMount();                                                                                     // 6804
        // When mounting, calls to `setState` by `componentWillMount` will set                                         // 6805
        // `this._pendingStateQueue` without triggering a re-render.                                                   // 6806
        if (this._pendingStateQueue) {                                                                                 // 6807
          inst.state = this._processPendingState(inst.props, inst.context);                                            // 6808
        }                                                                                                              // 6809
      }                                                                                                                // 6810
                                                                                                                       // 6811
      childContext = this._getValidatedChildContext(context);                                                          // 6812
      renderedElement = this._renderValidatedComponent(childContext);                                                  // 6813
    } finally {                                                                                                        // 6814
      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;                                                   // 6815
    }                                                                                                                  // 6816
                                                                                                                       // 6817
    this._renderedComponent = this._instantiateReactComponent(                                                         // 6818
      renderedElement,                                                                                                 // 6819
      this._currentElement.type // The wrapping type                                                                   // 6820
    );                                                                                                                 // 6821
                                                                                                                       // 6822
    var markup = ReactReconciler.mountComponent(                                                                       // 6823
      this._renderedComponent,                                                                                         // 6824
      rootID,                                                                                                          // 6825
      transaction,                                                                                                     // 6826
      this._mergeChildContext(context, childContext)                                                                   // 6827
    );                                                                                                                 // 6828
    if (inst.componentDidMount) {                                                                                      // 6829
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);                                          // 6830
    }                                                                                                                  // 6831
                                                                                                                       // 6832
    return markup;                                                                                                     // 6833
  },                                                                                                                   // 6834
                                                                                                                       // 6835
  /**                                                                                                                  // 6836
   * Releases any resources allocated by `mountComponent`.                                                             // 6837
   *                                                                                                                   // 6838
   * @final                                                                                                            // 6839
   * @internal                                                                                                         // 6840
   */                                                                                                                  // 6841
  unmountComponent: function() {                                                                                       // 6842
    var inst = this._instance;                                                                                         // 6843
                                                                                                                       // 6844
    if (inst.componentWillUnmount) {                                                                                   // 6845
      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;                                           // 6846
      ReactLifeCycle.currentlyUnmountingInstance = this;                                                               // 6847
      try {                                                                                                            // 6848
        inst.componentWillUnmount();                                                                                   // 6849
      } finally {                                                                                                      // 6850
        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;                                             // 6851
      }                                                                                                                // 6852
    }                                                                                                                  // 6853
                                                                                                                       // 6854
    ReactReconciler.unmountComponent(this._renderedComponent);                                                         // 6855
    this._renderedComponent = null;                                                                                    // 6856
                                                                                                                       // 6857
    // Reset pending fields                                                                                            // 6858
    this._pendingStateQueue = null;                                                                                    // 6859
    this._pendingReplaceState = false;                                                                                 // 6860
    this._pendingForceUpdate = false;                                                                                  // 6861
    this._pendingCallbacks = null;                                                                                     // 6862
    this._pendingElement = null;                                                                                       // 6863
                                                                                                                       // 6864
    // These fields do not really need to be reset since this object is no                                             // 6865
    // longer accessible.                                                                                              // 6866
    this._context = null;                                                                                              // 6867
    this._rootNodeID = null;                                                                                           // 6868
                                                                                                                       // 6869
    // Delete the reference from the instance to this internal representation                                          // 6870
    // which allow the internals to be properly cleaned up even if the user                                            // 6871
    // leaks a reference to the public instance.                                                                       // 6872
    ReactInstanceMap.remove(inst);                                                                                     // 6873
                                                                                                                       // 6874
    // Some existing components rely on inst.props even after they've been                                             // 6875
    // destroyed (in event handlers).                                                                                  // 6876
    // TODO: inst.props = null;                                                                                        // 6877
    // TODO: inst.state = null;                                                                                        // 6878
    // TODO: inst.context = null;                                                                                      // 6879
  },                                                                                                                   // 6880
                                                                                                                       // 6881
  /**                                                                                                                  // 6882
   * Schedule a partial update to the props. Only used for internal testing.                                           // 6883
   *                                                                                                                   // 6884
   * @param {object} partialProps Subset of the next props.                                                            // 6885
   * @param {?function} callback Called after props are updated.                                                       // 6886
   * @final                                                                                                            // 6887
   * @internal                                                                                                         // 6888
   */                                                                                                                  // 6889
  _setPropsInternal: function(partialProps, callback) {                                                                // 6890
    // This is a deoptimized path. We optimize for always having an element.                                           // 6891
    // This creates an extra internal element.                                                                         // 6892
    var element = this._pendingElement || this._currentElement;                                                        // 6893
    this._pendingElement = ReactElement.cloneAndReplaceProps(                                                          // 6894
      element,                                                                                                         // 6895
      assign({}, element.props, partialProps)                                                                          // 6896
    );                                                                                                                 // 6897
    ReactUpdates.enqueueUpdate(this, callback);                                                                        // 6898
  },                                                                                                                   // 6899
                                                                                                                       // 6900
  /**                                                                                                                  // 6901
   * Filters the context object to only contain keys specified in                                                      // 6902
   * `contextTypes`                                                                                                    // 6903
   *                                                                                                                   // 6904
   * @param {object} context                                                                                           // 6905
   * @return {?object}                                                                                                 // 6906
   * @private                                                                                                          // 6907
   */                                                                                                                  // 6908
  _maskContext: function(context) {                                                                                    // 6909
    var maskedContext = null;                                                                                          // 6910
    // This really should be getting the component class for the element,                                              // 6911
    // but we know that we're not going to need it for built-ins.                                                      // 6912
    if (typeof this._currentElement.type === 'string') {                                                               // 6913
      return emptyObject;                                                                                              // 6914
    }                                                                                                                  // 6915
    var contextTypes = this._currentElement.type.contextTypes;                                                         // 6916
    if (!contextTypes) {                                                                                               // 6917
      return emptyObject;                                                                                              // 6918
    }                                                                                                                  // 6919
    maskedContext = {};                                                                                                // 6920
    for (var contextName in contextTypes) {                                                                            // 6921
      maskedContext[contextName] = context[contextName];                                                               // 6922
    }                                                                                                                  // 6923
    return maskedContext;                                                                                              // 6924
  },                                                                                                                   // 6925
                                                                                                                       // 6926
  /**                                                                                                                  // 6927
   * Filters the context object to only contain keys specified in                                                      // 6928
   * `contextTypes`, and asserts that they are valid.                                                                  // 6929
   *                                                                                                                   // 6930
   * @param {object} context                                                                                           // 6931
   * @return {?object}                                                                                                 // 6932
   * @private                                                                                                          // 6933
   */                                                                                                                  // 6934
  _processContext: function(context) {                                                                                 // 6935
    var maskedContext = this._maskContext(context);                                                                    // 6936
    if ("production" !== process.env.NODE_ENV) {                                                                       // 6937
      var Component = ReactNativeComponent.getComponentClassForElement(                                                // 6938
        this._currentElement                                                                                           // 6939
      );                                                                                                               // 6940
      if (Component.contextTypes) {                                                                                    // 6941
        this._checkPropTypes(                                                                                          // 6942
          Component.contextTypes,                                                                                      // 6943
          maskedContext,                                                                                               // 6944
          ReactPropTypeLocations.context                                                                               // 6945
        );                                                                                                             // 6946
      }                                                                                                                // 6947
    }                                                                                                                  // 6948
    return maskedContext;                                                                                              // 6949
  },                                                                                                                   // 6950
                                                                                                                       // 6951
  /**                                                                                                                  // 6952
   * @param {object} currentContext                                                                                    // 6953
   * @return {object}                                                                                                  // 6954
   * @private                                                                                                          // 6955
   */                                                                                                                  // 6956
  _getValidatedChildContext: function(currentContext) {                                                                // 6957
    var inst = this._instance;                                                                                         // 6958
    var childContext = inst.getChildContext && inst.getChildContext();                                                 // 6959
    if (childContext) {                                                                                                // 6960
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 6961
        typeof inst.constructor.childContextTypes === 'object',                                                        // 6962
        '%s.getChildContext(): childContextTypes must be defined in order to ' +                                       // 6963
        'use getChildContext().',                                                                                      // 6964
        this.getName() || 'ReactCompositeComponent'                                                                    // 6965
      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));                                          // 6966
      if ("production" !== process.env.NODE_ENV) {                                                                     // 6967
        this._checkPropTypes(                                                                                          // 6968
          inst.constructor.childContextTypes,                                                                          // 6969
          childContext,                                                                                                // 6970
          ReactPropTypeLocations.childContext                                                                          // 6971
        );                                                                                                             // 6972
      }                                                                                                                // 6973
      for (var name in childContext) {                                                                                 // 6974
        ("production" !== process.env.NODE_ENV ? invariant(                                                            // 6975
          name in inst.constructor.childContextTypes,                                                                  // 6976
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',                                       // 6977
          this.getName() || 'ReactCompositeComponent',                                                                 // 6978
          name                                                                                                         // 6979
        ) : invariant(name in inst.constructor.childContextTypes));                                                    // 6980
      }                                                                                                                // 6981
      return childContext;                                                                                             // 6982
    }                                                                                                                  // 6983
    return null;                                                                                                       // 6984
  },                                                                                                                   // 6985
                                                                                                                       // 6986
  _mergeChildContext: function(currentContext, childContext) {                                                         // 6987
    if (childContext) {                                                                                                // 6988
      return assign({}, currentContext, childContext);                                                                 // 6989
    }                                                                                                                  // 6990
    return currentContext;                                                                                             // 6991
  },                                                                                                                   // 6992
                                                                                                                       // 6993
  /**                                                                                                                  // 6994
   * Processes props by setting default values for unspecified props and                                               // 6995
   * asserting that the props are valid. Does not mutate its argument; returns                                         // 6996
   * a new props object with defaults merged in.                                                                       // 6997
   *                                                                                                                   // 6998
   * @param {object} newProps                                                                                          // 6999
   * @return {object}                                                                                                  // 7000
   * @private                                                                                                          // 7001
   */                                                                                                                  // 7002
  _processProps: function(newProps) {                                                                                  // 7003
    if ("production" !== process.env.NODE_ENV) {                                                                       // 7004
      var Component = ReactNativeComponent.getComponentClassForElement(                                                // 7005
        this._currentElement                                                                                           // 7006
      );                                                                                                               // 7007
      if (Component.propTypes) {                                                                                       // 7008
        this._checkPropTypes(                                                                                          // 7009
          Component.propTypes,                                                                                         // 7010
          newProps,                                                                                                    // 7011
          ReactPropTypeLocations.prop                                                                                  // 7012
        );                                                                                                             // 7013
      }                                                                                                                // 7014
    }                                                                                                                  // 7015
    return newProps;                                                                                                   // 7016
  },                                                                                                                   // 7017
                                                                                                                       // 7018
  /**                                                                                                                  // 7019
   * Assert that the props are valid                                                                                   // 7020
   *                                                                                                                   // 7021
   * @param {object} propTypes Map of prop name to a ReactPropType                                                     // 7022
   * @param {object} props                                                                                             // 7023
   * @param {string} location e.g. "prop", "context", "child context"                                                  // 7024
   * @private                                                                                                          // 7025
   */                                                                                                                  // 7026
  _checkPropTypes: function(propTypes, props, location) {                                                              // 7027
    // TODO: Stop validating prop types here and only use the element                                                  // 7028
    // validation.                                                                                                     // 7029
    var componentName = this.getName();                                                                                // 7030
    for (var propName in propTypes) {                                                                                  // 7031
      if (propTypes.hasOwnProperty(propName)) {                                                                        // 7032
        var error;                                                                                                     // 7033
        try {                                                                                                          // 7034
          // This is intentionally an invariant that gets caught. It's the same                                        // 7035
          // behavior as without this statement except with a better message.                                          // 7036
          ("production" !== process.env.NODE_ENV ? invariant(                                                          // 7037
            typeof propTypes[propName] === 'function',                                                                 // 7038
            '%s: %s type `%s` is invalid; it must be a function, usually ' +                                           // 7039
            'from React.PropTypes.',                                                                                   // 7040
            componentName || 'React class',                                                                            // 7041
            ReactPropTypeLocationNames[location],                                                                      // 7042
            propName                                                                                                   // 7043
          ) : invariant(typeof propTypes[propName] === 'function'));                                                   // 7044
          error = propTypes[propName](props, propName, componentName, location);                                       // 7045
        } catch (ex) {                                                                                                 // 7046
          error = ex;                                                                                                  // 7047
        }                                                                                                              // 7048
        if (error instanceof Error) {                                                                                  // 7049
          // We may want to extend this logic for similar errors in                                                    // 7050
          // React.render calls, so I'm abstracting it away into                                                       // 7051
          // a function to minimize refactoring in the future                                                          // 7052
          var addendum = getDeclarationErrorAddendum(this);                                                            // 7053
                                                                                                                       // 7054
          if (location === ReactPropTypeLocations.prop) {                                                              // 7055
            // Preface gives us something to blacklist in warning module                                               // 7056
            ("production" !== process.env.NODE_ENV ? warning(                                                          // 7057
              false,                                                                                                   // 7058
              'Failed Composite propType: %s%s',                                                                       // 7059
              error.message,                                                                                           // 7060
              addendum                                                                                                 // 7061
            ) : null);                                                                                                 // 7062
          } else {                                                                                                     // 7063
            ("production" !== process.env.NODE_ENV ? warning(                                                          // 7064
              false,                                                                                                   // 7065
              'Failed Context Types: %s%s',                                                                            // 7066
              error.message,                                                                                           // 7067
              addendum                                                                                                 // 7068
            ) : null);                                                                                                 // 7069
          }                                                                                                            // 7070
        }                                                                                                              // 7071
      }                                                                                                                // 7072
    }                                                                                                                  // 7073
  },                                                                                                                   // 7074
                                                                                                                       // 7075
  receiveComponent: function(nextElement, transaction, nextContext) {                                                  // 7076
    var prevElement = this._currentElement;                                                                            // 7077
    var prevContext = this._context;                                                                                   // 7078
                                                                                                                       // 7079
    this._pendingElement = null;                                                                                       // 7080
                                                                                                                       // 7081
    this.updateComponent(                                                                                              // 7082
      transaction,                                                                                                     // 7083
      prevElement,                                                                                                     // 7084
      nextElement,                                                                                                     // 7085
      prevContext,                                                                                                     // 7086
      nextContext                                                                                                      // 7087
    );                                                                                                                 // 7088
  },                                                                                                                   // 7089
                                                                                                                       // 7090
  /**                                                                                                                  // 7091
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`                                       // 7092
   * is set, update the component.                                                                                     // 7093
   *                                                                                                                   // 7094
   * @param {ReactReconcileTransaction} transaction                                                                    // 7095
   * @internal                                                                                                         // 7096
   */                                                                                                                  // 7097
  performUpdateIfNecessary: function(transaction) {                                                                    // 7098
    if (this._pendingElement != null) {                                                                                // 7099
      ReactReconciler.receiveComponent(                                                                                // 7100
        this,                                                                                                          // 7101
        this._pendingElement || this._currentElement,                                                                  // 7102
        transaction,                                                                                                   // 7103
        this._context                                                                                                  // 7104
      );                                                                                                               // 7105
    }                                                                                                                  // 7106
                                                                                                                       // 7107
    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {                                                // 7108
      if ("production" !== process.env.NODE_ENV) {                                                                     // 7109
        ReactElementValidator.checkAndWarnForMutatedProps(                                                             // 7110
          this._currentElement                                                                                         // 7111
        );                                                                                                             // 7112
      }                                                                                                                // 7113
                                                                                                                       // 7114
      this.updateComponent(                                                                                            // 7115
        transaction,                                                                                                   // 7116
        this._currentElement,                                                                                          // 7117
        this._currentElement,                                                                                          // 7118
        this._context,                                                                                                 // 7119
        this._context                                                                                                  // 7120
      );                                                                                                               // 7121
    }                                                                                                                  // 7122
  },                                                                                                                   // 7123
                                                                                                                       // 7124
  /**                                                                                                                  // 7125
   * Compare two contexts, warning if they are different                                                               // 7126
   * TODO: Remove this check when owner-context is removed                                                             // 7127
   */                                                                                                                  // 7128
   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {                                            // 7129
    ownerBasedContext = this._maskContext(ownerBasedContext);                                                          // 7130
    parentBasedContext = this._maskContext(parentBasedContext);                                                        // 7131
    var parentKeys = Object.keys(parentBasedContext).sort();                                                           // 7132
    var displayName = this.getName() || 'ReactCompositeComponent';                                                     // 7133
    for (var i = 0; i < parentKeys.length; i++) {                                                                      // 7134
      var key = parentKeys[i];                                                                                         // 7135
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 7136
        ownerBasedContext[key] === parentBasedContext[key],                                                            // 7137
        'owner-based and parent-based contexts differ '  +                                                             // 7138
        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +                                                     // 7139
        '(see: http://fb.me/react-context-by-parent)',                                                                 // 7140
        ownerBasedContext[key],                                                                                        // 7141
        parentBasedContext[key],                                                                                       // 7142
        key,                                                                                                           // 7143
        displayName                                                                                                    // 7144
      ) : null);                                                                                                       // 7145
    }                                                                                                                  // 7146
  },                                                                                                                   // 7147
                                                                                                                       // 7148
  /**                                                                                                                  // 7149
   * Perform an update to a mounted component. The componentWillReceiveProps and                                       // 7150
   * shouldComponentUpdate methods are called, then (assuming the update isn't                                         // 7151
   * skipped) the remaining update lifecycle methods are called and the DOM                                            // 7152
   * representation is updated.                                                                                        // 7153
   *                                                                                                                   // 7154
   * By default, this implements React's rendering and reconciliation algorithm.                                       // 7155
   * Sophisticated clients may wish to override this.                                                                  // 7156
   *                                                                                                                   // 7157
   * @param {ReactReconcileTransaction} transaction                                                                    // 7158
   * @param {ReactElement} prevParentElement                                                                           // 7159
   * @param {ReactElement} nextParentElement                                                                           // 7160
   * @internal                                                                                                         // 7161
   * @overridable                                                                                                      // 7162
   */                                                                                                                  // 7163
  updateComponent: function(                                                                                           // 7164
    transaction,                                                                                                       // 7165
    prevParentElement,                                                                                                 // 7166
    nextParentElement,                                                                                                 // 7167
    prevUnmaskedContext,                                                                                               // 7168
    nextUnmaskedContext                                                                                                // 7169
  ) {                                                                                                                  // 7170
    var inst = this._instance;                                                                                         // 7171
                                                                                                                       // 7172
    var nextContext = inst.context;                                                                                    // 7173
    var nextProps = inst.props;                                                                                        // 7174
                                                                                                                       // 7175
    // Distinguish between a props update versus a simple state update                                                 // 7176
    if (prevParentElement !== nextParentElement) {                                                                     // 7177
      nextContext = this._processContext(nextParentElement._context);                                                  // 7178
      nextProps = this._processProps(nextParentElement.props);                                                         // 7179
                                                                                                                       // 7180
      if ("production" !== process.env.NODE_ENV) {                                                                     // 7181
        if (nextUnmaskedContext != null) {                                                                             // 7182
          this._warnIfContextsDiffer(                                                                                  // 7183
            nextParentElement._context,                                                                                // 7184
            nextUnmaskedContext                                                                                        // 7185
          );                                                                                                           // 7186
        }                                                                                                              // 7187
      }                                                                                                                // 7188
                                                                                                                       // 7189
      // An update here will schedule an update but immediately set                                                    // 7190
      // _pendingStateQueue which will ensure that any state updates gets                                              // 7191
      // immediately reconciled instead of waiting for the next batch.                                                 // 7192
                                                                                                                       // 7193
      if (inst.componentWillReceiveProps) {                                                                            // 7194
        inst.componentWillReceiveProps(nextProps, nextContext);                                                        // 7195
      }                                                                                                                // 7196
    }                                                                                                                  // 7197
                                                                                                                       // 7198
    var nextState = this._processPendingState(nextProps, nextContext);                                                 // 7199
                                                                                                                       // 7200
    var shouldUpdate =                                                                                                 // 7201
      this._pendingForceUpdate ||                                                                                      // 7202
      !inst.shouldComponentUpdate ||                                                                                   // 7203
      inst.shouldComponentUpdate(nextProps, nextState, nextContext);                                                   // 7204
                                                                                                                       // 7205
    if ("production" !== process.env.NODE_ENV) {                                                                       // 7206
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 7207
        typeof shouldUpdate !== 'undefined',                                                                           // 7208
        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +                                               // 7209
        'boolean value. Make sure to return true or false.',                                                           // 7210
        this.getName() || 'ReactCompositeComponent'                                                                    // 7211
      ) : null);                                                                                                       // 7212
    }                                                                                                                  // 7213
                                                                                                                       // 7214
    if (shouldUpdate) {                                                                                                // 7215
      this._pendingForceUpdate = false;                                                                                // 7216
      // Will set `this.props`, `this.state` and `this.context`.                                                       // 7217
      this._performComponentUpdate(                                                                                    // 7218
        nextParentElement,                                                                                             // 7219
        nextProps,                                                                                                     // 7220
        nextState,                                                                                                     // 7221
        nextContext,                                                                                                   // 7222
        transaction,                                                                                                   // 7223
        nextUnmaskedContext                                                                                            // 7224
      );                                                                                                               // 7225
    } else {                                                                                                           // 7226
      // If it's determined that a component should not update, we still want                                          // 7227
      // to set props and state but we shortcut the rest of the update.                                                // 7228
      this._currentElement = nextParentElement;                                                                        // 7229
      this._context = nextUnmaskedContext;                                                                             // 7230
      inst.props = nextProps;                                                                                          // 7231
      inst.state = nextState;                                                                                          // 7232
      inst.context = nextContext;                                                                                      // 7233
    }                                                                                                                  // 7234
  },                                                                                                                   // 7235
                                                                                                                       // 7236
  _processPendingState: function(props, context) {                                                                     // 7237
    var inst = this._instance;                                                                                         // 7238
    var queue = this._pendingStateQueue;                                                                               // 7239
    var replace = this._pendingReplaceState;                                                                           // 7240
    this._pendingReplaceState = false;                                                                                 // 7241
    this._pendingStateQueue = null;                                                                                    // 7242
                                                                                                                       // 7243
    if (!queue) {                                                                                                      // 7244
      return inst.state;                                                                                               // 7245
    }                                                                                                                  // 7246
                                                                                                                       // 7247
    if (replace && queue.length === 1) {                                                                               // 7248
      return queue[0];                                                                                                 // 7249
    }                                                                                                                  // 7250
                                                                                                                       // 7251
    var nextState = assign({}, replace ? queue[0] : inst.state);                                                       // 7252
    for (var i = replace ? 1 : 0; i < queue.length; i++) {                                                             // 7253
      var partial = queue[i];                                                                                          // 7254
      assign(                                                                                                          // 7255
        nextState,                                                                                                     // 7256
        typeof partial === 'function' ?                                                                                // 7257
          partial.call(inst, nextState, props, context) :                                                              // 7258
          partial                                                                                                      // 7259
      );                                                                                                               // 7260
    }                                                                                                                  // 7261
                                                                                                                       // 7262
    return nextState;                                                                                                  // 7263
  },                                                                                                                   // 7264
                                                                                                                       // 7265
  /**                                                                                                                  // 7266
   * Merges new props and state, notifies delegate methods of update and                                               // 7267
   * performs update.                                                                                                  // 7268
   *                                                                                                                   // 7269
   * @param {ReactElement} nextElement Next element                                                                    // 7270
   * @param {object} nextProps Next public object to set as properties.                                                // 7271
   * @param {?object} nextState Next object to set as state.                                                           // 7272
   * @param {?object} nextContext Next public object to set as context.                                                // 7273
   * @param {ReactReconcileTransaction} transaction                                                                    // 7274
   * @param {?object} unmaskedContext                                                                                  // 7275
   * @private                                                                                                          // 7276
   */                                                                                                                  // 7277
  _performComponentUpdate: function(                                                                                   // 7278
    nextElement,                                                                                                       // 7279
    nextProps,                                                                                                         // 7280
    nextState,                                                                                                         // 7281
    nextContext,                                                                                                       // 7282
    transaction,                                                                                                       // 7283
    unmaskedContext                                                                                                    // 7284
  ) {                                                                                                                  // 7285
    var inst = this._instance;                                                                                         // 7286
                                                                                                                       // 7287
    var prevProps = inst.props;                                                                                        // 7288
    var prevState = inst.state;                                                                                        // 7289
    var prevContext = inst.context;                                                                                    // 7290
                                                                                                                       // 7291
    if (inst.componentWillUpdate) {                                                                                    // 7292
      inst.componentWillUpdate(nextProps, nextState, nextContext);                                                     // 7293
    }                                                                                                                  // 7294
                                                                                                                       // 7295
    this._currentElement = nextElement;                                                                                // 7296
    this._context = unmaskedContext;                                                                                   // 7297
    inst.props = nextProps;                                                                                            // 7298
    inst.state = nextState;                                                                                            // 7299
    inst.context = nextContext;                                                                                        // 7300
                                                                                                                       // 7301
    this._updateRenderedComponent(transaction, unmaskedContext);                                                       // 7302
                                                                                                                       // 7303
    if (inst.componentDidUpdate) {                                                                                     // 7304
      transaction.getReactMountReady().enqueue(                                                                        // 7305
        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),                                         // 7306
        inst                                                                                                           // 7307
      );                                                                                                               // 7308
    }                                                                                                                  // 7309
  },                                                                                                                   // 7310
                                                                                                                       // 7311
  /**                                                                                                                  // 7312
   * Call the component's `render` method and update the DOM accordingly.                                              // 7313
   *                                                                                                                   // 7314
   * @param {ReactReconcileTransaction} transaction                                                                    // 7315
   * @internal                                                                                                         // 7316
   */                                                                                                                  // 7317
  _updateRenderedComponent: function(transaction, context) {                                                           // 7318
    var prevComponentInstance = this._renderedComponent;                                                               // 7319
    var prevRenderedElement = prevComponentInstance._currentElement;                                                   // 7320
    var childContext = this._getValidatedChildContext();                                                               // 7321
    var nextRenderedElement = this._renderValidatedComponent(childContext);                                            // 7322
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {                                        // 7323
      ReactReconciler.receiveComponent(                                                                                // 7324
        prevComponentInstance,                                                                                         // 7325
        nextRenderedElement,                                                                                           // 7326
        transaction,                                                                                                   // 7327
        this._mergeChildContext(context, childContext)                                                                 // 7328
      );                                                                                                               // 7329
    } else {                                                                                                           // 7330
      // These two IDs are actually the same! But nothing should rely on that.                                         // 7331
      var thisID = this._rootNodeID;                                                                                   // 7332
      var prevComponentID = prevComponentInstance._rootNodeID;                                                         // 7333
      ReactReconciler.unmountComponent(prevComponentInstance);                                                         // 7334
                                                                                                                       // 7335
      this._renderedComponent = this._instantiateReactComponent(                                                       // 7336
        nextRenderedElement,                                                                                           // 7337
        this._currentElement.type                                                                                      // 7338
      );                                                                                                               // 7339
      var nextMarkup = ReactReconciler.mountComponent(                                                                 // 7340
        this._renderedComponent,                                                                                       // 7341
        thisID,                                                                                                        // 7342
        transaction,                                                                                                   // 7343
        this._mergeChildContext(context, childContext)                                                                 // 7344
      );                                                                                                               // 7345
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);                                                    // 7346
    }                                                                                                                  // 7347
  },                                                                                                                   // 7348
                                                                                                                       // 7349
  /**                                                                                                                  // 7350
   * @protected                                                                                                        // 7351
   */                                                                                                                  // 7352
  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {                                                  // 7353
    ReactComponentEnvironment.replaceNodeWithMarkupByID(                                                               // 7354
      prevComponentID,                                                                                                 // 7355
      nextMarkup                                                                                                       // 7356
    );                                                                                                                 // 7357
  },                                                                                                                   // 7358
                                                                                                                       // 7359
  /**                                                                                                                  // 7360
   * @protected                                                                                                        // 7361
   */                                                                                                                  // 7362
  _renderValidatedComponentWithoutOwnerOrContext: function() {                                                         // 7363
    var inst = this._instance;                                                                                         // 7364
    var renderedComponent = inst.render();                                                                             // 7365
    if ("production" !== process.env.NODE_ENV) {                                                                       // 7366
      // We allow auto-mocks to proceed as if they're returning null.                                                  // 7367
      if (typeof renderedComponent === 'undefined' &&                                                                  // 7368
          inst.render._isMockFunction) {                                                                               // 7369
        // This is probably bad practice. Consider warning here and                                                    // 7370
        // deprecating this convenience.                                                                               // 7371
        renderedComponent = null;                                                                                      // 7372
      }                                                                                                                // 7373
    }                                                                                                                  // 7374
                                                                                                                       // 7375
    return renderedComponent;                                                                                          // 7376
  },                                                                                                                   // 7377
                                                                                                                       // 7378
  /**                                                                                                                  // 7379
   * @private                                                                                                          // 7380
   */                                                                                                                  // 7381
  _renderValidatedComponent: function(childContext) {                                                                  // 7382
    var renderedComponent;                                                                                             // 7383
    var previousContext = ReactContext.current;                                                                        // 7384
    ReactContext.current = this._mergeChildContext(                                                                    // 7385
      this._currentElement._context,                                                                                   // 7386
      childContext                                                                                                     // 7387
    );                                                                                                                 // 7388
    ReactCurrentOwner.current = this;                                                                                  // 7389
    try {                                                                                                              // 7390
      renderedComponent =                                                                                              // 7391
        this._renderValidatedComponentWithoutOwnerOrContext();                                                         // 7392
    } finally {                                                                                                        // 7393
      ReactContext.current = previousContext;                                                                          // 7394
      ReactCurrentOwner.current = null;                                                                                // 7395
    }                                                                                                                  // 7396
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 7397
      // TODO: An `isValidNode` function would probably be more appropriate                                            // 7398
      renderedComponent === null || renderedComponent === false ||                                                     // 7399
      ReactElement.isValidElement(renderedComponent),                                                                  // 7400
      '%s.render(): A valid ReactComponent must be returned. You may have ' +                                          // 7401
        'returned undefined, an array or some other invalid object.',                                                  // 7402
      this.getName() || 'ReactCompositeComponent'                                                                      // 7403
    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate                                // 7404
    renderedComponent === null || renderedComponent === false ||                                                       // 7405
    ReactElement.isValidElement(renderedComponent)));                                                                  // 7406
    return renderedComponent;                                                                                          // 7407
  },                                                                                                                   // 7408
                                                                                                                       // 7409
  /**                                                                                                                  // 7410
   * Lazily allocates the refs object and stores `component` as `ref`.                                                 // 7411
   *                                                                                                                   // 7412
   * @param {string} ref Reference name.                                                                               // 7413
   * @param {component} component Component to store as `ref`.                                                         // 7414
   * @final                                                                                                            // 7415
   * @private                                                                                                          // 7416
   */                                                                                                                  // 7417
  attachRef: function(ref, component) {                                                                                // 7418
    var inst = this.getPublicInstance();                                                                               // 7419
    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;                                               // 7420
    refs[ref] = component.getPublicInstance();                                                                         // 7421
  },                                                                                                                   // 7422
                                                                                                                       // 7423
  /**                                                                                                                  // 7424
   * Detaches a reference name.                                                                                        // 7425
   *                                                                                                                   // 7426
   * @param {string} ref Name to dereference.                                                                          // 7427
   * @final                                                                                                            // 7428
   * @private                                                                                                          // 7429
   */                                                                                                                  // 7430
  detachRef: function(ref) {                                                                                           // 7431
    var refs = this.getPublicInstance().refs;                                                                          // 7432
    delete refs[ref];                                                                                                  // 7433
  },                                                                                                                   // 7434
                                                                                                                       // 7435
  /**                                                                                                                  // 7436
   * Get a text description of the component that can be used to identify it                                           // 7437
   * in error messages.                                                                                                // 7438
   * @return {string} The name or null.                                                                                // 7439
   * @internal                                                                                                         // 7440
   */                                                                                                                  // 7441
  getName: function() {                                                                                                // 7442
    var type = this._currentElement.type;                                                                              // 7443
    var constructor = this._instance && this._instance.constructor;                                                    // 7444
    return (                                                                                                           // 7445
      type.displayName || (constructor && constructor.displayName) ||                                                  // 7446
      type.name || (constructor && constructor.name) ||                                                                // 7447
      null                                                                                                             // 7448
    );                                                                                                                 // 7449
  },                                                                                                                   // 7450
                                                                                                                       // 7451
  /**                                                                                                                  // 7452
   * Get the publicly accessible representation of this component - i.e. what                                          // 7453
   * is exposed by refs and returned by React.render. Can be null for stateless                                        // 7454
   * components.                                                                                                       // 7455
   *                                                                                                                   // 7456
   * @return {ReactComponent} the public component instance.                                                           // 7457
   * @internal                                                                                                         // 7458
   */                                                                                                                  // 7459
  getPublicInstance: function() {                                                                                      // 7460
    return this._instance;                                                                                             // 7461
  },                                                                                                                   // 7462
                                                                                                                       // 7463
  // Stub                                                                                                              // 7464
  _instantiateReactComponent: null                                                                                     // 7465
                                                                                                                       // 7466
};                                                                                                                     // 7467
                                                                                                                       // 7468
ReactPerf.measureMethods(                                                                                              // 7469
  ReactCompositeComponentMixin,                                                                                        // 7470
  'ReactCompositeComponent',                                                                                           // 7471
  {                                                                                                                    // 7472
    mountComponent: 'mountComponent',                                                                                  // 7473
    updateComponent: 'updateComponent',                                                                                // 7474
    _renderValidatedComponent: '_renderValidatedComponent'                                                             // 7475
  }                                                                                                                    // 7476
);                                                                                                                     // 7477
                                                                                                                       // 7478
var ReactCompositeComponent = {                                                                                        // 7479
                                                                                                                       // 7480
  Mixin: ReactCompositeComponentMixin                                                                                  // 7481
                                                                                                                       // 7482
};                                                                                                                     // 7483
                                                                                                                       // 7484
module.exports = ReactCompositeComponent;                                                                              // 7485
                                                                                                                       // 7486
}).call(this,require('_process'))                                                                                      // 7487
                                                                                                                       // 7488
},{"./Object.assign":"react/lib/Object.assign","./ReactComponentEnvironment":"react/lib/ReactComponentEnvironment","./ReactContext":"react/lib/ReactContext","./ReactCurrentOwner":"react/lib/ReactCurrentOwner","./ReactElement":"react/lib/ReactElement","./ReactElementValidator":"react/lib/ReactElementValidator","./ReactInstanceMap":"react/lib/ReactInstanceMap","./ReactLifeCycle":"react/lib/ReactLifeCycle","./ReactNativeComponent":"react/lib/ReactNativeComponent","./ReactPerf":"react/lib/ReactPerf","./ReactPropTypeLocationNames":"react/lib/ReactPropTypeLocationNames","./ReactPropTypeLocations":"react/lib/ReactPropTypeLocations","./ReactReconciler":"react/lib/ReactReconciler","./ReactUpdates":"react/lib/ReactUpdates","./emptyObject":"react/lib/emptyObject","./invariant":"react/lib/invariant","./shouldUpdateReactComponent":"react/lib/shouldUpdateReactComponent","./warning":"react/lib/warning","_process":1}],"react/lib/ReactContext":[function(require,module,exports){
(function (process){                                                                                                   // 7490
/**                                                                                                                    // 7491
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 7492
 * All rights reserved.                                                                                                // 7493
 *                                                                                                                     // 7494
 * This source code is licensed under the BSD-style license found in the                                               // 7495
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 7496
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7497
 *                                                                                                                     // 7498
 * @providesModule ReactContext                                                                                        // 7499
 */                                                                                                                    // 7500
                                                                                                                       // 7501
'use strict';                                                                                                          // 7502
                                                                                                                       // 7503
var assign = require("./Object.assign");                                                                               // 7504
var emptyObject = require("./emptyObject");                                                                            // 7505
var warning = require("./warning");                                                                                    // 7506
                                                                                                                       // 7507
var didWarn = false;                                                                                                   // 7508
                                                                                                                       // 7509
/**                                                                                                                    // 7510
 * Keeps track of the current context.                                                                                 // 7511
 *                                                                                                                     // 7512
 * The context is automatically passed down the component ownership hierarchy                                          // 7513
 * and is accessible via `this.context` on ReactCompositeComponents.                                                   // 7514
 */                                                                                                                    // 7515
var ReactContext = {                                                                                                   // 7516
                                                                                                                       // 7517
  /**                                                                                                                  // 7518
   * @internal                                                                                                         // 7519
   * @type {object}                                                                                                    // 7520
   */                                                                                                                  // 7521
  current: emptyObject,                                                                                                // 7522
                                                                                                                       // 7523
  /**                                                                                                                  // 7524
   * Temporarily extends the current context while executing scopedCallback.                                           // 7525
   *                                                                                                                   // 7526
   * A typical use case might look like                                                                                // 7527
   *                                                                                                                   // 7528
   *  render: function() {                                                                                             // 7529
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (                                                  // 7530
   *                                                                                                                   // 7531
   *    ));                                                                                                            // 7532
   *    return <div>{children}</div>;                                                                                  // 7533
   *  }                                                                                                                // 7534
   *                                                                                                                   // 7535
   * @param {object} newContext New context to merge into the existing context                                         // 7536
   * @param {function} scopedCallback Callback to run with the new context                                             // 7537
   * @return {ReactComponent|array<ReactComponent>}                                                                    // 7538
   */                                                                                                                  // 7539
  withContext: function(newContext, scopedCallback) {                                                                  // 7540
    if ("production" !== process.env.NODE_ENV) {                                                                       // 7541
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 7542
        didWarn,                                                                                                       // 7543
        'withContext is deprecated and will be removed in a future version. ' +                                        // 7544
        'Use a wrapper component with getChildContext instead.'                                                        // 7545
      ) : null);                                                                                                       // 7546
                                                                                                                       // 7547
      didWarn = true;                                                                                                  // 7548
    }                                                                                                                  // 7549
                                                                                                                       // 7550
    var result;                                                                                                        // 7551
    var previousContext = ReactContext.current;                                                                        // 7552
    ReactContext.current = assign({}, previousContext, newContext);                                                    // 7553
    try {                                                                                                              // 7554
      result = scopedCallback();                                                                                       // 7555
    } finally {                                                                                                        // 7556
      ReactContext.current = previousContext;                                                                          // 7557
    }                                                                                                                  // 7558
    return result;                                                                                                     // 7559
  }                                                                                                                    // 7560
                                                                                                                       // 7561
};                                                                                                                     // 7562
                                                                                                                       // 7563
module.exports = ReactContext;                                                                                         // 7564
                                                                                                                       // 7565
}).call(this,require('_process'))                                                                                      // 7566
                                                                                                                       // 7567
},{"./Object.assign":"react/lib/Object.assign","./emptyObject":"react/lib/emptyObject","./warning":"react/lib/warning","_process":1}],"react/lib/ReactCurrentOwner":[function(require,module,exports){
/**                                                                                                                    // 7569
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 7570
 * All rights reserved.                                                                                                // 7571
 *                                                                                                                     // 7572
 * This source code is licensed under the BSD-style license found in the                                               // 7573
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 7574
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7575
 *                                                                                                                     // 7576
 * @providesModule ReactCurrentOwner                                                                                   // 7577
 */                                                                                                                    // 7578
                                                                                                                       // 7579
'use strict';                                                                                                          // 7580
                                                                                                                       // 7581
/**                                                                                                                    // 7582
 * Keeps track of the current owner.                                                                                   // 7583
 *                                                                                                                     // 7584
 * The current owner is the component who should own any components that are                                           // 7585
 * currently being constructed.                                                                                        // 7586
 *                                                                                                                     // 7587
 * The depth indicate how many composite components are above this render level.                                       // 7588
 */                                                                                                                    // 7589
var ReactCurrentOwner = {                                                                                              // 7590
                                                                                                                       // 7591
  /**                                                                                                                  // 7592
   * @internal                                                                                                         // 7593
   * @type {ReactComponent}                                                                                            // 7594
   */                                                                                                                  // 7595
  current: null                                                                                                        // 7596
                                                                                                                       // 7597
};                                                                                                                     // 7598
                                                                                                                       // 7599
module.exports = ReactCurrentOwner;                                                                                    // 7600
                                                                                                                       // 7601
},{}],"react/lib/ReactDOMButton":[function(require,module,exports){                                                    // 7602
/**                                                                                                                    // 7603
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 7604
 * All rights reserved.                                                                                                // 7605
 *                                                                                                                     // 7606
 * This source code is licensed under the BSD-style license found in the                                               // 7607
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 7608
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7609
 *                                                                                                                     // 7610
 * @providesModule ReactDOMButton                                                                                      // 7611
 */                                                                                                                    // 7612
                                                                                                                       // 7613
'use strict';                                                                                                          // 7614
                                                                                                                       // 7615
var AutoFocusMixin = require("./AutoFocusMixin");                                                                      // 7616
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");                                              // 7617
var ReactClass = require("./ReactClass");                                                                              // 7618
var ReactElement = require("./ReactElement");                                                                          // 7619
                                                                                                                       // 7620
var keyMirror = require("./keyMirror");                                                                                // 7621
                                                                                                                       // 7622
var button = ReactElement.createFactory('button');                                                                     // 7623
                                                                                                                       // 7624
var mouseListenerNames = keyMirror({                                                                                   // 7625
  onClick: true,                                                                                                       // 7626
  onDoubleClick: true,                                                                                                 // 7627
  onMouseDown: true,                                                                                                   // 7628
  onMouseMove: true,                                                                                                   // 7629
  onMouseUp: true,                                                                                                     // 7630
  onClickCapture: true,                                                                                                // 7631
  onDoubleClickCapture: true,                                                                                          // 7632
  onMouseDownCapture: true,                                                                                            // 7633
  onMouseMoveCapture: true,                                                                                            // 7634
  onMouseUpCapture: true                                                                                               // 7635
});                                                                                                                    // 7636
                                                                                                                       // 7637
/**                                                                                                                    // 7638
 * Implements a <button> native component that does not receive mouse events                                           // 7639
 * when `disabled` is set.                                                                                             // 7640
 */                                                                                                                    // 7641
var ReactDOMButton = ReactClass.createClass({                                                                          // 7642
  displayName: 'ReactDOMButton',                                                                                       // 7643
  tagName: 'BUTTON',                                                                                                   // 7644
                                                                                                                       // 7645
  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],                                                                // 7646
                                                                                                                       // 7647
  render: function() {                                                                                                 // 7648
    var props = {};                                                                                                    // 7649
                                                                                                                       // 7650
    // Copy the props; except the mouse listeners if we're disabled                                                    // 7651
    for (var key in this.props) {                                                                                      // 7652
      if (this.props.hasOwnProperty(key) &&                                                                            // 7653
          (!this.props.disabled || !mouseListenerNames[key])) {                                                        // 7654
        props[key] = this.props[key];                                                                                  // 7655
      }                                                                                                                // 7656
    }                                                                                                                  // 7657
                                                                                                                       // 7658
    return button(props, this.props.children);                                                                         // 7659
  }                                                                                                                    // 7660
                                                                                                                       // 7661
});                                                                                                                    // 7662
                                                                                                                       // 7663
module.exports = ReactDOMButton;                                                                                       // 7664
                                                                                                                       // 7665
},{"./AutoFocusMixin":"react/lib/AutoFocusMixin","./ReactBrowserComponentMixin":"react/lib/ReactBrowserComponentMixin","./ReactClass":"react/lib/ReactClass","./ReactElement":"react/lib/ReactElement","./keyMirror":"react/lib/keyMirror"}],"react/lib/ReactDOMComponent":[function(require,module,exports){
(function (process){                                                                                                   // 7667
/**                                                                                                                    // 7668
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 7669
 * All rights reserved.                                                                                                // 7670
 *                                                                                                                     // 7671
 * This source code is licensed under the BSD-style license found in the                                               // 7672
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 7673
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7674
 *                                                                                                                     // 7675
 * @providesModule ReactDOMComponent                                                                                   // 7676
 * @typechecks static-only                                                                                             // 7677
 */                                                                                                                    // 7678
                                                                                                                       // 7679
/* global hasOwnProperty:true */                                                                                       // 7680
                                                                                                                       // 7681
'use strict';                                                                                                          // 7682
                                                                                                                       // 7683
var CSSPropertyOperations = require("./CSSPropertyOperations");                                                        // 7684
var DOMProperty = require("./DOMProperty");                                                                            // 7685
var DOMPropertyOperations = require("./DOMPropertyOperations");                                                        // 7686
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");                                                  // 7687
var ReactComponentBrowserEnvironment =                                                                                 // 7688
  require("./ReactComponentBrowserEnvironment");                                                                       // 7689
var ReactMount = require("./ReactMount");                                                                              // 7690
var ReactMultiChild = require("./ReactMultiChild");                                                                    // 7691
var ReactPerf = require("./ReactPerf");                                                                                // 7692
                                                                                                                       // 7693
var assign = require("./Object.assign");                                                                               // 7694
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");                                            // 7695
var invariant = require("./invariant");                                                                                // 7696
var isEventSupported = require("./isEventSupported");                                                                  // 7697
var keyOf = require("./keyOf");                                                                                        // 7698
var warning = require("./warning");                                                                                    // 7699
                                                                                                                       // 7700
var deleteListener = ReactBrowserEventEmitter.deleteListener;                                                          // 7701
var listenTo = ReactBrowserEventEmitter.listenTo;                                                                      // 7702
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;                                        // 7703
                                                                                                                       // 7704
// For quickly matching children type, to test if can be treated as content.                                           // 7705
var CONTENT_TYPES = {'string': true, 'number': true};                                                                  // 7706
                                                                                                                       // 7707
var STYLE = keyOf({style: null});                                                                                      // 7708
                                                                                                                       // 7709
var ELEMENT_NODE_TYPE = 1;                                                                                             // 7710
                                                                                                                       // 7711
/**                                                                                                                    // 7712
 * Optionally injectable operations for mutating the DOM                                                               // 7713
 */                                                                                                                    // 7714
var BackendIDOperations = null;                                                                                        // 7715
                                                                                                                       // 7716
/**                                                                                                                    // 7717
 * @param {?object} props                                                                                              // 7718
 */                                                                                                                    // 7719
function assertValidProps(props) {                                                                                     // 7720
  if (!props) {                                                                                                        // 7721
    return;                                                                                                            // 7722
  }                                                                                                                    // 7723
  // Note the use of `==` which checks for null or undefined.                                                          // 7724
  if (props.dangerouslySetInnerHTML != null) {                                                                         // 7725
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 7726
      props.children == null,                                                                                          // 7727
      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'                                             // 7728
    ) : invariant(props.children == null));                                                                            // 7729
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 7730
      typeof props.dangerouslySetInnerHTML === 'object' &&                                                             // 7731
      '__html' in props.dangerouslySetInnerHTML,                                                                       // 7732
      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +                                        // 7733
      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +                                       // 7734
      'for more information.'                                                                                          // 7735
    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&                                                 // 7736
    '__html' in props.dangerouslySetInnerHTML));                                                                       // 7737
  }                                                                                                                    // 7738
  if ("production" !== process.env.NODE_ENV) {                                                                         // 7739
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 7740
      props.innerHTML == null,                                                                                         // 7741
      'Directly setting property `innerHTML` is not permitted. ' +                                                     // 7742
      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'                                       // 7743
    ) : null);                                                                                                         // 7744
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 7745
      !props.contentEditable || props.children == null,                                                                // 7746
      'A component is `contentEditable` and contains `children` managed by ' +                                         // 7747
      'React. It is now your responsibility to guarantee that none of ' +                                              // 7748
      'those nodes are unexpectedly modified or duplicated. This is ' +                                                // 7749
      'probably not intentional.'                                                                                      // 7750
    ) : null);                                                                                                         // 7751
  }                                                                                                                    // 7752
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 7753
    props.style == null || typeof props.style === 'object',                                                            // 7754
    'The `style` prop expects a mapping from style properties to values, ' +                                           // 7755
    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +                                       // 7756
    'using JSX.'                                                                                                       // 7757
  ) : invariant(props.style == null || typeof props.style === 'object'));                                              // 7758
}                                                                                                                      // 7759
                                                                                                                       // 7760
function putListener(id, registrationName, listener, transaction) {                                                    // 7761
  if ("production" !== process.env.NODE_ENV) {                                                                         // 7762
    // IE8 has no API for event capturing and the `onScroll` event doesn't                                             // 7763
    // bubble.                                                                                                         // 7764
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 7765
      registrationName !== 'onScroll' || isEventSupported('scroll', true),                                             // 7766
      'This browser doesn\'t support the `onScroll` event'                                                             // 7767
    ) : null);                                                                                                         // 7768
  }                                                                                                                    // 7769
  var container = ReactMount.findReactContainerForID(id);                                                              // 7770
  if (container) {                                                                                                     // 7771
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?                                                               // 7772
      container.ownerDocument :                                                                                        // 7773
      container;                                                                                                       // 7774
    listenTo(registrationName, doc);                                                                                   // 7775
  }                                                                                                                    // 7776
  transaction.getPutListenerQueue().enqueuePutListener(                                                                // 7777
    id,                                                                                                                // 7778
    registrationName,                                                                                                  // 7779
    listener                                                                                                           // 7780
  );                                                                                                                   // 7781
}                                                                                                                      // 7782
                                                                                                                       // 7783
// For HTML, certain tags should omit their close tag. We keep a whitelist for                                         // 7784
// those special cased tags.                                                                                           // 7785
                                                                                                                       // 7786
var omittedCloseTags = {                                                                                               // 7787
  'area': true,                                                                                                        // 7788
  'base': true,                                                                                                        // 7789
  'br': true,                                                                                                          // 7790
  'col': true,                                                                                                         // 7791
  'embed': true,                                                                                                       // 7792
  'hr': true,                                                                                                          // 7793
  'img': true,                                                                                                         // 7794
  'input': true,                                                                                                       // 7795
  'keygen': true,                                                                                                      // 7796
  'link': true,                                                                                                        // 7797
  'meta': true,                                                                                                        // 7798
  'param': true,                                                                                                       // 7799
  'source': true,                                                                                                      // 7800
  'track': true,                                                                                                       // 7801
  'wbr': true                                                                                                          // 7802
  // NOTE: menuitem's close tag should be omitted, but that causes problems.                                           // 7803
};                                                                                                                     // 7804
                                                                                                                       // 7805
// We accept any tag to be rendered but since this gets injected into abitrary                                         // 7806
// HTML, we want to make sure that it's a safe tag.                                                                    // 7807
// http://www.w3.org/TR/REC-xml/#NT-Name                                                                               // 7808
                                                                                                                       // 7809
var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset                                              // 7810
var validatedTagCache = {};                                                                                            // 7811
var hasOwnProperty = {}.hasOwnProperty;                                                                                // 7812
                                                                                                                       // 7813
function validateDangerousTag(tag) {                                                                                   // 7814
  if (!hasOwnProperty.call(validatedTagCache, tag)) {                                                                  // 7815
    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;                                                                                     // 7817
  }                                                                                                                    // 7818
}                                                                                                                      // 7819
                                                                                                                       // 7820
/**                                                                                                                    // 7821
 * Creates a new React class that is idempotent and capable of containing other                                        // 7822
 * React components. It accepts event listeners and DOM properties that are                                            // 7823
 * valid according to `DOMProperty`.                                                                                   // 7824
 *                                                                                                                     // 7825
 *  - Event listeners: `onClick`, `onMouseDown`, etc.                                                                  // 7826
 *  - DOM properties: `className`, `name`, `title`, etc.                                                               // 7827
 *                                                                                                                     // 7828
 * The `style` property functions differently from the DOM API. It accepts an                                          // 7829
 * object mapping of style properties to values.                                                                       // 7830
 *                                                                                                                     // 7831
 * @constructor ReactDOMComponent                                                                                      // 7832
 * @extends ReactMultiChild                                                                                            // 7833
 */                                                                                                                    // 7834
function ReactDOMComponent(tag) {                                                                                      // 7835
  validateDangerousTag(tag);                                                                                           // 7836
  this._tag = tag;                                                                                                     // 7837
  this._renderedChildren = null;                                                                                       // 7838
  this._previousStyleCopy = null;                                                                                      // 7839
  this._rootNodeID = null;                                                                                             // 7840
}                                                                                                                      // 7841
                                                                                                                       // 7842
ReactDOMComponent.displayName = 'ReactDOMComponent';                                                                   // 7843
                                                                                                                       // 7844
ReactDOMComponent.Mixin = {                                                                                            // 7845
                                                                                                                       // 7846
  construct: function(element) {                                                                                       // 7847
    this._currentElement = element;                                                                                    // 7848
  },                                                                                                                   // 7849
                                                                                                                       // 7850
  /**                                                                                                                  // 7851
   * Generates root tag markup then recurses. This method has side effects and                                         // 7852
   * is not idempotent.                                                                                                // 7853
   *                                                                                                                   // 7854
   * @internal                                                                                                         // 7855
   * @param {string} rootID The root DOM ID for this node.                                                             // 7856
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 7857
   * @return {string} The computed markup.                                                                             // 7858
   */                                                                                                                  // 7859
  mountComponent: function(rootID, transaction, context) {                                                             // 7860
    this._rootNodeID = rootID;                                                                                         // 7861
    assertValidProps(this._currentElement.props);                                                                      // 7862
    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';                                          // 7863
    return (                                                                                                           // 7864
      this._createOpenTagMarkupAndPutListeners(transaction) +                                                          // 7865
      this._createContentMarkup(transaction, context) +                                                                // 7866
      closeTag                                                                                                         // 7867
    );                                                                                                                 // 7868
  },                                                                                                                   // 7869
                                                                                                                       // 7870
  /**                                                                                                                  // 7871
   * Creates markup for the open tag and all attributes.                                                               // 7872
   *                                                                                                                   // 7873
   * This method has side effects because events get registered.                                                       // 7874
   *                                                                                                                   // 7875
   * Iterating over object properties is faster than iterating over arrays.                                            // 7876
   * @see http://jsperf.com/obj-vs-arr-iteration                                                                       // 7877
   *                                                                                                                   // 7878
   * @private                                                                                                          // 7879
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 7880
   * @return {string} Markup of opening tag.                                                                           // 7881
   */                                                                                                                  // 7882
  _createOpenTagMarkupAndPutListeners: function(transaction) {                                                         // 7883
    var props = this._currentElement.props;                                                                            // 7884
    var ret = '<' + this._tag;                                                                                         // 7885
                                                                                                                       // 7886
    for (var propKey in props) {                                                                                       // 7887
      if (!props.hasOwnProperty(propKey)) {                                                                            // 7888
        continue;                                                                                                      // 7889
      }                                                                                                                // 7890
      var propValue = props[propKey];                                                                                  // 7891
      if (propValue == null) {                                                                                         // 7892
        continue;                                                                                                      // 7893
      }                                                                                                                // 7894
      if (registrationNameModules.hasOwnProperty(propKey)) {                                                           // 7895
        putListener(this._rootNodeID, propKey, propValue, transaction);                                                // 7896
      } else {                                                                                                         // 7897
        if (propKey === STYLE) {                                                                                       // 7898
          if (propValue) {                                                                                             // 7899
            propValue = this._previousStyleCopy = assign({}, props.style);                                             // 7900
          }                                                                                                            // 7901
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);                                          // 7902
        }                                                                                                              // 7903
        var markup =                                                                                                   // 7904
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);                                           // 7905
        if (markup) {                                                                                                  // 7906
          ret += ' ' + markup;                                                                                         // 7907
        }                                                                                                              // 7908
      }                                                                                                                // 7909
    }                                                                                                                  // 7910
                                                                                                                       // 7911
    // For static pages, no need to put React ID and checksum. Saves lots of                                           // 7912
    // bytes.                                                                                                          // 7913
    if (transaction.renderToStaticMarkup) {                                                                            // 7914
      return ret + '>';                                                                                                // 7915
    }                                                                                                                  // 7916
                                                                                                                       // 7917
    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);                                       // 7918
    return ret + ' ' + markupForID + '>';                                                                              // 7919
  },                                                                                                                   // 7920
                                                                                                                       // 7921
  /**                                                                                                                  // 7922
   * Creates markup for the content between the tags.                                                                  // 7923
   *                                                                                                                   // 7924
   * @private                                                                                                          // 7925
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 7926
   * @param {object} context                                                                                           // 7927
   * @return {string} Content markup.                                                                                  // 7928
   */                                                                                                                  // 7929
  _createContentMarkup: function(transaction, context) {                                                               // 7930
    var prefix = '';                                                                                                   // 7931
    if (this._tag === 'listing' ||                                                                                     // 7932
        this._tag === 'pre' ||                                                                                         // 7933
        this._tag === 'textarea') {                                                                                    // 7934
      // Add an initial newline because browsers ignore the first newline in                                           // 7935
      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see                                        // 7936
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.                                       // 7937
      prefix = '\n';                                                                                                   // 7938
    }                                                                                                                  // 7939
                                                                                                                       // 7940
    var props = this._currentElement.props;                                                                            // 7941
                                                                                                                       // 7942
    // Intentional use of != to avoid catching zero/false.                                                             // 7943
    var innerHTML = props.dangerouslySetInnerHTML;                                                                     // 7944
    if (innerHTML != null) {                                                                                           // 7945
      if (innerHTML.__html != null) {                                                                                  // 7946
        return prefix + innerHTML.__html;                                                                              // 7947
      }                                                                                                                // 7948
    } else {                                                                                                           // 7949
      var contentToUse =                                                                                               // 7950
        CONTENT_TYPES[typeof props.children] ? props.children : null;                                                  // 7951
      var childrenToUse = contentToUse != null ? null : props.children;                                                // 7952
      if (contentToUse != null) {                                                                                      // 7953
        return prefix + escapeTextContentForBrowser(contentToUse);                                                     // 7954
      } else if (childrenToUse != null) {                                                                              // 7955
        var mountImages = this.mountChildren(                                                                          // 7956
          childrenToUse,                                                                                               // 7957
          transaction,                                                                                                 // 7958
          context                                                                                                      // 7959
        );                                                                                                             // 7960
        return prefix + mountImages.join('');                                                                          // 7961
      }                                                                                                                // 7962
    }                                                                                                                  // 7963
    return prefix;                                                                                                     // 7964
  },                                                                                                                   // 7965
                                                                                                                       // 7966
  receiveComponent: function(nextElement, transaction, context) {                                                      // 7967
    var prevElement = this._currentElement;                                                                            // 7968
    this._currentElement = nextElement;                                                                                // 7969
    this.updateComponent(transaction, prevElement, nextElement, context);                                              // 7970
  },                                                                                                                   // 7971
                                                                                                                       // 7972
  /**                                                                                                                  // 7973
   * Updates a native DOM component after it has already been allocated and                                            // 7974
   * attached to the DOM. Reconciles the root DOM node, then recurses.                                                 // 7975
   *                                                                                                                   // 7976
   * @param {ReactReconcileTransaction} transaction                                                                    // 7977
   * @param {ReactElement} prevElement                                                                                 // 7978
   * @param {ReactElement} nextElement                                                                                 // 7979
   * @internal                                                                                                         // 7980
   * @overridable                                                                                                      // 7981
   */                                                                                                                  // 7982
  updateComponent: function(transaction, prevElement, nextElement, context) {                                          // 7983
    assertValidProps(this._currentElement.props);                                                                      // 7984
    this._updateDOMProperties(prevElement.props, transaction);                                                         // 7985
    this._updateDOMChildren(prevElement.props, transaction, context);                                                  // 7986
  },                                                                                                                   // 7987
                                                                                                                       // 7988
  /**                                                                                                                  // 7989
   * Reconciles the properties by detecting differences in property values and                                         // 7990
   * updating the DOM as necessary. This function is probably the single most                                          // 7991
   * critical path for performance optimization.                                                                       // 7992
   *                                                                                                                   // 7993
   * TODO: Benchmark whether checking for changed values in memory actually                                            // 7994
   *       improves performance (especially statically positioned elements).                                           // 7995
   * TODO: Benchmark the effects of putting this at the top since 99% of props                                         // 7996
   *       do not change for a given reconciliation.                                                                   // 7997
   * TODO: Benchmark areas that can be improved with caching.                                                          // 7998
   *                                                                                                                   // 7999
   * @private                                                                                                          // 8000
   * @param {object} lastProps                                                                                         // 8001
   * @param {ReactReconcileTransaction} transaction                                                                    // 8002
   */                                                                                                                  // 8003
  _updateDOMProperties: function(lastProps, transaction) {                                                             // 8004
    var nextProps = this._currentElement.props;                                                                        // 8005
    var propKey;                                                                                                       // 8006
    var styleName;                                                                                                     // 8007
    var styleUpdates;                                                                                                  // 8008
    for (propKey in lastProps) {                                                                                       // 8009
      if (nextProps.hasOwnProperty(propKey) ||                                                                         // 8010
         !lastProps.hasOwnProperty(propKey)) {                                                                         // 8011
        continue;                                                                                                      // 8012
      }                                                                                                                // 8013
      if (propKey === STYLE) {                                                                                         // 8014
        var lastStyle = this._previousStyleCopy;                                                                       // 8015
        for (styleName in lastStyle) {                                                                                 // 8016
          if (lastStyle.hasOwnProperty(styleName)) {                                                                   // 8017
            styleUpdates = styleUpdates || {};                                                                         // 8018
            styleUpdates[styleName] = '';                                                                              // 8019
          }                                                                                                            // 8020
        }                                                                                                              // 8021
        this._previousStyleCopy = null;                                                                                // 8022
      } else if (registrationNameModules.hasOwnProperty(propKey)) {                                                    // 8023
        deleteListener(this._rootNodeID, propKey);                                                                     // 8024
      } else if (                                                                                                      // 8025
          DOMProperty.isStandardName[propKey] ||                                                                       // 8026
          DOMProperty.isCustomAttribute(propKey)) {                                                                    // 8027
        BackendIDOperations.deletePropertyByID(                                                                        // 8028
          this._rootNodeID,                                                                                            // 8029
          propKey                                                                                                      // 8030
        );                                                                                                             // 8031
      }                                                                                                                // 8032
    }                                                                                                                  // 8033
    for (propKey in nextProps) {                                                                                       // 8034
      var nextProp = nextProps[propKey];                                                                               // 8035
      var lastProp = propKey === STYLE ?                                                                               // 8036
        this._previousStyleCopy :                                                                                      // 8037
        lastProps[propKey];                                                                                            // 8038
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {                                               // 8039
        continue;                                                                                                      // 8040
      }                                                                                                                // 8041
      if (propKey === STYLE) {                                                                                         // 8042
        if (nextProp) {                                                                                                // 8043
          nextProp = this._previousStyleCopy = assign({}, nextProp);                                                   // 8044
        } else {                                                                                                       // 8045
          this._previousStyleCopy = null;                                                                              // 8046
        }                                                                                                              // 8047
        if (lastProp) {                                                                                                // 8048
          // Unset styles on `lastProp` but not on `nextProp`.                                                         // 8049
          for (styleName in lastProp) {                                                                                // 8050
            if (lastProp.hasOwnProperty(styleName) &&                                                                  // 8051
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {                                                  // 8052
              styleUpdates = styleUpdates || {};                                                                       // 8053
              styleUpdates[styleName] = '';                                                                            // 8054
            }                                                                                                          // 8055
          }                                                                                                            // 8056
          // Update styles that changed since `lastProp`.                                                              // 8057
          for (styleName in nextProp) {                                                                                // 8058
            if (nextProp.hasOwnProperty(styleName) &&                                                                  // 8059
                lastProp[styleName] !== nextProp[styleName]) {                                                         // 8060
              styleUpdates = styleUpdates || {};                                                                       // 8061
              styleUpdates[styleName] = nextProp[styleName];                                                           // 8062
            }                                                                                                          // 8063
          }                                                                                                            // 8064
        } else {                                                                                                       // 8065
          // Relies on `updateStylesByID` not mutating `styleUpdates`.                                                 // 8066
          styleUpdates = nextProp;                                                                                     // 8067
        }                                                                                                              // 8068
      } else if (registrationNameModules.hasOwnProperty(propKey)) {                                                    // 8069
        putListener(this._rootNodeID, propKey, nextProp, transaction);                                                 // 8070
      } else if (                                                                                                      // 8071
          DOMProperty.isStandardName[propKey] ||                                                                       // 8072
          DOMProperty.isCustomAttribute(propKey)) {                                                                    // 8073
        BackendIDOperations.updatePropertyByID(                                                                        // 8074
          this._rootNodeID,                                                                                            // 8075
          propKey,                                                                                                     // 8076
          nextProp                                                                                                     // 8077
        );                                                                                                             // 8078
      }                                                                                                                // 8079
    }                                                                                                                  // 8080
    if (styleUpdates) {                                                                                                // 8081
      BackendIDOperations.updateStylesByID(                                                                            // 8082
        this._rootNodeID,                                                                                              // 8083
        styleUpdates                                                                                                   // 8084
      );                                                                                                               // 8085
    }                                                                                                                  // 8086
  },                                                                                                                   // 8087
                                                                                                                       // 8088
  /**                                                                                                                  // 8089
   * Reconciles the children with the various properties that affect the                                               // 8090
   * children content.                                                                                                 // 8091
   *                                                                                                                   // 8092
   * @param {object} lastProps                                                                                         // 8093
   * @param {ReactReconcileTransaction} transaction                                                                    // 8094
   */                                                                                                                  // 8095
  _updateDOMChildren: function(lastProps, transaction, context) {                                                      // 8096
    var nextProps = this._currentElement.props;                                                                        // 8097
                                                                                                                       // 8098
    var lastContent =                                                                                                  // 8099
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;                                            // 8100
    var nextContent =                                                                                                  // 8101
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;                                            // 8102
                                                                                                                       // 8103
    var lastHtml =                                                                                                     // 8104
      lastProps.dangerouslySetInnerHTML &&                                                                             // 8105
      lastProps.dangerouslySetInnerHTML.__html;                                                                        // 8106
    var nextHtml =                                                                                                     // 8107
      nextProps.dangerouslySetInnerHTML &&                                                                             // 8108
      nextProps.dangerouslySetInnerHTML.__html;                                                                        // 8109
                                                                                                                       // 8110
    // Note the use of `!=` which checks for null or undefined.                                                        // 8111
    var lastChildren = lastContent != null ? null : lastProps.children;                                                // 8112
    var nextChildren = nextContent != null ? null : nextProps.children;                                                // 8113
                                                                                                                       // 8114
    // If we're switching from children to content/html or vice versa, remove                                          // 8115
    // the old content                                                                                                 // 8116
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;                                                // 8117
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;                                                // 8118
    if (lastChildren != null && nextChildren == null) {                                                                // 8119
      this.updateChildren(null, transaction, context);                                                                 // 8120
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {                                                        // 8121
      this.updateTextContent('');                                                                                      // 8122
    }                                                                                                                  // 8123
                                                                                                                       // 8124
    if (nextContent != null) {                                                                                         // 8125
      if (lastContent !== nextContent) {                                                                               // 8126
        this.updateTextContent('' + nextContent);                                                                      // 8127
      }                                                                                                                // 8128
    } else if (nextHtml != null) {                                                                                     // 8129
      if (lastHtml !== nextHtml) {                                                                                     // 8130
        BackendIDOperations.updateInnerHTMLByID(                                                                       // 8131
          this._rootNodeID,                                                                                            // 8132
          nextHtml                                                                                                     // 8133
        );                                                                                                             // 8134
      }                                                                                                                // 8135
    } else if (nextChildren != null) {                                                                                 // 8136
      this.updateChildren(nextChildren, transaction, context);                                                         // 8137
    }                                                                                                                  // 8138
  },                                                                                                                   // 8139
                                                                                                                       // 8140
  /**                                                                                                                  // 8141
   * Destroys all event registrations for this instance. Does not remove from                                          // 8142
   * the DOM. That must be done by the parent.                                                                         // 8143
   *                                                                                                                   // 8144
   * @internal                                                                                                         // 8145
   */                                                                                                                  // 8146
  unmountComponent: function() {                                                                                       // 8147
    this.unmountChildren();                                                                                            // 8148
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);                                                     // 8149
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);                                       // 8150
    this._rootNodeID = null;                                                                                           // 8151
  }                                                                                                                    // 8152
                                                                                                                       // 8153
};                                                                                                                     // 8154
                                                                                                                       // 8155
ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {                                                     // 8156
  mountComponent: 'mountComponent',                                                                                    // 8157
  updateComponent: 'updateComponent'                                                                                   // 8158
});                                                                                                                    // 8159
                                                                                                                       // 8160
assign(                                                                                                                // 8161
  ReactDOMComponent.prototype,                                                                                         // 8162
  ReactDOMComponent.Mixin,                                                                                             // 8163
  ReactMultiChild.Mixin                                                                                                // 8164
);                                                                                                                     // 8165
                                                                                                                       // 8166
ReactDOMComponent.injection = {                                                                                        // 8167
  injectIDOperations: function(IDOperations) {                                                                         // 8168
    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;                                        // 8169
  }                                                                                                                    // 8170
};                                                                                                                     // 8171
                                                                                                                       // 8172
module.exports = ReactDOMComponent;                                                                                    // 8173
                                                                                                                       // 8174
}).call(this,require('_process'))                                                                                      // 8175
                                                                                                                       // 8176
},{"./CSSPropertyOperations":"react/lib/CSSPropertyOperations","./DOMProperty":"react/lib/DOMProperty","./DOMPropertyOperations":"react/lib/DOMPropertyOperations","./Object.assign":"react/lib/Object.assign","./ReactBrowserEventEmitter":"react/lib/ReactBrowserEventEmitter","./ReactComponentBrowserEnvironment":"react/lib/ReactComponentBrowserEnvironment","./ReactMount":"react/lib/ReactMount","./ReactMultiChild":"react/lib/ReactMultiChild","./ReactPerf":"react/lib/ReactPerf","./escapeTextContentForBrowser":"react/lib/escapeTextContentForBrowser","./invariant":"react/lib/invariant","./isEventSupported":"react/lib/isEventSupported","./keyOf":"react/lib/keyOf","./warning":"react/lib/warning","_process":1}],"react/lib/ReactDOMForm":[function(require,module,exports){
/**                                                                                                                    // 8178
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8179
 * All rights reserved.                                                                                                // 8180
 *                                                                                                                     // 8181
 * This source code is licensed under the BSD-style license found in the                                               // 8182
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8183
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 8184
 *                                                                                                                     // 8185
 * @providesModule ReactDOMForm                                                                                        // 8186
 */                                                                                                                    // 8187
                                                                                                                       // 8188
'use strict';                                                                                                          // 8189
                                                                                                                       // 8190
var EventConstants = require("./EventConstants");                                                                      // 8191
var LocalEventTrapMixin = require("./LocalEventTrapMixin");                                                            // 8192
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");                                              // 8193
var ReactClass = require("./ReactClass");                                                                              // 8194
var ReactElement = require("./ReactElement");                                                                          // 8195
                                                                                                                       // 8196
var form = ReactElement.createFactory('form');                                                                         // 8197
                                                                                                                       // 8198
/**                                                                                                                    // 8199
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need                                           // 8200
 * to capture it on the <form> element itself. There are lots of hacks we could                                        // 8201
 * do to accomplish this, but the most reliable is to make <form> a                                                    // 8202
 * composite component and use `componentDidMount` to attach the event handlers.                                       // 8203
 */                                                                                                                    // 8204
var ReactDOMForm = ReactClass.createClass({                                                                            // 8205
  displayName: 'ReactDOMForm',                                                                                         // 8206
  tagName: 'FORM',                                                                                                     // 8207
                                                                                                                       // 8208
  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],                                                           // 8209
                                                                                                                       // 8210
  render: function() {                                                                                                 // 8211
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,                                         // 8212
    // `jshint` fails to parse JSX so in order for linting to work in the open                                         // 8213
    // source repo, we need to just use `ReactDOM.form`.                                                               // 8214
    return form(this.props);                                                                                           // 8215
  },                                                                                                                   // 8216
                                                                                                                       // 8217
  componentDidMount: function() {                                                                                      // 8218
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');                                             // 8219
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');                                           // 8220
  }                                                                                                                    // 8221
});                                                                                                                    // 8222
                                                                                                                       // 8223
module.exports = ReactDOMForm;                                                                                         // 8224
                                                                                                                       // 8225
},{"./EventConstants":"react/lib/EventConstants","./LocalEventTrapMixin":"react/lib/LocalEventTrapMixin","./ReactBrowserComponentMixin":"react/lib/ReactBrowserComponentMixin","./ReactClass":"react/lib/ReactClass","./ReactElement":"react/lib/ReactElement"}],"react/lib/ReactDOMIDOperations":[function(require,module,exports){
(function (process){                                                                                                   // 8227
/**                                                                                                                    // 8228
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8229
 * All rights reserved.                                                                                                // 8230
 *                                                                                                                     // 8231
 * This source code is licensed under the BSD-style license found in the                                               // 8232
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8233
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 8234
 *                                                                                                                     // 8235
 * @providesModule ReactDOMIDOperations                                                                                // 8236
 * @typechecks static-only                                                                                             // 8237
 */                                                                                                                    // 8238
                                                                                                                       // 8239
/*jslint evil: true */                                                                                                 // 8240
                                                                                                                       // 8241
'use strict';                                                                                                          // 8242
                                                                                                                       // 8243
var CSSPropertyOperations = require("./CSSPropertyOperations");                                                        // 8244
var DOMChildrenOperations = require("./DOMChildrenOperations");                                                        // 8245
var DOMPropertyOperations = require("./DOMPropertyOperations");                                                        // 8246
var ReactMount = require("./ReactMount");                                                                              // 8247
var ReactPerf = require("./ReactPerf");                                                                                // 8248
                                                                                                                       // 8249
var invariant = require("./invariant");                                                                                // 8250
var setInnerHTML = require("./setInnerHTML");                                                                          // 8251
                                                                                                                       // 8252
/**                                                                                                                    // 8253
 * Errors for properties that should not be updated with `updatePropertyById()`.                                       // 8254
 *                                                                                                                     // 8255
 * @type {object}                                                                                                      // 8256
 * @private                                                                                                            // 8257
 */                                                                                                                    // 8258
var INVALID_PROPERTY_ERRORS = {                                                                                        // 8259
  dangerouslySetInnerHTML:                                                                                             // 8260
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',                                            // 8261
  style: '`style` must be set using `updateStylesByID()`.'                                                             // 8262
};                                                                                                                     // 8263
                                                                                                                       // 8264
/**                                                                                                                    // 8265
 * Operations used to process updates to DOM nodes. This is made injectable via                                        // 8266
 * `ReactDOMComponent.BackendIDOperations`.                                                                            // 8267
 */                                                                                                                    // 8268
var ReactDOMIDOperations = {                                                                                           // 8269
                                                                                                                       // 8270
  /**                                                                                                                  // 8271
   * Updates a DOM node with new property values. This should only be used to                                          // 8272
   * update DOM properties in `DOMProperty`.                                                                           // 8273
   *                                                                                                                   // 8274
   * @param {string} id ID of the node to update.                                                                      // 8275
   * @param {string} name A valid property name, see `DOMProperty`.                                                    // 8276
   * @param {*} value New value of the property.                                                                       // 8277
   * @internal                                                                                                         // 8278
   */                                                                                                                  // 8279
  updatePropertyByID: function(id, name, value) {                                                                      // 8280
    var node = ReactMount.getNode(id);                                                                                 // 8281
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 8282
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),                                                                   // 8283
      'updatePropertyByID(...): %s',                                                                                   // 8284
      INVALID_PROPERTY_ERRORS[name]                                                                                    // 8285
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));                                                     // 8286
                                                                                                                       // 8287
    // If we're updating to null or undefined, we should remove the property                                           // 8288
    // from the DOM node instead of inadvertantly setting to a string. This                                            // 8289
    // brings us in line with the same behavior we have on initial render.                                             // 8290
    if (value != null) {                                                                                               // 8291
      DOMPropertyOperations.setValueForProperty(node, name, value);                                                    // 8292
    } else {                                                                                                           // 8293
      DOMPropertyOperations.deleteValueForProperty(node, name);                                                        // 8294
    }                                                                                                                  // 8295
  },                                                                                                                   // 8296
                                                                                                                       // 8297
  /**                                                                                                                  // 8298
   * Updates a DOM node to remove a property. This should only be used to remove                                       // 8299
   * DOM properties in `DOMProperty`.                                                                                  // 8300
   *                                                                                                                   // 8301
   * @param {string} id ID of the node to update.                                                                      // 8302
   * @param {string} name A property name to remove, see `DOMProperty`.                                                // 8303
   * @internal                                                                                                         // 8304
   */                                                                                                                  // 8305
  deletePropertyByID: function(id, name, value) {                                                                      // 8306
    var node = ReactMount.getNode(id);                                                                                 // 8307
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 8308
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),                                                                   // 8309
      'updatePropertyByID(...): %s',                                                                                   // 8310
      INVALID_PROPERTY_ERRORS[name]                                                                                    // 8311
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));                                                     // 8312
    DOMPropertyOperations.deleteValueForProperty(node, name, value);                                                   // 8313
  },                                                                                                                   // 8314
                                                                                                                       // 8315
  /**                                                                                                                  // 8316
   * Updates a DOM node with new style values. If a value is specified as '',                                          // 8317
   * the corresponding style property will be unset.                                                                   // 8318
   *                                                                                                                   // 8319
   * @param {string} id ID of the node to update.                                                                      // 8320
   * @param {object} styles Mapping from styles to values.                                                             // 8321
   * @internal                                                                                                         // 8322
   */                                                                                                                  // 8323
  updateStylesByID: function(id, styles) {                                                                             // 8324
    var node = ReactMount.getNode(id);                                                                                 // 8325
    CSSPropertyOperations.setValueForStyles(node, styles);                                                             // 8326
  },                                                                                                                   // 8327
                                                                                                                       // 8328
  /**                                                                                                                  // 8329
   * Updates a DOM node's innerHTML.                                                                                   // 8330
   *                                                                                                                   // 8331
   * @param {string} id ID of the node to update.                                                                      // 8332
   * @param {string} html An HTML string.                                                                              // 8333
   * @internal                                                                                                         // 8334
   */                                                                                                                  // 8335
  updateInnerHTMLByID: function(id, html) {                                                                            // 8336
    var node = ReactMount.getNode(id);                                                                                 // 8337
    setInnerHTML(node, html);                                                                                          // 8338
  },                                                                                                                   // 8339
                                                                                                                       // 8340
  /**                                                                                                                  // 8341
   * Updates a DOM node's text content set by `props.content`.                                                         // 8342
   *                                                                                                                   // 8343
   * @param {string} id ID of the node to update.                                                                      // 8344
   * @param {string} content Text content.                                                                             // 8345
   * @internal                                                                                                         // 8346
   */                                                                                                                  // 8347
  updateTextContentByID: function(id, content) {                                                                       // 8348
    var node = ReactMount.getNode(id);                                                                                 // 8349
    DOMChildrenOperations.updateTextContent(node, content);                                                            // 8350
  },                                                                                                                   // 8351
                                                                                                                       // 8352
  /**                                                                                                                  // 8353
   * Replaces a DOM node that exists in the document with markup.                                                      // 8354
   *                                                                                                                   // 8355
   * @param {string} id ID of child to be replaced.                                                                    // 8356
   * @param {string} markup Dangerous markup to inject in place of child.                                              // 8357
   * @internal                                                                                                         // 8358
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}                                                                    // 8359
   */                                                                                                                  // 8360
  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {                                                         // 8361
    var node = ReactMount.getNode(id);                                                                                 // 8362
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);                                              // 8363
  },                                                                                                                   // 8364
                                                                                                                       // 8365
  /**                                                                                                                  // 8366
   * Updates a component's children by processing a series of updates.                                                 // 8367
   *                                                                                                                   // 8368
   * @param {array<object>} updates List of update configurations.                                                     // 8369
   * @param {array<string>} markup List of markup strings.                                                             // 8370
   * @internal                                                                                                         // 8371
   */                                                                                                                  // 8372
  dangerouslyProcessChildrenUpdates: function(updates, markup) {                                                       // 8373
    for (var i = 0; i < updates.length; i++) {                                                                         // 8374
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);                                                 // 8375
    }                                                                                                                  // 8376
    DOMChildrenOperations.processUpdates(updates, markup);                                                             // 8377
  }                                                                                                                    // 8378
};                                                                                                                     // 8379
                                                                                                                       // 8380
ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {                                               // 8381
  updatePropertyByID: 'updatePropertyByID',                                                                            // 8382
  deletePropertyByID: 'deletePropertyByID',                                                                            // 8383
  updateStylesByID: 'updateStylesByID',                                                                                // 8384
  updateInnerHTMLByID: 'updateInnerHTMLByID',                                                                          // 8385
  updateTextContentByID: 'updateTextContentByID',                                                                      // 8386
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',                                        // 8387
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'                                               // 8388
});                                                                                                                    // 8389
                                                                                                                       // 8390
module.exports = ReactDOMIDOperations;                                                                                 // 8391
                                                                                                                       // 8392
}).call(this,require('_process'))                                                                                      // 8393
                                                                                                                       // 8394
},{"./CSSPropertyOperations":"react/lib/CSSPropertyOperations","./DOMChildrenOperations":"react/lib/DOMChildrenOperations","./DOMPropertyOperations":"react/lib/DOMPropertyOperations","./ReactMount":"react/lib/ReactMount","./ReactPerf":"react/lib/ReactPerf","./invariant":"react/lib/invariant","./setInnerHTML":"react/lib/setInnerHTML","_process":1}],"react/lib/ReactDOMIframe":[function(require,module,exports){
/**                                                                                                                    // 8396
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8397
 * All rights reserved.                                                                                                // 8398
 *                                                                                                                     // 8399
 * This source code is licensed under the BSD-style license found in the                                               // 8400
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8401
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 8402
 *                                                                                                                     // 8403
 * @providesModule ReactDOMIframe                                                                                      // 8404
 */                                                                                                                    // 8405
                                                                                                                       // 8406
'use strict';                                                                                                          // 8407
                                                                                                                       // 8408
var EventConstants = require("./EventConstants");                                                                      // 8409
var LocalEventTrapMixin = require("./LocalEventTrapMixin");                                                            // 8410
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");                                              // 8411
var ReactClass = require("./ReactClass");                                                                              // 8412
var ReactElement = require("./ReactElement");                                                                          // 8413
                                                                                                                       // 8414
var iframe = ReactElement.createFactory('iframe');                                                                     // 8415
                                                                                                                       // 8416
/**                                                                                                                    // 8417
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to                                          // 8418
 * capture it on the <iframe> element itself. There are lots of hacks we could                                         // 8419
 * do to accomplish this, but the most reliable is to make <iframe> a composite                                        // 8420
 * component and use `componentDidMount` to attach the event handlers.                                                 // 8421
 */                                                                                                                    // 8422
var ReactDOMIframe = ReactClass.createClass({                                                                          // 8423
  displayName: 'ReactDOMIframe',                                                                                       // 8424
  tagName: 'IFRAME',                                                                                                   // 8425
                                                                                                                       // 8426
  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],                                                           // 8427
                                                                                                                       // 8428
  render: function() {                                                                                                 // 8429
    return iframe(this.props);                                                                                         // 8430
  },                                                                                                                   // 8431
                                                                                                                       // 8432
  componentDidMount: function() {                                                                                      // 8433
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');                                               // 8434
  }                                                                                                                    // 8435
});                                                                                                                    // 8436
                                                                                                                       // 8437
module.exports = ReactDOMIframe;                                                                                       // 8438
                                                                                                                       // 8439
},{"./EventConstants":"react/lib/EventConstants","./LocalEventTrapMixin":"react/lib/LocalEventTrapMixin","./ReactBrowserComponentMixin":"react/lib/ReactBrowserComponentMixin","./ReactClass":"react/lib/ReactClass","./ReactElement":"react/lib/ReactElement"}],"react/lib/ReactDOMImg":[function(require,module,exports){
/**                                                                                                                    // 8441
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8442
 * All rights reserved.                                                                                                // 8443
 *                                                                                                                     // 8444
 * This source code is licensed under the BSD-style license found in the                                               // 8445
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8446
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 8447
 *                                                                                                                     // 8448
 * @providesModule ReactDOMImg                                                                                         // 8449
 */                                                                                                                    // 8450
                                                                                                                       // 8451
'use strict';                                                                                                          // 8452
                                                                                                                       // 8453
var EventConstants = require("./EventConstants");                                                                      // 8454
var LocalEventTrapMixin = require("./LocalEventTrapMixin");                                                            // 8455
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");                                              // 8456
var ReactClass = require("./ReactClass");                                                                              // 8457
var ReactElement = require("./ReactElement");                                                                          // 8458
                                                                                                                       // 8459
var img = ReactElement.createFactory('img');                                                                           // 8460
                                                                                                                       // 8461
/**                                                                                                                    // 8462
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to                                          // 8463
 * capture it on the <img> element itself. There are lots of hacks we could do                                         // 8464
 * to accomplish this, but the most reliable is to make <img> a composite                                              // 8465
 * component and use `componentDidMount` to attach the event handlers.                                                 // 8466
 */                                                                                                                    // 8467
var ReactDOMImg = ReactClass.createClass({                                                                             // 8468
  displayName: 'ReactDOMImg',                                                                                          // 8469
  tagName: 'IMG',                                                                                                      // 8470
                                                                                                                       // 8471
  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],                                                           // 8472
                                                                                                                       // 8473
  render: function() {                                                                                                 // 8474
    return img(this.props);                                                                                            // 8475
  },                                                                                                                   // 8476
                                                                                                                       // 8477
  componentDidMount: function() {                                                                                      // 8478
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');                                               // 8479
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');                                             // 8480
  }                                                                                                                    // 8481
});                                                                                                                    // 8482
                                                                                                                       // 8483
module.exports = ReactDOMImg;                                                                                          // 8484
                                                                                                                       // 8485
},{"./EventConstants":"react/lib/EventConstants","./LocalEventTrapMixin":"react/lib/LocalEventTrapMixin","./ReactBrowserComponentMixin":"react/lib/ReactBrowserComponentMixin","./ReactClass":"react/lib/ReactClass","./ReactElement":"react/lib/ReactElement"}],"react/lib/ReactDOMInput":[function(require,module,exports){
(function (process){                                                                                                   // 8487
/**                                                                                                                    // 8488
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8489
 * All rights reserved.                                                                                                // 8490
 *                                                                                                                     // 8491
 * This source code is licensed under the BSD-style license found in the                                               // 8492
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8493
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 8494
 *                                                                                                                     // 8495
 * @providesModule ReactDOMInput                                                                                       // 8496
 */                                                                                                                    // 8497
                                                                                                                       // 8498
'use strict';                                                                                                          // 8499
                                                                                                                       // 8500
var AutoFocusMixin = require("./AutoFocusMixin");                                                                      // 8501
var DOMPropertyOperations = require("./DOMPropertyOperations");                                                        // 8502
var LinkedValueUtils = require("./LinkedValueUtils");                                                                  // 8503
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");                                              // 8504
var ReactClass = require("./ReactClass");                                                                              // 8505
var ReactElement = require("./ReactElement");                                                                          // 8506
var ReactMount = require("./ReactMount");                                                                              // 8507
var ReactUpdates = require("./ReactUpdates");                                                                          // 8508
                                                                                                                       // 8509
var assign = require("./Object.assign");                                                                               // 8510
var invariant = require("./invariant");                                                                                // 8511
                                                                                                                       // 8512
var input = ReactElement.createFactory('input');                                                                       // 8513
                                                                                                                       // 8514
var instancesByReactID = {};                                                                                           // 8515
                                                                                                                       // 8516
function forceUpdateIfMounted() {                                                                                      // 8517
  /*jshint validthis:true */                                                                                           // 8518
  if (this.isMounted()) {                                                                                              // 8519
    this.forceUpdate();                                                                                                // 8520
  }                                                                                                                    // 8521
}                                                                                                                      // 8522
                                                                                                                       // 8523
/**                                                                                                                    // 8524
 * Implements an <input> native component that allows setting these optional                                           // 8525
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.                                                    // 8526
 *                                                                                                                     // 8527
 * If `checked` or `value` are not supplied (or null/undefined), user actions                                          // 8528
 * that affect the checked state or value will trigger updates to the element.                                         // 8529
 *                                                                                                                     // 8530
 * If they are supplied (and not null/undefined), the rendered element will not                                        // 8531
 * trigger updates to the element. Instead, the props must change in order for                                         // 8532
 * the rendered element to be updated.                                                                                 // 8533
 *                                                                                                                     // 8534
 * The rendered element will be initialized as unchecked (or `defaultChecked`)                                         // 8535
 * with an empty value (or `defaultValue`).                                                                            // 8536
 *                                                                                                                     // 8537
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html                                             // 8538
 */                                                                                                                    // 8539
var ReactDOMInput = ReactClass.createClass({                                                                           // 8540
  displayName: 'ReactDOMInput',                                                                                        // 8541
  tagName: 'INPUT',                                                                                                    // 8542
                                                                                                                       // 8543
  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],                                        // 8544
                                                                                                                       // 8545
  getInitialState: function() {                                                                                        // 8546
    var defaultValue = this.props.defaultValue;                                                                        // 8547
    return {                                                                                                           // 8548
      initialChecked: this.props.defaultChecked || false,                                                              // 8549
      initialValue: defaultValue != null ? defaultValue : null                                                         // 8550
    };                                                                                                                 // 8551
  },                                                                                                                   // 8552
                                                                                                                       // 8553
  render: function() {                                                                                                 // 8554
    // Clone `this.props` so we don't mutate the input.                                                                // 8555
    var props = assign({}, this.props);                                                                                // 8556
                                                                                                                       // 8557
    props.defaultChecked = null;                                                                                       // 8558
    props.defaultValue = null;                                                                                         // 8559
                                                                                                                       // 8560
    var value = LinkedValueUtils.getValue(this);                                                                       // 8561
    props.value = value != null ? value : this.state.initialValue;                                                     // 8562
                                                                                                                       // 8563
    var checked = LinkedValueUtils.getChecked(this);                                                                   // 8564
    props.checked = checked != null ? checked : this.state.initialChecked;                                             // 8565
                                                                                                                       // 8566
    props.onChange = this._handleChange;                                                                               // 8567
                                                                                                                       // 8568
    return input(props, this.props.children);                                                                          // 8569
  },                                                                                                                   // 8570
                                                                                                                       // 8571
  componentDidMount: function() {                                                                                      // 8572
    var id = ReactMount.getID(this.getDOMNode());                                                                      // 8573
    instancesByReactID[id] = this;                                                                                     // 8574
  },                                                                                                                   // 8575
                                                                                                                       // 8576
  componentWillUnmount: function() {                                                                                   // 8577
    var rootNode = this.getDOMNode();                                                                                  // 8578
    var id = ReactMount.getID(rootNode);                                                                               // 8579
    delete instancesByReactID[id];                                                                                     // 8580
  },                                                                                                                   // 8581
                                                                                                                       // 8582
  componentDidUpdate: function(prevProps, prevState, prevContext) {                                                    // 8583
    var rootNode = this.getDOMNode();                                                                                  // 8584
    if (this.props.checked != null) {                                                                                  // 8585
      DOMPropertyOperations.setValueForProperty(                                                                       // 8586
        rootNode,                                                                                                      // 8587
        'checked',                                                                                                     // 8588
        this.props.checked || false                                                                                    // 8589
      );                                                                                                               // 8590
    }                                                                                                                  // 8591
                                                                                                                       // 8592
    var value = LinkedValueUtils.getValue(this);                                                                       // 8593
    if (value != null) {                                                                                               // 8594
      // Cast `value` to a string to ensure the value is set correctly. While                                          // 8595
      // browsers typically do this as necessary, jsdom doesn't.                                                       // 8596
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);                                        // 8597
    }                                                                                                                  // 8598
  },                                                                                                                   // 8599
                                                                                                                       // 8600
  _handleChange: function(event) {                                                                                     // 8601
    var returnValue;                                                                                                   // 8602
    var onChange = LinkedValueUtils.getOnChange(this);                                                                 // 8603
    if (onChange) {                                                                                                    // 8604
      returnValue = onChange.call(this, event);                                                                        // 8605
    }                                                                                                                  // 8606
    // Here we use asap to wait until all updates have propagated, which                                               // 8607
    // is important when using controlled components within layers:                                                    // 8608
    // https://github.com/facebook/react/issues/1698                                                                   // 8609
    ReactUpdates.asap(forceUpdateIfMounted, this);                                                                     // 8610
                                                                                                                       // 8611
    var name = this.props.name;                                                                                        // 8612
    if (this.props.type === 'radio' && name != null) {                                                                 // 8613
      var rootNode = this.getDOMNode();                                                                                // 8614
      var queryRoot = rootNode;                                                                                        // 8615
                                                                                                                       // 8616
      while (queryRoot.parentNode) {                                                                                   // 8617
        queryRoot = queryRoot.parentNode;                                                                              // 8618
      }                                                                                                                // 8619
                                                                                                                       // 8620
      // If `rootNode.form` was non-null, then we could try `form.elements`,                                           // 8621
      // but that sometimes behaves strangely in IE8. We could also try using                                          // 8622
      // `form.getElementsByName`, but that will only return direct children                                           // 8623
      // and won't include inputs that use the HTML5 `form=` attribute. Since                                          // 8624
      // the input might not even be in a form, let's just use the global                                              // 8625
      // `querySelectorAll` to ensure we don't miss anything.                                                          // 8626
      var group = queryRoot.querySelectorAll(                                                                          // 8627
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');                                                // 8628
                                                                                                                       // 8629
      for (var i = 0, groupLen = group.length; i < groupLen; i++) {                                                    // 8630
        var otherNode = group[i];                                                                                      // 8631
        if (otherNode === rootNode ||                                                                                  // 8632
            otherNode.form !== rootNode.form) {                                                                        // 8633
          continue;                                                                                                    // 8634
        }                                                                                                              // 8635
        var otherID = ReactMount.getID(otherNode);                                                                     // 8636
        ("production" !== process.env.NODE_ENV ? invariant(                                                            // 8637
          otherID,                                                                                                     // 8638
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +                                         // 8639
          'same `name` is not supported.'                                                                              // 8640
        ) : invariant(otherID));                                                                                       // 8641
        var otherInstance = instancesByReactID[otherID];                                                               // 8642
        ("production" !== process.env.NODE_ENV ? invariant(                                                            // 8643
          otherInstance,                                                                                               // 8644
          'ReactDOMInput: Unknown radio button ID %s.',                                                                // 8645
          otherID                                                                                                      // 8646
        ) : invariant(otherInstance));                                                                                 // 8647
        // If this is a controlled radio button group, forcing the input that                                          // 8648
        // was previously checked to update will cause it to be come re-checked                                        // 8649
        // as appropriate.                                                                                             // 8650
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);                                                        // 8651
      }                                                                                                                // 8652
    }                                                                                                                  // 8653
                                                                                                                       // 8654
    return returnValue;                                                                                                // 8655
  }                                                                                                                    // 8656
                                                                                                                       // 8657
});                                                                                                                    // 8658
                                                                                                                       // 8659
module.exports = ReactDOMInput;                                                                                        // 8660
                                                                                                                       // 8661
}).call(this,require('_process'))                                                                                      // 8662
                                                                                                                       // 8663
},{"./AutoFocusMixin":"react/lib/AutoFocusMixin","./DOMPropertyOperations":"react/lib/DOMPropertyOperations","./LinkedValueUtils":"react/lib/LinkedValueUtils","./Object.assign":"react/lib/Object.assign","./ReactBrowserComponentMixin":"react/lib/ReactBrowserComponentMixin","./ReactClass":"react/lib/ReactClass","./ReactElement":"react/lib/ReactElement","./ReactMount":"react/lib/ReactMount","./ReactUpdates":"react/lib/ReactUpdates","./invariant":"react/lib/invariant","_process":1}],"react/lib/ReactDOMOption":[function(require,module,exports){
(function (process){                                                                                                   // 8665
/**                                                                                                                    // 8666
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8667
 * All rights reserved.                                                                                                // 8668
 *                                                                                                                     // 8669
 * This source code is licensed under the BSD-style license found in the                                               // 8670
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8671
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 8672
 *                                                                                                                     // 8673
 * @providesModule ReactDOMOption                                                                                      // 8674
 */                                                                                                                    // 8675
                                                                                                                       // 8676
'use strict';                                                                                                          // 8677
                                                                                                                       // 8678
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");                                              // 8679
var ReactClass = require("./ReactClass");                                                                              // 8680
var ReactElement = require("./ReactElement");                                                                          // 8681
                                                                                                                       // 8682
var warning = require("./warning");                                                                                    // 8683
                                                                                                                       // 8684
var option = ReactElement.createFactory('option');                                                                     // 8685
                                                                                                                       // 8686
/**                                                                                                                    // 8687
 * Implements an <option> native component that warns when `selected` is set.                                          // 8688
 */                                                                                                                    // 8689
var ReactDOMOption = ReactClass.createClass({                                                                          // 8690
  displayName: 'ReactDOMOption',                                                                                       // 8691
  tagName: 'OPTION',                                                                                                   // 8692
                                                                                                                       // 8693
  mixins: [ReactBrowserComponentMixin],                                                                                // 8694
                                                                                                                       // 8695
  componentWillMount: function() {                                                                                     // 8696
    // TODO (yungsters): Remove support for `selected` in <option>.                                                    // 8697
    if ("production" !== process.env.NODE_ENV) {                                                                       // 8698
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 8699
        this.props.selected == null,                                                                                   // 8700
        'Use the `defaultValue` or `value` props on <select> instead of ' +                                            // 8701
        'setting `selected` on <option>.'                                                                              // 8702
      ) : null);                                                                                                       // 8703
    }                                                                                                                  // 8704
  },                                                                                                                   // 8705
                                                                                                                       // 8706
  render: function() {                                                                                                 // 8707
    return option(this.props, this.props.children);                                                                    // 8708
  }                                                                                                                    // 8709
                                                                                                                       // 8710
});                                                                                                                    // 8711
                                                                                                                       // 8712
module.exports = ReactDOMOption;                                                                                       // 8713
                                                                                                                       // 8714
}).call(this,require('_process'))                                                                                      // 8715
                                                                                                                       // 8716
},{"./ReactBrowserComponentMixin":"react/lib/ReactBrowserComponentMixin","./ReactClass":"react/lib/ReactClass","./ReactElement":"react/lib/ReactElement","./warning":"react/lib/warning","_process":1}],"react/lib/ReactDOMSelection":[function(require,module,exports){
/**                                                                                                                    // 8718
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8719
 * All rights reserved.                                                                                                // 8720
 *                                                                                                                     // 8721
 * This source code is licensed under the BSD-style license found in the                                               // 8722
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8723
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 8724
 *                                                                                                                     // 8725
 * @providesModule ReactDOMSelection                                                                                   // 8726
 */                                                                                                                    // 8727
                                                                                                                       // 8728
'use strict';                                                                                                          // 8729
                                                                                                                       // 8730
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 8731
                                                                                                                       // 8732
var getNodeForCharacterOffset = require("./getNodeForCharacterOffset");                                                // 8733
var getTextContentAccessor = require("./getTextContentAccessor");                                                      // 8734
                                                                                                                       // 8735
/**                                                                                                                    // 8736
 * While `isCollapsed` is available on the Selection object and `collapsed`                                            // 8737
 * is available on the Range object, IE11 sometimes gets them wrong.                                                   // 8738
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.                                         // 8739
 */                                                                                                                    // 8740
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {                                               // 8741
  return anchorNode === focusNode && anchorOffset === focusOffset;                                                     // 8742
}                                                                                                                      // 8743
                                                                                                                       // 8744
/**                                                                                                                    // 8745
 * Get the appropriate anchor and focus node/offset pairs for IE.                                                      // 8746
 *                                                                                                                     // 8747
 * The catch here is that IE's selection API doesn't provide information                                               // 8748
 * about whether the selection is forward or backward, so we have to                                                   // 8749
 * behave as though it's always forward.                                                                               // 8750
 *                                                                                                                     // 8751
 * IE text differs from modern selection in that it behaves as though                                                  // 8752
 * block elements end with a new line. This means character offsets will                                               // 8753
 * differ between the two APIs.                                                                                        // 8754
 *                                                                                                                     // 8755
 * @param {DOMElement} node                                                                                            // 8756
 * @return {object}                                                                                                    // 8757
 */                                                                                                                    // 8758
function getIEOffsets(node) {                                                                                          // 8759
  var selection = document.selection;                                                                                  // 8760
  var selectedRange = selection.createRange();                                                                         // 8761
  var selectedLength = selectedRange.text.length;                                                                      // 8762
                                                                                                                       // 8763
  // Duplicate selection so we can move range without breaking user selection.                                         // 8764
  var fromStart = selectedRange.duplicate();                                                                           // 8765
  fromStart.moveToElementText(node);                                                                                   // 8766
  fromStart.setEndPoint('EndToStart', selectedRange);                                                                  // 8767
                                                                                                                       // 8768
  var startOffset = fromStart.text.length;                                                                             // 8769
  var endOffset = startOffset + selectedLength;                                                                        // 8770
                                                                                                                       // 8771
  return {                                                                                                             // 8772
    start: startOffset,                                                                                                // 8773
    end: endOffset                                                                                                     // 8774
  };                                                                                                                   // 8775
}                                                                                                                      // 8776
                                                                                                                       // 8777
/**                                                                                                                    // 8778
 * @param {DOMElement} node                                                                                            // 8779
 * @return {?object}                                                                                                   // 8780
 */                                                                                                                    // 8781
function getModernOffsets(node) {                                                                                      // 8782
  var selection = window.getSelection && window.getSelection();                                                        // 8783
                                                                                                                       // 8784
  if (!selection || selection.rangeCount === 0) {                                                                      // 8785
    return null;                                                                                                       // 8786
  }                                                                                                                    // 8787
                                                                                                                       // 8788
  var anchorNode = selection.anchorNode;                                                                               // 8789
  var anchorOffset = selection.anchorOffset;                                                                           // 8790
  var focusNode = selection.focusNode;                                                                                 // 8791
  var focusOffset = selection.focusOffset;                                                                             // 8792
                                                                                                                       // 8793
  var currentRange = selection.getRangeAt(0);                                                                          // 8794
                                                                                                                       // 8795
  // If the node and offset values are the same, the selection is collapsed.                                           // 8796
  // `Selection.isCollapsed` is available natively, but IE sometimes gets                                              // 8797
  // this value wrong.                                                                                                 // 8798
  var isSelectionCollapsed = isCollapsed(                                                                              // 8799
    selection.anchorNode,                                                                                              // 8800
    selection.anchorOffset,                                                                                            // 8801
    selection.focusNode,                                                                                               // 8802
    selection.focusOffset                                                                                              // 8803
  );                                                                                                                   // 8804
                                                                                                                       // 8805
  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;                                         // 8806
                                                                                                                       // 8807
  var tempRange = currentRange.cloneRange();                                                                           // 8808
  tempRange.selectNodeContents(node);                                                                                  // 8809
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);                                             // 8810
                                                                                                                       // 8811
  var isTempRangeCollapsed = isCollapsed(                                                                              // 8812
    tempRange.startContainer,                                                                                          // 8813
    tempRange.startOffset,                                                                                             // 8814
    tempRange.endContainer,                                                                                            // 8815
    tempRange.endOffset                                                                                                // 8816
  );                                                                                                                   // 8817
                                                                                                                       // 8818
  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;                                                  // 8819
  var end = start + rangeLength;                                                                                       // 8820
                                                                                                                       // 8821
  // Detect whether the selection is backward.                                                                         // 8822
  var detectionRange = document.createRange();                                                                         // 8823
  detectionRange.setStart(anchorNode, anchorOffset);                                                                   // 8824
  detectionRange.setEnd(focusNode, focusOffset);                                                                       // 8825
  var isBackward = detectionRange.collapsed;                                                                           // 8826
                                                                                                                       // 8827
  return {                                                                                                             // 8828
    start: isBackward ? end : start,                                                                                   // 8829
    end: isBackward ? start : end                                                                                      // 8830
  };                                                                                                                   // 8831
}                                                                                                                      // 8832
                                                                                                                       // 8833
/**                                                                                                                    // 8834
 * @param {DOMElement|DOMTextNode} node                                                                                // 8835
 * @param {object} offsets                                                                                             // 8836
 */                                                                                                                    // 8837
function setIEOffsets(node, offsets) {                                                                                 // 8838
  var range = document.selection.createRange().duplicate();                                                            // 8839
  var start, end;                                                                                                      // 8840
                                                                                                                       // 8841
  if (typeof offsets.end === 'undefined') {                                                                            // 8842
    start = offsets.start;                                                                                             // 8843
    end = start;                                                                                                       // 8844
  } else if (offsets.start > offsets.end) {                                                                            // 8845
    start = offsets.end;                                                                                               // 8846
    end = offsets.start;                                                                                               // 8847
  } else {                                                                                                             // 8848
    start = offsets.start;                                                                                             // 8849
    end = offsets.end;                                                                                                 // 8850
  }                                                                                                                    // 8851
                                                                                                                       // 8852
  range.moveToElementText(node);                                                                                       // 8853
  range.moveStart('character', start);                                                                                 // 8854
  range.setEndPoint('EndToStart', range);                                                                              // 8855
  range.moveEnd('character', end - start);                                                                             // 8856
  range.select();                                                                                                      // 8857
}                                                                                                                      // 8858
                                                                                                                       // 8859
/**                                                                                                                    // 8860
 * In modern non-IE browsers, we can support both forward and backward                                                 // 8861
 * selections.                                                                                                         // 8862
 *                                                                                                                     // 8863
 * Note: IE10+ supports the Selection object, but it does not support                                                  // 8864
 * the `extend` method, which means that even in modern IE, it's not possible                                          // 8865
 * to programatically create a backward selection. Thus, for all IE                                                    // 8866
 * versions, we use the old IE API to create our selections.                                                           // 8867
 *                                                                                                                     // 8868
 * @param {DOMElement|DOMTextNode} node                                                                                // 8869
 * @param {object} offsets                                                                                             // 8870
 */                                                                                                                    // 8871
function setModernOffsets(node, offsets) {                                                                             // 8872
  if (!window.getSelection) {                                                                                          // 8873
    return;                                                                                                            // 8874
  }                                                                                                                    // 8875
                                                                                                                       // 8876
  var selection = window.getSelection();                                                                               // 8877
  var length = node[getTextContentAccessor()].length;                                                                  // 8878
  var start = Math.min(offsets.start, length);                                                                         // 8879
  var end = typeof offsets.end === 'undefined' ?                                                                       // 8880
            start : Math.min(offsets.end, length);                                                                     // 8881
                                                                                                                       // 8882
  // IE 11 uses modern selection, but doesn't support the extend method.                                               // 8883
  // Flip backward selections, so we can set with a single range.                                                      // 8884
  if (!selection.extend && start > end) {                                                                              // 8885
    var temp = end;                                                                                                    // 8886
    end = start;                                                                                                       // 8887
    start = temp;                                                                                                      // 8888
  }                                                                                                                    // 8889
                                                                                                                       // 8890
  var startMarker = getNodeForCharacterOffset(node, start);                                                            // 8891
  var endMarker = getNodeForCharacterOffset(node, end);                                                                // 8892
                                                                                                                       // 8893
  if (startMarker && endMarker) {                                                                                      // 8894
    var range = document.createRange();                                                                                // 8895
    range.setStart(startMarker.node, startMarker.offset);                                                              // 8896
    selection.removeAllRanges();                                                                                       // 8897
                                                                                                                       // 8898
    if (start > end) {                                                                                                 // 8899
      selection.addRange(range);                                                                                       // 8900
      selection.extend(endMarker.node, endMarker.offset);                                                              // 8901
    } else {                                                                                                           // 8902
      range.setEnd(endMarker.node, endMarker.offset);                                                                  // 8903
      selection.addRange(range);                                                                                       // 8904
    }                                                                                                                  // 8905
  }                                                                                                                    // 8906
}                                                                                                                      // 8907
                                                                                                                       // 8908
var useIEOffsets = (                                                                                                   // 8909
  ExecutionEnvironment.canUseDOM &&                                                                                    // 8910
  'selection' in document &&                                                                                           // 8911
  !('getSelection' in window)                                                                                          // 8912
);                                                                                                                     // 8913
                                                                                                                       // 8914
var ReactDOMSelection = {                                                                                              // 8915
  /**                                                                                                                  // 8916
   * @param {DOMElement} node                                                                                          // 8917
   */                                                                                                                  // 8918
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,                                                          // 8919
                                                                                                                       // 8920
  /**                                                                                                                  // 8921
   * @param {DOMElement|DOMTextNode} node                                                                              // 8922
   * @param {object} offsets                                                                                           // 8923
   */                                                                                                                  // 8924
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets                                                           // 8925
};                                                                                                                     // 8926
                                                                                                                       // 8927
module.exports = ReactDOMSelection;                                                                                    // 8928
                                                                                                                       // 8929
},{"./ExecutionEnvironment":"react/lib/ExecutionEnvironment","./getNodeForCharacterOffset":"react/lib/getNodeForCharacterOffset","./getTextContentAccessor":"react/lib/getTextContentAccessor"}],"react/lib/ReactDOMSelect":[function(require,module,exports){
/**                                                                                                                    // 8931
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8932
 * All rights reserved.                                                                                                // 8933
 *                                                                                                                     // 8934
 * This source code is licensed under the BSD-style license found in the                                               // 8935
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 8936
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 8937
 *                                                                                                                     // 8938
 * @providesModule ReactDOMSelect                                                                                      // 8939
 */                                                                                                                    // 8940
                                                                                                                       // 8941
'use strict';                                                                                                          // 8942
                                                                                                                       // 8943
var AutoFocusMixin = require("./AutoFocusMixin");                                                                      // 8944
var LinkedValueUtils = require("./LinkedValueUtils");                                                                  // 8945
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");                                              // 8946
var ReactClass = require("./ReactClass");                                                                              // 8947
var ReactElement = require("./ReactElement");                                                                          // 8948
var ReactUpdates = require("./ReactUpdates");                                                                          // 8949
                                                                                                                       // 8950
var assign = require("./Object.assign");                                                                               // 8951
                                                                                                                       // 8952
var select = ReactElement.createFactory('select');                                                                     // 8953
                                                                                                                       // 8954
function updateOptionsIfPendingUpdateAndMounted() {                                                                    // 8955
  /*jshint validthis:true */                                                                                           // 8956
  if (this._pendingUpdate) {                                                                                           // 8957
    this._pendingUpdate = false;                                                                                       // 8958
    var value = LinkedValueUtils.getValue(this);                                                                       // 8959
    if (value != null && this.isMounted()) {                                                                           // 8960
      updateOptions(this, value);                                                                                      // 8961
    }                                                                                                                  // 8962
  }                                                                                                                    // 8963
}                                                                                                                      // 8964
                                                                                                                       // 8965
/**                                                                                                                    // 8966
 * Validation function for `value` and `defaultValue`.                                                                 // 8967
 * @private                                                                                                            // 8968
 */                                                                                                                    // 8969
function selectValueType(props, propName, componentName) {                                                             // 8970
  if (props[propName] == null) {                                                                                       // 8971
    return null;                                                                                                       // 8972
  }                                                                                                                    // 8973
  if (props.multiple) {                                                                                                // 8974
    if (!Array.isArray(props[propName])) {                                                                             // 8975
      return new Error(                                                                                                // 8976
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +                                    // 8977
        ("`multiple` is true.")                                                                                        // 8978
      );                                                                                                               // 8979
    }                                                                                                                  // 8980
  } else {                                                                                                             // 8981
    if (Array.isArray(props[propName])) {                                                                              // 8982
      return new Error(                                                                                                // 8983
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +                                       // 8984
        ("value if `multiple` is false.")                                                                              // 8985
      );                                                                                                               // 8986
    }                                                                                                                  // 8987
  }                                                                                                                    // 8988
}                                                                                                                      // 8989
                                                                                                                       // 8990
/**                                                                                                                    // 8991
 * @param {ReactComponent} component Instance of ReactDOMSelect                                                        // 8992
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).                                         // 8993
 * @private                                                                                                            // 8994
 */                                                                                                                    // 8995
function updateOptions(component, propValue) {                                                                         // 8996
  var selectedValue, i, l;                                                                                             // 8997
  var options = component.getDOMNode().options;                                                                        // 8998
                                                                                                                       // 8999
  if (component.props.multiple) {                                                                                      // 9000
    selectedValue = {};                                                                                                // 9001
    for (i = 0, l = propValue.length; i < l; i++) {                                                                    // 9002
      selectedValue['' + propValue[i]] = true;                                                                         // 9003
    }                                                                                                                  // 9004
    for (i = 0, l = options.length; i < l; i++) {                                                                      // 9005
      var selected = selectedValue.hasOwnProperty(options[i].value);                                                   // 9006
      if (options[i].selected !== selected) {                                                                          // 9007
        options[i].selected = selected;                                                                                // 9008
      }                                                                                                                // 9009
    }                                                                                                                  // 9010
  } else {                                                                                                             // 9011
    // Do not set `select.value` as exact behavior isn't consistent across all                                         // 9012
    // browsers for all cases.                                                                                         // 9013
    selectedValue = '' + propValue;                                                                                    // 9014
    for (i = 0, l = options.length; i < l; i++) {                                                                      // 9015
      if (options[i].value === selectedValue) {                                                                        // 9016
        options[i].selected = true;                                                                                    // 9017
        return;                                                                                                        // 9018
      }                                                                                                                // 9019
    }                                                                                                                  // 9020
    if (options.length) {                                                                                              // 9021
      options[0].selected = true;                                                                                      // 9022
    }                                                                                                                  // 9023
  }                                                                                                                    // 9024
}                                                                                                                      // 9025
                                                                                                                       // 9026
/**                                                                                                                    // 9027
 * Implements a <select> native component that allows optionally setting the                                           // 9028
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a                                        // 9029
 * stringable. If `multiple` is true, the prop must be an array of stringables.                                        // 9030
 *                                                                                                                     // 9031
 * If `value` is not supplied (or null/undefined), user actions that change the                                        // 9032
 * selected option will trigger updates to the rendered options.                                                       // 9033
 *                                                                                                                     // 9034
 * If it is supplied (and not null/undefined), the rendered options will not                                           // 9035
 * update in response to user actions. Instead, the `value` prop must change in                                        // 9036
 * order for the rendered options to update.                                                                           // 9037
 *                                                                                                                     // 9038
 * If `defaultValue` is provided, any options with the supplied values will be                                         // 9039
 * selected.                                                                                                           // 9040
 */                                                                                                                    // 9041
var ReactDOMSelect = ReactClass.createClass({                                                                          // 9042
  displayName: 'ReactDOMSelect',                                                                                       // 9043
  tagName: 'SELECT',                                                                                                   // 9044
                                                                                                                       // 9045
  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],                                        // 9046
                                                                                                                       // 9047
  propTypes: {                                                                                                         // 9048
    defaultValue: selectValueType,                                                                                     // 9049
    value: selectValueType                                                                                             // 9050
  },                                                                                                                   // 9051
                                                                                                                       // 9052
  render: function() {                                                                                                 // 9053
    // Clone `this.props` so we don't mutate the input.                                                                // 9054
    var props = assign({}, this.props);                                                                                // 9055
                                                                                                                       // 9056
    props.onChange = this._handleChange;                                                                               // 9057
    props.value = null;                                                                                                // 9058
                                                                                                                       // 9059
    return select(props, this.props.children);                                                                         // 9060
  },                                                                                                                   // 9061
                                                                                                                       // 9062
  componentWillMount: function() {                                                                                     // 9063
    this._pendingUpdate = false;                                                                                       // 9064
  },                                                                                                                   // 9065
                                                                                                                       // 9066
  componentDidMount: function() {                                                                                      // 9067
    var value = LinkedValueUtils.getValue(this);                                                                       // 9068
    if (value != null) {                                                                                               // 9069
      updateOptions(this, value);                                                                                      // 9070
    } else if (this.props.defaultValue != null) {                                                                      // 9071
      updateOptions(this, this.props.defaultValue);                                                                    // 9072
    }                                                                                                                  // 9073
  },                                                                                                                   // 9074
                                                                                                                       // 9075
  componentDidUpdate: function(prevProps) {                                                                            // 9076
    var value = LinkedValueUtils.getValue(this);                                                                       // 9077
    if (value != null) {                                                                                               // 9078
      this._pendingUpdate = false;                                                                                     // 9079
      updateOptions(this, value);                                                                                      // 9080
    } else if (!prevProps.multiple !== !this.props.multiple) {                                                         // 9081
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.                                              // 9082
      if (this.props.defaultValue != null) {                                                                           // 9083
        updateOptions(this, this.props.defaultValue);                                                                  // 9084
      } else {                                                                                                         // 9085
        // Revert the select back to its default unselected state.                                                     // 9086
        updateOptions(this, this.props.multiple ? [] : '');                                                            // 9087
      }                                                                                                                // 9088
    }                                                                                                                  // 9089
  },                                                                                                                   // 9090
                                                                                                                       // 9091
  _handleChange: function(event) {                                                                                     // 9092
    var returnValue;                                                                                                   // 9093
    var onChange = LinkedValueUtils.getOnChange(this);                                                                 // 9094
    if (onChange) {                                                                                                    // 9095
      returnValue = onChange.call(this, event);                                                                        // 9096
    }                                                                                                                  // 9097
                                                                                                                       // 9098
    this._pendingUpdate = true;                                                                                        // 9099
    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);                                                   // 9100
    return returnValue;                                                                                                // 9101
  }                                                                                                                    // 9102
                                                                                                                       // 9103
});                                                                                                                    // 9104
                                                                                                                       // 9105
module.exports = ReactDOMSelect;                                                                                       // 9106
                                                                                                                       // 9107
},{"./AutoFocusMixin":"react/lib/AutoFocusMixin","./LinkedValueUtils":"react/lib/LinkedValueUtils","./Object.assign":"react/lib/Object.assign","./ReactBrowserComponentMixin":"react/lib/ReactBrowserComponentMixin","./ReactClass":"react/lib/ReactClass","./ReactElement":"react/lib/ReactElement","./ReactUpdates":"react/lib/ReactUpdates"}],"react/lib/ReactDOMTextComponent":[function(require,module,exports){
/**                                                                                                                    // 9109
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9110
 * All rights reserved.                                                                                                // 9111
 *                                                                                                                     // 9112
 * This source code is licensed under the BSD-style license found in the                                               // 9113
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 9114
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9115
 *                                                                                                                     // 9116
 * @providesModule ReactDOMTextComponent                                                                               // 9117
 * @typechecks static-only                                                                                             // 9118
 */                                                                                                                    // 9119
                                                                                                                       // 9120
'use strict';                                                                                                          // 9121
                                                                                                                       // 9122
var DOMPropertyOperations = require("./DOMPropertyOperations");                                                        // 9123
var ReactComponentBrowserEnvironment =                                                                                 // 9124
  require("./ReactComponentBrowserEnvironment");                                                                       // 9125
var ReactDOMComponent = require("./ReactDOMComponent");                                                                // 9126
                                                                                                                       // 9127
var assign = require("./Object.assign");                                                                               // 9128
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");                                            // 9129
                                                                                                                       // 9130
/**                                                                                                                    // 9131
 * Text nodes violate a couple assumptions that React makes about components:                                          // 9132
 *                                                                                                                     // 9133
 *  - When mounting text into the DOM, adjacent text nodes are merged.                                                 // 9134
 *  - Text nodes cannot be assigned a React root ID.                                                                   // 9135
 *                                                                                                                     // 9136
 * This component is used to wrap strings in elements so that they can undergo                                         // 9137
 * the same reconciliation that is applied to elements.                                                                // 9138
 *                                                                                                                     // 9139
 * TODO: Investigate representing React components in the DOM with text nodes.                                         // 9140
 *                                                                                                                     // 9141
 * @class ReactDOMTextComponent                                                                                        // 9142
 * @extends ReactComponent                                                                                             // 9143
 * @internal                                                                                                           // 9144
 */                                                                                                                    // 9145
var ReactDOMTextComponent = function(props) {                                                                          // 9146
  // This constructor and its argument is currently used by mocks.                                                     // 9147
};                                                                                                                     // 9148
                                                                                                                       // 9149
assign(ReactDOMTextComponent.prototype, {                                                                              // 9150
                                                                                                                       // 9151
  /**                                                                                                                  // 9152
   * @param {ReactText} text                                                                                           // 9153
   * @internal                                                                                                         // 9154
   */                                                                                                                  // 9155
  construct: function(text) {                                                                                          // 9156
    // TODO: This is really a ReactText (ReactNode), not a ReactElement                                                // 9157
    this._currentElement = text;                                                                                       // 9158
    this._stringText = '' + text;                                                                                      // 9159
                                                                                                                       // 9160
    // Properties                                                                                                      // 9161
    this._rootNodeID = null;                                                                                           // 9162
    this._mountIndex = 0;                                                                                              // 9163
  },                                                                                                                   // 9164
                                                                                                                       // 9165
  /**                                                                                                                  // 9166
   * Creates the markup for this text node. This node is not intended to have                                          // 9167
   * any features besides containing text content.                                                                     // 9168
   *                                                                                                                   // 9169
   * @param {string} rootID DOM ID of the root node.                                                                   // 9170
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 9171
   * @return {string} Markup for this text node.                                                                       // 9172
   * @internal                                                                                                         // 9173
   */                                                                                                                  // 9174
  mountComponent: function(rootID, transaction, context) {                                                             // 9175
    this._rootNodeID = rootID;                                                                                         // 9176
    var escapedText = escapeTextContentForBrowser(this._stringText);                                                   // 9177
                                                                                                                       // 9178
    if (transaction.renderToStaticMarkup) {                                                                            // 9179
      // Normally we'd wrap this in a `span` for the reasons stated above, but                                         // 9180
      // since this is a situation where React won't take over (static pages),                                         // 9181
      // we can simply return the text as it is.                                                                       // 9182
      return escapedText;                                                                                              // 9183
    }                                                                                                                  // 9184
                                                                                                                       // 9185
    return (                                                                                                           // 9186
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +                                               // 9187
        escapedText +                                                                                                  // 9188
      '</span>'                                                                                                        // 9189
    );                                                                                                                 // 9190
  },                                                                                                                   // 9191
                                                                                                                       // 9192
  /**                                                                                                                  // 9193
   * Updates this component by updating the text content.                                                              // 9194
   *                                                                                                                   // 9195
   * @param {ReactText} nextText The next text content                                                                 // 9196
   * @param {ReactReconcileTransaction} transaction                                                                    // 9197
   * @internal                                                                                                         // 9198
   */                                                                                                                  // 9199
  receiveComponent: function(nextText, transaction) {                                                                  // 9200
    if (nextText !== this._currentElement) {                                                                           // 9201
      this._currentElement = nextText;                                                                                 // 9202
      var nextStringText = '' + nextText;                                                                              // 9203
      if (nextStringText !== this._stringText) {                                                                       // 9204
        // TODO: Save this as pending props and use performUpdateIfNecessary                                           // 9205
        // and/or updateComponent to do the actual update for consistency with                                         // 9206
        // other component types?                                                                                      // 9207
        this._stringText = nextStringText;                                                                             // 9208
        ReactDOMComponent.BackendIDOperations.updateTextContentByID(                                                   // 9209
          this._rootNodeID,                                                                                            // 9210
          nextStringText                                                                                               // 9211
        );                                                                                                             // 9212
      }                                                                                                                // 9213
    }                                                                                                                  // 9214
  },                                                                                                                   // 9215
                                                                                                                       // 9216
  unmountComponent: function() {                                                                                       // 9217
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);                                       // 9218
  }                                                                                                                    // 9219
                                                                                                                       // 9220
});                                                                                                                    // 9221
                                                                                                                       // 9222
module.exports = ReactDOMTextComponent;                                                                                // 9223
                                                                                                                       // 9224
},{"./DOMPropertyOperations":"react/lib/DOMPropertyOperations","./Object.assign":"react/lib/Object.assign","./ReactComponentBrowserEnvironment":"react/lib/ReactComponentBrowserEnvironment","./ReactDOMComponent":"react/lib/ReactDOMComponent","./escapeTextContentForBrowser":"react/lib/escapeTextContentForBrowser"}],"react/lib/ReactDOMTextarea":[function(require,module,exports){
(function (process){                                                                                                   // 9226
/**                                                                                                                    // 9227
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9228
 * All rights reserved.                                                                                                // 9229
 *                                                                                                                     // 9230
 * This source code is licensed under the BSD-style license found in the                                               // 9231
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 9232
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9233
 *                                                                                                                     // 9234
 * @providesModule ReactDOMTextarea                                                                                    // 9235
 */                                                                                                                    // 9236
                                                                                                                       // 9237
'use strict';                                                                                                          // 9238
                                                                                                                       // 9239
var AutoFocusMixin = require("./AutoFocusMixin");                                                                      // 9240
var DOMPropertyOperations = require("./DOMPropertyOperations");                                                        // 9241
var LinkedValueUtils = require("./LinkedValueUtils");                                                                  // 9242
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");                                              // 9243
var ReactClass = require("./ReactClass");                                                                              // 9244
var ReactElement = require("./ReactElement");                                                                          // 9245
var ReactUpdates = require("./ReactUpdates");                                                                          // 9246
                                                                                                                       // 9247
var assign = require("./Object.assign");                                                                               // 9248
var invariant = require("./invariant");                                                                                // 9249
                                                                                                                       // 9250
var warning = require("./warning");                                                                                    // 9251
                                                                                                                       // 9252
var textarea = ReactElement.createFactory('textarea');                                                                 // 9253
                                                                                                                       // 9254
function forceUpdateIfMounted() {                                                                                      // 9255
  /*jshint validthis:true */                                                                                           // 9256
  if (this.isMounted()) {                                                                                              // 9257
    this.forceUpdate();                                                                                                // 9258
  }                                                                                                                    // 9259
}                                                                                                                      // 9260
                                                                                                                       // 9261
/**                                                                                                                    // 9262
 * Implements a <textarea> native component that allows setting `value`, and                                           // 9263
 * `defaultValue`. This differs from the traditional DOM API because value is                                          // 9264
 * usually set as PCDATA children.                                                                                     // 9265
 *                                                                                                                     // 9266
 * If `value` is not supplied (or null/undefined), user actions that affect the                                        // 9267
 * value will trigger updates to the element.                                                                          // 9268
 *                                                                                                                     // 9269
 * If `value` is supplied (and not null/undefined), the rendered element will                                          // 9270
 * not trigger updates to the element. Instead, the `value` prop must change in                                        // 9271
 * order for the rendered element to be updated.                                                                       // 9272
 *                                                                                                                     // 9273
 * The rendered element will be initialized with an empty value, the prop                                              // 9274
 * `defaultValue` if specified, or the children content (deprecated).                                                  // 9275
 */                                                                                                                    // 9276
var ReactDOMTextarea = ReactClass.createClass({                                                                        // 9277
  displayName: 'ReactDOMTextarea',                                                                                     // 9278
  tagName: 'TEXTAREA',                                                                                                 // 9279
                                                                                                                       // 9280
  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],                                        // 9281
                                                                                                                       // 9282
  getInitialState: function() {                                                                                        // 9283
    var defaultValue = this.props.defaultValue;                                                                        // 9284
    // TODO (yungsters): Remove support for children content in <textarea>.                                            // 9285
    var children = this.props.children;                                                                                // 9286
    if (children != null) {                                                                                            // 9287
      if ("production" !== process.env.NODE_ENV) {                                                                     // 9288
        ("production" !== process.env.NODE_ENV ? warning(                                                              // 9289
          false,                                                                                                       // 9290
          'Use the `defaultValue` or `value` props instead of setting ' +                                              // 9291
          'children on <textarea>.'                                                                                    // 9292
        ) : null);                                                                                                     // 9293
      }                                                                                                                // 9294
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 9295
        defaultValue == null,                                                                                          // 9296
        'If you supply `defaultValue` on a <textarea>, do not pass children.'                                          // 9297
      ) : invariant(defaultValue == null));                                                                            // 9298
      if (Array.isArray(children)) {                                                                                   // 9299
        ("production" !== process.env.NODE_ENV ? invariant(                                                            // 9300
          children.length <= 1,                                                                                        // 9301
          '<textarea> can only have at most one child.'                                                                // 9302
        ) : invariant(children.length <= 1));                                                                          // 9303
        children = children[0];                                                                                        // 9304
      }                                                                                                                // 9305
                                                                                                                       // 9306
      defaultValue = '' + children;                                                                                    // 9307
    }                                                                                                                  // 9308
    if (defaultValue == null) {                                                                                        // 9309
      defaultValue = '';                                                                                               // 9310
    }                                                                                                                  // 9311
    var value = LinkedValueUtils.getValue(this);                                                                       // 9312
    return {                                                                                                           // 9313
      // We save the initial value so that `ReactDOMComponent` doesn't update                                          // 9314
      // `textContent` (unnecessary since we update value).                                                            // 9315
      // The initial value can be a boolean or object so that's why it's                                               // 9316
      // forced to be a string.                                                                                        // 9317
      initialValue: '' + (value != null ? value : defaultValue)                                                        // 9318
    };                                                                                                                 // 9319
  },                                                                                                                   // 9320
                                                                                                                       // 9321
  render: function() {                                                                                                 // 9322
    // Clone `this.props` so we don't mutate the input.                                                                // 9323
    var props = assign({}, this.props);                                                                                // 9324
                                                                                                                       // 9325
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 9326
      props.dangerouslySetInnerHTML == null,                                                                           // 9327
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'                                                   // 9328
    ) : invariant(props.dangerouslySetInnerHTML == null));                                                             // 9329
                                                                                                                       // 9330
    props.defaultValue = null;                                                                                         // 9331
    props.value = null;                                                                                                // 9332
    props.onChange = this._handleChange;                                                                               // 9333
                                                                                                                       // 9334
    // Always set children to the same thing. In IE9, the selection range will                                         // 9335
    // get reset if `textContent` is mutated.                                                                          // 9336
    return textarea(props, this.state.initialValue);                                                                   // 9337
  },                                                                                                                   // 9338
                                                                                                                       // 9339
  componentDidUpdate: function(prevProps, prevState, prevContext) {                                                    // 9340
    var value = LinkedValueUtils.getValue(this);                                                                       // 9341
    if (value != null) {                                                                                               // 9342
      var rootNode = this.getDOMNode();                                                                                // 9343
      // Cast `value` to a string to ensure the value is set correctly. While                                          // 9344
      // browsers typically do this as necessary, jsdom doesn't.                                                       // 9345
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);                                        // 9346
    }                                                                                                                  // 9347
  },                                                                                                                   // 9348
                                                                                                                       // 9349
  _handleChange: function(event) {                                                                                     // 9350
    var returnValue;                                                                                                   // 9351
    var onChange = LinkedValueUtils.getOnChange(this);                                                                 // 9352
    if (onChange) {                                                                                                    // 9353
      returnValue = onChange.call(this, event);                                                                        // 9354
    }                                                                                                                  // 9355
    ReactUpdates.asap(forceUpdateIfMounted, this);                                                                     // 9356
    return returnValue;                                                                                                // 9357
  }                                                                                                                    // 9358
                                                                                                                       // 9359
});                                                                                                                    // 9360
                                                                                                                       // 9361
module.exports = ReactDOMTextarea;                                                                                     // 9362
                                                                                                                       // 9363
}).call(this,require('_process'))                                                                                      // 9364
                                                                                                                       // 9365
},{"./AutoFocusMixin":"react/lib/AutoFocusMixin","./DOMPropertyOperations":"react/lib/DOMPropertyOperations","./LinkedValueUtils":"react/lib/LinkedValueUtils","./Object.assign":"react/lib/Object.assign","./ReactBrowserComponentMixin":"react/lib/ReactBrowserComponentMixin","./ReactClass":"react/lib/ReactClass","./ReactElement":"react/lib/ReactElement","./ReactUpdates":"react/lib/ReactUpdates","./invariant":"react/lib/invariant","./warning":"react/lib/warning","_process":1}],"react/lib/ReactDOM":[function(require,module,exports){
(function (process){                                                                                                   // 9367
/**                                                                                                                    // 9368
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9369
 * All rights reserved.                                                                                                // 9370
 *                                                                                                                     // 9371
 * This source code is licensed under the BSD-style license found in the                                               // 9372
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 9373
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9374
 *                                                                                                                     // 9375
 * @providesModule ReactDOM                                                                                            // 9376
 * @typechecks static-only                                                                                             // 9377
 */                                                                                                                    // 9378
                                                                                                                       // 9379
'use strict';                                                                                                          // 9380
                                                                                                                       // 9381
var ReactElement = require("./ReactElement");                                                                          // 9382
var ReactElementValidator = require("./ReactElementValidator");                                                        // 9383
                                                                                                                       // 9384
var mapObject = require("./mapObject");                                                                                // 9385
                                                                                                                       // 9386
/**                                                                                                                    // 9387
 * Create a factory that creates HTML tag elements.                                                                    // 9388
 *                                                                                                                     // 9389
 * @param {string} tag Tag name (e.g. `div`).                                                                          // 9390
 * @private                                                                                                            // 9391
 */                                                                                                                    // 9392
function createDOMFactory(tag) {                                                                                       // 9393
  if ("production" !== process.env.NODE_ENV) {                                                                         // 9394
    return ReactElementValidator.createFactory(tag);                                                                   // 9395
  }                                                                                                                    // 9396
  return ReactElement.createFactory(tag);                                                                              // 9397
}                                                                                                                      // 9398
                                                                                                                       // 9399
/**                                                                                                                    // 9400
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.                                          // 9401
 * This is also accessible via `React.DOM`.                                                                            // 9402
 *                                                                                                                     // 9403
 * @public                                                                                                             // 9404
 */                                                                                                                    // 9405
var ReactDOM = mapObject({                                                                                             // 9406
  a: 'a',                                                                                                              // 9407
  abbr: 'abbr',                                                                                                        // 9408
  address: 'address',                                                                                                  // 9409
  area: 'area',                                                                                                        // 9410
  article: 'article',                                                                                                  // 9411
  aside: 'aside',                                                                                                      // 9412
  audio: 'audio',                                                                                                      // 9413
  b: 'b',                                                                                                              // 9414
  base: 'base',                                                                                                        // 9415
  bdi: 'bdi',                                                                                                          // 9416
  bdo: 'bdo',                                                                                                          // 9417
  big: 'big',                                                                                                          // 9418
  blockquote: 'blockquote',                                                                                            // 9419
  body: 'body',                                                                                                        // 9420
  br: 'br',                                                                                                            // 9421
  button: 'button',                                                                                                    // 9422
  canvas: 'canvas',                                                                                                    // 9423
  caption: 'caption',                                                                                                  // 9424
  cite: 'cite',                                                                                                        // 9425
  code: 'code',                                                                                                        // 9426
  col: 'col',                                                                                                          // 9427
  colgroup: 'colgroup',                                                                                                // 9428
  data: 'data',                                                                                                        // 9429
  datalist: 'datalist',                                                                                                // 9430
  dd: 'dd',                                                                                                            // 9431
  del: 'del',                                                                                                          // 9432
  details: 'details',                                                                                                  // 9433
  dfn: 'dfn',                                                                                                          // 9434
  dialog: 'dialog',                                                                                                    // 9435
  div: 'div',                                                                                                          // 9436
  dl: 'dl',                                                                                                            // 9437
  dt: 'dt',                                                                                                            // 9438
  em: 'em',                                                                                                            // 9439
  embed: 'embed',                                                                                                      // 9440
  fieldset: 'fieldset',                                                                                                // 9441
  figcaption: 'figcaption',                                                                                            // 9442
  figure: 'figure',                                                                                                    // 9443
  footer: 'footer',                                                                                                    // 9444
  form: 'form',                                                                                                        // 9445
  h1: 'h1',                                                                                                            // 9446
  h2: 'h2',                                                                                                            // 9447
  h3: 'h3',                                                                                                            // 9448
  h4: 'h4',                                                                                                            // 9449
  h5: 'h5',                                                                                                            // 9450
  h6: 'h6',                                                                                                            // 9451
  head: 'head',                                                                                                        // 9452
  header: 'header',                                                                                                    // 9453
  hr: 'hr',                                                                                                            // 9454
  html: 'html',                                                                                                        // 9455
  i: 'i',                                                                                                              // 9456
  iframe: 'iframe',                                                                                                    // 9457
  img: 'img',                                                                                                          // 9458
  input: 'input',                                                                                                      // 9459
  ins: 'ins',                                                                                                          // 9460
  kbd: 'kbd',                                                                                                          // 9461
  keygen: 'keygen',                                                                                                    // 9462
  label: 'label',                                                                                                      // 9463
  legend: 'legend',                                                                                                    // 9464
  li: 'li',                                                                                                            // 9465
  link: 'link',                                                                                                        // 9466
  main: 'main',                                                                                                        // 9467
  map: 'map',                                                                                                          // 9468
  mark: 'mark',                                                                                                        // 9469
  menu: 'menu',                                                                                                        // 9470
  menuitem: 'menuitem',                                                                                                // 9471
  meta: 'meta',                                                                                                        // 9472
  meter: 'meter',                                                                                                      // 9473
  nav: 'nav',                                                                                                          // 9474
  noscript: 'noscript',                                                                                                // 9475
  object: 'object',                                                                                                    // 9476
  ol: 'ol',                                                                                                            // 9477
  optgroup: 'optgroup',                                                                                                // 9478
  option: 'option',                                                                                                    // 9479
  output: 'output',                                                                                                    // 9480
  p: 'p',                                                                                                              // 9481
  param: 'param',                                                                                                      // 9482
  picture: 'picture',                                                                                                  // 9483
  pre: 'pre',                                                                                                          // 9484
  progress: 'progress',                                                                                                // 9485
  q: 'q',                                                                                                              // 9486
  rp: 'rp',                                                                                                            // 9487
  rt: 'rt',                                                                                                            // 9488
  ruby: 'ruby',                                                                                                        // 9489
  s: 's',                                                                                                              // 9490
  samp: 'samp',                                                                                                        // 9491
  script: 'script',                                                                                                    // 9492
  section: 'section',                                                                                                  // 9493
  select: 'select',                                                                                                    // 9494
  small: 'small',                                                                                                      // 9495
  source: 'source',                                                                                                    // 9496
  span: 'span',                                                                                                        // 9497
  strong: 'strong',                                                                                                    // 9498
  style: 'style',                                                                                                      // 9499
  sub: 'sub',                                                                                                          // 9500
  summary: 'summary',                                                                                                  // 9501
  sup: 'sup',                                                                                                          // 9502
  table: 'table',                                                                                                      // 9503
  tbody: 'tbody',                                                                                                      // 9504
  td: 'td',                                                                                                            // 9505
  textarea: 'textarea',                                                                                                // 9506
  tfoot: 'tfoot',                                                                                                      // 9507
  th: 'th',                                                                                                            // 9508
  thead: 'thead',                                                                                                      // 9509
  time: 'time',                                                                                                        // 9510
  title: 'title',                                                                                                      // 9511
  tr: 'tr',                                                                                                            // 9512
  track: 'track',                                                                                                      // 9513
  u: 'u',                                                                                                              // 9514
  ul: 'ul',                                                                                                            // 9515
  'var': 'var',                                                                                                        // 9516
  video: 'video',                                                                                                      // 9517
  wbr: 'wbr',                                                                                                          // 9518
                                                                                                                       // 9519
  // SVG                                                                                                               // 9520
  circle: 'circle',                                                                                                    // 9521
  clipPath: 'clipPath',                                                                                                // 9522
  defs: 'defs',                                                                                                        // 9523
  ellipse: 'ellipse',                                                                                                  // 9524
  g: 'g',                                                                                                              // 9525
  line: 'line',                                                                                                        // 9526
  linearGradient: 'linearGradient',                                                                                    // 9527
  mask: 'mask',                                                                                                        // 9528
  path: 'path',                                                                                                        // 9529
  pattern: 'pattern',                                                                                                  // 9530
  polygon: 'polygon',                                                                                                  // 9531
  polyline: 'polyline',                                                                                                // 9532
  radialGradient: 'radialGradient',                                                                                    // 9533
  rect: 'rect',                                                                                                        // 9534
  stop: 'stop',                                                                                                        // 9535
  svg: 'svg',                                                                                                          // 9536
  text: 'text',                                                                                                        // 9537
  tspan: 'tspan'                                                                                                       // 9538
                                                                                                                       // 9539
}, createDOMFactory);                                                                                                  // 9540
                                                                                                                       // 9541
module.exports = ReactDOM;                                                                                             // 9542
                                                                                                                       // 9543
}).call(this,require('_process'))                                                                                      // 9544
                                                                                                                       // 9545
},{"./ReactElement":"react/lib/ReactElement","./ReactElementValidator":"react/lib/ReactElementValidator","./mapObject":"react/lib/mapObject","_process":1}],"react/lib/ReactDefaultBatchingStrategy":[function(require,module,exports){
/**                                                                                                                    // 9547
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9548
 * All rights reserved.                                                                                                // 9549
 *                                                                                                                     // 9550
 * This source code is licensed under the BSD-style license found in the                                               // 9551
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 9552
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9553
 *                                                                                                                     // 9554
 * @providesModule ReactDefaultBatchingStrategy                                                                        // 9555
 */                                                                                                                    // 9556
                                                                                                                       // 9557
'use strict';                                                                                                          // 9558
                                                                                                                       // 9559
var ReactUpdates = require("./ReactUpdates");                                                                          // 9560
var Transaction = require("./Transaction");                                                                            // 9561
                                                                                                                       // 9562
var assign = require("./Object.assign");                                                                               // 9563
var emptyFunction = require("./emptyFunction");                                                                        // 9564
                                                                                                                       // 9565
var RESET_BATCHED_UPDATES = {                                                                                          // 9566
  initialize: emptyFunction,                                                                                           // 9567
  close: function() {                                                                                                  // 9568
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;                                                            // 9569
  }                                                                                                                    // 9570
};                                                                                                                     // 9571
                                                                                                                       // 9572
var FLUSH_BATCHED_UPDATES = {                                                                                          // 9573
  initialize: emptyFunction,                                                                                           // 9574
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)                                                           // 9575
};                                                                                                                     // 9576
                                                                                                                       // 9577
var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];                                             // 9578
                                                                                                                       // 9579
function ReactDefaultBatchingStrategyTransaction() {                                                                   // 9580
  this.reinitializeTransaction();                                                                                      // 9581
}                                                                                                                      // 9582
                                                                                                                       // 9583
assign(                                                                                                                // 9584
  ReactDefaultBatchingStrategyTransaction.prototype,                                                                   // 9585
  Transaction.Mixin,                                                                                                   // 9586
  {                                                                                                                    // 9587
    getTransactionWrappers: function() {                                                                               // 9588
      return TRANSACTION_WRAPPERS;                                                                                     // 9589
    }                                                                                                                  // 9590
  }                                                                                                                    // 9591
);                                                                                                                     // 9592
                                                                                                                       // 9593
var transaction = new ReactDefaultBatchingStrategyTransaction();                                                       // 9594
                                                                                                                       // 9595
var ReactDefaultBatchingStrategy = {                                                                                   // 9596
  isBatchingUpdates: false,                                                                                            // 9597
                                                                                                                       // 9598
  /**                                                                                                                  // 9599
   * Call the provided function in a context within which calls to `setState`                                          // 9600
   * and friends are batched such that components aren't updated unnecessarily.                                        // 9601
   */                                                                                                                  // 9602
  batchedUpdates: function(callback, a, b, c, d) {                                                                     // 9603
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;                                       // 9604
                                                                                                                       // 9605
    ReactDefaultBatchingStrategy.isBatchingUpdates = true;                                                             // 9606
                                                                                                                       // 9607
    // The code is written this way to avoid extra allocations                                                         // 9608
    if (alreadyBatchingUpdates) {                                                                                      // 9609
      callback(a, b, c, d);                                                                                            // 9610
    } else {                                                                                                           // 9611
      transaction.perform(callback, null, a, b, c, d);                                                                 // 9612
    }                                                                                                                  // 9613
  }                                                                                                                    // 9614
};                                                                                                                     // 9615
                                                                                                                       // 9616
module.exports = ReactDefaultBatchingStrategy;                                                                         // 9617
                                                                                                                       // 9618
},{"./Object.assign":"react/lib/Object.assign","./ReactUpdates":"react/lib/ReactUpdates","./Transaction":"react/lib/Transaction","./emptyFunction":"react/lib/emptyFunction"}],"react/lib/ReactDefaultInjection":[function(require,module,exports){
(function (process){                                                                                                   // 9620
/**                                                                                                                    // 9621
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9622
 * All rights reserved.                                                                                                // 9623
 *                                                                                                                     // 9624
 * This source code is licensed under the BSD-style license found in the                                               // 9625
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 9626
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9627
 *                                                                                                                     // 9628
 * @providesModule ReactDefaultInjection                                                                               // 9629
 */                                                                                                                    // 9630
                                                                                                                       // 9631
'use strict';                                                                                                          // 9632
                                                                                                                       // 9633
var BeforeInputEventPlugin = require("./BeforeInputEventPlugin");                                                      // 9634
var ChangeEventPlugin = require("./ChangeEventPlugin");                                                                // 9635
var ClientReactRootIndex = require("./ClientReactRootIndex");                                                          // 9636
var DefaultEventPluginOrder = require("./DefaultEventPluginOrder");                                                    // 9637
var EnterLeaveEventPlugin = require("./EnterLeaveEventPlugin");                                                        // 9638
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 9639
var HTMLDOMPropertyConfig = require("./HTMLDOMPropertyConfig");                                                        // 9640
var MobileSafariClickEventPlugin = require("./MobileSafariClickEventPlugin");                                          // 9641
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");                                              // 9642
var ReactClass = require("./ReactClass");                                                                              // 9643
var ReactComponentBrowserEnvironment =                                                                                 // 9644
  require("./ReactComponentBrowserEnvironment");                                                                       // 9645
var ReactDefaultBatchingStrategy = require("./ReactDefaultBatchingStrategy");                                          // 9646
var ReactDOMComponent = require("./ReactDOMComponent");                                                                // 9647
var ReactDOMButton = require("./ReactDOMButton");                                                                      // 9648
var ReactDOMForm = require("./ReactDOMForm");                                                                          // 9649
var ReactDOMImg = require("./ReactDOMImg");                                                                            // 9650
var ReactDOMIDOperations = require("./ReactDOMIDOperations");                                                          // 9651
var ReactDOMIframe = require("./ReactDOMIframe");                                                                      // 9652
var ReactDOMInput = require("./ReactDOMInput");                                                                        // 9653
var ReactDOMOption = require("./ReactDOMOption");                                                                      // 9654
var ReactDOMSelect = require("./ReactDOMSelect");                                                                      // 9655
var ReactDOMTextarea = require("./ReactDOMTextarea");                                                                  // 9656
var ReactDOMTextComponent = require("./ReactDOMTextComponent");                                                        // 9657
var ReactElement = require("./ReactElement");                                                                          // 9658
var ReactEventListener = require("./ReactEventListener");                                                              // 9659
var ReactInjection = require("./ReactInjection");                                                                      // 9660
var ReactInstanceHandles = require("./ReactInstanceHandles");                                                          // 9661
var ReactMount = require("./ReactMount");                                                                              // 9662
var ReactReconcileTransaction = require("./ReactReconcileTransaction");                                                // 9663
var SelectEventPlugin = require("./SelectEventPlugin");                                                                // 9664
var ServerReactRootIndex = require("./ServerReactRootIndex");                                                          // 9665
var SimpleEventPlugin = require("./SimpleEventPlugin");                                                                // 9666
var SVGDOMPropertyConfig = require("./SVGDOMPropertyConfig");                                                          // 9667
                                                                                                                       // 9668
var createFullPageComponent = require("./createFullPageComponent");                                                    // 9669
                                                                                                                       // 9670
function autoGenerateWrapperClass(type) {                                                                              // 9671
  return ReactClass.createClass({                                                                                      // 9672
    tagName: type.toUpperCase(),                                                                                       // 9673
    render: function() {                                                                                               // 9674
      return new ReactElement(                                                                                         // 9675
        type,                                                                                                          // 9676
        null,                                                                                                          // 9677
        null,                                                                                                          // 9678
        null,                                                                                                          // 9679
        null,                                                                                                          // 9680
        this.props                                                                                                     // 9681
      );                                                                                                               // 9682
    }                                                                                                                  // 9683
  });                                                                                                                  // 9684
}                                                                                                                      // 9685
                                                                                                                       // 9686
function inject() {                                                                                                    // 9687
  ReactInjection.EventEmitter.injectReactEventListener(                                                                // 9688
    ReactEventListener                                                                                                 // 9689
  );                                                                                                                   // 9690
                                                                                                                       // 9691
  /**                                                                                                                  // 9692
   * Inject modules for resolving DOM hierarchy and plugin ordering.                                                   // 9693
   */                                                                                                                  // 9694
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);                                       // 9695
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);                                            // 9696
  ReactInjection.EventPluginHub.injectMount(ReactMount);                                                               // 9697
                                                                                                                       // 9698
  /**                                                                                                                  // 9699
   * Some important event plugins included by default (without having to require                                       // 9700
   * them).                                                                                                            // 9701
   */                                                                                                                  // 9702
  ReactInjection.EventPluginHub.injectEventPluginsByName({                                                             // 9703
    SimpleEventPlugin: SimpleEventPlugin,                                                                              // 9704
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,                                                                      // 9705
    ChangeEventPlugin: ChangeEventPlugin,                                                                              // 9706
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,                                                        // 9707
    SelectEventPlugin: SelectEventPlugin,                                                                              // 9708
    BeforeInputEventPlugin: BeforeInputEventPlugin                                                                     // 9709
  });                                                                                                                  // 9710
                                                                                                                       // 9711
  ReactInjection.NativeComponent.injectGenericComponentClass(                                                          // 9712
    ReactDOMComponent                                                                                                  // 9713
  );                                                                                                                   // 9714
                                                                                                                       // 9715
  ReactInjection.NativeComponent.injectTextComponentClass(                                                             // 9716
    ReactDOMTextComponent                                                                                              // 9717
  );                                                                                                                   // 9718
                                                                                                                       // 9719
  ReactInjection.NativeComponent.injectAutoWrapper(                                                                    // 9720
    autoGenerateWrapperClass                                                                                           // 9721
  );                                                                                                                   // 9722
                                                                                                                       // 9723
  // This needs to happen before createFullPageComponent() otherwise the mixin                                         // 9724
  // won't be included.                                                                                                // 9725
  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);                                                        // 9726
                                                                                                                       // 9727
  ReactInjection.NativeComponent.injectComponentClasses({                                                              // 9728
    'button': ReactDOMButton,                                                                                          // 9729
    'form': ReactDOMForm,                                                                                              // 9730
    'iframe': ReactDOMIframe,                                                                                          // 9731
    'img': ReactDOMImg,                                                                                                // 9732
    'input': ReactDOMInput,                                                                                            // 9733
    'option': ReactDOMOption,                                                                                          // 9734
    'select': ReactDOMSelect,                                                                                          // 9735
    'textarea': ReactDOMTextarea,                                                                                      // 9736
                                                                                                                       // 9737
    'html': createFullPageComponent('html'),                                                                           // 9738
    'head': createFullPageComponent('head'),                                                                           // 9739
    'body': createFullPageComponent('body')                                                                            // 9740
  });                                                                                                                  // 9741
                                                                                                                       // 9742
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);                                           // 9743
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);                                            // 9744
                                                                                                                       // 9745
  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');                                                      // 9746
                                                                                                                       // 9747
  ReactInjection.Updates.injectReconcileTransaction(                                                                   // 9748
    ReactReconcileTransaction                                                                                          // 9749
  );                                                                                                                   // 9750
  ReactInjection.Updates.injectBatchingStrategy(                                                                       // 9751
    ReactDefaultBatchingStrategy                                                                                       // 9752
  );                                                                                                                   // 9753
                                                                                                                       // 9754
  ReactInjection.RootIndex.injectCreateReactRootIndex(                                                                 // 9755
    ExecutionEnvironment.canUseDOM ?                                                                                   // 9756
      ClientReactRootIndex.createReactRootIndex :                                                                      // 9757
      ServerReactRootIndex.createReactRootIndex                                                                        // 9758
  );                                                                                                                   // 9759
                                                                                                                       // 9760
  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);                                        // 9761
  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);                                                // 9762
                                                                                                                       // 9763
  if ("production" !== process.env.NODE_ENV) {                                                                         // 9764
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';                                          // 9765
    if ((/[?&]react_perf\b/).test(url)) {                                                                              // 9766
      var ReactDefaultPerf = require("./ReactDefaultPerf");                                                            // 9767
      ReactDefaultPerf.start();                                                                                        // 9768
    }                                                                                                                  // 9769
  }                                                                                                                    // 9770
}                                                                                                                      // 9771
                                                                                                                       // 9772
module.exports = {                                                                                                     // 9773
  inject: inject                                                                                                       // 9774
};                                                                                                                     // 9775
                                                                                                                       // 9776
}).call(this,require('_process'))                                                                                      // 9777
                                                                                                                       // 9778
},{"./BeforeInputEventPlugin":"react/lib/BeforeInputEventPlugin","./ChangeEventPlugin":"react/lib/ChangeEventPlugin","./ClientReactRootIndex":"react/lib/ClientReactRootIndex","./DefaultEventPluginOrder":"react/lib/DefaultEventPluginOrder","./EnterLeaveEventPlugin":"react/lib/EnterLeaveEventPlugin","./ExecutionEnvironment":"react/lib/ExecutionEnvironment","./HTMLDOMPropertyConfig":"react/lib/HTMLDOMPropertyConfig","./MobileSafariClickEventPlugin":"react/lib/MobileSafariClickEventPlugin","./ReactBrowserComponentMixin":"react/lib/ReactBrowserComponentMixin","./ReactClass":"react/lib/ReactClass","./ReactComponentBrowserEnvironment":"react/lib/ReactComponentBrowserEnvironment","./ReactDOMButton":"react/lib/ReactDOMButton","./ReactDOMComponent":"react/lib/ReactDOMComponent","./ReactDOMForm":"react/lib/ReactDOMForm","./ReactDOMIDOperations":"react/lib/ReactDOMIDOperations","./ReactDOMIframe":"react/lib/ReactDOMIframe","./ReactDOMImg":"react/lib/ReactDOMImg","./ReactDOMInput":"react/lib/ReactDOMInput","./ReactDOMOption":"react/lib/ReactDOMOption","./ReactDOMSelect":"react/lib/ReactDOMSelect","./ReactDOMTextComponent":"react/lib/ReactDOMTextComponent","./ReactDOMTextarea":"react/lib/ReactDOMTextarea","./ReactDefaultBatchingStrategy":"react/lib/ReactDefaultBatchingStrategy","./ReactDefaultPerf":"react/lib/ReactDefaultPerf","./ReactElement":"react/lib/ReactElement","./ReactEventListener":"react/lib/ReactEventListener","./ReactInjection":"react/lib/ReactInjection","./ReactInstanceHandles":"react/lib/ReactInstanceHandles","./ReactMount":"react/lib/ReactMount","./ReactReconcileTransaction":"react/lib/ReactReconcileTransaction","./SVGDOMPropertyConfig":"react/lib/SVGDOMPropertyConfig","./SelectEventPlugin":"react/lib/SelectEventPlugin","./ServerReactRootIndex":"react/lib/ServerReactRootIndex","./SimpleEventPlugin":"react/lib/SimpleEventPlugin","./createFullPageComponent":"react/lib/createFullPageComponent","_process":1}],"react/lib/ReactDefaultPerfAnalysis":[function(require,module,exports){
/**                                                                                                                    // 9780
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9781
 * All rights reserved.                                                                                                // 9782
 *                                                                                                                     // 9783
 * This source code is licensed under the BSD-style license found in the                                               // 9784
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 9785
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9786
 *                                                                                                                     // 9787
 * @providesModule ReactDefaultPerfAnalysis                                                                            // 9788
 */                                                                                                                    // 9789
                                                                                                                       // 9790
var assign = require("./Object.assign");                                                                               // 9791
                                                                                                                       // 9792
// Don't try to save users less than 1.2ms (a number I made up)                                                        // 9793
var DONT_CARE_THRESHOLD = 1.2;                                                                                         // 9794
var DOM_OPERATION_TYPES = {                                                                                            // 9795
  '_mountImageIntoNode': 'set innerHTML',                                                                              // 9796
  INSERT_MARKUP: 'set innerHTML',                                                                                      // 9797
  MOVE_EXISTING: 'move',                                                                                               // 9798
  REMOVE_NODE: 'remove',                                                                                               // 9799
  TEXT_CONTENT: 'set textContent',                                                                                     // 9800
  'updatePropertyByID': 'update attribute',                                                                            // 9801
  'deletePropertyByID': 'delete attribute',                                                                            // 9802
  'updateStylesByID': 'update styles',                                                                                 // 9803
  'updateInnerHTMLByID': 'set innerHTML',                                                                              // 9804
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'                                                                    // 9805
};                                                                                                                     // 9806
                                                                                                                       // 9807
function getTotalTime(measurements) {                                                                                  // 9808
  // TODO: return number of DOM ops? could be misleading.                                                              // 9809
  // TODO: measure dropped frames after reconcile?                                                                     // 9810
  // TODO: log total time of each reconcile and the top-level component                                                // 9811
  // class that triggered it.                                                                                          // 9812
  var totalTime = 0;                                                                                                   // 9813
  for (var i = 0; i < measurements.length; i++) {                                                                      // 9814
    var measurement = measurements[i];                                                                                 // 9815
    totalTime += measurement.totalTime;                                                                                // 9816
  }                                                                                                                    // 9817
  return totalTime;                                                                                                    // 9818
}                                                                                                                      // 9819
                                                                                                                       // 9820
function getDOMSummary(measurements) {                                                                                 // 9821
  var items = [];                                                                                                      // 9822
  for (var i = 0; i < measurements.length; i++) {                                                                      // 9823
    var measurement = measurements[i];                                                                                 // 9824
    var id;                                                                                                            // 9825
                                                                                                                       // 9826
    for (id in measurement.writes) {                                                                                   // 9827
      measurement.writes[id].forEach(function(write) {                                                                 // 9828
        items.push({                                                                                                   // 9829
          id: id,                                                                                                      // 9830
          type: DOM_OPERATION_TYPES[write.type] || write.type,                                                         // 9831
          args: write.args                                                                                             // 9832
        });                                                                                                            // 9833
      });                                                                                                              // 9834
    }                                                                                                                  // 9835
  }                                                                                                                    // 9836
  return items;                                                                                                        // 9837
}                                                                                                                      // 9838
                                                                                                                       // 9839
function getExclusiveSummary(measurements) {                                                                           // 9840
  var candidates = {};                                                                                                 // 9841
  var displayName;                                                                                                     // 9842
                                                                                                                       // 9843
  for (var i = 0; i < measurements.length; i++) {                                                                      // 9844
    var measurement = measurements[i];                                                                                 // 9845
    var allIDs = assign(                                                                                               // 9846
      {},                                                                                                              // 9847
      measurement.exclusive,                                                                                           // 9848
      measurement.inclusive                                                                                            // 9849
    );                                                                                                                 // 9850
                                                                                                                       // 9851
    for (var id in allIDs) {                                                                                           // 9852
      displayName = measurement.displayNames[id].current;                                                              // 9853
                                                                                                                       // 9854
      candidates[displayName] = candidates[displayName] || {                                                           // 9855
        componentName: displayName,                                                                                    // 9856
        inclusive: 0,                                                                                                  // 9857
        exclusive: 0,                                                                                                  // 9858
        render: 0,                                                                                                     // 9859
        count: 0                                                                                                       // 9860
      };                                                                                                               // 9861
      if (measurement.render[id]) {                                                                                    // 9862
        candidates[displayName].render += measurement.render[id];                                                      // 9863
      }                                                                                                                // 9864
      if (measurement.exclusive[id]) {                                                                                 // 9865
        candidates[displayName].exclusive += measurement.exclusive[id];                                                // 9866
      }                                                                                                                // 9867
      if (measurement.inclusive[id]) {                                                                                 // 9868
        candidates[displayName].inclusive += measurement.inclusive[id];                                                // 9869
      }                                                                                                                // 9870
      if (measurement.counts[id]) {                                                                                    // 9871
        candidates[displayName].count += measurement.counts[id];                                                       // 9872
      }                                                                                                                // 9873
    }                                                                                                                  // 9874
  }                                                                                                                    // 9875
                                                                                                                       // 9876
  // Now make a sorted array with the results.                                                                         // 9877
  var arr = [];                                                                                                        // 9878
  for (displayName in candidates) {                                                                                    // 9879
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {                                                    // 9880
      arr.push(candidates[displayName]);                                                                               // 9881
    }                                                                                                                  // 9882
  }                                                                                                                    // 9883
                                                                                                                       // 9884
  arr.sort(function(a, b) {                                                                                            // 9885
    return b.exclusive - a.exclusive;                                                                                  // 9886
  });                                                                                                                  // 9887
                                                                                                                       // 9888
  return arr;                                                                                                          // 9889
}                                                                                                                      // 9890
                                                                                                                       // 9891
function getInclusiveSummary(measurements, onlyClean) {                                                                // 9892
  var candidates = {};                                                                                                 // 9893
  var inclusiveKey;                                                                                                    // 9894
                                                                                                                       // 9895
  for (var i = 0; i < measurements.length; i++) {                                                                      // 9896
    var measurement = measurements[i];                                                                                 // 9897
    var allIDs = assign(                                                                                               // 9898
      {},                                                                                                              // 9899
      measurement.exclusive,                                                                                           // 9900
      measurement.inclusive                                                                                            // 9901
    );                                                                                                                 // 9902
    var cleanComponents;                                                                                               // 9903
                                                                                                                       // 9904
    if (onlyClean) {                                                                                                   // 9905
      cleanComponents = getUnchangedComponents(measurement);                                                           // 9906
    }                                                                                                                  // 9907
                                                                                                                       // 9908
    for (var id in allIDs) {                                                                                           // 9909
      if (onlyClean && !cleanComponents[id]) {                                                                         // 9910
        continue;                                                                                                      // 9911
      }                                                                                                                // 9912
                                                                                                                       // 9913
      var displayName = measurement.displayNames[id];                                                                  // 9914
                                                                                                                       // 9915
      // Inclusive time is not useful for many components without knowing where                                        // 9916
      // they are instantiated. So we aggregate inclusive time with both the                                           // 9917
      // owner and current displayName as the key.                                                                     // 9918
      inclusiveKey = displayName.owner + ' > ' + displayName.current;                                                  // 9919
                                                                                                                       // 9920
      candidates[inclusiveKey] = candidates[inclusiveKey] || {                                                         // 9921
        componentName: inclusiveKey,                                                                                   // 9922
        time: 0,                                                                                                       // 9923
        count: 0                                                                                                       // 9924
      };                                                                                                               // 9925
                                                                                                                       // 9926
      if (measurement.inclusive[id]) {                                                                                 // 9927
        candidates[inclusiveKey].time += measurement.inclusive[id];                                                    // 9928
      }                                                                                                                // 9929
      if (measurement.counts[id]) {                                                                                    // 9930
        candidates[inclusiveKey].count += measurement.counts[id];                                                      // 9931
      }                                                                                                                // 9932
    }                                                                                                                  // 9933
  }                                                                                                                    // 9934
                                                                                                                       // 9935
  // Now make a sorted array with the results.                                                                         // 9936
  var arr = [];                                                                                                        // 9937
  for (inclusiveKey in candidates) {                                                                                   // 9938
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {                                                        // 9939
      arr.push(candidates[inclusiveKey]);                                                                              // 9940
    }                                                                                                                  // 9941
  }                                                                                                                    // 9942
                                                                                                                       // 9943
  arr.sort(function(a, b) {                                                                                            // 9944
    return b.time - a.time;                                                                                            // 9945
  });                                                                                                                  // 9946
                                                                                                                       // 9947
  return arr;                                                                                                          // 9948
}                                                                                                                      // 9949
                                                                                                                       // 9950
function getUnchangedComponents(measurement) {                                                                         // 9951
  // For a given reconcile, look at which components did not actually                                                  // 9952
  // render anything to the DOM and return a mapping of their ID to                                                    // 9953
  // the amount of time it took to render the entire subtree.                                                          // 9954
  var cleanComponents = {};                                                                                            // 9955
  var dirtyLeafIDs = Object.keys(measurement.writes);                                                                  // 9956
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);                                               // 9957
                                                                                                                       // 9958
  for (var id in allIDs) {                                                                                             // 9959
    var isDirty = false;                                                                                               // 9960
    // For each component that rendered, see if a component that triggered                                             // 9961
    // a DOM op is in its subtree.                                                                                     // 9962
    for (var i = 0; i < dirtyLeafIDs.length; i++) {                                                                    // 9963
      if (dirtyLeafIDs[i].indexOf(id) === 0) {                                                                         // 9964
        isDirty = true;                                                                                                // 9965
        break;                                                                                                         // 9966
      }                                                                                                                // 9967
    }                                                                                                                  // 9968
    if (!isDirty && measurement.counts[id] > 0) {                                                                      // 9969
      cleanComponents[id] = true;                                                                                      // 9970
    }                                                                                                                  // 9971
  }                                                                                                                    // 9972
  return cleanComponents;                                                                                              // 9973
}                                                                                                                      // 9974
                                                                                                                       // 9975
var ReactDefaultPerfAnalysis = {                                                                                       // 9976
  getExclusiveSummary: getExclusiveSummary,                                                                            // 9977
  getInclusiveSummary: getInclusiveSummary,                                                                            // 9978
  getDOMSummary: getDOMSummary,                                                                                        // 9979
  getTotalTime: getTotalTime                                                                                           // 9980
};                                                                                                                     // 9981
                                                                                                                       // 9982
module.exports = ReactDefaultPerfAnalysis;                                                                             // 9983
                                                                                                                       // 9984
},{"./Object.assign":"react/lib/Object.assign"}],"react/lib/ReactDefaultPerf":[function(require,module,exports){       // 9985
/**                                                                                                                    // 9986
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9987
 * All rights reserved.                                                                                                // 9988
 *                                                                                                                     // 9989
 * This source code is licensed under the BSD-style license found in the                                               // 9990
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 9991
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 9992
 *                                                                                                                     // 9993
 * @providesModule ReactDefaultPerf                                                                                    // 9994
 * @typechecks static-only                                                                                             // 9995
 */                                                                                                                    // 9996
                                                                                                                       // 9997
'use strict';                                                                                                          // 9998
                                                                                                                       // 9999
var DOMProperty = require("./DOMProperty");                                                                            // 10000
var ReactDefaultPerfAnalysis = require("./ReactDefaultPerfAnalysis");                                                  // 10001
var ReactMount = require("./ReactMount");                                                                              // 10002
var ReactPerf = require("./ReactPerf");                                                                                // 10003
                                                                                                                       // 10004
var performanceNow = require("./performanceNow");                                                                      // 10005
                                                                                                                       // 10006
function roundFloat(val) {                                                                                             // 10007
  return Math.floor(val * 100) / 100;                                                                                  // 10008
}                                                                                                                      // 10009
                                                                                                                       // 10010
function addValue(obj, key, val) {                                                                                     // 10011
  obj[key] = (obj[key] || 0) + val;                                                                                    // 10012
}                                                                                                                      // 10013
                                                                                                                       // 10014
var ReactDefaultPerf = {                                                                                               // 10015
  _allMeasurements: [], // last item in the list is the current one                                                    // 10016
  _mountStack: [0],                                                                                                    // 10017
  _injected: false,                                                                                                    // 10018
                                                                                                                       // 10019
  start: function() {                                                                                                  // 10020
    if (!ReactDefaultPerf._injected) {                                                                                 // 10021
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);                                                     // 10022
    }                                                                                                                  // 10023
                                                                                                                       // 10024
    ReactDefaultPerf._allMeasurements.length = 0;                                                                      // 10025
    ReactPerf.enableMeasure = true;                                                                                    // 10026
  },                                                                                                                   // 10027
                                                                                                                       // 10028
  stop: function() {                                                                                                   // 10029
    ReactPerf.enableMeasure = false;                                                                                   // 10030
  },                                                                                                                   // 10031
                                                                                                                       // 10032
  getLastMeasurements: function() {                                                                                    // 10033
    return ReactDefaultPerf._allMeasurements;                                                                          // 10034
  },                                                                                                                   // 10035
                                                                                                                       // 10036
  printExclusive: function(measurements) {                                                                             // 10037
    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 10038
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);                                          // 10039
    console.table(summary.map(function(item) {                                                                         // 10040
      return {                                                                                                         // 10041
        'Component class name': item.componentName,                                                                    // 10042
        'Total inclusive time (ms)': roundFloat(item.inclusive),                                                       // 10043
        'Exclusive mount time (ms)': roundFloat(item.exclusive),                                                       // 10044
        'Exclusive render time (ms)': roundFloat(item.render),                                                         // 10045
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),                                       // 10046
        'Render time per instance (ms)': roundFloat(item.render / item.count),                                         // 10047
        'Instances': item.count                                                                                        // 10048
      };                                                                                                               // 10049
    }));                                                                                                               // 10050
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct                                       // 10051
    // number.                                                                                                         // 10052
  },                                                                                                                   // 10053
                                                                                                                       // 10054
  printInclusive: function(measurements) {                                                                             // 10055
    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 10056
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);                                          // 10057
    console.table(summary.map(function(item) {                                                                         // 10058
      return {                                                                                                         // 10059
        'Owner > component': item.componentName,                                                                       // 10060
        'Inclusive time (ms)': roundFloat(item.time),                                                                  // 10061
        'Instances': item.count                                                                                        // 10062
      };                                                                                                               // 10063
    }));                                                                                                               // 10064
    console.log(                                                                                                       // 10065
      'Total time:',                                                                                                   // 10066
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'                                           // 10067
    );                                                                                                                 // 10068
  },                                                                                                                   // 10069
                                                                                                                       // 10070
  getMeasurementsSummaryMap: function(measurements) {                                                                  // 10071
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(                                                        // 10072
      measurements,                                                                                                    // 10073
      true                                                                                                             // 10074
    );                                                                                                                 // 10075
    return summary.map(function(item) {                                                                                // 10076
      return {                                                                                                         // 10077
        'Owner > component': item.componentName,                                                                       // 10078
        'Wasted time (ms)': item.time,                                                                                 // 10079
        'Instances': item.count                                                                                        // 10080
      };                                                                                                               // 10081
    });                                                                                                                // 10082
  },                                                                                                                   // 10083
                                                                                                                       // 10084
  printWasted: function(measurements) {                                                                                // 10085
    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 10086
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));                                           // 10087
    console.log(                                                                                                       // 10088
      'Total time:',                                                                                                   // 10089
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'                                           // 10090
    );                                                                                                                 // 10091
  },                                                                                                                   // 10092
                                                                                                                       // 10093
  printDOM: function(measurements) {                                                                                   // 10094
    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 10095
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);                                                // 10096
    console.table(summary.map(function(item) {                                                                         // 10097
      var result = {};                                                                                                 // 10098
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;                                                                 // 10099
      result['type'] = item.type;                                                                                      // 10100
      result['args'] = JSON.stringify(item.args);                                                                      // 10101
      return result;                                                                                                   // 10102
    }));                                                                                                               // 10103
    console.log(                                                                                                       // 10104
      'Total time:',                                                                                                   // 10105
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'                                           // 10106
    );                                                                                                                 // 10107
  },                                                                                                                   // 10108
                                                                                                                       // 10109
  _recordWrite: function(id, fnName, totalTime, args) {                                                                // 10110
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows                                         // 10111
    var writes =                                                                                                       // 10112
      ReactDefaultPerf                                                                                                 // 10113
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]                                                // 10114
        .writes;                                                                                                       // 10115
    writes[id] = writes[id] || [];                                                                                     // 10116
    writes[id].push({                                                                                                  // 10117
      type: fnName,                                                                                                    // 10118
      time: totalTime,                                                                                                 // 10119
      args: args                                                                                                       // 10120
    });                                                                                                                // 10121
  },                                                                                                                   // 10122
                                                                                                                       // 10123
  measure: function(moduleName, fnName, func) {                                                                        // 10124
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);     // 10125
      var totalTime;                                                                                                   // 10126
      var rv;                                                                                                          // 10127
      var start;                                                                                                       // 10128
                                                                                                                       // 10129
      if (fnName === '_renderNewRootComponent' ||                                                                      // 10130
          fnName === 'flushBatchedUpdates') {                                                                          // 10131
        // A "measurement" is a set of metrics recorded for each flush. We want                                        // 10132
        // to group the metrics for a given flush together so we can look at the                                       // 10133
        // components that rendered and the DOM operations that actually                                               // 10134
        // happened to determine the amount of "wasted work" performed.                                                // 10135
        ReactDefaultPerf._allMeasurements.push({                                                                       // 10136
          exclusive: {},                                                                                               // 10137
          inclusive: {},                                                                                               // 10138
          render: {},                                                                                                  // 10139
          counts: {},                                                                                                  // 10140
          writes: {},                                                                                                  // 10141
          displayNames: {},                                                                                            // 10142
          totalTime: 0                                                                                                 // 10143
        });                                                                                                            // 10144
        start = performanceNow();                                                                                      // 10145
        rv = func.apply(this, args);                                                                                   // 10146
        ReactDefaultPerf._allMeasurements[                                                                             // 10147
          ReactDefaultPerf._allMeasurements.length - 1                                                                 // 10148
        ].totalTime = performanceNow() - start;                                                                        // 10149
        return rv;                                                                                                     // 10150
      } else if (fnName === '_mountImageIntoNode' ||                                                                   // 10151
          moduleName === 'ReactDOMIDOperations') {                                                                     // 10152
        start = performanceNow();                                                                                      // 10153
        rv = func.apply(this, args);                                                                                   // 10154
        totalTime = performanceNow() - start;                                                                          // 10155
                                                                                                                       // 10156
        if (fnName === '_mountImageIntoNode') {                                                                        // 10157
          var mountID = ReactMount.getID(args[1]);                                                                     // 10158
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);                                          // 10159
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {                                                   // 10160
          // special format                                                                                            // 10161
          args[0].forEach(function(update) {                                                                           // 10162
            var writeArgs = {};                                                                                        // 10163
            if (update.fromIndex !== null) {                                                                           // 10164
              writeArgs.fromIndex = update.fromIndex;                                                                  // 10165
            }                                                                                                          // 10166
            if (update.toIndex !== null) {                                                                             // 10167
              writeArgs.toIndex = update.toIndex;                                                                      // 10168
            }                                                                                                          // 10169
            if (update.textContent !== null) {                                                                         // 10170
              writeArgs.textContent = update.textContent;                                                              // 10171
            }                                                                                                          // 10172
            if (update.markupIndex !== null) {                                                                         // 10173
              writeArgs.markup = args[1][update.markupIndex];                                                          // 10174
            }                                                                                                          // 10175
            ReactDefaultPerf._recordWrite(                                                                             // 10176
              update.parentID,                                                                                         // 10177
              update.type,                                                                                             // 10178
              totalTime,                                                                                               // 10179
              writeArgs                                                                                                // 10180
            );                                                                                                         // 10181
          });                                                                                                          // 10182
        } else {                                                                                                       // 10183
          // basic format                                                                                              // 10184
          ReactDefaultPerf._recordWrite(                                                                               // 10185
            args[0],                                                                                                   // 10186
            fnName,                                                                                                    // 10187
            totalTime,                                                                                                 // 10188
            Array.prototype.slice.call(args, 1)                                                                        // 10189
          );                                                                                                           // 10190
        }                                                                                                              // 10191
        return rv;                                                                                                     // 10192
      } else if (moduleName === 'ReactCompositeComponent' && (                                                         // 10193
        (// TODO: receiveComponent()?                                                                                  // 10194
        (fnName === 'mountComponent' ||                                                                                // 10195
        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {                                   // 10196
                                                                                                                       // 10197
        if (typeof this._currentElement.type === 'string') {                                                           // 10198
          return func.apply(this, args);                                                                               // 10199
        }                                                                                                              // 10200
                                                                                                                       // 10201
        var rootNodeID = fnName === 'mountComponent' ?                                                                 // 10202
          args[0] :                                                                                                    // 10203
          this._rootNodeID;                                                                                            // 10204
        var isRender = fnName === '_renderValidatedComponent';                                                         // 10205
        var isMount = fnName === 'mountComponent';                                                                     // 10206
                                                                                                                       // 10207
        var mountStack = ReactDefaultPerf._mountStack;                                                                 // 10208
        var entry = ReactDefaultPerf._allMeasurements[                                                                 // 10209
          ReactDefaultPerf._allMeasurements.length - 1                                                                 // 10210
        ];                                                                                                             // 10211
                                                                                                                       // 10212
        if (isRender) {                                                                                                // 10213
          addValue(entry.counts, rootNodeID, 1);                                                                       // 10214
        } else if (isMount) {                                                                                          // 10215
          mountStack.push(0);                                                                                          // 10216
        }                                                                                                              // 10217
                                                                                                                       // 10218
        start = performanceNow();                                                                                      // 10219
        rv = func.apply(this, args);                                                                                   // 10220
        totalTime = performanceNow() - start;                                                                          // 10221
                                                                                                                       // 10222
        if (isRender) {                                                                                                // 10223
          addValue(entry.render, rootNodeID, totalTime);                                                               // 10224
        } else if (isMount) {                                                                                          // 10225
          var subMountTime = mountStack.pop();                                                                         // 10226
          mountStack[mountStack.length - 1] += totalTime;                                                              // 10227
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);                                             // 10228
          addValue(entry.inclusive, rootNodeID, totalTime);                                                            // 10229
        } else {                                                                                                       // 10230
          addValue(entry.inclusive, rootNodeID, totalTime);                                                            // 10231
        }                                                                                                              // 10232
                                                                                                                       // 10233
        entry.displayNames[rootNodeID] = {                                                                             // 10234
          current: this.getName(),                                                                                     // 10235
          owner: this._currentElement._owner ?                                                                         // 10236
            this._currentElement._owner.getName() :                                                                    // 10237
            '<root>'                                                                                                   // 10238
        };                                                                                                             // 10239
                                                                                                                       // 10240
        return rv;                                                                                                     // 10241
      } else {                                                                                                         // 10242
        return func.apply(this, args);                                                                                 // 10243
      }                                                                                                                // 10244
    };                                                                                                                 // 10245
  }                                                                                                                    // 10246
};                                                                                                                     // 10247
                                                                                                                       // 10248
module.exports = ReactDefaultPerf;                                                                                     // 10249
                                                                                                                       // 10250
},{"./DOMProperty":"react/lib/DOMProperty","./ReactDefaultPerfAnalysis":"react/lib/ReactDefaultPerfAnalysis","./ReactMount":"react/lib/ReactMount","./ReactPerf":"react/lib/ReactPerf","./performanceNow":"react/lib/performanceNow"}],"react/lib/ReactElementValidator":[function(require,module,exports){
(function (process){                                                                                                   // 10252
/**                                                                                                                    // 10253
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 10254
 * All rights reserved.                                                                                                // 10255
 *                                                                                                                     // 10256
 * This source code is licensed under the BSD-style license found in the                                               // 10257
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 10258
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 10259
 *                                                                                                                     // 10260
 * @providesModule ReactElementValidator                                                                               // 10261
 */                                                                                                                    // 10262
                                                                                                                       // 10263
/**                                                                                                                    // 10264
 * ReactElementValidator provides a wrapper around a element factory                                                   // 10265
 * which validates the props passed to the element. This is intended to be                                             // 10266
 * used only in DEV and could be replaced by a static type checker for languages                                       // 10267
 * that support it.                                                                                                    // 10268
 */                                                                                                                    // 10269
                                                                                                                       // 10270
'use strict';                                                                                                          // 10271
                                                                                                                       // 10272
var ReactElement = require("./ReactElement");                                                                          // 10273
var ReactFragment = require("./ReactFragment");                                                                        // 10274
var ReactPropTypeLocations = require("./ReactPropTypeLocations");                                                      // 10275
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");                                              // 10276
var ReactCurrentOwner = require("./ReactCurrentOwner");                                                                // 10277
var ReactNativeComponent = require("./ReactNativeComponent");                                                          // 10278
                                                                                                                       // 10279
var getIteratorFn = require("./getIteratorFn");                                                                        // 10280
var invariant = require("./invariant");                                                                                // 10281
var warning = require("./warning");                                                                                    // 10282
                                                                                                                       // 10283
function getDeclarationErrorAddendum() {                                                                               // 10284
  if (ReactCurrentOwner.current) {                                                                                     // 10285
    var name = ReactCurrentOwner.current.getName();                                                                    // 10286
    if (name) {                                                                                                        // 10287
      return ' Check the render method of `' + name + '`.';                                                            // 10288
    }                                                                                                                  // 10289
  }                                                                                                                    // 10290
  return '';                                                                                                           // 10291
}                                                                                                                      // 10292
                                                                                                                       // 10293
/**                                                                                                                    // 10294
 * Warn if there's no key explicitly set on dynamic arrays of children or                                              // 10295
 * object keys are not valid. This allows us to keep track of children between                                         // 10296
 * updates.                                                                                                            // 10297
 */                                                                                                                    // 10298
var ownerHasKeyUseWarning = {};                                                                                        // 10299
                                                                                                                       // 10300
var loggedTypeFailures = {};                                                                                           // 10301
                                                                                                                       // 10302
var NUMERIC_PROPERTY_REGEX = /^\d+$/;                                                                                  // 10303
                                                                                                                       // 10304
/**                                                                                                                    // 10305
 * Gets the instance's name for use in warnings.                                                                       // 10306
 *                                                                                                                     // 10307
 * @internal                                                                                                           // 10308
 * @return {?string} Display name or undefined                                                                         // 10309
 */                                                                                                                    // 10310
function getName(instance) {                                                                                           // 10311
  var publicInstance = instance && instance.getPublicInstance();                                                       // 10312
  if (!publicInstance) {                                                                                               // 10313
    return undefined;                                                                                                  // 10314
  }                                                                                                                    // 10315
  var constructor = publicInstance.constructor;                                                                        // 10316
  if (!constructor) {                                                                                                  // 10317
    return undefined;                                                                                                  // 10318
  }                                                                                                                    // 10319
  return constructor.displayName || constructor.name || undefined;                                                     // 10320
}                                                                                                                      // 10321
                                                                                                                       // 10322
/**                                                                                                                    // 10323
 * Gets the current owner's displayName for use in warnings.                                                           // 10324
 *                                                                                                                     // 10325
 * @internal                                                                                                           // 10326
 * @return {?string} Display name or undefined                                                                         // 10327
 */                                                                                                                    // 10328
function getCurrentOwnerDisplayName() {                                                                                // 10329
  var current = ReactCurrentOwner.current;                                                                             // 10330
  return (                                                                                                             // 10331
    current && getName(current) || undefined                                                                           // 10332
  );                                                                                                                   // 10333
}                                                                                                                      // 10334
                                                                                                                       // 10335
/**                                                                                                                    // 10336
 * Warn if the element doesn't have an explicit key assigned to it.                                                    // 10337
 * This element is in an array. The array could grow and shrink or be                                                  // 10338
 * reordered. All children that haven't already been validated are required to                                         // 10339
 * have a "key" property assigned to it.                                                                               // 10340
 *                                                                                                                     // 10341
 * @internal                                                                                                           // 10342
 * @param {ReactElement} element Element that requires a key.                                                          // 10343
 * @param {*} parentType element's parent's type.                                                                      // 10344
 */                                                                                                                    // 10345
function validateExplicitKey(element, parentType) {                                                                    // 10346
  if (element._store.validated || element.key != null) {                                                               // 10347
    return;                                                                                                            // 10348
  }                                                                                                                    // 10349
  element._store.validated = true;                                                                                     // 10350
                                                                                                                       // 10351
  warnAndMonitorForKeyUse(                                                                                             // 10352
    'Each child in an array or iterator should have a unique "key" prop.',                                             // 10353
    element,                                                                                                           // 10354
    parentType                                                                                                         // 10355
  );                                                                                                                   // 10356
}                                                                                                                      // 10357
                                                                                                                       // 10358
/**                                                                                                                    // 10359
 * Warn if the key is being defined as an object property but has an incorrect                                         // 10360
 * value.                                                                                                              // 10361
 *                                                                                                                     // 10362
 * @internal                                                                                                           // 10363
 * @param {string} name Property name of the key.                                                                      // 10364
 * @param {ReactElement} element Component that requires a key.                                                        // 10365
 * @param {*} parentType element's parent's type.                                                                      // 10366
 */                                                                                                                    // 10367
function validatePropertyKey(name, element, parentType) {                                                              // 10368
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {                                                                            // 10369
    return;                                                                                                            // 10370
  }                                                                                                                    // 10371
  warnAndMonitorForKeyUse(                                                                                             // 10372
    'Child objects should have non-numeric keys so ordering is preserved.',                                            // 10373
    element,                                                                                                           // 10374
    parentType                                                                                                         // 10375
  );                                                                                                                   // 10376
}                                                                                                                      // 10377
                                                                                                                       // 10378
/**                                                                                                                    // 10379
 * Shared warning and monitoring code for the key warnings.                                                            // 10380
 *                                                                                                                     // 10381
 * @internal                                                                                                           // 10382
 * @param {string} message The base warning that gets output.                                                          // 10383
 * @param {ReactElement} element Component that requires a key.                                                        // 10384
 * @param {*} parentType element's parent's type.                                                                      // 10385
 */                                                                                                                    // 10386
function warnAndMonitorForKeyUse(message, element, parentType) {                                                       // 10387
  var ownerName = getCurrentOwnerDisplayName();                                                                        // 10388
  var parentName = typeof parentType === 'string' ?                                                                    // 10389
    parentType : parentType.displayName || parentType.name;                                                            // 10390
                                                                                                                       // 10391
  var useName = ownerName || parentName;                                                                               // 10392
  var memoizer = ownerHasKeyUseWarning[message] || (                                                                   // 10393
    (ownerHasKeyUseWarning[message] = {})                                                                              // 10394
  );                                                                                                                   // 10395
  if (memoizer.hasOwnProperty(useName)) {                                                                              // 10396
    return;                                                                                                            // 10397
  }                                                                                                                    // 10398
  memoizer[useName] = true;                                                                                            // 10399
                                                                                                                       // 10400
  var parentOrOwnerAddendum =                                                                                          // 10401
    ownerName ? (" Check the render method of " + ownerName + ".") :                                                   // 10402
    parentName ? (" Check the React.render call using <" + parentName + ">.") :                                        // 10403
    '';                                                                                                                // 10404
                                                                                                                       // 10405
  // Usually the current owner is the offender, but if it accepts children as a                                        // 10406
  // property, it may be the creator of the child that's responsible for                                               // 10407
  // assigning it a key.                                                                                               // 10408
  var childOwnerAddendum = '';                                                                                         // 10409
  if (element &&                                                                                                       // 10410
      element._owner &&                                                                                                // 10411
      element._owner !== ReactCurrentOwner.current) {                                                                  // 10412
    // Name of the component that originally created this child.                                                       // 10413
    var childOwnerName = getName(element._owner);                                                                      // 10414
                                                                                                                       // 10415
    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");                                      // 10416
  }                                                                                                                    // 10417
                                                                                                                       // 10418
  ("production" !== process.env.NODE_ENV ? warning(                                                                    // 10419
    false,                                                                                                             // 10420
    message + '%s%s See https://fb.me/react-warning-keys for more information.',                                       // 10421
    parentOrOwnerAddendum,                                                                                             // 10422
    childOwnerAddendum                                                                                                 // 10423
  ) : null);                                                                                                           // 10424
}                                                                                                                      // 10425
                                                                                                                       // 10426
/**                                                                                                                    // 10427
 * Ensure that every element either is passed in a static location, in an                                              // 10428
 * array with an explicit keys property defined, or in an object literal                                               // 10429
 * with valid key property.                                                                                            // 10430
 *                                                                                                                     // 10431
 * @internal                                                                                                           // 10432
 * @param {ReactNode} node Statically passed child of any type.                                                        // 10433
 * @param {*} parentType node's parent's type.                                                                         // 10434
 */                                                                                                                    // 10435
function validateChildKeys(node, parentType) {                                                                         // 10436
  if (Array.isArray(node)) {                                                                                           // 10437
    for (var i = 0; i < node.length; i++) {                                                                            // 10438
      var child = node[i];                                                                                             // 10439
      if (ReactElement.isValidElement(child)) {                                                                        // 10440
        validateExplicitKey(child, parentType);                                                                        // 10441
      }                                                                                                                // 10442
    }                                                                                                                  // 10443
  } else if (ReactElement.isValidElement(node)) {                                                                      // 10444
    // This element was passed in a valid location.                                                                    // 10445
    node._store.validated = true;                                                                                      // 10446
  } else if (node) {                                                                                                   // 10447
    var iteratorFn = getIteratorFn(node);                                                                              // 10448
    // Entry iterators provide implicit keys.                                                                          // 10449
    if (iteratorFn) {                                                                                                  // 10450
      if (iteratorFn !== node.entries) {                                                                               // 10451
        var iterator = iteratorFn.call(node);                                                                          // 10452
        var step;                                                                                                      // 10453
        while (!(step = iterator.next()).done) {                                                                       // 10454
          if (ReactElement.isValidElement(step.value)) {                                                               // 10455
            validateExplicitKey(step.value, parentType);                                                               // 10456
          }                                                                                                            // 10457
        }                                                                                                              // 10458
      }                                                                                                                // 10459
    } else if (typeof node === 'object') {                                                                             // 10460
      var fragment = ReactFragment.extractIfFragment(node);                                                            // 10461
      for (var key in fragment) {                                                                                      // 10462
        if (fragment.hasOwnProperty(key)) {                                                                            // 10463
          validatePropertyKey(key, fragment[key], parentType);                                                         // 10464
        }                                                                                                              // 10465
      }                                                                                                                // 10466
    }                                                                                                                  // 10467
  }                                                                                                                    // 10468
}                                                                                                                      // 10469
                                                                                                                       // 10470
/**                                                                                                                    // 10471
 * Assert that the props are valid                                                                                     // 10472
 *                                                                                                                     // 10473
 * @param {string} componentName Name of the component for error messages.                                             // 10474
 * @param {object} propTypes Map of prop name to a ReactPropType                                                       // 10475
 * @param {object} props                                                                                               // 10476
 * @param {string} location e.g. "prop", "context", "child context"                                                    // 10477
 * @private                                                                                                            // 10478
 */                                                                                                                    // 10479
function checkPropTypes(componentName, propTypes, props, location) {                                                   // 10480
  for (var propName in propTypes) {                                                                                    // 10481
    if (propTypes.hasOwnProperty(propName)) {                                                                          // 10482
      var error;                                                                                                       // 10483
      // Prop type validation may throw. In case they do, we don't want to                                             // 10484
      // fail the render phase where it didn't fail before. So we log it.                                              // 10485
      // After these have been cleaned up, we'll let them throw.                                                       // 10486
      try {                                                                                                            // 10487
        // This is intentionally an invariant that gets caught. It's the same                                          // 10488
        // behavior as without this statement except with a better message.                                            // 10489
        ("production" !== process.env.NODE_ENV ? invariant(                                                            // 10490
          typeof propTypes[propName] === 'function',                                                                   // 10491
          '%s: %s type `%s` is invalid; it must be a function, usually from ' +                                        // 10492
          'React.PropTypes.',                                                                                          // 10493
          componentName || 'React class',                                                                              // 10494
          ReactPropTypeLocationNames[location],                                                                        // 10495
          propName                                                                                                     // 10496
        ) : invariant(typeof propTypes[propName] === 'function'));                                                     // 10497
        error = propTypes[propName](props, propName, componentName, location);                                         // 10498
      } catch (ex) {                                                                                                   // 10499
        error = ex;                                                                                                    // 10500
      }                                                                                                                // 10501
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                          // 10502
        // Only monitor this failure once because there tends to be a lot of the                                       // 10503
        // same error.                                                                                                 // 10504
        loggedTypeFailures[error.message] = true;                                                                      // 10505
                                                                                                                       // 10506
        var addendum = getDeclarationErrorAddendum(this);                                                              // 10507
        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
      }                                                                                                                // 10509
    }                                                                                                                  // 10510
  }                                                                                                                    // 10511
}                                                                                                                      // 10512
                                                                                                                       // 10513
var warnedPropsMutations = {};                                                                                         // 10514
                                                                                                                       // 10515
/**                                                                                                                    // 10516
 * Warn about mutating props when setting `propName` on `element`.                                                     // 10517
 *                                                                                                                     // 10518
 * @param {string} propName The string key within props that was set                                                   // 10519
 * @param {ReactElement} element                                                                                       // 10520
 */                                                                                                                    // 10521
function warnForPropsMutation(propName, element) {                                                                     // 10522
  var type = element.type;                                                                                             // 10523
  var elementName = typeof type === 'string' ? type : type.displayName;                                                // 10524
  var ownerName = element._owner ?                                                                                     // 10525
    element._owner.getPublicInstance().constructor.displayName : null;                                                 // 10526
                                                                                                                       // 10527
  var warningKey = propName + '|' + elementName + '|' + ownerName;                                                     // 10528
  if (warnedPropsMutations.hasOwnProperty(warningKey)) {                                                               // 10529
    return;                                                                                                            // 10530
  }                                                                                                                    // 10531
  warnedPropsMutations[warningKey] = true;                                                                             // 10532
                                                                                                                       // 10533
  var elementInfo = '';                                                                                                // 10534
  if (elementName) {                                                                                                   // 10535
    elementInfo = ' <' + elementName + ' />';                                                                          // 10536
  }                                                                                                                    // 10537
  var ownerInfo = '';                                                                                                  // 10538
  if (ownerName) {                                                                                                     // 10539
    ownerInfo = ' The element was created by ' + ownerName + '.';                                                      // 10540
  }                                                                                                                    // 10541
                                                                                                                       // 10542
  ("production" !== process.env.NODE_ENV ? warning(                                                                    // 10543
    false,                                                                                                             // 10544
    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +                                           // 10545
    'correct value when initially creating the element or use ' +                                                      // 10546
    'React.cloneElement to make a new element with updated props.%s',                                                  // 10547
    propName,                                                                                                          // 10548
    elementInfo,                                                                                                       // 10549
    ownerInfo                                                                                                          // 10550
  ) : null);                                                                                                           // 10551
}                                                                                                                      // 10552
                                                                                                                       // 10553
// Inline Object.is polyfill                                                                                           // 10554
function is(a, b) {                                                                                                    // 10555
  if (a !== a) {                                                                                                       // 10556
    // NaN                                                                                                             // 10557
    return b !== b;                                                                                                    // 10558
  }                                                                                                                    // 10559
  if (a === 0 && b === 0) {                                                                                            // 10560
    // +-0                                                                                                             // 10561
    return 1 / a === 1 / b;                                                                                            // 10562
  }                                                                                                                    // 10563
  return a === b;                                                                                                      // 10564
}                                                                                                                      // 10565
                                                                                                                       // 10566
/**                                                                                                                    // 10567
 * Given an element, check if its props have been mutated since element                                                // 10568
 * creation (or the last call to this function). In particular, check if any                                           // 10569
 * new props have been added, which we can't directly catch by defining warning                                        // 10570
 * properties on the props object.                                                                                     // 10571
 *                                                                                                                     // 10572
 * @param {ReactElement} element                                                                                       // 10573
 */                                                                                                                    // 10574
function checkAndWarnForMutatedProps(element) {                                                                        // 10575
  if (!element._store) {                                                                                               // 10576
    // Element was created using `new ReactElement` directly or with                                                   // 10577
    // `ReactElement.createElement`; skip mutation checking                                                            // 10578
    return;                                                                                                            // 10579
  }                                                                                                                    // 10580
                                                                                                                       // 10581
  var originalProps = element._store.originalProps;                                                                    // 10582
  var props = element.props;                                                                                           // 10583
                                                                                                                       // 10584
  for (var propName in props) {                                                                                        // 10585
    if (props.hasOwnProperty(propName)) {                                                                              // 10586
      if (!originalProps.hasOwnProperty(propName) ||                                                                   // 10587
          !is(originalProps[propName], props[propName])) {                                                             // 10588
        warnForPropsMutation(propName, element);                                                                       // 10589
                                                                                                                       // 10590
        // Copy over the new value so that the two props objects match again                                           // 10591
        originalProps[propName] = props[propName];                                                                     // 10592
      }                                                                                                                // 10593
    }                                                                                                                  // 10594
  }                                                                                                                    // 10595
}                                                                                                                      // 10596
                                                                                                                       // 10597
/**                                                                                                                    // 10598
 * Given an element, validate that its props follow the propTypes definition,                                          // 10599
 * provided by the type.                                                                                               // 10600
 *                                                                                                                     // 10601
 * @param {ReactElement} element                                                                                       // 10602
 */                                                                                                                    // 10603
function validatePropTypes(element) {                                                                                  // 10604
  if (element.type == null) {                                                                                          // 10605
    // This has already warned. Don't throw.                                                                           // 10606
    return;                                                                                                            // 10607
  }                                                                                                                    // 10608
  // Extract the component class from the element. Converts string types                                               // 10609
  // to a composite class which may have propTypes.                                                                    // 10610
  // TODO: Validating a string's propTypes is not decoupled from the                                                   // 10611
  // rendering target which is problematic.                                                                            // 10612
  var componentClass = ReactNativeComponent.getComponentClassForElement(                                               // 10613
    element                                                                                                            // 10614
  );                                                                                                                   // 10615
  var name = componentClass.displayName || componentClass.name;                                                        // 10616
  if (componentClass.propTypes) {                                                                                      // 10617
    checkPropTypes(                                                                                                    // 10618
      name,                                                                                                            // 10619
      componentClass.propTypes,                                                                                        // 10620
      element.props,                                                                                                   // 10621
      ReactPropTypeLocations.prop                                                                                      // 10622
    );                                                                                                                 // 10623
  }                                                                                                                    // 10624
  if (typeof componentClass.getDefaultProps === 'function') {                                                          // 10625
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 10626
      componentClass.getDefaultProps.isReactClassApproved,                                                             // 10627
      'getDefaultProps is only used on classic React.createClass ' +                                                   // 10628
      'definitions. Use a static property named `defaultProps` instead.'                                               // 10629
    ) : null);                                                                                                         // 10630
  }                                                                                                                    // 10631
}                                                                                                                      // 10632
                                                                                                                       // 10633
var ReactElementValidator = {                                                                                          // 10634
                                                                                                                       // 10635
  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,                                                            // 10636
                                                                                                                       // 10637
  createElement: function(type, props, children) {                                                                     // 10638
    // We warn in this case but don't throw. We expect the element creation to                                         // 10639
    // succeed and there will likely be errors in render.                                                              // 10640
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 10641
      type != null,                                                                                                    // 10642
      'React.createElement: type should not be null or undefined. It should ' +                                        // 10643
        'be a string (for DOM elements) or a ReactClass (for composite ' +                                             // 10644
        'components).'                                                                                                 // 10645
    ) : null);                                                                                                         // 10646
                                                                                                                       // 10647
    var element = ReactElement.createElement.apply(this, arguments);                                                   // 10648
                                                                                                                       // 10649
    // The result can be nullish if a mock or a custom function is used.                                               // 10650
    // TODO: Drop this when these are no longer allowed as the type argument.                                          // 10651
    if (element == null) {                                                                                             // 10652
      return element;                                                                                                  // 10653
    }                                                                                                                  // 10654
                                                                                                                       // 10655
    for (var i = 2; i < arguments.length; i++) {                                                                       // 10656
      validateChildKeys(arguments[i], type);                                                                           // 10657
    }                                                                                                                  // 10658
                                                                                                                       // 10659
    validatePropTypes(element);                                                                                        // 10660
                                                                                                                       // 10661
    return element;                                                                                                    // 10662
  },                                                                                                                   // 10663
                                                                                                                       // 10664
  createFactory: function(type) {                                                                                      // 10665
    var validatedFactory = ReactElementValidator.createElement.bind(                                                   // 10666
      null,                                                                                                            // 10667
      type                                                                                                             // 10668
    );                                                                                                                 // 10669
    // Legacy hook TODO: Warn if this is accessed                                                                      // 10670
    validatedFactory.type = type;                                                                                      // 10671
                                                                                                                       // 10672
    if ("production" !== process.env.NODE_ENV) {                                                                       // 10673
      try {                                                                                                            // 10674
        Object.defineProperty(                                                                                         // 10675
          validatedFactory,                                                                                            // 10676
          'type',                                                                                                      // 10677
          {                                                                                                            // 10678
            enumerable: false,                                                                                         // 10679
            get: function() {                                                                                          // 10680
              ("production" !== process.env.NODE_ENV ? warning(                                                        // 10681
                false,                                                                                                 // 10682
                'Factory.type is deprecated. Access the class directly ' +                                             // 10683
                'before passing it to createFactory.'                                                                  // 10684
              ) : null);                                                                                               // 10685
              Object.defineProperty(this, 'type', {                                                                    // 10686
                value: type                                                                                            // 10687
              });                                                                                                      // 10688
              return type;                                                                                             // 10689
            }                                                                                                          // 10690
          }                                                                                                            // 10691
        );                                                                                                             // 10692
      } catch (x) {                                                                                                    // 10693
        // IE will fail on defineProperty (es5-shim/sham too)                                                          // 10694
      }                                                                                                                // 10695
    }                                                                                                                  // 10696
                                                                                                                       // 10697
                                                                                                                       // 10698
    return validatedFactory;                                                                                           // 10699
  },                                                                                                                   // 10700
                                                                                                                       // 10701
  cloneElement: function(element, props, children) {                                                                   // 10702
    var newElement = ReactElement.cloneElement.apply(this, arguments);                                                 // 10703
    for (var i = 2; i < arguments.length; i++) {                                                                       // 10704
      validateChildKeys(arguments[i], newElement.type);                                                                // 10705
    }                                                                                                                  // 10706
    validatePropTypes(newElement);                                                                                     // 10707
    return newElement;                                                                                                 // 10708
  }                                                                                                                    // 10709
                                                                                                                       // 10710
};                                                                                                                     // 10711
                                                                                                                       // 10712
module.exports = ReactElementValidator;                                                                                // 10713
                                                                                                                       // 10714
}).call(this,require('_process'))                                                                                      // 10715
                                                                                                                       // 10716
},{"./ReactCurrentOwner":"react/lib/ReactCurrentOwner","./ReactElement":"react/lib/ReactElement","./ReactFragment":"react/lib/ReactFragment","./ReactNativeComponent":"react/lib/ReactNativeComponent","./ReactPropTypeLocationNames":"react/lib/ReactPropTypeLocationNames","./ReactPropTypeLocations":"react/lib/ReactPropTypeLocations","./getIteratorFn":"react/lib/getIteratorFn","./invariant":"react/lib/invariant","./warning":"react/lib/warning","_process":1}],"react/lib/ReactElement":[function(require,module,exports){
(function (process){                                                                                                   // 10718
/**                                                                                                                    // 10719
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 10720
 * All rights reserved.                                                                                                // 10721
 *                                                                                                                     // 10722
 * This source code is licensed under the BSD-style license found in the                                               // 10723
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 10724
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 10725
 *                                                                                                                     // 10726
 * @providesModule ReactElement                                                                                        // 10727
 */                                                                                                                    // 10728
                                                                                                                       // 10729
'use strict';                                                                                                          // 10730
                                                                                                                       // 10731
var ReactContext = require("./ReactContext");                                                                          // 10732
var ReactCurrentOwner = require("./ReactCurrentOwner");                                                                // 10733
                                                                                                                       // 10734
var assign = require("./Object.assign");                                                                               // 10735
var warning = require("./warning");                                                                                    // 10736
                                                                                                                       // 10737
var RESERVED_PROPS = {                                                                                                 // 10738
  key: true,                                                                                                           // 10739
  ref: true                                                                                                            // 10740
};                                                                                                                     // 10741
                                                                                                                       // 10742
/**                                                                                                                    // 10743
 * Warn for mutations.                                                                                                 // 10744
 *                                                                                                                     // 10745
 * @internal                                                                                                           // 10746
 * @param {object} object                                                                                              // 10747
 * @param {string} key                                                                                                 // 10748
 */                                                                                                                    // 10749
function defineWarningProperty(object, key) {                                                                          // 10750
  Object.defineProperty(object, key, {                                                                                 // 10751
                                                                                                                       // 10752
    configurable: false,                                                                                               // 10753
    enumerable: true,                                                                                                  // 10754
                                                                                                                       // 10755
    get: function() {                                                                                                  // 10756
      if (!this._store) {                                                                                              // 10757
        return null;                                                                                                   // 10758
      }                                                                                                                // 10759
      return this._store[key];                                                                                         // 10760
    },                                                                                                                 // 10761
                                                                                                                       // 10762
    set: function(value) {                                                                                             // 10763
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 10764
        false,                                                                                                         // 10765
        'Don\'t set the %s property of the React element. Instead, ' +                                                 // 10766
        'specify the correct value when initially creating the element.',                                              // 10767
        key                                                                                                            // 10768
      ) : null);                                                                                                       // 10769
      this._store[key] = value;                                                                                        // 10770
    }                                                                                                                  // 10771
                                                                                                                       // 10772
  });                                                                                                                  // 10773
}                                                                                                                      // 10774
                                                                                                                       // 10775
/**                                                                                                                    // 10776
 * This is updated to true if the membrane is successfully created.                                                    // 10777
 */                                                                                                                    // 10778
var useMutationMembrane = false;                                                                                       // 10779
                                                                                                                       // 10780
/**                                                                                                                    // 10781
 * Warn for mutations.                                                                                                 // 10782
 *                                                                                                                     // 10783
 * @internal                                                                                                           // 10784
 * @param {object} element                                                                                             // 10785
 */                                                                                                                    // 10786
function defineMutationMembrane(prototype) {                                                                           // 10787
  try {                                                                                                                // 10788
    var pseudoFrozenProperties = {                                                                                     // 10789
      props: true                                                                                                      // 10790
    };                                                                                                                 // 10791
    for (var key in pseudoFrozenProperties) {                                                                          // 10792
      defineWarningProperty(prototype, key);                                                                           // 10793
    }                                                                                                                  // 10794
    useMutationMembrane = true;                                                                                        // 10795
  } catch (x) {                                                                                                        // 10796
    // IE will fail on defineProperty                                                                                  // 10797
  }                                                                                                                    // 10798
}                                                                                                                      // 10799
                                                                                                                       // 10800
/**                                                                                                                    // 10801
 * Base constructor for all React elements. This is only used to make this                                             // 10802
 * work with a dynamic instanceof check. Nothing should live on this prototype.                                        // 10803
 *                                                                                                                     // 10804
 * @param {*} type                                                                                                     // 10805
 * @param {string|object} ref                                                                                          // 10806
 * @param {*} key                                                                                                      // 10807
 * @param {*} props                                                                                                    // 10808
 * @internal                                                                                                           // 10809
 */                                                                                                                    // 10810
var ReactElement = function(type, key, ref, owner, context, props) {                                                   // 10811
  // Built-in properties that belong on the element                                                                    // 10812
  this.type = type;                                                                                                    // 10813
  this.key = key;                                                                                                      // 10814
  this.ref = ref;                                                                                                      // 10815
                                                                                                                       // 10816
  // Record the component responsible for creating this element.                                                       // 10817
  this._owner = owner;                                                                                                 // 10818
                                                                                                                       // 10819
  // TODO: Deprecate withContext, and then the context becomes accessible                                              // 10820
  // through the owner.                                                                                                // 10821
  this._context = context;                                                                                             // 10822
                                                                                                                       // 10823
  if ("production" !== process.env.NODE_ENV) {                                                                         // 10824
    // The validation flag and props are currently mutative. We put them on                                            // 10825
    // an external backing store so that we can freeze the whole object.                                               // 10826
    // This can be replaced with a WeakMap once they are implemented in                                                // 10827
    // commonly used development environments.                                                                         // 10828
    this._store = {props: props, originalProps: assign({}, props)};                                                    // 10829
                                                                                                                       // 10830
    // To make comparing ReactElements easier for testing purposes, we make                                            // 10831
    // the validation flag non-enumerable (where possible, which should                                                // 10832
    // include every environment we run tests in), so the test framework                                               // 10833
    // ignores it.                                                                                                     // 10834
    try {                                                                                                              // 10835
      Object.defineProperty(this._store, 'validated', {                                                                // 10836
        configurable: false,                                                                                           // 10837
        enumerable: false,                                                                                             // 10838
        writable: true                                                                                                 // 10839
      });                                                                                                              // 10840
    } catch (x) {                                                                                                      // 10841
    }                                                                                                                  // 10842
    this._store.validated = false;                                                                                     // 10843
                                                                                                                       // 10844
    // We're not allowed to set props directly on the object so we early                                               // 10845
    // return and rely on the prototype membrane to forward to the backing                                             // 10846
    // store.                                                                                                          // 10847
    if (useMutationMembrane) {                                                                                         // 10848
      Object_freeze(this);                                                                                             // 10849
      return;                                                                                                          // 10850
    }                                                                                                                  // 10851
  }                                                                                                                    // 10852
                                                                                                                       // 10853
  this.props = props;                                                                                                  // 10854
};                                                                                                                     // 10855
                                                                                                                       // 10856
// We intentionally don't expose the function on the constructor property.                                             // 10857
// ReactElement should be indistinguishable from a plain object.                                                       // 10858
ReactElement.prototype = {                                                                                             // 10859
  _isReactElement: true                                                                                                // 10860
};                                                                                                                     // 10861
                                                                                                                       // 10862
if ("production" !== process.env.NODE_ENV) {                                                                           // 10863
  defineMutationMembrane(ReactElement.prototype);                                                                      // 10864
}                                                                                                                      // 10865
                                                                                                                       // 10866
ReactElement.createElement = function(type, config, children) {                                                        // 10867
  var propName;                                                                                                        // 10868
                                                                                                                       // 10869
  // Reserved names are extracted                                                                                      // 10870
  var props = {};                                                                                                      // 10871
                                                                                                                       // 10872
  var key = null;                                                                                                      // 10873
  var ref = null;                                                                                                      // 10874
                                                                                                                       // 10875
  if (config != null) {                                                                                                // 10876
    ref = config.ref === undefined ? null : config.ref;                                                                // 10877
    key = config.key === undefined ? null : '' + config.key;                                                           // 10878
    // Remaining properties are added to a new props object                                                            // 10879
    for (propName in config) {                                                                                         // 10880
      if (config.hasOwnProperty(propName) &&                                                                           // 10881
          !RESERVED_PROPS.hasOwnProperty(propName)) {                                                                  // 10882
        props[propName] = config[propName];                                                                            // 10883
      }                                                                                                                // 10884
    }                                                                                                                  // 10885
  }                                                                                                                    // 10886
                                                                                                                       // 10887
  // Children can be more than one argument, and those are transferred onto                                            // 10888
  // the newly allocated props object.                                                                                 // 10889
  var childrenLength = arguments.length - 2;                                                                           // 10890
  if (childrenLength === 1) {                                                                                          // 10891
    props.children = children;                                                                                         // 10892
  } else if (childrenLength > 1) {                                                                                     // 10893
    var childArray = Array(childrenLength);                                                                            // 10894
    for (var i = 0; i < childrenLength; i++) {                                                                         // 10895
      childArray[i] = arguments[i + 2];                                                                                // 10896
    }                                                                                                                  // 10897
    props.children = childArray;                                                                                       // 10898
  }                                                                                                                    // 10899
                                                                                                                       // 10900
  // Resolve default props                                                                                             // 10901
  if (type && type.defaultProps) {                                                                                     // 10902
    var defaultProps = type.defaultProps;                                                                              // 10903
    for (propName in defaultProps) {                                                                                   // 10904
      if (typeof props[propName] === 'undefined') {                                                                    // 10905
        props[propName] = defaultProps[propName];                                                                      // 10906
      }                                                                                                                // 10907
    }                                                                                                                  // 10908
  }                                                                                                                    // 10909
                                                                                                                       // 10910
  return new ReactElement(                                                                                             // 10911
    type,                                                                                                              // 10912
    key,                                                                                                               // 10913
    ref,                                                                                                               // 10914
    ReactCurrentOwner.current,                                                                                         // 10915
    ReactContext.current,                                                                                              // 10916
    props                                                                                                              // 10917
  );                                                                                                                   // 10918
};                                                                                                                     // 10919
                                                                                                                       // 10920
ReactElement.createFactory = function(type) {                                                                          // 10921
  var factory = ReactElement.createElement.bind(null, type);                                                           // 10922
  // Expose the type on the factory and the prototype so that it can be                                                // 10923
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.                                                      // 10924
  // This should not be named `constructor` since this may not be the function                                         // 10925
  // that created the element, and it may not even be a constructor.                                                   // 10926
  // Legacy hook TODO: Warn if this is accessed                                                                        // 10927
  factory.type = type;                                                                                                 // 10928
  return factory;                                                                                                      // 10929
};                                                                                                                     // 10930
                                                                                                                       // 10931
ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {                                                   // 10932
  var newElement = new ReactElement(                                                                                   // 10933
    oldElement.type,                                                                                                   // 10934
    oldElement.key,                                                                                                    // 10935
    oldElement.ref,                                                                                                    // 10936
    oldElement._owner,                                                                                                 // 10937
    oldElement._context,                                                                                               // 10938
    newProps                                                                                                           // 10939
  );                                                                                                                   // 10940
                                                                                                                       // 10941
  if ("production" !== process.env.NODE_ENV) {                                                                         // 10942
    // If the key on the original is valid, then the clone is valid                                                    // 10943
    newElement._store.validated = oldElement._store.validated;                                                         // 10944
  }                                                                                                                    // 10945
  return newElement;                                                                                                   // 10946
};                                                                                                                     // 10947
                                                                                                                       // 10948
ReactElement.cloneElement = function(element, config, children) {                                                      // 10949
  var propName;                                                                                                        // 10950
                                                                                                                       // 10951
  // Original props are copied                                                                                         // 10952
  var props = assign({}, element.props);                                                                               // 10953
                                                                                                                       // 10954
  // Reserved names are extracted                                                                                      // 10955
  var key = element.key;                                                                                               // 10956
  var ref = element.ref;                                                                                               // 10957
                                                                                                                       // 10958
  // Owner will be preserved, unless ref is overridden                                                                 // 10959
  var owner = element._owner;                                                                                          // 10960
                                                                                                                       // 10961
  if (config != null) {                                                                                                // 10962
    if (config.ref !== undefined) {                                                                                    // 10963
      // Silently steal the ref from the parent.                                                                       // 10964
      ref = config.ref;                                                                                                // 10965
      owner = ReactCurrentOwner.current;                                                                               // 10966
    }                                                                                                                  // 10967
    if (config.key !== undefined) {                                                                                    // 10968
      key = '' + config.key;                                                                                           // 10969
    }                                                                                                                  // 10970
    // Remaining properties override existing props                                                                    // 10971
    for (propName in config) {                                                                                         // 10972
      if (config.hasOwnProperty(propName) &&                                                                           // 10973
          !RESERVED_PROPS.hasOwnProperty(propName)) {                                                                  // 10974
        props[propName] = config[propName];                                                                            // 10975
      }                                                                                                                // 10976
    }                                                                                                                  // 10977
  }                                                                                                                    // 10978
                                                                                                                       // 10979
  // Children can be more than one argument, and those are transferred onto                                            // 10980
  // the newly allocated props object.                                                                                 // 10981
  var childrenLength = arguments.length - 2;                                                                           // 10982
  if (childrenLength === 1) {                                                                                          // 10983
    props.children = children;                                                                                         // 10984
  } else if (childrenLength > 1) {                                                                                     // 10985
    var childArray = Array(childrenLength);                                                                            // 10986
    for (var i = 0; i < childrenLength; i++) {                                                                         // 10987
      childArray[i] = arguments[i + 2];                                                                                // 10988
    }                                                                                                                  // 10989
    props.children = childArray;                                                                                       // 10990
  }                                                                                                                    // 10991
                                                                                                                       // 10992
  return new ReactElement(                                                                                             // 10993
    element.type,                                                                                                      // 10994
    key,                                                                                                               // 10995
    ref,                                                                                                               // 10996
    owner,                                                                                                             // 10997
    element._context,                                                                                                  // 10998
    props                                                                                                              // 10999
  );                                                                                                                   // 11000
};                                                                                                                     // 11001
                                                                                                                       // 11002
/**                                                                                                                    // 11003
 * @param {?object} object                                                                                             // 11004
 * @return {boolean} True if `object` is a valid component.                                                            // 11005
 * @final                                                                                                              // 11006
 */                                                                                                                    // 11007
ReactElement.isValidElement = function(object) {                                                                       // 11008
  // ReactTestUtils is often used outside of beforeEach where as React is                                              // 11009
  // within it. This leads to two different instances of React on the same                                             // 11010
  // page. To identify a element from a different React instance we use                                                // 11011
  // a flag instead of an instanceof check.                                                                            // 11012
  var isElement = !!(object && object._isReactElement);                                                                // 11013
  // if (isElement && !(object instanceof ReactElement)) {                                                             // 11014
  // This is an indicator that you're using multiple versions of React at the                                          // 11015
  // same time. This will screw with ownership and stuff. Fix it, please.                                              // 11016
  // TODO: We could possibly warn here.                                                                                // 11017
  // }                                                                                                                 // 11018
  return isElement;                                                                                                    // 11019
};                                                                                                                     // 11020
                                                                                                                       // 11021
module.exports = ReactElement;                                                                                         // 11022
                                                                                                                       // 11023
}).call(this,require('_process'))                                                                                      // 11024
                                                                                                                       // 11025
},{"./Object.assign":"react/lib/Object.assign","./ReactContext":"react/lib/ReactContext","./ReactCurrentOwner":"react/lib/ReactCurrentOwner","./warning":"react/lib/warning","_process":1}],"react/lib/ReactEmptyComponent":[function(require,module,exports){
(function (process){                                                                                                   // 11027
/**                                                                                                                    // 11028
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 11029
 * All rights reserved.                                                                                                // 11030
 *                                                                                                                     // 11031
 * This source code is licensed under the BSD-style license found in the                                               // 11032
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 11033
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 11034
 *                                                                                                                     // 11035
 * @providesModule ReactEmptyComponent                                                                                 // 11036
 */                                                                                                                    // 11037
                                                                                                                       // 11038
'use strict';                                                                                                          // 11039
                                                                                                                       // 11040
var ReactElement = require("./ReactElement");                                                                          // 11041
var ReactInstanceMap = require("./ReactInstanceMap");                                                                  // 11042
                                                                                                                       // 11043
var invariant = require("./invariant");                                                                                // 11044
                                                                                                                       // 11045
var component;                                                                                                         // 11046
// This registry keeps track of the React IDs of the components that rendered to                                       // 11047
// `null` (in reality a placeholder such as `noscript`)                                                                // 11048
var nullComponentIDsRegistry = {};                                                                                     // 11049
                                                                                                                       // 11050
var ReactEmptyComponentInjection = {                                                                                   // 11051
  injectEmptyComponent: function(emptyComponent) {                                                                     // 11052
    component = ReactElement.createFactory(emptyComponent);                                                            // 11053
  }                                                                                                                    // 11054
};                                                                                                                     // 11055
                                                                                                                       // 11056
var ReactEmptyComponentType = function() {};                                                                           // 11057
ReactEmptyComponentType.prototype.componentDidMount = function() {                                                     // 11058
  var internalInstance = ReactInstanceMap.get(this);                                                                   // 11059
  // TODO: Make sure we run these methods in the correct order, we shouldn't                                           // 11060
  // need this check. We're going to assume if we're here it means we ran                                              // 11061
  // componentWillUnmount already so there is no internal instance (it gets                                            // 11062
  // removed as part of the unmounting process).                                                                       // 11063
  if (!internalInstance) {                                                                                             // 11064
    return;                                                                                                            // 11065
  }                                                                                                                    // 11066
  registerNullComponentID(internalInstance._rootNodeID);                                                               // 11067
};                                                                                                                     // 11068
ReactEmptyComponentType.prototype.componentWillUnmount = function() {                                                  // 11069
  var internalInstance = ReactInstanceMap.get(this);                                                                   // 11070
  // TODO: Get rid of this check. See TODO in componentDidMount.                                                       // 11071
  if (!internalInstance) {                                                                                             // 11072
    return;                                                                                                            // 11073
  }                                                                                                                    // 11074
  deregisterNullComponentID(internalInstance._rootNodeID);                                                             // 11075
};                                                                                                                     // 11076
ReactEmptyComponentType.prototype.render = function() {                                                                // 11077
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 11078
    component,                                                                                                         // 11079
    'Trying to return null from a render, but no null placeholder component ' +                                        // 11080
    'was injected.'                                                                                                    // 11081
  ) : invariant(component));                                                                                           // 11082
  return component();                                                                                                  // 11083
};                                                                                                                     // 11084
                                                                                                                       // 11085
var emptyElement = ReactElement.createElement(ReactEmptyComponentType);                                                // 11086
                                                                                                                       // 11087
/**                                                                                                                    // 11088
 * Mark the component as having rendered to null.                                                                      // 11089
 * @param {string} id Component's `_rootNodeID`.                                                                       // 11090
 */                                                                                                                    // 11091
function registerNullComponentID(id) {                                                                                 // 11092
  nullComponentIDsRegistry[id] = true;                                                                                 // 11093
}                                                                                                                      // 11094
                                                                                                                       // 11095
/**                                                                                                                    // 11096
 * Unmark the component as having rendered to null: it renders to something now.                                       // 11097
 * @param {string} id Component's `_rootNodeID`.                                                                       // 11098
 */                                                                                                                    // 11099
function deregisterNullComponentID(id) {                                                                               // 11100
  delete nullComponentIDsRegistry[id];                                                                                 // 11101
}                                                                                                                      // 11102
                                                                                                                       // 11103
/**                                                                                                                    // 11104
 * @param {string} id Component's `_rootNodeID`.                                                                       // 11105
 * @return {boolean} True if the component is rendered to null.                                                        // 11106
 */                                                                                                                    // 11107
function isNullComponentID(id) {                                                                                       // 11108
  return !!nullComponentIDsRegistry[id];                                                                               // 11109
}                                                                                                                      // 11110
                                                                                                                       // 11111
var ReactEmptyComponent = {                                                                                            // 11112
  emptyElement: emptyElement,                                                                                          // 11113
  injection: ReactEmptyComponentInjection,                                                                             // 11114
  isNullComponentID: isNullComponentID                                                                                 // 11115
};                                                                                                                     // 11116
                                                                                                                       // 11117
module.exports = ReactEmptyComponent;                                                                                  // 11118
                                                                                                                       // 11119
}).call(this,require('_process'))                                                                                      // 11120
                                                                                                                       // 11121
},{"./ReactElement":"react/lib/ReactElement","./ReactInstanceMap":"react/lib/ReactInstanceMap","./invariant":"react/lib/invariant","_process":1}],"react/lib/ReactErrorUtils":[function(require,module,exports){
/**                                                                                                                    // 11123
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 11124
 * All rights reserved.                                                                                                // 11125
 *                                                                                                                     // 11126
 * This source code is licensed under the BSD-style license found in the                                               // 11127
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 11128
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 11129
 *                                                                                                                     // 11130
 * @providesModule ReactErrorUtils                                                                                     // 11131
 * @typechecks                                                                                                         // 11132
 */                                                                                                                    // 11133
                                                                                                                       // 11134
"use strict";                                                                                                          // 11135
                                                                                                                       // 11136
var ReactErrorUtils = {                                                                                                // 11137
  /**                                                                                                                  // 11138
   * Creates a guarded version of a function. This is supposed to make debugging                                       // 11139
   * of event handlers easier. To aid debugging with the browser's debugger,                                           // 11140
   * this currently simply returns the original function.                                                              // 11141
   *                                                                                                                   // 11142
   * @param {function} func Function to be executed                                                                    // 11143
   * @param {string} name The name of the guard                                                                        // 11144
   * @return {function}                                                                                                // 11145
   */                                                                                                                  // 11146
  guard: function(func, name) {                                                                                        // 11147
    return func;                                                                                                       // 11148
  }                                                                                                                    // 11149
};                                                                                                                     // 11150
                                                                                                                       // 11151
module.exports = ReactErrorUtils;                                                                                      // 11152
                                                                                                                       // 11153
},{}],"react/lib/ReactEventEmitterMixin":[function(require,module,exports){                                            // 11154
/**                                                                                                                    // 11155
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 11156
 * All rights reserved.                                                                                                // 11157
 *                                                                                                                     // 11158
 * This source code is licensed under the BSD-style license found in the                                               // 11159
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 11160
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 11161
 *                                                                                                                     // 11162
 * @providesModule ReactEventEmitterMixin                                                                              // 11163
 */                                                                                                                    // 11164
                                                                                                                       // 11165
'use strict';                                                                                                          // 11166
                                                                                                                       // 11167
var EventPluginHub = require("./EventPluginHub");                                                                      // 11168
                                                                                                                       // 11169
function runEventQueueInBatch(events) {                                                                                // 11170
  EventPluginHub.enqueueEvents(events);                                                                                // 11171
  EventPluginHub.processEventQueue();                                                                                  // 11172
}                                                                                                                      // 11173
                                                                                                                       // 11174
var ReactEventEmitterMixin = {                                                                                         // 11175
                                                                                                                       // 11176
  /**                                                                                                                  // 11177
   * Streams a fired top-level event to `EventPluginHub` where plugins have the                                        // 11178
   * opportunity to create `ReactEvent`s to be dispatched.                                                             // 11179
   *                                                                                                                   // 11180
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 11181
   * @param {object} topLevelTarget The listening component root node.                                                 // 11182
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 11183
   * @param {object} nativeEvent Native environment event.                                                             // 11184
   */                                                                                                                  // 11185
  handleTopLevel: function(                                                                                            // 11186
      topLevelType,                                                                                                    // 11187
      topLevelTarget,                                                                                                  // 11188
      topLevelTargetID,                                                                                                // 11189
      nativeEvent) {                                                                                                   // 11190
    var events = EventPluginHub.extractEvents(                                                                         // 11191
      topLevelType,                                                                                                    // 11192
      topLevelTarget,                                                                                                  // 11193
      topLevelTargetID,                                                                                                // 11194
      nativeEvent                                                                                                      // 11195
    );                                                                                                                 // 11196
                                                                                                                       // 11197
    runEventQueueInBatch(events);                                                                                      // 11198
  }                                                                                                                    // 11199
};                                                                                                                     // 11200
                                                                                                                       // 11201
module.exports = ReactEventEmitterMixin;                                                                               // 11202
                                                                                                                       // 11203
},{"./EventPluginHub":"react/lib/EventPluginHub"}],"react/lib/ReactEventListener":[function(require,module,exports){   // 11204
/**                                                                                                                    // 11205
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 11206
 * All rights reserved.                                                                                                // 11207
 *                                                                                                                     // 11208
 * This source code is licensed under the BSD-style license found in the                                               // 11209
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 11210
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 11211
 *                                                                                                                     // 11212
 * @providesModule ReactEventListener                                                                                  // 11213
 * @typechecks static-only                                                                                             // 11214
 */                                                                                                                    // 11215
                                                                                                                       // 11216
'use strict';                                                                                                          // 11217
                                                                                                                       // 11218
var EventListener = require("./EventListener");                                                                        // 11219
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 11220
var PooledClass = require("./PooledClass");                                                                            // 11221
var ReactInstanceHandles = require("./ReactInstanceHandles");                                                          // 11222
var ReactMount = require("./ReactMount");                                                                              // 11223
var ReactUpdates = require("./ReactUpdates");                                                                          // 11224
                                                                                                                       // 11225
var assign = require("./Object.assign");                                                                               // 11226
var getEventTarget = require("./getEventTarget");                                                                      // 11227
var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");                                              // 11228
                                                                                                                       // 11229
/**                                                                                                                    // 11230
 * Finds the parent React component of `node`.                                                                         // 11231
 *                                                                                                                     // 11232
 * @param {*} node                                                                                                     // 11233
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node                                         // 11234
 *                           is not nested.                                                                            // 11235
 */                                                                                                                    // 11236
function findParent(node) {                                                                                            // 11237
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM                                              // 11238
  // traversal, but caching is difficult to do correctly without using a                                               // 11239
  // mutation observer to listen for all DOM changes.                                                                  // 11240
  var nodeID = ReactMount.getID(node);                                                                                 // 11241
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);                                                  // 11242
  var container = ReactMount.findReactContainerForID(rootID);                                                          // 11243
  var parent = ReactMount.getFirstReactDOM(container);                                                                 // 11244
  return parent;                                                                                                       // 11245
}                                                                                                                      // 11246
                                                                                                                       // 11247
// Used to store ancestor hierarchy in top level callback                                                              // 11248
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {                                                      // 11249
  this.topLevelType = topLevelType;                                                                                    // 11250
  this.nativeEvent = nativeEvent;                                                                                      // 11251
  this.ancestors = [];                                                                                                 // 11252
}                                                                                                                      // 11253
assign(TopLevelCallbackBookKeeping.prototype, {                                                                        // 11254
  destructor: function() {                                                                                             // 11255
    this.topLevelType = null;                                                                                          // 11256
    this.nativeEvent = null;                                                                                           // 11257
    this.ancestors.length = 0;                                                                                         // 11258
  }                                                                                                                    // 11259
});                                                                                                                    // 11260
PooledClass.addPoolingTo(                                                                                              // 11261
  TopLevelCallbackBookKeeping,                                                                                         // 11262
  PooledClass.twoArgumentPooler                                                                                        // 11263
);                                                                                                                     // 11264
                                                                                                                       // 11265
function handleTopLevelImpl(bookKeeping) {                                                                             // 11266
  var topLevelTarget = ReactMount.getFirstReactDOM(                                                                    // 11267
    getEventTarget(bookKeeping.nativeEvent)                                                                            // 11268
  ) || window;                                                                                                         // 11269
                                                                                                                       // 11270
  // Loop through the hierarchy, in case there's any nested components.                                                // 11271
  // It's important that we build the array of ancestors before calling any                                            // 11272
  // event handlers, because event handlers can modify the DOM, leading to                                             // 11273
  // inconsistencies with ReactMount's node cache. See #1105.                                                          // 11274
  var ancestor = topLevelTarget;                                                                                       // 11275
  while (ancestor) {                                                                                                   // 11276
    bookKeeping.ancestors.push(ancestor);                                                                              // 11277
    ancestor = findParent(ancestor);                                                                                   // 11278
  }                                                                                                                    // 11279
                                                                                                                       // 11280
  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {                                                      // 11281
    topLevelTarget = bookKeeping.ancestors[i];                                                                         // 11282
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';                                                     // 11283
    ReactEventListener._handleTopLevel(                                                                                // 11284
      bookKeeping.topLevelType,                                                                                        // 11285
      topLevelTarget,                                                                                                  // 11286
      topLevelTargetID,                                                                                                // 11287
      bookKeeping.nativeEvent                                                                                          // 11288
    );                                                                                                                 // 11289
  }                                                                                                                    // 11290
}                                                                                                                      // 11291
                                                                                                                       // 11292
function scrollValueMonitor(cb) {                                                                                      // 11293
  var scrollPosition = getUnboundedScrollPosition(window);                                                             // 11294
  cb(scrollPosition);                                                                                                  // 11295
}                                                                                                                      // 11296
                                                                                                                       // 11297
var ReactEventListener = {                                                                                             // 11298
  _enabled: true,                                                                                                      // 11299
  _handleTopLevel: null,                                                                                               // 11300
                                                                                                                       // 11301
  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,                                                       // 11302
                                                                                                                       // 11303
  setHandleTopLevel: function(handleTopLevel) {                                                                        // 11304
    ReactEventListener._handleTopLevel = handleTopLevel;                                                               // 11305
  },                                                                                                                   // 11306
                                                                                                                       // 11307
  setEnabled: function(enabled) {                                                                                      // 11308
    ReactEventListener._enabled = !!enabled;                                                                           // 11309
  },                                                                                                                   // 11310
                                                                                                                       // 11311
  isEnabled: function() {                                                                                              // 11312
    return ReactEventListener._enabled;                                                                                // 11313
  },                                                                                                                   // 11314
                                                                                                                       // 11315
                                                                                                                       // 11316
  /**                                                                                                                  // 11317
   * Traps top-level events by using event bubbling.                                                                   // 11318
   *                                                                                                                   // 11319
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 11320
   * @param {string} handlerBaseName Event name (e.g. "click").                                                        // 11321
   * @param {object} handle Element on which to attach listener.                                                       // 11322
   * @return {object} An object with a remove function which will forcefully                                           // 11323
   *                  remove the listener.                                                                             // 11324
   * @internal                                                                                                         // 11325
   */                                                                                                                  // 11326
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {                                                  // 11327
    var element = handle;                                                                                              // 11328
    if (!element) {                                                                                                    // 11329
      return null;                                                                                                     // 11330
    }                                                                                                                  // 11331
    return EventListener.listen(                                                                                       // 11332
      element,                                                                                                         // 11333
      handlerBaseName,                                                                                                 // 11334
      ReactEventListener.dispatchEvent.bind(null, topLevelType)                                                        // 11335
    );                                                                                                                 // 11336
  },                                                                                                                   // 11337
                                                                                                                       // 11338
  /**                                                                                                                  // 11339
   * Traps a top-level event by using event capturing.                                                                 // 11340
   *                                                                                                                   // 11341
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 11342
   * @param {string} handlerBaseName Event name (e.g. "click").                                                        // 11343
   * @param {object} handle Element on which to attach listener.                                                       // 11344
   * @return {object} An object with a remove function which will forcefully                                           // 11345
   *                  remove the listener.                                                                             // 11346
   * @internal                                                                                                         // 11347
   */                                                                                                                  // 11348
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {                                                 // 11349
    var element = handle;                                                                                              // 11350
    if (!element) {                                                                                                    // 11351
      return null;                                                                                                     // 11352
    }                                                                                                                  // 11353
    return EventListener.capture(                                                                                      // 11354
      element,                                                                                                         // 11355
      handlerBaseName,                                                                                                 // 11356
      ReactEventListener.dispatchEvent.bind(null, topLevelType)                                                        // 11357
    );                                                                                                                 // 11358
  },                                                                                                                   // 11359
                                                                                                                       // 11360
  monitorScrollValue: function(refresh) {                                                                              // 11361
    var callback = scrollValueMonitor.bind(null, refresh);                                                             // 11362
    EventListener.listen(window, 'scroll', callback);                                                                  // 11363
  },                                                                                                                   // 11364
                                                                                                                       // 11365
  dispatchEvent: function(topLevelType, nativeEvent) {                                                                 // 11366
    if (!ReactEventListener._enabled) {                                                                                // 11367
      return;                                                                                                          // 11368
    }                                                                                                                  // 11369
                                                                                                                       // 11370
    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(                                                           // 11371
      topLevelType,                                                                                                    // 11372
      nativeEvent                                                                                                      // 11373
    );                                                                                                                 // 11374
    try {                                                                                                              // 11375
      // Event queue being processed in the same cycle allows                                                          // 11376
      // `preventDefault`.                                                                                             // 11377
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);                                                    // 11378
    } finally {                                                                                                        // 11379
      TopLevelCallbackBookKeeping.release(bookKeeping);                                                                // 11380
    }                                                                                                                  // 11381
  }                                                                                                                    // 11382
};                                                                                                                     // 11383
                                                                                                                       // 11384
module.exports = ReactEventListener;                                                                                   // 11385
                                                                                                                       // 11386
},{"./EventListener":"react/lib/EventListener","./ExecutionEnvironment":"react/lib/ExecutionEnvironment","./Object.assign":"react/lib/Object.assign","./PooledClass":"react/lib/PooledClass","./ReactInstanceHandles":"react/lib/ReactInstanceHandles","./ReactMount":"react/lib/ReactMount","./ReactUpdates":"react/lib/ReactUpdates","./getEventTarget":"react/lib/getEventTarget","./getUnboundedScrollPosition":"react/lib/getUnboundedScrollPosition"}],"react/lib/ReactFragment":[function(require,module,exports){
(function (process){                                                                                                   // 11388
/**                                                                                                                    // 11389
 * Copyright 2015, Facebook, Inc.                                                                                      // 11390
 * All rights reserved.                                                                                                // 11391
 *                                                                                                                     // 11392
 * This source code is licensed under the BSD-style license found in the                                               // 11393
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 11394
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 11395
 *                                                                                                                     // 11396
* @providesModule ReactFragment                                                                                        // 11397
*/                                                                                                                     // 11398
                                                                                                                       // 11399
'use strict';                                                                                                          // 11400
                                                                                                                       // 11401
var ReactElement = require("./ReactElement");                                                                          // 11402
                                                                                                                       // 11403
var warning = require("./warning");                                                                                    // 11404
                                                                                                                       // 11405
/**                                                                                                                    // 11406
 * We used to allow keyed objects to serve as a collection of ReactElements,                                           // 11407
 * or nested sets. This allowed us a way to explicitly key a set a fragment of                                         // 11408
 * components. This is now being replaced with an opaque data structure.                                               // 11409
 * The upgrade path is to call React.addons.createFragment({ key: value }) to                                          // 11410
 * create a keyed fragment. The resulting data structure is opaque, for now.                                           // 11411
 */                                                                                                                    // 11412
                                                                                                                       // 11413
if ("production" !== process.env.NODE_ENV) {                                                                           // 11414
  var fragmentKey = '_reactFragment';                                                                                  // 11415
  var didWarnKey = '_reactDidWarn';                                                                                    // 11416
  var canWarnForReactFragment = false;                                                                                 // 11417
                                                                                                                       // 11418
  try {                                                                                                                // 11419
    // Feature test. Don't even try to issue this warning if we can't use                                              // 11420
    // enumerable: false.                                                                                              // 11421
                                                                                                                       // 11422
    var dummy = function() {                                                                                           // 11423
      return 1;                                                                                                        // 11424
    };                                                                                                                 // 11425
                                                                                                                       // 11426
    Object.defineProperty(                                                                                             // 11427
      {},                                                                                                              // 11428
      fragmentKey,                                                                                                     // 11429
      {enumerable: false, value: true}                                                                                 // 11430
    );                                                                                                                 // 11431
                                                                                                                       // 11432
    Object.defineProperty(                                                                                             // 11433
      {},                                                                                                              // 11434
      'key',                                                                                                           // 11435
      {enumerable: true, get: dummy}                                                                                   // 11436
    );                                                                                                                 // 11437
                                                                                                                       // 11438
    canWarnForReactFragment = true;                                                                                    // 11439
  } catch (x) { }                                                                                                      // 11440
                                                                                                                       // 11441
  var proxyPropertyAccessWithWarning = function(obj, key) {                                                            // 11442
    Object.defineProperty(obj, key, {                                                                                  // 11443
      enumerable: true,                                                                                                // 11444
      get: function() {                                                                                                // 11445
        ("production" !== process.env.NODE_ENV ? warning(                                                              // 11446
          this[didWarnKey],                                                                                            // 11447
          'A ReactFragment is an opaque type. Accessing any of its ' +                                                 // 11448
          'properties is deprecated. Pass it to one of the React.Children ' +                                          // 11449
          'helpers.'                                                                                                   // 11450
        ) : null);                                                                                                     // 11451
        this[didWarnKey] = true;                                                                                       // 11452
        return this[fragmentKey][key];                                                                                 // 11453
      },                                                                                                               // 11454
      set: function(value) {                                                                                           // 11455
        ("production" !== process.env.NODE_ENV ? warning(                                                              // 11456
          this[didWarnKey],                                                                                            // 11457
          'A ReactFragment is an immutable opaque type. Mutating its ' +                                               // 11458
          'properties is deprecated.'                                                                                  // 11459
        ) : null);                                                                                                     // 11460
        this[didWarnKey] = true;                                                                                       // 11461
        this[fragmentKey][key] = value;                                                                                // 11462
      }                                                                                                                // 11463
    });                                                                                                                // 11464
  };                                                                                                                   // 11465
                                                                                                                       // 11466
  var issuedWarnings = {};                                                                                             // 11467
                                                                                                                       // 11468
  var didWarnForFragment = function(fragment) {                                                                        // 11469
    // We use the keys and the type of the value as a heuristic to dedupe the                                          // 11470
    // warning to avoid spamming too much.                                                                             // 11471
    var fragmentCacheKey = '';                                                                                         // 11472
    for (var key in fragment) {                                                                                        // 11473
      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';                                                    // 11474
    }                                                                                                                  // 11475
    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];                                                        // 11476
    issuedWarnings[fragmentCacheKey] = true;                                                                           // 11477
    return alreadyWarnedOnce;                                                                                          // 11478
  };                                                                                                                   // 11479
}                                                                                                                      // 11480
                                                                                                                       // 11481
var ReactFragment = {                                                                                                  // 11482
  // Wrap a keyed object in an opaque proxy that warns you if you access any                                           // 11483
  // of its properties.                                                                                                // 11484
  create: function(object) {                                                                                           // 11485
    if ("production" !== process.env.NODE_ENV) {                                                                       // 11486
      if (typeof object !== 'object' || !object || Array.isArray(object)) {                                            // 11487
        ("production" !== process.env.NODE_ENV ? warning(                                                              // 11488
          false,                                                                                                       // 11489
          'React.addons.createFragment only accepts a single object.',                                                 // 11490
          object                                                                                                       // 11491
        ) : null);                                                                                                     // 11492
        return object;                                                                                                 // 11493
      }                                                                                                                // 11494
      if (ReactElement.isValidElement(object)) {                                                                       // 11495
        ("production" !== process.env.NODE_ENV ? warning(                                                              // 11496
          false,                                                                                                       // 11497
          'React.addons.createFragment does not accept a ReactElement ' +                                              // 11498
          'without a wrapper object.'                                                                                  // 11499
        ) : null);                                                                                                     // 11500
        return object;                                                                                                 // 11501
      }                                                                                                                // 11502
      if (canWarnForReactFragment) {                                                                                   // 11503
        var proxy = {};                                                                                                // 11504
        Object.defineProperty(proxy, fragmentKey, {                                                                    // 11505
          enumerable: false,                                                                                           // 11506
          value: object                                                                                                // 11507
        });                                                                                                            // 11508
        Object.defineProperty(proxy, didWarnKey, {                                                                     // 11509
          writable: true,                                                                                              // 11510
          enumerable: false,                                                                                           // 11511
          value: false                                                                                                 // 11512
        });                                                                                                            // 11513
        for (var key in object) {                                                                                      // 11514
          proxyPropertyAccessWithWarning(proxy, key);                                                                  // 11515
        }                                                                                                              // 11516
        Object.preventExtensions(proxy);                                                                               // 11517
        return proxy;                                                                                                  // 11518
      }                                                                                                                // 11519
    }                                                                                                                  // 11520
    return object;                                                                                                     // 11521
  },                                                                                                                   // 11522
  // Extract the original keyed object from the fragment opaque type. Warn if                                          // 11523
  // a plain object is passed here.                                                                                    // 11524
  extract: function(fragment) {                                                                                        // 11525
    if ("production" !== process.env.NODE_ENV) {                                                                       // 11526
      if (canWarnForReactFragment) {                                                                                   // 11527
        if (!fragment[fragmentKey]) {                                                                                  // 11528
          ("production" !== process.env.NODE_ENV ? warning(                                                            // 11529
            didWarnForFragment(fragment),                                                                              // 11530
            'Any use of a keyed object should be wrapped in ' +                                                        // 11531
            'React.addons.createFragment(object) before being passed as a ' +                                          // 11532
            'child.'                                                                                                   // 11533
          ) : null);                                                                                                   // 11534
          return fragment;                                                                                             // 11535
        }                                                                                                              // 11536
        return fragment[fragmentKey];                                                                                  // 11537
      }                                                                                                                // 11538
    }                                                                                                                  // 11539
    return fragment;                                                                                                   // 11540
  },                                                                                                                   // 11541
  // Check if this is a fragment and if so, extract the keyed object. If it                                            // 11542
  // is a fragment-like object, warn that it should be wrapped. Ignore if we                                           // 11543
  // can't determine what kind of object this is.                                                                      // 11544
  extractIfFragment: function(fragment) {                                                                              // 11545
    if ("production" !== process.env.NODE_ENV) {                                                                       // 11546
      if (canWarnForReactFragment) {                                                                                   // 11547
        // If it is the opaque type, return the keyed object.                                                          // 11548
        if (fragment[fragmentKey]) {                                                                                   // 11549
          return fragment[fragmentKey];                                                                                // 11550
        }                                                                                                              // 11551
        // Otherwise, check each property if it has an element, if it does                                             // 11552
        // it is probably meant as a fragment, so we can warn early. Defer,                                            // 11553
        // the warning to extract.                                                                                     // 11554
        for (var key in fragment) {                                                                                    // 11555
          if (fragment.hasOwnProperty(key) &&                                                                          // 11556
              ReactElement.isValidElement(fragment[key])) {                                                            // 11557
            // This looks like a fragment object, we should provide an                                                 // 11558
            // early warning.                                                                                          // 11559
            return ReactFragment.extract(fragment);                                                                    // 11560
          }                                                                                                            // 11561
        }                                                                                                              // 11562
      }                                                                                                                // 11563
    }                                                                                                                  // 11564
    return fragment;                                                                                                   // 11565
  }                                                                                                                    // 11566
};                                                                                                                     // 11567
                                                                                                                       // 11568
module.exports = ReactFragment;                                                                                        // 11569
                                                                                                                       // 11570
}).call(this,require('_process'))                                                                                      // 11571
                                                                                                                       // 11572
},{"./ReactElement":"react/lib/ReactElement","./warning":"react/lib/warning","_process":1}],"react/lib/ReactInjection":[function(require,module,exports){
/**                                                                                                                    // 11574
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 11575
 * All rights reserved.                                                                                                // 11576
 *                                                                                                                     // 11577
 * This source code is licensed under the BSD-style license found in the                                               // 11578
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 11579
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 11580
 *                                                                                                                     // 11581
 * @providesModule ReactInjection                                                                                      // 11582
 */                                                                                                                    // 11583
                                                                                                                       // 11584
'use strict';                                                                                                          // 11585
                                                                                                                       // 11586
var DOMProperty = require("./DOMProperty");                                                                            // 11587
var EventPluginHub = require("./EventPluginHub");                                                                      // 11588
var ReactComponentEnvironment = require("./ReactComponentEnvironment");                                                // 11589
var ReactClass = require("./ReactClass");                                                                              // 11590
var ReactEmptyComponent = require("./ReactEmptyComponent");                                                            // 11591
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");                                                  // 11592
var ReactNativeComponent = require("./ReactNativeComponent");                                                          // 11593
var ReactDOMComponent = require("./ReactDOMComponent");                                                                // 11594
var ReactPerf = require("./ReactPerf");                                                                                // 11595
var ReactRootIndex = require("./ReactRootIndex");                                                                      // 11596
var ReactUpdates = require("./ReactUpdates");                                                                          // 11597
                                                                                                                       // 11598
var ReactInjection = {                                                                                                 // 11599
  Component: ReactComponentEnvironment.injection,                                                                      // 11600
  Class: ReactClass.injection,                                                                                         // 11601
  DOMComponent: ReactDOMComponent.injection,                                                                           // 11602
  DOMProperty: DOMProperty.injection,                                                                                  // 11603
  EmptyComponent: ReactEmptyComponent.injection,                                                                       // 11604
  EventPluginHub: EventPluginHub.injection,                                                                            // 11605
  EventEmitter: ReactBrowserEventEmitter.injection,                                                                    // 11606
  NativeComponent: ReactNativeComponent.injection,                                                                     // 11607
  Perf: ReactPerf.injection,                                                                                           // 11608
  RootIndex: ReactRootIndex.injection,                                                                                 // 11609
  Updates: ReactUpdates.injection                                                                                      // 11610
};                                                                                                                     // 11611
                                                                                                                       // 11612
module.exports = ReactInjection;                                                                                       // 11613
                                                                                                                       // 11614
},{"./DOMProperty":"react/lib/DOMProperty","./EventPluginHub":"react/lib/EventPluginHub","./ReactBrowserEventEmitter":"react/lib/ReactBrowserEventEmitter","./ReactClass":"react/lib/ReactClass","./ReactComponentEnvironment":"react/lib/ReactComponentEnvironment","./ReactDOMComponent":"react/lib/ReactDOMComponent","./ReactEmptyComponent":"react/lib/ReactEmptyComponent","./ReactNativeComponent":"react/lib/ReactNativeComponent","./ReactPerf":"react/lib/ReactPerf","./ReactRootIndex":"react/lib/ReactRootIndex","./ReactUpdates":"react/lib/ReactUpdates"}],"react/lib/ReactInputSelection":[function(require,module,exports){
/**                                                                                                                    // 11616
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 11617
 * All rights reserved.                                                                                                // 11618
 *                                                                                                                     // 11619
 * This source code is licensed under the BSD-style license found in the                                               // 11620
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 11621
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 11622
 *                                                                                                                     // 11623
 * @providesModule ReactInputSelection                                                                                 // 11624
 */                                                                                                                    // 11625
                                                                                                                       // 11626
'use strict';                                                                                                          // 11627
                                                                                                                       // 11628
var ReactDOMSelection = require("./ReactDOMSelection");                                                                // 11629
                                                                                                                       // 11630
var containsNode = require("./containsNode");                                                                          // 11631
var focusNode = require("./focusNode");                                                                                // 11632
var getActiveElement = require("./getActiveElement");                                                                  // 11633
                                                                                                                       // 11634
function isInDocument(node) {                                                                                          // 11635
  return containsNode(document.documentElement, node);                                                                 // 11636
}                                                                                                                      // 11637
                                                                                                                       // 11638
/**                                                                                                                    // 11639
 * @ReactInputSelection: React input selection module. Based on Selection.js,                                          // 11640
 * but modified to be suitable for react and has a couple of bug fixes (doesn't                                        // 11641
 * assume buttons have range selections allowed).                                                                      // 11642
 * Input selection module for React.                                                                                   // 11643
 */                                                                                                                    // 11644
var ReactInputSelection = {                                                                                            // 11645
                                                                                                                       // 11646
  hasSelectionCapabilities: function(elem) {                                                                           // 11647
    return elem && (                                                                                                   // 11648
      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||                                                          // 11649
      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')                                                 // 11650
    );                                                                                                                 // 11651
  },                                                                                                                   // 11652
                                                                                                                       // 11653
  getSelectionInformation: function() {                                                                                // 11654
    var focusedElem = getActiveElement();                                                                              // 11655
    return {                                                                                                           // 11656
      focusedElem: focusedElem,                                                                                        // 11657
      selectionRange:                                                                                                  // 11658
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?                                                  // 11659
          ReactInputSelection.getSelection(focusedElem) :                                                              // 11660
          null                                                                                                         // 11661
    };                                                                                                                 // 11662
  },                                                                                                                   // 11663
                                                                                                                       // 11664
  /**                                                                                                                  // 11665
   * @restoreSelection: If any selection information was potentially lost,                                             // 11666
   * restore it. This is useful when performing operations that could remove dom                                       // 11667
   * nodes and place them back in, resulting in focus being lost.                                                      // 11668
   */                                                                                                                  // 11669
  restoreSelection: function(priorSelectionInformation) {                                                              // 11670
    var curFocusedElem = getActiveElement();                                                                           // 11671
    var priorFocusedElem = priorSelectionInformation.focusedElem;                                                      // 11672
    var priorSelectionRange = priorSelectionInformation.selectionRange;                                                // 11673
    if (curFocusedElem !== priorFocusedElem &&                                                                         // 11674
        isInDocument(priorFocusedElem)) {                                                                              // 11675
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {                                            // 11676
        ReactInputSelection.setSelection(                                                                              // 11677
          priorFocusedElem,                                                                                            // 11678
          priorSelectionRange                                                                                          // 11679
        );                                                                                                             // 11680
      }                                                                                                                // 11681
      focusNode(priorFocusedElem);                                                                                     // 11682
    }                                                                                                                  // 11683
  },                                                                                                                   // 11684
                                                                                                                       // 11685
  /**                                                                                                                  // 11686
   * @getSelection: Gets the selection bounds of a focused textarea, input or                                          // 11687
   * contentEditable node.                                                                                             // 11688
   * -@input: Look up selection bounds of this input                                                                   // 11689
   * -@return {start: selectionStart, end: selectionEnd}                                                               // 11690
   */                                                                                                                  // 11691
  getSelection: function(input) {                                                                                      // 11692
    var selection;                                                                                                     // 11693
                                                                                                                       // 11694
    if ('selectionStart' in input) {                                                                                   // 11695
      // Modern browser with input or textarea.                                                                        // 11696
      selection = {                                                                                                    // 11697
        start: input.selectionStart,                                                                                   // 11698
        end: input.selectionEnd                                                                                        // 11699
      };                                                                                                               // 11700
    } else if (document.selection && input.nodeName === 'INPUT') {                                                     // 11701
      // IE8 input.                                                                                                    // 11702
      var range = document.selection.createRange();                                                                    // 11703
      // There can only be one selection per document in IE, so it must                                                // 11704
      // be in our element.                                                                                            // 11705
      if (range.parentElement() === input) {                                                                           // 11706
        selection = {                                                                                                  // 11707
          start: -range.moveStart('character', -input.value.length),                                                   // 11708
          end: -range.moveEnd('character', -input.value.length)                                                        // 11709
        };                                                                                                             // 11710
      }                                                                                                                // 11711
    } else {                                                                                                           // 11712
      // Content editable or old IE textarea.                                                                          // 11713
      selection = ReactDOMSelection.getOffsets(input);                                                                 // 11714
    }                                                                                                                  // 11715
                                                                                                                       // 11716
    return selection || {start: 0, end: 0};                                                                            // 11717
  },                                                                                                                   // 11718
                                                                                                                       // 11719
  /**                                                                                                                  // 11720
   * @setSelection: Sets the selection bounds of a textarea or input and focuses                                       // 11721
   * the input.                                                                                                        // 11722
   * -@input     Set selection bounds of this input or textarea                                                        // 11723
   * -@offsets   Object of same form that is returned from get*                                                        // 11724
   */                                                                                                                  // 11725
  setSelection: function(input, offsets) {                                                                             // 11726
    var start = offsets.start;                                                                                         // 11727
    var end = offsets.end;                                                                                             // 11728
    if (typeof end === 'undefined') {                                                                                  // 11729
      end = start;                                                                                                     // 11730
    }                                                                                                                  // 11731
                                                                                                                       // 11732
    if ('selectionStart' in input) {                                                                                   // 11733
      input.selectionStart = start;                                                                                    // 11734
      input.selectionEnd = Math.min(end, input.value.length);                                                          // 11735
    } else if (document.selection && input.nodeName === 'INPUT') {                                                     // 11736
      var range = input.createTextRange();                                                                             // 11737
      range.collapse(true);                                                                                            // 11738
      range.moveStart('character', start);                                                                             // 11739
      range.moveEnd('character', end - start);                                                                         // 11740
      range.select();                                                                                                  // 11741
    } else {                                                                                                           // 11742
      ReactDOMSelection.setOffsets(input, offsets);                                                                    // 11743
    }                                                                                                                  // 11744
  }                                                                                                                    // 11745
};                                                                                                                     // 11746
                                                                                                                       // 11747
module.exports = ReactInputSelection;                                                                                  // 11748
                                                                                                                       // 11749
},{"./ReactDOMSelection":"react/lib/ReactDOMSelection","./containsNode":"react/lib/containsNode","./focusNode":"react/lib/focusNode","./getActiveElement":"react/lib/getActiveElement"}],"react/lib/ReactInstanceHandles":[function(require,module,exports){
(function (process){                                                                                                   // 11751
/**                                                                                                                    // 11752
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 11753
 * All rights reserved.                                                                                                // 11754
 *                                                                                                                     // 11755
 * This source code is licensed under the BSD-style license found in the                                               // 11756
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 11757
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 11758
 *                                                                                                                     // 11759
 * @providesModule ReactInstanceHandles                                                                                // 11760
 * @typechecks static-only                                                                                             // 11761
 */                                                                                                                    // 11762
                                                                                                                       // 11763
'use strict';                                                                                                          // 11764
                                                                                                                       // 11765
var ReactRootIndex = require("./ReactRootIndex");                                                                      // 11766
                                                                                                                       // 11767
var invariant = require("./invariant");                                                                                // 11768
                                                                                                                       // 11769
var SEPARATOR = '.';                                                                                                   // 11770
var SEPARATOR_LENGTH = SEPARATOR.length;                                                                               // 11771
                                                                                                                       // 11772
/**                                                                                                                    // 11773
 * Maximum depth of traversals before we consider the possibility of a bad ID.                                         // 11774
 */                                                                                                                    // 11775
var MAX_TREE_DEPTH = 100;                                                                                              // 11776
                                                                                                                       // 11777
/**                                                                                                                    // 11778
 * Creates a DOM ID prefix to use when mounting React components.                                                      // 11779
 *                                                                                                                     // 11780
 * @param {number} index A unique integer                                                                              // 11781
 * @return {string} React root ID.                                                                                     // 11782
 * @internal                                                                                                           // 11783
 */                                                                                                                    // 11784
function getReactRootIDString(index) {                                                                                 // 11785
  return SEPARATOR + index.toString(36);                                                                               // 11786
}                                                                                                                      // 11787
                                                                                                                       // 11788
/**                                                                                                                    // 11789
 * Checks if a character in the supplied ID is a separator or the end.                                                 // 11790
 *                                                                                                                     // 11791
 * @param {string} id A React DOM ID.                                                                                  // 11792
 * @param {number} index Index of the character to check.                                                              // 11793
 * @return {boolean} True if the character is a separator or end of the ID.                                            // 11794
 * @private                                                                                                            // 11795
 */                                                                                                                    // 11796
function isBoundary(id, index) {                                                                                       // 11797
  return id.charAt(index) === SEPARATOR || index === id.length;                                                        // 11798
}                                                                                                                      // 11799
                                                                                                                       // 11800
/**                                                                                                                    // 11801
 * Checks if the supplied string is a valid React DOM ID.                                                              // 11802
 *                                                                                                                     // 11803
 * @param {string} id A React DOM ID, maybe.                                                                           // 11804
 * @return {boolean} True if the string is a valid React DOM ID.                                                       // 11805
 * @private                                                                                                            // 11806
 */                                                                                                                    // 11807
function isValidID(id) {                                                                                               // 11808
  return id === '' || (                                                                                                // 11809
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR                                               // 11810
  );                                                                                                                   // 11811
}                                                                                                                      // 11812
                                                                                                                       // 11813
/**                                                                                                                    // 11814
 * Checks if the first ID is an ancestor of or equal to the second ID.                                                 // 11815
 *                                                                                                                     // 11816
 * @param {string} ancestorID                                                                                          // 11817
 * @param {string} descendantID                                                                                        // 11818
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.                                            // 11819
 * @internal                                                                                                           // 11820
 */                                                                                                                    // 11821
function isAncestorIDOf(ancestorID, descendantID) {                                                                    // 11822
  return (                                                                                                             // 11823
    descendantID.indexOf(ancestorID) === 0 &&                                                                          // 11824
    isBoundary(descendantID, ancestorID.length)                                                                        // 11825
  );                                                                                                                   // 11826
}                                                                                                                      // 11827
                                                                                                                       // 11828
/**                                                                                                                    // 11829
 * Gets the parent ID of the supplied React DOM ID, `id`.                                                              // 11830
 *                                                                                                                     // 11831
 * @param {string} id ID of a component.                                                                               // 11832
 * @return {string} ID of the parent, or an empty string.                                                              // 11833
 * @private                                                                                                            // 11834
 */                                                                                                                    // 11835
function getParentID(id) {                                                                                             // 11836
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';                                                            // 11837
}                                                                                                                      // 11838
                                                                                                                       // 11839
/**                                                                                                                    // 11840
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the                                         // 11841
 * supplied `destinationID`. If they are equal, the ID is returned.                                                    // 11842
 *                                                                                                                     // 11843
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.                                               // 11844
 * @param {string} destinationID ID of the destination node.                                                           // 11845
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.                                          // 11846
 * @private                                                                                                            // 11847
 */                                                                                                                    // 11848
function getNextDescendantID(ancestorID, destinationID) {                                                              // 11849
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 11850
    isValidID(ancestorID) && isValidID(destinationID),                                                                 // 11851
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',                                                  // 11852
    ancestorID,                                                                                                        // 11853
    destinationID                                                                                                      // 11854
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));                                                   // 11855
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 11856
    isAncestorIDOf(ancestorID, destinationID),                                                                         // 11857
    'getNextDescendantID(...): React has made an invalid assumption about ' +                                          // 11858
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',                                                     // 11859
    ancestorID,                                                                                                        // 11860
    destinationID                                                                                                      // 11861
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));                                                           // 11862
  if (ancestorID === destinationID) {                                                                                  // 11863
    return ancestorID;                                                                                                 // 11864
  }                                                                                                                    // 11865
  // Skip over the ancestor and the immediate separator. Traverse until we hit                                         // 11866
  // another separator or we reach the end of `destinationID`.                                                         // 11867
  var start = ancestorID.length + SEPARATOR_LENGTH;                                                                    // 11868
  var i;                                                                                                               // 11869
  for (i = start; i < destinationID.length; i++) {                                                                     // 11870
    if (isBoundary(destinationID, i)) {                                                                                // 11871
      break;                                                                                                           // 11872
    }                                                                                                                  // 11873
  }                                                                                                                    // 11874
  return destinationID.substr(0, i);                                                                                   // 11875
}                                                                                                                      // 11876
                                                                                                                       // 11877
/**                                                                                                                    // 11878
 * Gets the nearest common ancestor ID of two IDs.                                                                     // 11879
 *                                                                                                                     // 11880
 * Using this ID scheme, the nearest common ancestor ID is the longest common                                          // 11881
 * prefix of the two IDs that immediately preceded a "marker" in both strings.                                         // 11882
 *                                                                                                                     // 11883
 * @param {string} oneID                                                                                               // 11884
 * @param {string} twoID                                                                                               // 11885
 * @return {string} Nearest common ancestor ID, or the empty string if none.                                           // 11886
 * @private                                                                                                            // 11887
 */                                                                                                                    // 11888
function getFirstCommonAncestorID(oneID, twoID) {                                                                      // 11889
  var minLength = Math.min(oneID.length, twoID.length);                                                                // 11890
  if (minLength === 0) {                                                                                               // 11891
    return '';                                                                                                         // 11892
  }                                                                                                                    // 11893
  var lastCommonMarkerIndex = 0;                                                                                       // 11894
  // Use `<=` to traverse until the "EOL" of the shorter string.                                                       // 11895
  for (var i = 0; i <= minLength; i++) {                                                                               // 11896
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {                                                                // 11897
      lastCommonMarkerIndex = i;                                                                                       // 11898
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {                                                                  // 11899
      break;                                                                                                           // 11900
    }                                                                                                                  // 11901
  }                                                                                                                    // 11902
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);                                                        // 11903
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 11904
    isValidID(longestCommonID),                                                                                        // 11905
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',                                             // 11906
    oneID,                                                                                                             // 11907
    twoID,                                                                                                             // 11908
    longestCommonID                                                                                                    // 11909
  ) : invariant(isValidID(longestCommonID)));                                                                          // 11910
  return longestCommonID;                                                                                              // 11911
}                                                                                                                      // 11912
                                                                                                                       // 11913
/**                                                                                                                    // 11914
 * Traverses the parent path between two IDs (either up or down). The IDs must                                         // 11915
 * not be the same, and there must exist a parent path between them. If the                                            // 11916
 * callback returns `false`, traversal is stopped.                                                                     // 11917
 *                                                                                                                     // 11918
 * @param {?string} start ID at which to start traversal.                                                              // 11919
 * @param {?string} stop ID at which to end traversal.                                                                 // 11920
 * @param {function} cb Callback to invoke each ID with.                                                               // 11921
 * @param {?boolean} skipFirst Whether or not to skip the first node.                                                  // 11922
 * @param {?boolean} skipLast Whether or not to skip the last node.                                                    // 11923
 * @private                                                                                                            // 11924
 */                                                                                                                    // 11925
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {                                               // 11926
  start = start || '';                                                                                                 // 11927
  stop = stop || '';                                                                                                   // 11928
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 11929
    start !== stop,                                                                                                    // 11930
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',                                         // 11931
    start                                                                                                              // 11932
  ) : invariant(start !== stop));                                                                                      // 11933
  var traverseUp = isAncestorIDOf(stop, start);                                                                        // 11934
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 11935
    traverseUp || isAncestorIDOf(start, stop),                                                                         // 11936
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +                                         // 11937
    'not have a parent path.',                                                                                         // 11938
    start,                                                                                                             // 11939
    stop                                                                                                               // 11940
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));                                                           // 11941
  // Traverse from `start` to `stop` one depth at a time.                                                              // 11942
  var depth = 0;                                                                                                       // 11943
  var traverse = traverseUp ? getParentID : getNextDescendantID;                                                       // 11944
  for (var id = start; /* until break */; id = traverse(id, stop)) {                                                   // 11945
    var ret;                                                                                                           // 11946
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {                                                  // 11947
      ret = cb(id, traverseUp, arg);                                                                                   // 11948
    }                                                                                                                  // 11949
    if (ret === false || id === stop) {                                                                                // 11950
      // Only break //after// visiting `stop`.                                                                         // 11951
      break;                                                                                                           // 11952
    }                                                                                                                  // 11953
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 11954
      depth++ < MAX_TREE_DEPTH,                                                                                        // 11955
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +                                            // 11956
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',                                        // 11957
      start, stop                                                                                                      // 11958
    ) : invariant(depth++ < MAX_TREE_DEPTH));                                                                          // 11959
  }                                                                                                                    // 11960
}                                                                                                                      // 11961
                                                                                                                       // 11962
/**                                                                                                                    // 11963
 * Manages the IDs assigned to DOM representations of React components. This                                           // 11964
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in                                            // 11965
 * order to simulate events).                                                                                          // 11966
 *                                                                                                                     // 11967
 * @internal                                                                                                           // 11968
 */                                                                                                                    // 11969
var ReactInstanceHandles = {                                                                                           // 11970
                                                                                                                       // 11971
  /**                                                                                                                  // 11972
   * Constructs a React root ID                                                                                        // 11973
   * @return {string} A React root ID.                                                                                 // 11974
   */                                                                                                                  // 11975
  createReactRootID: function() {                                                                                      // 11976
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());                                                // 11977
  },                                                                                                                   // 11978
                                                                                                                       // 11979
  /**                                                                                                                  // 11980
   * Constructs a React ID by joining a root ID with a name.                                                           // 11981
   *                                                                                                                   // 11982
   * @param {string} rootID Root ID of a parent component.                                                             // 11983
   * @param {string} name A component's name (as flattened children).                                                  // 11984
   * @return {string} A React ID.                                                                                      // 11985
   * @internal                                                                                                         // 11986
   */                                                                                                                  // 11987
  createReactID: function(rootID, name) {                                                                              // 11988
    return rootID + name;                                                                                              // 11989
  },                                                                                                                   // 11990
                                                                                                                       // 11991
  /**                                                                                                                  // 11992
   * Gets the DOM ID of the React component that is the root of the tree that                                          // 11993
   * contains the React component with the supplied DOM ID.                                                            // 11994
   *                                                                                                                   // 11995
   * @param {string} id DOM ID of a React component.                                                                   // 11996
   * @return {?string} DOM ID of the React component that is the root.                                                 // 11997
   * @internal                                                                                                         // 11998
   */                                                                                                                  // 11999
  getReactRootIDFromNodeID: function(id) {                                                                             // 12000
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {                                                           // 12001
      var index = id.indexOf(SEPARATOR, 1);                                                                            // 12002
      return index > -1 ? id.substr(0, index) : id;                                                                    // 12003
    }                                                                                                                  // 12004
    return null;                                                                                                       // 12005
  },                                                                                                                   // 12006
                                                                                                                       // 12007
  /**                                                                                                                  // 12008
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that                                          // 12009
   * should would receive a `mouseEnter` or `mouseLeave` event.                                                        // 12010
   *                                                                                                                   // 12011
   * NOTE: Does not invoke the callback on the nearest common ancestor because                                         // 12012
   * nothing "entered" or "left" that element.                                                                         // 12013
   *                                                                                                                   // 12014
   * @param {string} leaveID ID being left.                                                                            // 12015
   * @param {string} enterID ID being entered.                                                                         // 12016
   * @param {function} cb Callback to invoke on each entered/left ID.                                                  // 12017
   * @param {*} upArg Argument to invoke the callback with on left IDs.                                                // 12018
   * @param {*} downArg Argument to invoke the callback with on entered IDs.                                           // 12019
   * @internal                                                                                                         // 12020
   */                                                                                                                  // 12021
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {                                                 // 12022
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);                                                       // 12023
    if (ancestorID !== leaveID) {                                                                                      // 12024
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);                                                 // 12025
    }                                                                                                                  // 12026
    if (ancestorID !== enterID) {                                                                                      // 12027
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);                                               // 12028
    }                                                                                                                  // 12029
  },                                                                                                                   // 12030
                                                                                                                       // 12031
  /**                                                                                                                  // 12032
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.                                            // 12033
   *                                                                                                                   // 12034
   * NOTE: This traversal happens on IDs without touching the DOM.                                                     // 12035
   *                                                                                                                   // 12036
   * @param {string} targetID ID of the target node.                                                                   // 12037
   * @param {function} cb Callback to invoke.                                                                          // 12038
   * @param {*} arg Argument to invoke the callback with.                                                              // 12039
   * @internal                                                                                                         // 12040
   */                                                                                                                  // 12041
  traverseTwoPhase: function(targetID, cb, arg) {                                                                      // 12042
    if (targetID) {                                                                                                    // 12043
      traverseParentPath('', targetID, cb, arg, true, false);                                                          // 12044
      traverseParentPath(targetID, '', cb, arg, false, true);                                                          // 12045
    }                                                                                                                  // 12046
  },                                                                                                                   // 12047
                                                                                                                       // 12048
  /**                                                                                                                  // 12049
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For                                           // 12050
   * example, passing `.0.$row-0.1` would result in `cb` getting called                                                // 12051
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.                                                                        // 12052
   *                                                                                                                   // 12053
   * NOTE: This traversal happens on IDs without touching the DOM.                                                     // 12054
   *                                                                                                                   // 12055
   * @param {string} targetID ID of the target node.                                                                   // 12056
   * @param {function} cb Callback to invoke.                                                                          // 12057
   * @param {*} arg Argument to invoke the callback with.                                                              // 12058
   * @internal                                                                                                         // 12059
   */                                                                                                                  // 12060
  traverseAncestors: function(targetID, cb, arg) {                                                                     // 12061
    traverseParentPath('', targetID, cb, arg, true, false);                                                            // 12062
  },                                                                                                                   // 12063
                                                                                                                       // 12064
  /**                                                                                                                  // 12065
   * Exposed for unit testing.                                                                                         // 12066
   * @private                                                                                                          // 12067
   */                                                                                                                  // 12068
  _getFirstCommonAncestorID: getFirstCommonAncestorID,                                                                 // 12069
                                                                                                                       // 12070
  /**                                                                                                                  // 12071
   * Exposed for unit testing.                                                                                         // 12072
   * @private                                                                                                          // 12073
   */                                                                                                                  // 12074
  _getNextDescendantID: getNextDescendantID,                                                                           // 12075
                                                                                                                       // 12076
  isAncestorIDOf: isAncestorIDOf,                                                                                      // 12077
                                                                                                                       // 12078
  SEPARATOR: SEPARATOR                                                                                                 // 12079
                                                                                                                       // 12080
};                                                                                                                     // 12081
                                                                                                                       // 12082
module.exports = ReactInstanceHandles;                                                                                 // 12083
                                                                                                                       // 12084
}).call(this,require('_process'))                                                                                      // 12085
                                                                                                                       // 12086
},{"./ReactRootIndex":"react/lib/ReactRootIndex","./invariant":"react/lib/invariant","_process":1}],"react/lib/ReactInstanceMap":[function(require,module,exports){
/**                                                                                                                    // 12088
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 12089
 * All rights reserved.                                                                                                // 12090
 *                                                                                                                     // 12091
 * This source code is licensed under the BSD-style license found in the                                               // 12092
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 12093
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 12094
 *                                                                                                                     // 12095
 * @providesModule ReactInstanceMap                                                                                    // 12096
 */                                                                                                                    // 12097
                                                                                                                       // 12098
'use strict';                                                                                                          // 12099
                                                                                                                       // 12100
/**                                                                                                                    // 12101
 * `ReactInstanceMap` maintains a mapping from a public facing stateful                                                // 12102
 * instance (key) and the internal representation (value). This allows public                                          // 12103
 * methods to accept the user facing instance as an argument and map them back                                         // 12104
 * to internal methods.                                                                                                // 12105
 */                                                                                                                    // 12106
                                                                                                                       // 12107
// TODO: Replace this with ES6: var ReactInstanceMap = new Map();                                                      // 12108
var ReactInstanceMap = {                                                                                               // 12109
                                                                                                                       // 12110
  /**                                                                                                                  // 12111
   * This API should be called `delete` but we'd have to make sure to always                                           // 12112
   * transform these to strings for IE support. When this transform is fully                                           // 12113
   * supported we can rename it.                                                                                       // 12114
   */                                                                                                                  // 12115
  remove: function(key) {                                                                                              // 12116
    key._reactInternalInstance = undefined;                                                                            // 12117
  },                                                                                                                   // 12118
                                                                                                                       // 12119
  get: function(key) {                                                                                                 // 12120
    return key._reactInternalInstance;                                                                                 // 12121
  },                                                                                                                   // 12122
                                                                                                                       // 12123
  has: function(key) {                                                                                                 // 12124
    return key._reactInternalInstance !== undefined;                                                                   // 12125
  },                                                                                                                   // 12126
                                                                                                                       // 12127
  set: function(key, value) {                                                                                          // 12128
    key._reactInternalInstance = value;                                                                                // 12129
  }                                                                                                                    // 12130
                                                                                                                       // 12131
};                                                                                                                     // 12132
                                                                                                                       // 12133
module.exports = ReactInstanceMap;                                                                                     // 12134
                                                                                                                       // 12135
},{}],"react/lib/ReactLifeCycle":[function(require,module,exports){                                                    // 12136
/**                                                                                                                    // 12137
 * Copyright 2015, Facebook, Inc.                                                                                      // 12138
 * All rights reserved.                                                                                                // 12139
 *                                                                                                                     // 12140
 * This source code is licensed under the BSD-style license found in the                                               // 12141
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 12142
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 12143
 *                                                                                                                     // 12144
 * @providesModule ReactLifeCycle                                                                                      // 12145
 */                                                                                                                    // 12146
                                                                                                                       // 12147
'use strict';                                                                                                          // 12148
                                                                                                                       // 12149
/**                                                                                                                    // 12150
 * This module manages the bookkeeping when a component is in the process                                              // 12151
 * of being mounted or being unmounted. This is used as a way to enforce                                               // 12152
 * invariants (or warnings) when it is not recommended to call                                                         // 12153
 * setState/forceUpdate.                                                                                               // 12154
 *                                                                                                                     // 12155
 * currentlyMountingInstance: During the construction phase, it is not possible                                        // 12156
 * to trigger an update since the instance is not fully mounted yet. However, we                                       // 12157
 * currently allow this as a convenience for mutating the initial state.                                               // 12158
 *                                                                                                                     // 12159
 * currentlyUnmountingInstance: During the unmounting phase, the instance is                                           // 12160
 * still mounted and can therefore schedule an update. However, this is not                                            // 12161
 * recommended and probably an error since it's about to be unmounted.                                                 // 12162
 * Therefore we still want to trigger in an error for that case.                                                       // 12163
 */                                                                                                                    // 12164
                                                                                                                       // 12165
var ReactLifeCycle = {                                                                                                 // 12166
  currentlyMountingInstance: null,                                                                                     // 12167
  currentlyUnmountingInstance: null                                                                                    // 12168
};                                                                                                                     // 12169
                                                                                                                       // 12170
module.exports = ReactLifeCycle;                                                                                       // 12171
                                                                                                                       // 12172
},{}],"react/lib/ReactLink":[function(require,module,exports){                                                         // 12173
/**                                                                                                                    // 12174
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 12175
 * All rights reserved.                                                                                                // 12176
 *                                                                                                                     // 12177
 * This source code is licensed under the BSD-style license found in the                                               // 12178
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 12179
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 12180
 *                                                                                                                     // 12181
 * @providesModule ReactLink                                                                                           // 12182
 * @typechecks static-only                                                                                             // 12183
 */                                                                                                                    // 12184
                                                                                                                       // 12185
'use strict';                                                                                                          // 12186
                                                                                                                       // 12187
/**                                                                                                                    // 12188
 * ReactLink encapsulates a common pattern in which a component wants to modify                                        // 12189
 * a prop received from its parent. ReactLink allows the parent to pass down a                                         // 12190
 * value coupled with a callback that, when invoked, expresses an intent to                                            // 12191
 * modify that value. For example:                                                                                     // 12192
 *                                                                                                                     // 12193
 * React.createClass({                                                                                                 // 12194
 *   getInitialState: function() {                                                                                     // 12195
 *     return {value: ''};                                                                                             // 12196
 *   },                                                                                                                // 12197
 *   render: function() {                                                                                              // 12198
 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);                                       // 12199
 *     return <input valueLink={valueLink} />;                                                                         // 12200
 *   },                                                                                                                // 12201
 *   this._handleValueChange: function(newValue) {                                                                     // 12202
 *     this.setState({value: newValue});                                                                               // 12203
 *   }                                                                                                                 // 12204
 * });                                                                                                                 // 12205
 *                                                                                                                     // 12206
 * We have provided some sugary mixins to make the creation and                                                        // 12207
 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.                                         // 12208
 */                                                                                                                    // 12209
                                                                                                                       // 12210
var React = require("./React");                                                                                        // 12211
                                                                                                                       // 12212
/**                                                                                                                    // 12213
 * @param {*} value current value of the link                                                                          // 12214
 * @param {function} requestChange callback to request a change                                                        // 12215
 */                                                                                                                    // 12216
function ReactLink(value, requestChange) {                                                                             // 12217
  this.value = value;                                                                                                  // 12218
  this.requestChange = requestChange;                                                                                  // 12219
}                                                                                                                      // 12220
                                                                                                                       // 12221
/**                                                                                                                    // 12222
 * Creates a PropType that enforces the ReactLink API and optionally checks the                                        // 12223
 * type of the value being passed inside the link. Example:                                                            // 12224
 *                                                                                                                     // 12225
 * MyComponent.propTypes = {                                                                                           // 12226
 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)                                                    // 12227
 * }                                                                                                                   // 12228
 */                                                                                                                    // 12229
function createLinkTypeChecker(linkType) {                                                                             // 12230
  var shapes = {                                                                                                       // 12231
    value: typeof linkType === 'undefined' ?                                                                           // 12232
      React.PropTypes.any.isRequired :                                                                                 // 12233
      linkType.isRequired,                                                                                             // 12234
    requestChange: React.PropTypes.func.isRequired                                                                     // 12235
  };                                                                                                                   // 12236
  return React.PropTypes.shape(shapes);                                                                                // 12237
}                                                                                                                      // 12238
                                                                                                                       // 12239
ReactLink.PropTypes = {                                                                                                // 12240
  link: createLinkTypeChecker                                                                                          // 12241
};                                                                                                                     // 12242
                                                                                                                       // 12243
module.exports = ReactLink;                                                                                            // 12244
                                                                                                                       // 12245
},{"./React":"react/lib/React"}],"react/lib/ReactMarkupChecksum":[function(require,module,exports){                    // 12246
/**                                                                                                                    // 12247
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 12248
 * All rights reserved.                                                                                                // 12249
 *                                                                                                                     // 12250
 * This source code is licensed under the BSD-style license found in the                                               // 12251
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 12252
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 12253
 *                                                                                                                     // 12254
 * @providesModule ReactMarkupChecksum                                                                                 // 12255
 */                                                                                                                    // 12256
                                                                                                                       // 12257
'use strict';                                                                                                          // 12258
                                                                                                                       // 12259
var adler32 = require("./adler32");                                                                                    // 12260
                                                                                                                       // 12261
var ReactMarkupChecksum = {                                                                                            // 12262
  CHECKSUM_ATTR_NAME: 'data-react-checksum',                                                                           // 12263
                                                                                                                       // 12264
  /**                                                                                                                  // 12265
   * @param {string} markup Markup string                                                                              // 12266
   * @return {string} Markup string with checksum attribute attached                                                   // 12267
   */                                                                                                                  // 12268
  addChecksumToMarkup: function(markup) {                                                                              // 12269
    var checksum = adler32(markup);                                                                                    // 12270
    return markup.replace(                                                                                             // 12271
      '>',                                                                                                             // 12272
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'                                            // 12273
    );                                                                                                                 // 12274
  },                                                                                                                   // 12275
                                                                                                                       // 12276
  /**                                                                                                                  // 12277
   * @param {string} markup to use                                                                                     // 12278
   * @param {DOMElement} element root React element                                                                    // 12279
   * @returns {boolean} whether or not the markup is the same                                                          // 12280
   */                                                                                                                  // 12281
  canReuseMarkup: function(markup, element) {                                                                          // 12282
    var existingChecksum = element.getAttribute(                                                                       // 12283
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME                                                                           // 12284
    );                                                                                                                 // 12285
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);                                             // 12286
    var markupChecksum = adler32(markup);                                                                              // 12287
    return markupChecksum === existingChecksum;                                                                        // 12288
  }                                                                                                                    // 12289
};                                                                                                                     // 12290
                                                                                                                       // 12291
module.exports = ReactMarkupChecksum;                                                                                  // 12292
                                                                                                                       // 12293
},{"./adler32":"react/lib/adler32"}],"react/lib/ReactMount":[function(require,module,exports){                         // 12294
(function (process){                                                                                                   // 12295
/**                                                                                                                    // 12296
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 12297
 * All rights reserved.                                                                                                // 12298
 *                                                                                                                     // 12299
 * This source code is licensed under the BSD-style license found in the                                               // 12300
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 12301
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 12302
 *                                                                                                                     // 12303
 * @providesModule ReactMount                                                                                          // 12304
 */                                                                                                                    // 12305
                                                                                                                       // 12306
'use strict';                                                                                                          // 12307
                                                                                                                       // 12308
var DOMProperty = require("./DOMProperty");                                                                            // 12309
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");                                                  // 12310
var ReactCurrentOwner = require("./ReactCurrentOwner");                                                                // 12311
var ReactElement = require("./ReactElement");                                                                          // 12312
var ReactElementValidator = require("./ReactElementValidator");                                                        // 12313
var ReactEmptyComponent = require("./ReactEmptyComponent");                                                            // 12314
var ReactInstanceHandles = require("./ReactInstanceHandles");                                                          // 12315
var ReactInstanceMap = require("./ReactInstanceMap");                                                                  // 12316
var ReactMarkupChecksum = require("./ReactMarkupChecksum");                                                            // 12317
var ReactPerf = require("./ReactPerf");                                                                                // 12318
var ReactReconciler = require("./ReactReconciler");                                                                    // 12319
var ReactUpdateQueue = require("./ReactUpdateQueue");                                                                  // 12320
var ReactUpdates = require("./ReactUpdates");                                                                          // 12321
                                                                                                                       // 12322
var emptyObject = require("./emptyObject");                                                                            // 12323
var containsNode = require("./containsNode");                                                                          // 12324
var getReactRootElementInContainer = require("./getReactRootElementInContainer");                                      // 12325
var instantiateReactComponent = require("./instantiateReactComponent");                                                // 12326
var invariant = require("./invariant");                                                                                // 12327
var setInnerHTML = require("./setInnerHTML");                                                                          // 12328
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");                                              // 12329
var warning = require("./warning");                                                                                    // 12330
                                                                                                                       // 12331
var SEPARATOR = ReactInstanceHandles.SEPARATOR;                                                                        // 12332
                                                                                                                       // 12333
var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;                                                                         // 12334
var nodeCache = {};                                                                                                    // 12335
                                                                                                                       // 12336
var ELEMENT_NODE_TYPE = 1;                                                                                             // 12337
var DOC_NODE_TYPE = 9;                                                                                                 // 12338
                                                                                                                       // 12339
/** Mapping from reactRootID to React component instance. */                                                           // 12340
var instancesByReactRootID = {};                                                                                       // 12341
                                                                                                                       // 12342
/** Mapping from reactRootID to `container` nodes. */                                                                  // 12343
var containersByReactRootID = {};                                                                                      // 12344
                                                                                                                       // 12345
if ("production" !== process.env.NODE_ENV) {                                                                           // 12346
  /** __DEV__-only mapping from reactRootID to root elements. */                                                       // 12347
  var rootElementsByReactRootID = {};                                                                                  // 12348
}                                                                                                                      // 12349
                                                                                                                       // 12350
// Used to store breadth-first search state in findComponentRoot.                                                      // 12351
var findComponentRootReusableArray = [];                                                                               // 12352
                                                                                                                       // 12353
/**                                                                                                                    // 12354
 * Finds the index of the first character                                                                              // 12355
 * that's not common between the two given strings.                                                                    // 12356
 *                                                                                                                     // 12357
 * @return {number} the index of the character where the strings diverge                                               // 12358
 */                                                                                                                    // 12359
function firstDifferenceIndex(string1, string2) {                                                                      // 12360
  var minLen = Math.min(string1.length, string2.length);                                                               // 12361
  for (var i = 0; i < minLen; i++) {                                                                                   // 12362
    if (string1.charAt(i) !== string2.charAt(i)) {                                                                     // 12363
      return i;                                                                                                        // 12364
    }                                                                                                                  // 12365
  }                                                                                                                    // 12366
  return string1.length === string2.length ? -1 : minLen;                                                              // 12367
}                                                                                                                      // 12368
                                                                                                                       // 12369
/**                                                                                                                    // 12370
 * @param {DOMElement} container DOM element that may contain a React component.                                       // 12371
 * @return {?string} A "reactRoot" ID, if a React component is rendered.                                               // 12372
 */                                                                                                                    // 12373
function getReactRootID(container) {                                                                                   // 12374
  var rootElement = getReactRootElementInContainer(container);                                                         // 12375
  return rootElement && ReactMount.getID(rootElement);                                                                 // 12376
}                                                                                                                      // 12377
                                                                                                                       // 12378
/**                                                                                                                    // 12379
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form                                              // 12380
 * element can return its control whose name or ID equals ATTR_NAME. All                                               // 12381
 * DOM nodes support `getAttributeNode` but this can also get called on                                                // 12382
 * other objects so just return '' if we're given something other than a                                               // 12383
 * DOM node (such as window).                                                                                          // 12384
 *                                                                                                                     // 12385
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.                                               // 12386
 * @return {string} ID of the supplied `domNode`.                                                                      // 12387
 */                                                                                                                    // 12388
function getID(node) {                                                                                                 // 12389
  var id = internalGetID(node);                                                                                        // 12390
  if (id) {                                                                                                            // 12391
    if (nodeCache.hasOwnProperty(id)) {                                                                                // 12392
      var cached = nodeCache[id];                                                                                      // 12393
      if (cached !== node) {                                                                                           // 12394
        ("production" !== process.env.NODE_ENV ? invariant(                                                            // 12395
          !isValid(cached, id),                                                                                        // 12396
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',                                            // 12397
          ATTR_NAME, id                                                                                                // 12398
        ) : invariant(!isValid(cached, id)));                                                                          // 12399
                                                                                                                       // 12400
        nodeCache[id] = node;                                                                                          // 12401
      }                                                                                                                // 12402
    } else {                                                                                                           // 12403
      nodeCache[id] = node;                                                                                            // 12404
    }                                                                                                                  // 12405
  }                                                                                                                    // 12406
                                                                                                                       // 12407
  return id;                                                                                                           // 12408
}                                                                                                                      // 12409
                                                                                                                       // 12410
function internalGetID(node) {                                                                                         // 12411
  // If node is something like a window, document, or text node, none of                                               // 12412
  // which support attributes or a .getAttribute method, gracefully return                                             // 12413
  // the empty string, as if the attribute were missing.                                                               // 12414
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';                                              // 12415
}                                                                                                                      // 12416
                                                                                                                       // 12417
/**                                                                                                                    // 12418
 * Sets the React-specific ID of the given node.                                                                       // 12419
 *                                                                                                                     // 12420
 * @param {DOMElement} node The DOM node whose ID will be set.                                                         // 12421
 * @param {string} id The value of the ID attribute.                                                                   // 12422
 */                                                                                                                    // 12423
function setID(node, id) {                                                                                             // 12424
  var oldID = internalGetID(node);                                                                                     // 12425
  if (oldID !== id) {                                                                                                  // 12426
    delete nodeCache[oldID];                                                                                           // 12427
  }                                                                                                                    // 12428
  node.setAttribute(ATTR_NAME, id);                                                                                    // 12429
  nodeCache[id] = node;                                                                                                // 12430
}                                                                                                                      // 12431
                                                                                                                       // 12432
/**                                                                                                                    // 12433
 * Finds the node with the supplied React-generated DOM ID.                                                            // 12434
 *                                                                                                                     // 12435
 * @param {string} id A React-generated DOM ID.                                                                        // 12436
 * @return {DOMElement} DOM node with the suppled `id`.                                                                // 12437
 * @internal                                                                                                           // 12438
 */                                                                                                                    // 12439
function getNode(id) {                                                                                                 // 12440
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {                                                  // 12441
    nodeCache[id] = ReactMount.findReactNodeByID(id);                                                                  // 12442
  }                                                                                                                    // 12443
  return nodeCache[id];                                                                                                // 12444
}                                                                                                                      // 12445
                                                                                                                       // 12446
/**                                                                                                                    // 12447
 * Finds the node with the supplied public React instance.                                                             // 12448
 *                                                                                                                     // 12449
 * @param {*} instance A public React instance.                                                                        // 12450
 * @return {?DOMElement} DOM node with the suppled `id`.                                                               // 12451
 * @internal                                                                                                           // 12452
 */                                                                                                                    // 12453
function getNodeFromInstance(instance) {                                                                               // 12454
  var id = ReactInstanceMap.get(instance)._rootNodeID;                                                                 // 12455
  if (ReactEmptyComponent.isNullComponentID(id)) {                                                                     // 12456
    return null;                                                                                                       // 12457
  }                                                                                                                    // 12458
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {                                                  // 12459
    nodeCache[id] = ReactMount.findReactNodeByID(id);                                                                  // 12460
  }                                                                                                                    // 12461
  return nodeCache[id];                                                                                                // 12462
}                                                                                                                      // 12463
                                                                                                                       // 12464
/**                                                                                                                    // 12465
 * A node is "valid" if it is contained by a currently mounted container.                                              // 12466
 *                                                                                                                     // 12467
 * This means that the node does not have to be contained by a document in                                             // 12468
 * order to be considered valid.                                                                                       // 12469
 *                                                                                                                     // 12470
 * @param {?DOMElement} node The candidate DOM node.                                                                   // 12471
 * @param {string} id The expected ID of the node.                                                                     // 12472
 * @return {boolean} Whether the node is contained by a mounted container.                                             // 12473
 */                                                                                                                    // 12474
function isValid(node, id) {                                                                                           // 12475
  if (node) {                                                                                                          // 12476
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 12477
      internalGetID(node) === id,                                                                                      // 12478
      'ReactMount: Unexpected modification of `%s`',                                                                   // 12479
      ATTR_NAME                                                                                                        // 12480
    ) : invariant(internalGetID(node) === id));                                                                        // 12481
                                                                                                                       // 12482
    var container = ReactMount.findReactContainerForID(id);                                                            // 12483
    if (container && containsNode(container, node)) {                                                                  // 12484
      return true;                                                                                                     // 12485
    }                                                                                                                  // 12486
  }                                                                                                                    // 12487
                                                                                                                       // 12488
  return false;                                                                                                        // 12489
}                                                                                                                      // 12490
                                                                                                                       // 12491
/**                                                                                                                    // 12492
 * Causes the cache to forget about one React-specific ID.                                                             // 12493
 *                                                                                                                     // 12494
 * @param {string} id The ID to forget.                                                                                // 12495
 */                                                                                                                    // 12496
function purgeID(id) {                                                                                                 // 12497
  delete nodeCache[id];                                                                                                // 12498
}                                                                                                                      // 12499
                                                                                                                       // 12500
var deepestNodeSoFar = null;                                                                                           // 12501
function findDeepestCachedAncestorImpl(ancestorID) {                                                                   // 12502
  var ancestor = nodeCache[ancestorID];                                                                                // 12503
  if (ancestor && isValid(ancestor, ancestorID)) {                                                                     // 12504
    deepestNodeSoFar = ancestor;                                                                                       // 12505
  } else {                                                                                                             // 12506
    // This node isn't populated in the cache, so presumably none of its                                               // 12507
    // descendants are. Break out of the loop.                                                                         // 12508
    return false;                                                                                                      // 12509
  }                                                                                                                    // 12510
}                                                                                                                      // 12511
                                                                                                                       // 12512
/**                                                                                                                    // 12513
 * Return the deepest cached node whose ID is a prefix of `targetID`.                                                  // 12514
 */                                                                                                                    // 12515
function findDeepestCachedAncestor(targetID) {                                                                         // 12516
  deepestNodeSoFar = null;                                                                                             // 12517
  ReactInstanceHandles.traverseAncestors(                                                                              // 12518
    targetID,                                                                                                          // 12519
    findDeepestCachedAncestorImpl                                                                                      // 12520
  );                                                                                                                   // 12521
                                                                                                                       // 12522
  var foundNode = deepestNodeSoFar;                                                                                    // 12523
  deepestNodeSoFar = null;                                                                                             // 12524
  return foundNode;                                                                                                    // 12525
}                                                                                                                      // 12526
                                                                                                                       // 12527
/**                                                                                                                    // 12528
 * Mounts this component and inserts it into the DOM.                                                                  // 12529
 *                                                                                                                     // 12530
 * @param {ReactComponent} componentInstance The instance to mount.                                                    // 12531
 * @param {string} rootID DOM ID of the root node.                                                                     // 12532
 * @param {DOMElement} container DOM element to mount into.                                                            // 12533
 * @param {ReactReconcileTransaction} transaction                                                                      // 12534
 * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                    // 12535
 */                                                                                                                    // 12536
function mountComponentIntoNode(                                                                                       // 12537
    componentInstance,                                                                                                 // 12538
    rootID,                                                                                                            // 12539
    container,                                                                                                         // 12540
    transaction,                                                                                                       // 12541
    shouldReuseMarkup) {                                                                                               // 12542
  var markup = ReactReconciler.mountComponent(                                                                         // 12543
    componentInstance, rootID, transaction, emptyObject                                                                // 12544
  );                                                                                                                   // 12545
  componentInstance._isTopLevel = true;                                                                                // 12546
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);                                                // 12547
}                                                                                                                      // 12548
                                                                                                                       // 12549
/**                                                                                                                    // 12550
 * Batched mount.                                                                                                      // 12551
 *                                                                                                                     // 12552
 * @param {ReactComponent} componentInstance The instance to mount.                                                    // 12553
 * @param {string} rootID DOM ID of the root node.                                                                     // 12554
 * @param {DOMElement} container DOM element to mount into.                                                            // 12555
 * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                    // 12556
 */                                                                                                                    // 12557
function batchedMountComponentIntoNode(                                                                                // 12558
    componentInstance,                                                                                                 // 12559
    rootID,                                                                                                            // 12560
    container,                                                                                                         // 12561
    shouldReuseMarkup) {                                                                                               // 12562
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();                                                // 12563
  transaction.perform(                                                                                                 // 12564
    mountComponentIntoNode,                                                                                            // 12565
    null,                                                                                                              // 12566
    componentInstance,                                                                                                 // 12567
    rootID,                                                                                                            // 12568
    container,                                                                                                         // 12569
    transaction,                                                                                                       // 12570
    shouldReuseMarkup                                                                                                  // 12571
  );                                                                                                                   // 12572
  ReactUpdates.ReactReconcileTransaction.release(transaction);                                                         // 12573
}                                                                                                                      // 12574
                                                                                                                       // 12575
/**                                                                                                                    // 12576
 * Mounting is the process of initializing a React component by creating its                                           // 12577
 * representative DOM elements and inserting them into a supplied `container`.                                         // 12578
 * Any prior content inside `container` is destroyed in the process.                                                   // 12579
 *                                                                                                                     // 12580
 *   ReactMount.render(                                                                                                // 12581
 *     component,                                                                                                      // 12582
 *     document.getElementById('container')                                                                            // 12583
 *   );                                                                                                                // 12584
 *                                                                                                                     // 12585
 *   <div id="container">                   <-- Supplied `container`.                                                  // 12586
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React                                            // 12587
 *       // ...                                 component.                                                             // 12588
 *     </div>                                                                                                          // 12589
 *   </div>                                                                                                            // 12590
 *                                                                                                                     // 12591
 * Inside of `container`, the first element rendered is the "reactRoot".                                               // 12592
 */                                                                                                                    // 12593
var ReactMount = {                                                                                                     // 12594
  /** Exposed for debugging purposes **/                                                                               // 12595
  _instancesByReactRootID: instancesByReactRootID,                                                                     // 12596
                                                                                                                       // 12597
  /**                                                                                                                  // 12598
   * This is a hook provided to support rendering React components while                                               // 12599
   * ensuring that the apparent scroll position of its `container` does not                                            // 12600
   * change.                                                                                                           // 12601
   *                                                                                                                   // 12602
   * @param {DOMElement} container The `container` being rendered into.                                                // 12603
   * @param {function} renderCallback This must be called once to do the render.                                       // 12604
   */                                                                                                                  // 12605
  scrollMonitor: function(container, renderCallback) {                                                                 // 12606
    renderCallback();                                                                                                  // 12607
  },                                                                                                                   // 12608
                                                                                                                       // 12609
  /**                                                                                                                  // 12610
   * Take a component that's already mounted into the DOM and replace its props                                        // 12611
   * @param {ReactComponent} prevComponent component instance already in the DOM                                       // 12612
   * @param {ReactElement} nextElement component instance to render                                                    // 12613
   * @param {DOMElement} container container to render into                                                            // 12614
   * @param {?function} callback function triggered on completion                                                      // 12615
   */                                                                                                                  // 12616
  _updateRootComponent: function(                                                                                      // 12617
      prevComponent,                                                                                                   // 12618
      nextElement,                                                                                                     // 12619
      container,                                                                                                       // 12620
      callback) {                                                                                                      // 12621
    if ("production" !== process.env.NODE_ENV) {                                                                       // 12622
      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);                                                  // 12623
    }                                                                                                                  // 12624
                                                                                                                       // 12625
    ReactMount.scrollMonitor(container, function() {                                                                   // 12626
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);                                             // 12627
      if (callback) {                                                                                                  // 12628
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);                                             // 12629
      }                                                                                                                // 12630
    });                                                                                                                // 12631
                                                                                                                       // 12632
    if ("production" !== process.env.NODE_ENV) {                                                                       // 12633
      // Record the root element in case it later gets transplanted.                                                   // 12634
      rootElementsByReactRootID[getReactRootID(container)] =                                                           // 12635
        getReactRootElementInContainer(container);                                                                     // 12636
    }                                                                                                                  // 12637
                                                                                                                       // 12638
    return prevComponent;                                                                                              // 12639
  },                                                                                                                   // 12640
                                                                                                                       // 12641
  /**                                                                                                                  // 12642
   * Register a component into the instance map and starts scroll value                                                // 12643
   * monitoring                                                                                                        // 12644
   * @param {ReactComponent} nextComponent component instance to render                                                // 12645
   * @param {DOMElement} container container to render into                                                            // 12646
   * @return {string} reactRoot ID prefix                                                                              // 12647
   */                                                                                                                  // 12648
  _registerComponent: function(nextComponent, container) {                                                             // 12649
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 12650
      container && (                                                                                                   // 12651
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)                             // 12652
      ),                                                                                                               // 12653
      '_registerComponent(...): Target container is not a DOM element.'                                                // 12654
    ) : invariant(container && (                                                                                       // 12655
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)                               // 12656
    )));                                                                                                               // 12657
                                                                                                                       // 12658
    ReactBrowserEventEmitter.ensureScrollValueMonitoring();                                                            // 12659
                                                                                                                       // 12660
    var reactRootID = ReactMount.registerContainer(container);                                                         // 12661
    instancesByReactRootID[reactRootID] = nextComponent;                                                               // 12662
    return reactRootID;                                                                                                // 12663
  },                                                                                                                   // 12664
                                                                                                                       // 12665
  /**                                                                                                                  // 12666
   * Render a new component into the DOM.                                                                              // 12667
   * @param {ReactElement} nextElement element to render                                                               // 12668
   * @param {DOMElement} container container to render into                                                            // 12669
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion                                         // 12670
   * @return {ReactComponent} nextComponent                                                                            // 12671
   */                                                                                                                  // 12672
  _renderNewRootComponent: function(                                                                                   // 12673
    nextElement,                                                                                                       // 12674
    container,                                                                                                         // 12675
    shouldReuseMarkup                                                                                                  // 12676
  ) {                                                                                                                  // 12677
    // Various parts of our code (such as ReactCompositeComponent's                                                    // 12678
    // _renderValidatedComponent) assume that calls to render aren't nested;                                           // 12679
    // verify that that's the case.                                                                                    // 12680
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 12681
      ReactCurrentOwner.current == null,                                                                               // 12682
      '_renderNewRootComponent(): Render methods should be a pure function ' +                                         // 12683
      'of props and state; triggering nested component updates from ' +                                                // 12684
      'render is not allowed. If necessary, trigger nested updates in ' +                                              // 12685
      'componentDidUpdate.'                                                                                            // 12686
    ) : null);                                                                                                         // 12687
                                                                                                                       // 12688
    var componentInstance = instantiateReactComponent(nextElement, null);                                              // 12689
    var reactRootID = ReactMount._registerComponent(                                                                   // 12690
      componentInstance,                                                                                               // 12691
      container                                                                                                        // 12692
    );                                                                                                                 // 12693
                                                                                                                       // 12694
    // The initial render is synchronous but any updates that happen during                                            // 12695
    // rendering, in componentWillMount or componentDidMount, will be batched                                          // 12696
    // according to the current batching strategy.                                                                     // 12697
                                                                                                                       // 12698
    ReactUpdates.batchedUpdates(                                                                                       // 12699
      batchedMountComponentIntoNode,                                                                                   // 12700
      componentInstance,                                                                                               // 12701
      reactRootID,                                                                                                     // 12702
      container,                                                                                                       // 12703
      shouldReuseMarkup                                                                                                // 12704
    );                                                                                                                 // 12705
                                                                                                                       // 12706
    if ("production" !== process.env.NODE_ENV) {                                                                       // 12707
      // Record the root element in case it later gets transplanted.                                                   // 12708
      rootElementsByReactRootID[reactRootID] =                                                                         // 12709
        getReactRootElementInContainer(container);                                                                     // 12710
    }                                                                                                                  // 12711
                                                                                                                       // 12712
    return componentInstance;                                                                                          // 12713
  },                                                                                                                   // 12714
                                                                                                                       // 12715
  /**                                                                                                                  // 12716
   * Renders a React component into the DOM in the supplied `container`.                                               // 12717
   *                                                                                                                   // 12718
   * If the React component was previously rendered into `container`, this will                                        // 12719
   * perform an update on it and only mutate the DOM as necessary to reflect the                                       // 12720
   * latest React component.                                                                                           // 12721
   *                                                                                                                   // 12722
   * @param {ReactElement} nextElement Component element to render.                                                    // 12723
   * @param {DOMElement} container DOM element to render into.                                                         // 12724
   * @param {?function} callback function triggered on completion                                                      // 12725
   * @return {ReactComponent} Component instance rendered in `container`.                                              // 12726
   */                                                                                                                  // 12727
  render: function(nextElement, container, callback) {                                                                 // 12728
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 12729
      ReactElement.isValidElement(nextElement),                                                                        // 12730
      'React.render(): Invalid component element.%s',                                                                  // 12731
      (                                                                                                                // 12732
        typeof nextElement === 'string' ?                                                                              // 12733
          ' Instead of passing an element string, make sure to instantiate ' +                                         // 12734
          'it by passing it to React.createElement.' :                                                                 // 12735
        typeof nextElement === 'function' ?                                                                            // 12736
          ' Instead of passing a component class, make sure to instantiate ' +                                         // 12737
          'it by passing it to React.createElement.' :                                                                 // 12738
        // Check if it quacks like an element                                                                          // 12739
        nextElement != null && nextElement.props !== undefined ?                                                       // 12740
          ' This may be caused by unintentionally loading two independent ' +                                          // 12741
          'copies of React.' :                                                                                         // 12742
          ''                                                                                                           // 12743
      )                                                                                                                // 12744
    ) : invariant(ReactElement.isValidElement(nextElement)));                                                          // 12745
                                                                                                                       // 12746
    var prevComponent = instancesByReactRootID[getReactRootID(container)];                                             // 12747
                                                                                                                       // 12748
    if (prevComponent) {                                                                                               // 12749
      var prevElement = prevComponent._currentElement;                                                                 // 12750
      if (shouldUpdateReactComponent(prevElement, nextElement)) {                                                      // 12751
        return ReactMount._updateRootComponent(                                                                        // 12752
          prevComponent,                                                                                               // 12753
          nextElement,                                                                                                 // 12754
          container,                                                                                                   // 12755
          callback                                                                                                     // 12756
        ).getPublicInstance();                                                                                         // 12757
      } else {                                                                                                         // 12758
        ReactMount.unmountComponentAtNode(container);                                                                  // 12759
      }                                                                                                                // 12760
    }                                                                                                                  // 12761
                                                                                                                       // 12762
    var reactRootElement = getReactRootElementInContainer(container);                                                  // 12763
    var containerHasReactMarkup =                                                                                      // 12764
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);                                              // 12765
                                                                                                                       // 12766
    if ("production" !== process.env.NODE_ENV) {                                                                       // 12767
      if (!containerHasReactMarkup || reactRootElement.nextSibling) {                                                  // 12768
        var rootElementSibling = reactRootElement;                                                                     // 12769
        while (rootElementSibling) {                                                                                   // 12770
          if (ReactMount.isRenderedByReact(rootElementSibling)) {                                                      // 12771
            ("production" !== process.env.NODE_ENV ? warning(                                                          // 12772
              false,                                                                                                   // 12773
              'render(): Target node has markup rendered by React, but there ' +                                       // 12774
              'are unrelated nodes as well. This is most commonly caused by ' +                                        // 12775
              'white-space inserted around server-rendered markup.'                                                    // 12776
            ) : null);                                                                                                 // 12777
            break;                                                                                                     // 12778
          }                                                                                                            // 12779
                                                                                                                       // 12780
          rootElementSibling = rootElementSibling.nextSibling;                                                         // 12781
        }                                                                                                              // 12782
      }                                                                                                                // 12783
    }                                                                                                                  // 12784
                                                                                                                       // 12785
    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;                                                 // 12786
                                                                                                                       // 12787
    var component = ReactMount._renderNewRootComponent(                                                                // 12788
      nextElement,                                                                                                     // 12789
      container,                                                                                                       // 12790
      shouldReuseMarkup                                                                                                // 12791
    ).getPublicInstance();                                                                                             // 12792
    if (callback) {                                                                                                    // 12793
      callback.call(component);                                                                                        // 12794
    }                                                                                                                  // 12795
    return component;                                                                                                  // 12796
  },                                                                                                                   // 12797
                                                                                                                       // 12798
  /**                                                                                                                  // 12799
   * Constructs a component instance of `constructor` with `initialProps` and                                          // 12800
   * renders it into the supplied `container`.                                                                         // 12801
   *                                                                                                                   // 12802
   * @param {function} constructor React component constructor.                                                        // 12803
   * @param {?object} props Initial props of the component instance.                                                   // 12804
   * @param {DOMElement} container DOM element to render into.                                                         // 12805
   * @return {ReactComponent} Component instance rendered in `container`.                                              // 12806
   */                                                                                                                  // 12807
  constructAndRenderComponent: function(constructor, props, container) {                                               // 12808
    var element = ReactElement.createElement(constructor, props);                                                      // 12809
    return ReactMount.render(element, container);                                                                      // 12810
  },                                                                                                                   // 12811
                                                                                                                       // 12812
  /**                                                                                                                  // 12813
   * Constructs a component instance of `constructor` with `initialProps` and                                          // 12814
   * renders it into a container node identified by supplied `id`.                                                     // 12815
   *                                                                                                                   // 12816
   * @param {function} componentConstructor React component constructor                                                // 12817
   * @param {?object} props Initial props of the component instance.                                                   // 12818
   * @param {string} id ID of the DOM element to render into.                                                          // 12819
   * @return {ReactComponent} Component instance rendered in the container node.                                       // 12820
   */                                                                                                                  // 12821
  constructAndRenderComponentByID: function(constructor, props, id) {                                                  // 12822
    var domNode = document.getElementById(id);                                                                         // 12823
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 12824
      domNode,                                                                                                         // 12825
      'Tried to get element with id of "%s" but it is not present on the page.',                                       // 12826
      id                                                                                                               // 12827
    ) : invariant(domNode));                                                                                           // 12828
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);                                        // 12829
  },                                                                                                                   // 12830
                                                                                                                       // 12831
  /**                                                                                                                  // 12832
   * Registers a container node into which React components will be rendered.                                          // 12833
   * This also creates the "reactRoot" ID that will be assigned to the element                                         // 12834
   * rendered within.                                                                                                  // 12835
   *                                                                                                                   // 12836
   * @param {DOMElement} container DOM element to register as a container.                                             // 12837
   * @return {string} The "reactRoot" ID of elements rendered within.                                                  // 12838
   */                                                                                                                  // 12839
  registerContainer: function(container) {                                                                             // 12840
    var reactRootID = getReactRootID(container);                                                                       // 12841
    if (reactRootID) {                                                                                                 // 12842
      // If one exists, make sure it is a valid "reactRoot" ID.                                                        // 12843
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);                                        // 12844
    }                                                                                                                  // 12845
    if (!reactRootID) {                                                                                                // 12846
      // No valid "reactRoot" ID found, create one.                                                                    // 12847
      reactRootID = ReactInstanceHandles.createReactRootID();                                                          // 12848
    }                                                                                                                  // 12849
    containersByReactRootID[reactRootID] = container;                                                                  // 12850
    return reactRootID;                                                                                                // 12851
  },                                                                                                                   // 12852
                                                                                                                       // 12853
  /**                                                                                                                  // 12854
   * Unmounts and destroys the React component rendered in the `container`.                                            // 12855
   *                                                                                                                   // 12856
   * @param {DOMElement} container DOM element containing a React component.                                           // 12857
   * @return {boolean} True if a component was found in and unmounted from                                             // 12858
   *                   `container`                                                                                     // 12859
   */                                                                                                                  // 12860
  unmountComponentAtNode: function(container) {                                                                        // 12861
    // Various parts of our code (such as ReactCompositeComponent's                                                    // 12862
    // _renderValidatedComponent) assume that calls to render aren't nested;                                           // 12863
    // verify that that's the case. (Strictly speaking, unmounting won't cause a                                       // 12864
    // render but we still don't expect to be in a render call here.)                                                  // 12865
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 12866
      ReactCurrentOwner.current == null,                                                                               // 12867
      'unmountComponentAtNode(): Render methods should be a pure function of ' +                                       // 12868
      'props and state; triggering nested component updates from render is ' +                                         // 12869
      'not allowed. If necessary, trigger nested updates in ' +                                                        // 12870
      'componentDidUpdate.'                                                                                            // 12871
    ) : null);                                                                                                         // 12872
                                                                                                                       // 12873
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 12874
      container && (                                                                                                   // 12875
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)                             // 12876
      ),                                                                                                               // 12877
      'unmountComponentAtNode(...): Target container is not a DOM element.'                                            // 12878
    ) : invariant(container && (                                                                                       // 12879
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)                               // 12880
    )));                                                                                                               // 12881
                                                                                                                       // 12882
    var reactRootID = getReactRootID(container);                                                                       // 12883
    var component = instancesByReactRootID[reactRootID];                                                               // 12884
    if (!component) {                                                                                                  // 12885
      return false;                                                                                                    // 12886
    }                                                                                                                  // 12887
    ReactMount.unmountComponentFromNode(component, container);                                                         // 12888
    delete instancesByReactRootID[reactRootID];                                                                        // 12889
    delete containersByReactRootID[reactRootID];                                                                       // 12890
    if ("production" !== process.env.NODE_ENV) {                                                                       // 12891
      delete rootElementsByReactRootID[reactRootID];                                                                   // 12892
    }                                                                                                                  // 12893
    return true;                                                                                                       // 12894
  },                                                                                                                   // 12895
                                                                                                                       // 12896
  /**                                                                                                                  // 12897
   * Unmounts a component and removes it from the DOM.                                                                 // 12898
   *                                                                                                                   // 12899
   * @param {ReactComponent} instance React component instance.                                                        // 12900
   * @param {DOMElement} container DOM element to unmount from.                                                        // 12901
   * @final                                                                                                            // 12902
   * @internal                                                                                                         // 12903
   * @see {ReactMount.unmountComponentAtNode}                                                                          // 12904
   */                                                                                                                  // 12905
  unmountComponentFromNode: function(instance, container) {                                                            // 12906
    ReactReconciler.unmountComponent(instance);                                                                        // 12907
                                                                                                                       // 12908
    if (container.nodeType === DOC_NODE_TYPE) {                                                                        // 12909
      container = container.documentElement;                                                                           // 12910
    }                                                                                                                  // 12911
                                                                                                                       // 12912
    // http://jsperf.com/emptying-a-node                                                                               // 12913
    while (container.lastChild) {                                                                                      // 12914
      container.removeChild(container.lastChild);                                                                      // 12915
    }                                                                                                                  // 12916
  },                                                                                                                   // 12917
                                                                                                                       // 12918
  /**                                                                                                                  // 12919
   * Finds the container DOM element that contains React component to which the                                        // 12920
   * supplied DOM `id` belongs.                                                                                        // 12921
   *                                                                                                                   // 12922
   * @param {string} id The ID of an element rendered by a React component.                                            // 12923
   * @return {?DOMElement} DOM element that contains the `id`.                                                         // 12924
   */                                                                                                                  // 12925
  findReactContainerForID: function(id) {                                                                              // 12926
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);                                               // 12927
    var container = containersByReactRootID[reactRootID];                                                              // 12928
                                                                                                                       // 12929
    if ("production" !== process.env.NODE_ENV) {                                                                       // 12930
      var rootElement = rootElementsByReactRootID[reactRootID];                                                        // 12931
      if (rootElement && rootElement.parentNode !== container) {                                                       // 12932
        ("production" !== process.env.NODE_ENV ? invariant(                                                            // 12933
          // Call internalGetID here because getID calls isValid which calls                                           // 12934
          // findReactContainerForID (this function).                                                                  // 12935
          internalGetID(rootElement) === reactRootID,                                                                  // 12936
          'ReactMount: Root element ID differed from reactRootID.'                                                     // 12937
        ) : invariant(// Call internalGetID here because getID calls isValid which calls                               // 12938
        // findReactContainerForID (this function).                                                                    // 12939
        internalGetID(rootElement) === reactRootID));                                                                  // 12940
                                                                                                                       // 12941
        var containerChild = container.firstChild;                                                                     // 12942
        if (containerChild &&                                                                                          // 12943
            reactRootID === internalGetID(containerChild)) {                                                           // 12944
          // If the container has a new child with the same ID as the old                                              // 12945
          // root element, then rootElementsByReactRootID[reactRootID] is                                              // 12946
          // just stale and needs to be updated. The case that deserves a                                              // 12947
          // warning is when the container is empty.                                                                   // 12948
          rootElementsByReactRootID[reactRootID] = containerChild;                                                     // 12949
        } else {                                                                                                       // 12950
          ("production" !== process.env.NODE_ENV ? warning(                                                            // 12951
            false,                                                                                                     // 12952
            'ReactMount: Root element has been removed from its original ' +                                           // 12953
            'container. New container:', rootElement.parentNode                                                        // 12954
          ) : null);                                                                                                   // 12955
        }                                                                                                              // 12956
      }                                                                                                                // 12957
    }                                                                                                                  // 12958
                                                                                                                       // 12959
    return container;                                                                                                  // 12960
  },                                                                                                                   // 12961
                                                                                                                       // 12962
  /**                                                                                                                  // 12963
   * Finds an element rendered by React with the supplied ID.                                                          // 12964
   *                                                                                                                   // 12965
   * @param {string} id ID of a DOM node in the React component.                                                       // 12966
   * @return {DOMElement} Root DOM node of the React component.                                                        // 12967
   */                                                                                                                  // 12968
  findReactNodeByID: function(id) {                                                                                    // 12969
    var reactRoot = ReactMount.findReactContainerForID(id);                                                            // 12970
    return ReactMount.findComponentRoot(reactRoot, id);                                                                // 12971
  },                                                                                                                   // 12972
                                                                                                                       // 12973
  /**                                                                                                                  // 12974
   * True if the supplied `node` is rendered by React.                                                                 // 12975
   *                                                                                                                   // 12976
   * @param {*} node DOM Element to check.                                                                             // 12977
   * @return {boolean} True if the DOM Element appears to be rendered by React.                                        // 12978
   * @internal                                                                                                         // 12979
   */                                                                                                                  // 12980
  isRenderedByReact: function(node) {                                                                                  // 12981
    if (node.nodeType !== 1) {                                                                                         // 12982
      // Not a DOMElement, therefore not a React component                                                             // 12983
      return false;                                                                                                    // 12984
    }                                                                                                                  // 12985
    var id = ReactMount.getID(node);                                                                                   // 12986
    return id ? id.charAt(0) === SEPARATOR : false;                                                                    // 12987
  },                                                                                                                   // 12988
                                                                                                                       // 12989
  /**                                                                                                                  // 12990
   * Traverses up the ancestors of the supplied node to find a node that is a                                          // 12991
   * DOM representation of a React component.                                                                          // 12992
   *                                                                                                                   // 12993
   * @param {*} node                                                                                                   // 12994
   * @return {?DOMEventTarget}                                                                                         // 12995
   * @internal                                                                                                         // 12996
   */                                                                                                                  // 12997
  getFirstReactDOM: function(node) {                                                                                   // 12998
    var current = node;                                                                                                // 12999
    while (current && current.parentNode !== current) {                                                                // 13000
      if (ReactMount.isRenderedByReact(current)) {                                                                     // 13001
        return current;                                                                                                // 13002
      }                                                                                                                // 13003
      current = current.parentNode;                                                                                    // 13004
    }                                                                                                                  // 13005
    return null;                                                                                                       // 13006
  },                                                                                                                   // 13007
                                                                                                                       // 13008
  /**                                                                                                                  // 13009
   * Finds a node with the supplied `targetID` inside of the supplied                                                  // 13010
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search                                              // 13011
   * quickly.                                                                                                          // 13012
   *                                                                                                                   // 13013
   * @param {DOMEventTarget} ancestorNode Search from this root.                                                       // 13014
   * @pararm {string} targetID ID of the DOM representation of the component.                                          // 13015
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.                                                   // 13016
   * @internal                                                                                                         // 13017
   */                                                                                                                  // 13018
  findComponentRoot: function(ancestorNode, targetID) {                                                                // 13019
    var firstChildren = findComponentRootReusableArray;                                                                // 13020
    var childIndex = 0;                                                                                                // 13021
                                                                                                                       // 13022
    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;                                         // 13023
                                                                                                                       // 13024
    firstChildren[0] = deepestAncestor.firstChild;                                                                     // 13025
    firstChildren.length = 1;                                                                                          // 13026
                                                                                                                       // 13027
    while (childIndex < firstChildren.length) {                                                                        // 13028
      var child = firstChildren[childIndex++];                                                                         // 13029
      var targetChild;                                                                                                 // 13030
                                                                                                                       // 13031
      while (child) {                                                                                                  // 13032
        var childID = ReactMount.getID(child);                                                                         // 13033
        if (childID) {                                                                                                 // 13034
          // Even if we find the node we're looking for, we finish looping                                             // 13035
          // through its siblings to ensure they're cached so that we don't have                                       // 13036
          // to revisit this node again. Otherwise, we make n^2 calls to getID                                         // 13037
          // when visiting the many children of a single node in order.                                                // 13038
                                                                                                                       // 13039
          if (targetID === childID) {                                                                                  // 13040
            targetChild = child;                                                                                       // 13041
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {                                         // 13042
            // If we find a child whose ID is an ancestor of the given ID,                                             // 13043
            // then we can be sure that we only want to search the subtree                                             // 13044
            // rooted at this child, so we can throw out the rest of the                                               // 13045
            // search state.                                                                                           // 13046
            firstChildren.length = childIndex = 0;                                                                     // 13047
            firstChildren.push(child.firstChild);                                                                      // 13048
          }                                                                                                            // 13049
                                                                                                                       // 13050
        } else {                                                                                                       // 13051
          // If this child had no ID, then there's a chance that it was                                                // 13052
          // injected automatically by the browser, as when a `<table>`                                                // 13053
          // element sprouts an extra `<tbody>` child as a side effect of                                              // 13054
          // `.innerHTML` parsing. Optimistically continue down this                                                   // 13055
          // branch, but not before examining the other siblings.                                                      // 13056
          firstChildren.push(child.firstChild);                                                                        // 13057
        }                                                                                                              // 13058
                                                                                                                       // 13059
        child = child.nextSibling;                                                                                     // 13060
      }                                                                                                                // 13061
                                                                                                                       // 13062
      if (targetChild) {                                                                                               // 13063
        // Emptying firstChildren/findComponentRootReusableArray is                                                    // 13064
        // not necessary for correctness, but it helps the GC reclaim                                                  // 13065
        // any nodes that were left at the end of the search.                                                          // 13066
        firstChildren.length = 0;                                                                                      // 13067
                                                                                                                       // 13068
        return targetChild;                                                                                            // 13069
      }                                                                                                                // 13070
    }                                                                                                                  // 13071
                                                                                                                       // 13072
    firstChildren.length = 0;                                                                                          // 13073
                                                                                                                       // 13074
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 13075
      false,                                                                                                           // 13076
      'findComponentRoot(..., %s): Unable to find element. This probably ' +                                           // 13077
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +                                              // 13078
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +                                         // 13079
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +                                             // 13080
      'parent. ' +                                                                                                     // 13081
      'Try inspecting the child nodes of the element with React ID `%s`.',                                             // 13082
      targetID,                                                                                                        // 13083
      ReactMount.getID(ancestorNode)                                                                                   // 13084
    ) : invariant(false));                                                                                             // 13085
  },                                                                                                                   // 13086
                                                                                                                       // 13087
  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {                                                // 13088
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 13089
      container && (                                                                                                   // 13090
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)                             // 13091
      ),                                                                                                               // 13092
      'mountComponentIntoNode(...): Target container is not valid.'                                                    // 13093
    ) : invariant(container && (                                                                                       // 13094
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)                               // 13095
    )));                                                                                                               // 13096
                                                                                                                       // 13097
    if (shouldReuseMarkup) {                                                                                           // 13098
      var rootElement = getReactRootElementInContainer(container);                                                     // 13099
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {                                                   // 13100
        return;                                                                                                        // 13101
      } else {                                                                                                         // 13102
        var checksum = rootElement.getAttribute(                                                                       // 13103
          ReactMarkupChecksum.CHECKSUM_ATTR_NAME                                                                       // 13104
        );                                                                                                             // 13105
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                                           // 13106
                                                                                                                       // 13107
        var rootMarkup = rootElement.outerHTML;                                                                        // 13108
        rootElement.setAttribute(                                                                                      // 13109
          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,                                                                      // 13110
          checksum                                                                                                     // 13111
        );                                                                                                             // 13112
                                                                                                                       // 13113
        var diffIndex = firstDifferenceIndex(markup, rootMarkup);                                                      // 13114
        var difference = ' (client) ' +                                                                                // 13115
          markup.substring(diffIndex - 20, diffIndex + 20) +                                                           // 13116
          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);                                       // 13117
                                                                                                                       // 13118
        ("production" !== process.env.NODE_ENV ? invariant(                                                            // 13119
          container.nodeType !== DOC_NODE_TYPE,                                                                        // 13120
          'You\'re trying to render a component to the document using ' +                                              // 13121
          'server rendering but the checksum was invalid. This usually ' +                                             // 13122
          'means you rendered a different component type or props on ' +                                               // 13123
          'the client from the one on the server, or your render() ' +                                                 // 13124
          'methods are impure. React cannot handle this case due to ' +                                                // 13125
          'cross-browser quirks by rendering at the document root. You ' +                                             // 13126
          'should look for environment dependent code in your components ' +                                           // 13127
          'and ensure the props are the same client and server side:\n%s',                                             // 13128
          difference                                                                                                   // 13129
        ) : invariant(container.nodeType !== DOC_NODE_TYPE));                                                          // 13130
                                                                                                                       // 13131
        if ("production" !== process.env.NODE_ENV) {                                                                   // 13132
          ("production" !== process.env.NODE_ENV ? warning(                                                            // 13133
            false,                                                                                                     // 13134
            'React attempted to reuse markup in a container but the ' +                                                // 13135
            'checksum was invalid. This generally means that you are ' +                                               // 13136
            'using server rendering and the markup generated on the ' +                                                // 13137
            'server was not what the client was expecting. React injected ' +                                          // 13138
            'new markup to compensate which works but you have lost many ' +                                           // 13139
            'of the benefits of server rendering. Instead, figure out ' +                                              // 13140
            'why the markup being generated is different on the client ' +                                             // 13141
            'or server:\n%s',                                                                                          // 13142
            difference                                                                                                 // 13143
          ) : null);                                                                                                   // 13144
        }                                                                                                              // 13145
      }                                                                                                                // 13146
    }                                                                                                                  // 13147
                                                                                                                       // 13148
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 13149
      container.nodeType !== DOC_NODE_TYPE,                                                                            // 13150
      'You\'re trying to render a component to the document but ' +                                                    // 13151
        'you didn\'t use server rendering. We can\'t do this ' +                                                       // 13152
        'without using server rendering due to cross-browser quirks. ' +                                               // 13153
        'See React.renderToString() for server rendering.'                                                             // 13154
    ) : invariant(container.nodeType !== DOC_NODE_TYPE));                                                              // 13155
                                                                                                                       // 13156
    setInnerHTML(container, markup);                                                                                   // 13157
  },                                                                                                                   // 13158
                                                                                                                       // 13159
  /**                                                                                                                  // 13160
   * React ID utilities.                                                                                               // 13161
   */                                                                                                                  // 13162
                                                                                                                       // 13163
  getReactRootID: getReactRootID,                                                                                      // 13164
                                                                                                                       // 13165
  getID: getID,                                                                                                        // 13166
                                                                                                                       // 13167
  setID: setID,                                                                                                        // 13168
                                                                                                                       // 13169
  getNode: getNode,                                                                                                    // 13170
                                                                                                                       // 13171
  getNodeFromInstance: getNodeFromInstance,                                                                            // 13172
                                                                                                                       // 13173
  purgeID: purgeID                                                                                                     // 13174
};                                                                                                                     // 13175
                                                                                                                       // 13176
ReactPerf.measureMethods(ReactMount, 'ReactMount', {                                                                   // 13177
  _renderNewRootComponent: '_renderNewRootComponent',                                                                  // 13178
  _mountImageIntoNode: '_mountImageIntoNode'                                                                           // 13179
});                                                                                                                    // 13180
                                                                                                                       // 13181
module.exports = ReactMount;                                                                                           // 13182
                                                                                                                       // 13183
}).call(this,require('_process'))                                                                                      // 13184
                                                                                                                       // 13185
},{"./DOMProperty":"react/lib/DOMProperty","./ReactBrowserEventEmitter":"react/lib/ReactBrowserEventEmitter","./ReactCurrentOwner":"react/lib/ReactCurrentOwner","./ReactElement":"react/lib/ReactElement","./ReactElementValidator":"react/lib/ReactElementValidator","./ReactEmptyComponent":"react/lib/ReactEmptyComponent","./ReactInstanceHandles":"react/lib/ReactInstanceHandles","./ReactInstanceMap":"react/lib/ReactInstanceMap","./ReactMarkupChecksum":"react/lib/ReactMarkupChecksum","./ReactPerf":"react/lib/ReactPerf","./ReactReconciler":"react/lib/ReactReconciler","./ReactUpdateQueue":"react/lib/ReactUpdateQueue","./ReactUpdates":"react/lib/ReactUpdates","./containsNode":"react/lib/containsNode","./emptyObject":"react/lib/emptyObject","./getReactRootElementInContainer":"react/lib/getReactRootElementInContainer","./instantiateReactComponent":"react/lib/instantiateReactComponent","./invariant":"react/lib/invariant","./setInnerHTML":"react/lib/setInnerHTML","./shouldUpdateReactComponent":"react/lib/shouldUpdateReactComponent","./warning":"react/lib/warning","_process":1}],"react/lib/ReactMultiChildUpdateTypes":[function(require,module,exports){
/**                                                                                                                    // 13187
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 13188
 * All rights reserved.                                                                                                // 13189
 *                                                                                                                     // 13190
 * This source code is licensed under the BSD-style license found in the                                               // 13191
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 13192
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 13193
 *                                                                                                                     // 13194
 * @providesModule ReactMultiChildUpdateTypes                                                                          // 13195
 */                                                                                                                    // 13196
                                                                                                                       // 13197
'use strict';                                                                                                          // 13198
                                                                                                                       // 13199
var keyMirror = require("./keyMirror");                                                                                // 13200
                                                                                                                       // 13201
/**                                                                                                                    // 13202
 * When a component's children are updated, a series of update configuration                                           // 13203
 * objects are created in order to batch and serialize the required changes.                                           // 13204
 *                                                                                                                     // 13205
 * Enumerates all the possible types of update configurations.                                                         // 13206
 *                                                                                                                     // 13207
 * @internal                                                                                                           // 13208
 */                                                                                                                    // 13209
var ReactMultiChildUpdateTypes = keyMirror({                                                                           // 13210
  INSERT_MARKUP: null,                                                                                                 // 13211
  MOVE_EXISTING: null,                                                                                                 // 13212
  REMOVE_NODE: null,                                                                                                   // 13213
  TEXT_CONTENT: null                                                                                                   // 13214
});                                                                                                                    // 13215
                                                                                                                       // 13216
module.exports = ReactMultiChildUpdateTypes;                                                                           // 13217
                                                                                                                       // 13218
},{"./keyMirror":"react/lib/keyMirror"}],"react/lib/ReactMultiChild":[function(require,module,exports){                // 13219
/**                                                                                                                    // 13220
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 13221
 * All rights reserved.                                                                                                // 13222
 *                                                                                                                     // 13223
 * This source code is licensed under the BSD-style license found in the                                               // 13224
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 13225
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 13226
 *                                                                                                                     // 13227
 * @providesModule ReactMultiChild                                                                                     // 13228
 * @typechecks static-only                                                                                             // 13229
 */                                                                                                                    // 13230
                                                                                                                       // 13231
'use strict';                                                                                                          // 13232
                                                                                                                       // 13233
var ReactComponentEnvironment = require("./ReactComponentEnvironment");                                                // 13234
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");                                              // 13235
                                                                                                                       // 13236
var ReactReconciler = require("./ReactReconciler");                                                                    // 13237
var ReactChildReconciler = require("./ReactChildReconciler");                                                          // 13238
                                                                                                                       // 13239
/**                                                                                                                    // 13240
 * Updating children of a component may trigger recursive updates. The depth is                                        // 13241
 * used to batch recursive updates to render markup more efficiently.                                                  // 13242
 *                                                                                                                     // 13243
 * @type {number}                                                                                                      // 13244
 * @private                                                                                                            // 13245
 */                                                                                                                    // 13246
var updateDepth = 0;                                                                                                   // 13247
                                                                                                                       // 13248
/**                                                                                                                    // 13249
 * Queue of update configuration objects.                                                                              // 13250
 *                                                                                                                     // 13251
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.                                          // 13252
 *                                                                                                                     // 13253
 * @type {array<object>}                                                                                               // 13254
 * @private                                                                                                            // 13255
 */                                                                                                                    // 13256
var updateQueue = [];                                                                                                  // 13257
                                                                                                                       // 13258
/**                                                                                                                    // 13259
 * Queue of markup to be rendered.                                                                                     // 13260
 *                                                                                                                     // 13261
 * @type {array<string>}                                                                                               // 13262
 * @private                                                                                                            // 13263
 */                                                                                                                    // 13264
var markupQueue = [];                                                                                                  // 13265
                                                                                                                       // 13266
/**                                                                                                                    // 13267
 * Enqueues markup to be rendered and inserted at a supplied index.                                                    // 13268
 *                                                                                                                     // 13269
 * @param {string} parentID ID of the parent component.                                                                // 13270
 * @param {string} markup Markup that renders into an element.                                                         // 13271
 * @param {number} toIndex Destination index.                                                                          // 13272
 * @private                                                                                                            // 13273
 */                                                                                                                    // 13274
function enqueueMarkup(parentID, markup, toIndex) {                                                                    // 13275
  // NOTE: Null values reduce hidden classes.                                                                          // 13276
  updateQueue.push({                                                                                                   // 13277
    parentID: parentID,                                                                                                // 13278
    parentNode: null,                                                                                                  // 13279
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,                                                                    // 13280
    markupIndex: markupQueue.push(markup) - 1,                                                                         // 13281
    textContent: null,                                                                                                 // 13282
    fromIndex: null,                                                                                                   // 13283
    toIndex: toIndex                                                                                                   // 13284
  });                                                                                                                  // 13285
}                                                                                                                      // 13286
                                                                                                                       // 13287
/**                                                                                                                    // 13288
 * Enqueues moving an existing element to another index.                                                               // 13289
 *                                                                                                                     // 13290
 * @param {string} parentID ID of the parent component.                                                                // 13291
 * @param {number} fromIndex Source index of the existing element.                                                     // 13292
 * @param {number} toIndex Destination index of the element.                                                           // 13293
 * @private                                                                                                            // 13294
 */                                                                                                                    // 13295
function enqueueMove(parentID, fromIndex, toIndex) {                                                                   // 13296
  // NOTE: Null values reduce hidden classes.                                                                          // 13297
  updateQueue.push({                                                                                                   // 13298
    parentID: parentID,                                                                                                // 13299
    parentNode: null,                                                                                                  // 13300
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,                                                                    // 13301
    markupIndex: null,                                                                                                 // 13302
    textContent: null,                                                                                                 // 13303
    fromIndex: fromIndex,                                                                                              // 13304
    toIndex: toIndex                                                                                                   // 13305
  });                                                                                                                  // 13306
}                                                                                                                      // 13307
                                                                                                                       // 13308
/**                                                                                                                    // 13309
 * Enqueues removing an element at an index.                                                                           // 13310
 *                                                                                                                     // 13311
 * @param {string} parentID ID of the parent component.                                                                // 13312
 * @param {number} fromIndex Index of the element to remove.                                                           // 13313
 * @private                                                                                                            // 13314
 */                                                                                                                    // 13315
function enqueueRemove(parentID, fromIndex) {                                                                          // 13316
  // NOTE: Null values reduce hidden classes.                                                                          // 13317
  updateQueue.push({                                                                                                   // 13318
    parentID: parentID,                                                                                                // 13319
    parentNode: null,                                                                                                  // 13320
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,                                                                      // 13321
    markupIndex: null,                                                                                                 // 13322
    textContent: null,                                                                                                 // 13323
    fromIndex: fromIndex,                                                                                              // 13324
    toIndex: null                                                                                                      // 13325
  });                                                                                                                  // 13326
}                                                                                                                      // 13327
                                                                                                                       // 13328
/**                                                                                                                    // 13329
 * Enqueues setting the text content.                                                                                  // 13330
 *                                                                                                                     // 13331
 * @param {string} parentID ID of the parent component.                                                                // 13332
 * @param {string} textContent Text content to set.                                                                    // 13333
 * @private                                                                                                            // 13334
 */                                                                                                                    // 13335
function enqueueTextContent(parentID, textContent) {                                                                   // 13336
  // NOTE: Null values reduce hidden classes.                                                                          // 13337
  updateQueue.push({                                                                                                   // 13338
    parentID: parentID,                                                                                                // 13339
    parentNode: null,                                                                                                  // 13340
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,                                                                     // 13341
    markupIndex: null,                                                                                                 // 13342
    textContent: textContent,                                                                                          // 13343
    fromIndex: null,                                                                                                   // 13344
    toIndex: null                                                                                                      // 13345
  });                                                                                                                  // 13346
}                                                                                                                      // 13347
                                                                                                                       // 13348
/**                                                                                                                    // 13349
 * Processes any enqueued updates.                                                                                     // 13350
 *                                                                                                                     // 13351
 * @private                                                                                                            // 13352
 */                                                                                                                    // 13353
function processQueue() {                                                                                              // 13354
  if (updateQueue.length) {                                                                                            // 13355
    ReactComponentEnvironment.processChildrenUpdates(                                                                  // 13356
      updateQueue,                                                                                                     // 13357
      markupQueue                                                                                                      // 13358
    );                                                                                                                 // 13359
    clearQueue();                                                                                                      // 13360
  }                                                                                                                    // 13361
}                                                                                                                      // 13362
                                                                                                                       // 13363
/**                                                                                                                    // 13364
 * Clears any enqueued updates.                                                                                        // 13365
 *                                                                                                                     // 13366
 * @private                                                                                                            // 13367
 */                                                                                                                    // 13368
function clearQueue() {                                                                                                // 13369
  updateQueue.length = 0;                                                                                              // 13370
  markupQueue.length = 0;                                                                                              // 13371
}                                                                                                                      // 13372
                                                                                                                       // 13373
/**                                                                                                                    // 13374
 * ReactMultiChild are capable of reconciling multiple children.                                                       // 13375
 *                                                                                                                     // 13376
 * @class ReactMultiChild                                                                                              // 13377
 * @internal                                                                                                           // 13378
 */                                                                                                                    // 13379
var ReactMultiChild = {                                                                                                // 13380
                                                                                                                       // 13381
  /**                                                                                                                  // 13382
   * Provides common functionality for components that must reconcile multiple                                         // 13383
   * children. This is used by `ReactDOMComponent` to mount, update, and                                               // 13384
   * unmount child components.                                                                                         // 13385
   *                                                                                                                   // 13386
   * @lends {ReactMultiChild.prototype}                                                                                // 13387
   */                                                                                                                  // 13388
  Mixin: {                                                                                                             // 13389
                                                                                                                       // 13390
    /**                                                                                                                // 13391
     * Generates a "mount image" for each of the supplied children. In the case                                        // 13392
     * of `ReactDOMComponent`, a mount image is a string of markup.                                                    // 13393
     *                                                                                                                 // 13394
     * @param {?object} nestedChildren Nested child maps.                                                              // 13395
     * @return {array} An array of mounted representations.                                                            // 13396
     * @internal                                                                                                       // 13397
     */                                                                                                                // 13398
    mountChildren: function(nestedChildren, transaction, context) {                                                    // 13399
      var children = ReactChildReconciler.instantiateChildren(                                                         // 13400
        nestedChildren, transaction, context                                                                           // 13401
      );                                                                                                               // 13402
      this._renderedChildren = children;                                                                               // 13403
      var mountImages = [];                                                                                            // 13404
      var index = 0;                                                                                                   // 13405
      for (var name in children) {                                                                                     // 13406
        if (children.hasOwnProperty(name)) {                                                                           // 13407
          var child = children[name];                                                                                  // 13408
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.                                        // 13409
          var rootID = this._rootNodeID + name;                                                                        // 13410
          var mountImage = ReactReconciler.mountComponent(                                                             // 13411
            child,                                                                                                     // 13412
            rootID,                                                                                                    // 13413
            transaction,                                                                                               // 13414
            context                                                                                                    // 13415
          );                                                                                                           // 13416
          child._mountIndex = index;                                                                                   // 13417
          mountImages.push(mountImage);                                                                                // 13418
          index++;                                                                                                     // 13419
        }                                                                                                              // 13420
      }                                                                                                                // 13421
      return mountImages;                                                                                              // 13422
    },                                                                                                                 // 13423
                                                                                                                       // 13424
    /**                                                                                                                // 13425
     * Replaces any rendered children with a text content string.                                                      // 13426
     *                                                                                                                 // 13427
     * @param {string} nextContent String of content.                                                                  // 13428
     * @internal                                                                                                       // 13429
     */                                                                                                                // 13430
    updateTextContent: function(nextContent) {                                                                         // 13431
      updateDepth++;                                                                                                   // 13432
      var errorThrown = true;                                                                                          // 13433
      try {                                                                                                            // 13434
        var prevChildren = this._renderedChildren;                                                                     // 13435
        // Remove any rendered children.                                                                               // 13436
        ReactChildReconciler.unmountChildren(prevChildren);                                                            // 13437
        // TODO: The setTextContent operation should be enough                                                         // 13438
        for (var name in prevChildren) {                                                                               // 13439
          if (prevChildren.hasOwnProperty(name)) {                                                                     // 13440
            this._unmountChildByName(prevChildren[name], name);                                                        // 13441
          }                                                                                                            // 13442
        }                                                                                                              // 13443
        // Set new text content.                                                                                       // 13444
        this.setTextContent(nextContent);                                                                              // 13445
        errorThrown = false;                                                                                           // 13446
      } finally {                                                                                                      // 13447
        updateDepth--;                                                                                                 // 13448
        if (!updateDepth) {                                                                                            // 13449
          if (errorThrown) {                                                                                           // 13450
            clearQueue();                                                                                              // 13451
          } else {                                                                                                     // 13452
            processQueue();                                                                                            // 13453
          }                                                                                                            // 13454
        }                                                                                                              // 13455
      }                                                                                                                // 13456
    },                                                                                                                 // 13457
                                                                                                                       // 13458
    /**                                                                                                                // 13459
     * Updates the rendered children with new children.                                                                // 13460
     *                                                                                                                 // 13461
     * @param {?object} nextNestedChildren Nested child maps.                                                          // 13462
     * @param {ReactReconcileTransaction} transaction                                                                  // 13463
     * @internal                                                                                                       // 13464
     */                                                                                                                // 13465
    updateChildren: function(nextNestedChildren, transaction, context) {                                               // 13466
      updateDepth++;                                                                                                   // 13467
      var errorThrown = true;                                                                                          // 13468
      try {                                                                                                            // 13469
        this._updateChildren(nextNestedChildren, transaction, context);                                                // 13470
        errorThrown = false;                                                                                           // 13471
      } finally {                                                                                                      // 13472
        updateDepth--;                                                                                                 // 13473
        if (!updateDepth) {                                                                                            // 13474
          if (errorThrown) {                                                                                           // 13475
            clearQueue();                                                                                              // 13476
          } else {                                                                                                     // 13477
            processQueue();                                                                                            // 13478
          }                                                                                                            // 13479
        }                                                                                                              // 13480
                                                                                                                       // 13481
      }                                                                                                                // 13482
    },                                                                                                                 // 13483
                                                                                                                       // 13484
    /**                                                                                                                // 13485
     * Improve performance by isolating this hot code path from the try/catch                                          // 13486
     * block in `updateChildren`.                                                                                      // 13487
     *                                                                                                                 // 13488
     * @param {?object} nextNestedChildren Nested child maps.                                                          // 13489
     * @param {ReactReconcileTransaction} transaction                                                                  // 13490
     * @final                                                                                                          // 13491
     * @protected                                                                                                      // 13492
     */                                                                                                                // 13493
    _updateChildren: function(nextNestedChildren, transaction, context) {                                              // 13494
      var prevChildren = this._renderedChildren;                                                                       // 13495
      var nextChildren = ReactChildReconciler.updateChildren(                                                          // 13496
        prevChildren, nextNestedChildren, transaction, context                                                         // 13497
      );                                                                                                               // 13498
      this._renderedChildren = nextChildren;                                                                           // 13499
      if (!nextChildren && !prevChildren) {                                                                            // 13500
        return;                                                                                                        // 13501
      }                                                                                                                // 13502
      var name;                                                                                                        // 13503
      // `nextIndex` will increment for each child in `nextChildren`, but                                              // 13504
      // `lastIndex` will be the last index visited in `prevChildren`.                                                 // 13505
      var lastIndex = 0;                                                                                               // 13506
      var nextIndex = 0;                                                                                               // 13507
      for (name in nextChildren) {                                                                                     // 13508
        if (!nextChildren.hasOwnProperty(name)) {                                                                      // 13509
          continue;                                                                                                    // 13510
        }                                                                                                              // 13511
        var prevChild = prevChildren && prevChildren[name];                                                            // 13512
        var nextChild = nextChildren[name];                                                                            // 13513
        if (prevChild === nextChild) {                                                                                 // 13514
          this.moveChild(prevChild, nextIndex, lastIndex);                                                             // 13515
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                      // 13516
          prevChild._mountIndex = nextIndex;                                                                           // 13517
        } else {                                                                                                       // 13518
          if (prevChild) {                                                                                             // 13519
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.                                       // 13520
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                    // 13521
            this._unmountChildByName(prevChild, name);                                                                 // 13522
          }                                                                                                            // 13523
          // The child must be instantiated before it's mounted.                                                       // 13524
          this._mountChildByNameAtIndex(                                                                               // 13525
            nextChild, name, nextIndex, transaction, context                                                           // 13526
          );                                                                                                           // 13527
        }                                                                                                              // 13528
        nextIndex++;                                                                                                   // 13529
      }                                                                                                                // 13530
      // Remove children that are no longer present.                                                                   // 13531
      for (name in prevChildren) {                                                                                     // 13532
        if (prevChildren.hasOwnProperty(name) &&                                                                       // 13533
            !(nextChildren && nextChildren.hasOwnProperty(name))) {                                                    // 13534
          this._unmountChildByName(prevChildren[name], name);                                                          // 13535
        }                                                                                                              // 13536
      }                                                                                                                // 13537
    },                                                                                                                 // 13538
                                                                                                                       // 13539
    /**                                                                                                                // 13540
     * Unmounts all rendered children. This should be used to clean up children                                        // 13541
     * when this component is unmounted.                                                                               // 13542
     *                                                                                                                 // 13543
     * @internal                                                                                                       // 13544
     */                                                                                                                // 13545
    unmountChildren: function() {                                                                                      // 13546
      var renderedChildren = this._renderedChildren;                                                                   // 13547
      ReactChildReconciler.unmountChildren(renderedChildren);                                                          // 13548
      this._renderedChildren = null;                                                                                   // 13549
    },                                                                                                                 // 13550
                                                                                                                       // 13551
    /**                                                                                                                // 13552
     * Moves a child component to the supplied index.                                                                  // 13553
     *                                                                                                                 // 13554
     * @param {ReactComponent} child Component to move.                                                                // 13555
     * @param {number} toIndex Destination index of the element.                                                       // 13556
     * @param {number} lastIndex Last index visited of the siblings of `child`.                                        // 13557
     * @protected                                                                                                      // 13558
     */                                                                                                                // 13559
    moveChild: function(child, toIndex, lastIndex) {                                                                   // 13560
      // If the index of `child` is less than `lastIndex`, then it needs to                                            // 13561
      // be moved. Otherwise, we do not need to move it because a child will be                                        // 13562
      // inserted or moved before `child`.                                                                             // 13563
      if (child._mountIndex < lastIndex) {                                                                             // 13564
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);                                                     // 13565
      }                                                                                                                // 13566
    },                                                                                                                 // 13567
                                                                                                                       // 13568
    /**                                                                                                                // 13569
     * Creates a child component.                                                                                      // 13570
     *                                                                                                                 // 13571
     * @param {ReactComponent} child Component to create.                                                              // 13572
     * @param {string} mountImage Markup to insert.                                                                    // 13573
     * @protected                                                                                                      // 13574
     */                                                                                                                // 13575
    createChild: function(child, mountImage) {                                                                         // 13576
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);                                                  // 13577
    },                                                                                                                 // 13578
                                                                                                                       // 13579
    /**                                                                                                                // 13580
     * Removes a child component.                                                                                      // 13581
     *                                                                                                                 // 13582
     * @param {ReactComponent} child Child to remove.                                                                  // 13583
     * @protected                                                                                                      // 13584
     */                                                                                                                // 13585
    removeChild: function(child) {                                                                                     // 13586
      enqueueRemove(this._rootNodeID, child._mountIndex);                                                              // 13587
    },                                                                                                                 // 13588
                                                                                                                       // 13589
    /**                                                                                                                // 13590
     * Sets this text content string.                                                                                  // 13591
     *                                                                                                                 // 13592
     * @param {string} textContent Text content to set.                                                                // 13593
     * @protected                                                                                                      // 13594
     */                                                                                                                // 13595
    setTextContent: function(textContent) {                                                                            // 13596
      enqueueTextContent(this._rootNodeID, textContent);                                                               // 13597
    },                                                                                                                 // 13598
                                                                                                                       // 13599
    /**                                                                                                                // 13600
     * Mounts a child with the supplied name.                                                                          // 13601
     *                                                                                                                 // 13602
     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 13603
     *                                                                                                                 // 13604
     * @param {ReactComponent} child Component to mount.                                                               // 13605
     * @param {string} name Name of the child.                                                                         // 13606
     * @param {number} index Index at which to insert the child.                                                       // 13607
     * @param {ReactReconcileTransaction} transaction                                                                  // 13608
     * @private                                                                                                        // 13609
     */                                                                                                                // 13610
    _mountChildByNameAtIndex: function(                                                                                // 13611
      child,                                                                                                           // 13612
      name,                                                                                                            // 13613
      index,                                                                                                           // 13614
      transaction,                                                                                                     // 13615
      context) {                                                                                                       // 13616
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.                                            // 13617
      var rootID = this._rootNodeID + name;                                                                            // 13618
      var mountImage = ReactReconciler.mountComponent(                                                                 // 13619
        child,                                                                                                         // 13620
        rootID,                                                                                                        // 13621
        transaction,                                                                                                   // 13622
        context                                                                                                        // 13623
      );                                                                                                               // 13624
      child._mountIndex = index;                                                                                       // 13625
      this.createChild(child, mountImage);                                                                             // 13626
    },                                                                                                                 // 13627
                                                                                                                       // 13628
    /**                                                                                                                // 13629
     * Unmounts a rendered child by name.                                                                              // 13630
     *                                                                                                                 // 13631
     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 13632
     *                                                                                                                 // 13633
     * @param {ReactComponent} child Component to unmount.                                                             // 13634
     * @param {string} name Name of the child in `this._renderedChildren`.                                             // 13635
     * @private                                                                                                        // 13636
     */                                                                                                                // 13637
    _unmountChildByName: function(child, name) {                                                                       // 13638
      this.removeChild(child);                                                                                         // 13639
      child._mountIndex = null;                                                                                        // 13640
    }                                                                                                                  // 13641
                                                                                                                       // 13642
  }                                                                                                                    // 13643
                                                                                                                       // 13644
};                                                                                                                     // 13645
                                                                                                                       // 13646
module.exports = ReactMultiChild;                                                                                      // 13647
                                                                                                                       // 13648
},{"./ReactChildReconciler":"react/lib/ReactChildReconciler","./ReactComponentEnvironment":"react/lib/ReactComponentEnvironment","./ReactMultiChildUpdateTypes":"react/lib/ReactMultiChildUpdateTypes","./ReactReconciler":"react/lib/ReactReconciler"}],"react/lib/ReactNativeComponent":[function(require,module,exports){
(function (process){                                                                                                   // 13650
/**                                                                                                                    // 13651
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 13652
 * All rights reserved.                                                                                                // 13653
 *                                                                                                                     // 13654
 * This source code is licensed under the BSD-style license found in the                                               // 13655
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 13656
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 13657
 *                                                                                                                     // 13658
 * @providesModule ReactNativeComponent                                                                                // 13659
 */                                                                                                                    // 13660
                                                                                                                       // 13661
'use strict';                                                                                                          // 13662
                                                                                                                       // 13663
var assign = require("./Object.assign");                                                                               // 13664
var invariant = require("./invariant");                                                                                // 13665
                                                                                                                       // 13666
var autoGenerateWrapperClass = null;                                                                                   // 13667
var genericComponentClass = null;                                                                                      // 13668
// This registry keeps track of wrapper classes around native tags                                                     // 13669
var tagToComponentClass = {};                                                                                          // 13670
var textComponentClass = null;                                                                                         // 13671
                                                                                                                       // 13672
var ReactNativeComponentInjection = {                                                                                  // 13673
  // This accepts a class that receives the tag string. This is a catch all                                            // 13674
  // that can render any kind of tag.                                                                                  // 13675
  injectGenericComponentClass: function(componentClass) {                                                              // 13676
    genericComponentClass = componentClass;                                                                            // 13677
  },                                                                                                                   // 13678
  // This accepts a text component class that takes the text string to be                                              // 13679
  // rendered as props.                                                                                                // 13680
  injectTextComponentClass: function(componentClass) {                                                                 // 13681
    textComponentClass = componentClass;                                                                               // 13682
  },                                                                                                                   // 13683
  // This accepts a keyed object with classes as values. Each key represents a                                         // 13684
  // tag. That particular tag will use this class instead of the generic one.                                          // 13685
  injectComponentClasses: function(componentClasses) {                                                                 // 13686
    assign(tagToComponentClass, componentClasses);                                                                     // 13687
  },                                                                                                                   // 13688
  // Temporary hack since we expect DOM refs to behave like composites,                                                // 13689
  // for this release.                                                                                                 // 13690
  injectAutoWrapper: function(wrapperFactory) {                                                                        // 13691
    autoGenerateWrapperClass = wrapperFactory;                                                                         // 13692
  }                                                                                                                    // 13693
};                                                                                                                     // 13694
                                                                                                                       // 13695
/**                                                                                                                    // 13696
 * Get a composite component wrapper class for a specific tag.                                                         // 13697
 *                                                                                                                     // 13698
 * @param {ReactElement} element The tag for which to get the class.                                                   // 13699
 * @return {function} The React class constructor function.                                                            // 13700
 */                                                                                                                    // 13701
function getComponentClassForElement(element) {                                                                        // 13702
  if (typeof element.type === 'function') {                                                                            // 13703
    return element.type;                                                                                               // 13704
  }                                                                                                                    // 13705
  var tag = element.type;                                                                                              // 13706
  var componentClass = tagToComponentClass[tag];                                                                       // 13707
  if (componentClass == null) {                                                                                        // 13708
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);                                         // 13709
  }                                                                                                                    // 13710
  return componentClass;                                                                                               // 13711
}                                                                                                                      // 13712
                                                                                                                       // 13713
/**                                                                                                                    // 13714
 * Get a native internal component class for a specific tag.                                                           // 13715
 *                                                                                                                     // 13716
 * @param {ReactElement} element The element to create.                                                                // 13717
 * @return {function} The internal class constructor function.                                                         // 13718
 */                                                                                                                    // 13719
function createInternalComponent(element) {                                                                            // 13720
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 13721
    genericComponentClass,                                                                                             // 13722
    'There is no registered component for the tag %s',                                                                 // 13723
    element.type                                                                                                       // 13724
  ) : invariant(genericComponentClass));                                                                               // 13725
  return new genericComponentClass(element.type, element.props);                                                       // 13726
}                                                                                                                      // 13727
                                                                                                                       // 13728
/**                                                                                                                    // 13729
 * @param {ReactText} text                                                                                             // 13730
 * @return {ReactComponent}                                                                                            // 13731
 */                                                                                                                    // 13732
function createInstanceForText(text) {                                                                                 // 13733
  return new textComponentClass(text);                                                                                 // 13734
}                                                                                                                      // 13735
                                                                                                                       // 13736
/**                                                                                                                    // 13737
 * @param {ReactComponent} component                                                                                   // 13738
 * @return {boolean}                                                                                                   // 13739
 */                                                                                                                    // 13740
function isTextComponent(component) {                                                                                  // 13741
  return component instanceof textComponentClass;                                                                      // 13742
}                                                                                                                      // 13743
                                                                                                                       // 13744
var ReactNativeComponent = {                                                                                           // 13745
  getComponentClassForElement: getComponentClassForElement,                                                            // 13746
  createInternalComponent: createInternalComponent,                                                                    // 13747
  createInstanceForText: createInstanceForText,                                                                        // 13748
  isTextComponent: isTextComponent,                                                                                    // 13749
  injection: ReactNativeComponentInjection                                                                             // 13750
};                                                                                                                     // 13751
                                                                                                                       // 13752
module.exports = ReactNativeComponent;                                                                                 // 13753
                                                                                                                       // 13754
}).call(this,require('_process'))                                                                                      // 13755
                                                                                                                       // 13756
},{"./Object.assign":"react/lib/Object.assign","./invariant":"react/lib/invariant","_process":1}],"react/lib/ReactOwner":[function(require,module,exports){
(function (process){                                                                                                   // 13758
/**                                                                                                                    // 13759
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 13760
 * All rights reserved.                                                                                                // 13761
 *                                                                                                                     // 13762
 * This source code is licensed under the BSD-style license found in the                                               // 13763
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 13764
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 13765
 *                                                                                                                     // 13766
 * @providesModule ReactOwner                                                                                          // 13767
 */                                                                                                                    // 13768
                                                                                                                       // 13769
'use strict';                                                                                                          // 13770
                                                                                                                       // 13771
var invariant = require("./invariant");                                                                                // 13772
                                                                                                                       // 13773
/**                                                                                                                    // 13774
 * ReactOwners are capable of storing references to owned components.                                                  // 13775
 *                                                                                                                     // 13776
 * All components are capable of //being// referenced by owner components, but                                         // 13777
 * only ReactOwner components are capable of //referencing// owned components.                                         // 13778
 * The named reference is known as a "ref".                                                                            // 13779
 *                                                                                                                     // 13780
 * Refs are available when mounted and updated during reconciliation.                                                  // 13781
 *                                                                                                                     // 13782
 *   var MyComponent = React.createClass({                                                                             // 13783
 *     render: function() {                                                                                            // 13784
 *       return (                                                                                                      // 13785
 *         <div onClick={this.handleClick}>                                                                            // 13786
 *           <CustomComponent ref="custom" />                                                                          // 13787
 *         </div>                                                                                                      // 13788
 *       );                                                                                                            // 13789
 *     },                                                                                                              // 13790
 *     handleClick: function() {                                                                                       // 13791
 *       this.refs.custom.handleClick();                                                                               // 13792
 *     },                                                                                                              // 13793
 *     componentDidMount: function() {                                                                                 // 13794
 *       this.refs.custom.initialize();                                                                                // 13795
 *     }                                                                                                               // 13796
 *   });                                                                                                               // 13797
 *                                                                                                                     // 13798
 * Refs should rarely be used. When refs are used, they should only be done to                                         // 13799
 * control data that is not handled by React's data flow.                                                              // 13800
 *                                                                                                                     // 13801
 * @class ReactOwner                                                                                                   // 13802
 */                                                                                                                    // 13803
var ReactOwner = {                                                                                                     // 13804
                                                                                                                       // 13805
  /**                                                                                                                  // 13806
   * @param {?object} object                                                                                           // 13807
   * @return {boolean} True if `object` is a valid owner.                                                              // 13808
   * @final                                                                                                            // 13809
   */                                                                                                                  // 13810
  isValidOwner: function(object) {                                                                                     // 13811
    return !!(                                                                                                         // 13812
      (object &&                                                                                                       // 13813
      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')                                // 13814
    );                                                                                                                 // 13815
  },                                                                                                                   // 13816
                                                                                                                       // 13817
  /**                                                                                                                  // 13818
   * Adds a component by ref to an owner component.                                                                    // 13819
   *                                                                                                                   // 13820
   * @param {ReactComponent} component Component to reference.                                                         // 13821
   * @param {string} ref Name by which to refer to the component.                                                      // 13822
   * @param {ReactOwner} owner Component on which to record the ref.                                                   // 13823
   * @final                                                                                                            // 13824
   * @internal                                                                                                         // 13825
   */                                                                                                                  // 13826
  addComponentAsRefTo: function(component, ref, owner) {                                                               // 13827
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 13828
      ReactOwner.isValidOwner(owner),                                                                                  // 13829
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +                                             // 13830
      'usually means that you\'re trying to add a ref to a component that ' +                                          // 13831
      'doesn\'t have an owner (that is, was not created inside of another ' +                                          // 13832
      'component\'s `render` method). Try rendering this component inside of ' +                                       // 13833
      'a new top-level component which will hold the ref.'                                                             // 13834
    ) : invariant(ReactOwner.isValidOwner(owner)));                                                                    // 13835
    owner.attachRef(ref, component);                                                                                   // 13836
  },                                                                                                                   // 13837
                                                                                                                       // 13838
  /**                                                                                                                  // 13839
   * Removes a component by ref from an owner component.                                                               // 13840
   *                                                                                                                   // 13841
   * @param {ReactComponent} component Component to dereference.                                                       // 13842
   * @param {string} ref Name of the ref to remove.                                                                    // 13843
   * @param {ReactOwner} owner Component on which the ref is recorded.                                                 // 13844
   * @final                                                                                                            // 13845
   * @internal                                                                                                         // 13846
   */                                                                                                                  // 13847
  removeComponentAsRefFrom: function(component, ref, owner) {                                                          // 13848
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 13849
      ReactOwner.isValidOwner(owner),                                                                                  // 13850
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +                                        // 13851
      'usually means that you\'re trying to remove a ref to a component that ' +                                       // 13852
      'doesn\'t have an owner (that is, was not created inside of another ' +                                          // 13853
      'component\'s `render` method). Try rendering this component inside of ' +                                       // 13854
      'a new top-level component which will hold the ref.'                                                             // 13855
    ) : invariant(ReactOwner.isValidOwner(owner)));                                                                    // 13856
    // Check that `component` is still the current ref because we do not want to                                       // 13857
    // detach the ref if another component stole it.                                                                   // 13858
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {                                       // 13859
      owner.detachRef(ref);                                                                                            // 13860
    }                                                                                                                  // 13861
  }                                                                                                                    // 13862
                                                                                                                       // 13863
};                                                                                                                     // 13864
                                                                                                                       // 13865
module.exports = ReactOwner;                                                                                           // 13866
                                                                                                                       // 13867
}).call(this,require('_process'))                                                                                      // 13868
                                                                                                                       // 13869
},{"./invariant":"react/lib/invariant","_process":1}],"react/lib/ReactPerf":[function(require,module,exports){         // 13870
(function (process){                                                                                                   // 13871
/**                                                                                                                    // 13872
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 13873
 * All rights reserved.                                                                                                // 13874
 *                                                                                                                     // 13875
 * This source code is licensed under the BSD-style license found in the                                               // 13876
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 13877
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 13878
 *                                                                                                                     // 13879
 * @providesModule ReactPerf                                                                                           // 13880
 * @typechecks static-only                                                                                             // 13881
 */                                                                                                                    // 13882
                                                                                                                       // 13883
'use strict';                                                                                                          // 13884
                                                                                                                       // 13885
/**                                                                                                                    // 13886
 * ReactPerf is a general AOP system designed to measure performance. This                                             // 13887
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.                                              // 13888
 */                                                                                                                    // 13889
var ReactPerf = {                                                                                                      // 13890
  /**                                                                                                                  // 13891
   * Boolean to enable/disable measurement. Set to false by default to prevent                                         // 13892
   * accidental logging and perf loss.                                                                                 // 13893
   */                                                                                                                  // 13894
  enableMeasure: false,                                                                                                // 13895
                                                                                                                       // 13896
  /**                                                                                                                  // 13897
   * Holds onto the measure function in use. By default, don't measure                                                 // 13898
   * anything, but we'll override this if we inject a measure function.                                                // 13899
   */                                                                                                                  // 13900
  storedMeasure: _noMeasure,                                                                                           // 13901
                                                                                                                       // 13902
  /**                                                                                                                  // 13903
   * @param {object} object                                                                                            // 13904
   * @param {string} objectName                                                                                        // 13905
   * @param {object<string>} methodNames                                                                               // 13906
   */                                                                                                                  // 13907
  measureMethods: function(object, objectName, methodNames) {                                                          // 13908
    if ("production" !== process.env.NODE_ENV) {                                                                       // 13909
      for (var key in methodNames) {                                                                                   // 13910
        if (!methodNames.hasOwnProperty(key)) {                                                                        // 13911
          continue;                                                                                                    // 13912
        }                                                                                                              // 13913
        object[key] = ReactPerf.measure(                                                                               // 13914
          objectName,                                                                                                  // 13915
          methodNames[key],                                                                                            // 13916
          object[key]                                                                                                  // 13917
        );                                                                                                             // 13918
      }                                                                                                                // 13919
    }                                                                                                                  // 13920
  },                                                                                                                   // 13921
                                                                                                                       // 13922
  /**                                                                                                                  // 13923
   * Use this to wrap methods you want to measure. Zero overhead in production.                                        // 13924
   *                                                                                                                   // 13925
   * @param {string} objName                                                                                           // 13926
   * @param {string} fnName                                                                                            // 13927
   * @param {function} func                                                                                            // 13928
   * @return {function}                                                                                                // 13929
   */                                                                                                                  // 13930
  measure: function(objName, fnName, func) {                                                                           // 13931
    if ("production" !== process.env.NODE_ENV) {                                                                       // 13932
      var measuredFunc = null;                                                                                         // 13933
      var wrapper = function() {                                                                                       // 13934
        if (ReactPerf.enableMeasure) {                                                                                 // 13935
          if (!measuredFunc) {                                                                                         // 13936
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);                                             // 13937
          }                                                                                                            // 13938
          return measuredFunc.apply(this, arguments);                                                                  // 13939
        }                                                                                                              // 13940
        return func.apply(this, arguments);                                                                            // 13941
      };                                                                                                               // 13942
      wrapper.displayName = objName + '_' + fnName;                                                                    // 13943
      return wrapper;                                                                                                  // 13944
    }                                                                                                                  // 13945
    return func;                                                                                                       // 13946
  },                                                                                                                   // 13947
                                                                                                                       // 13948
  injection: {                                                                                                         // 13949
    /**                                                                                                                // 13950
     * @param {function} measure                                                                                       // 13951
     */                                                                                                                // 13952
    injectMeasure: function(measure) {                                                                                 // 13953
      ReactPerf.storedMeasure = measure;                                                                               // 13954
    }                                                                                                                  // 13955
  }                                                                                                                    // 13956
};                                                                                                                     // 13957
                                                                                                                       // 13958
/**                                                                                                                    // 13959
 * Simply passes through the measured function, without measuring it.                                                  // 13960
 *                                                                                                                     // 13961
 * @param {string} objName                                                                                             // 13962
 * @param {string} fnName                                                                                              // 13963
 * @param {function} func                                                                                              // 13964
 * @return {function}                                                                                                  // 13965
 */                                                                                                                    // 13966
function _noMeasure(objName, fnName, func) {                                                                           // 13967
  return func;                                                                                                         // 13968
}                                                                                                                      // 13969
                                                                                                                       // 13970
module.exports = ReactPerf;                                                                                            // 13971
                                                                                                                       // 13972
}).call(this,require('_process'))                                                                                      // 13973
                                                                                                                       // 13974
},{"_process":1}],"react/lib/ReactPropTransferer":[function(require,module,exports){                                   // 13975
/**                                                                                                                    // 13976
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 13977
 * All rights reserved.                                                                                                // 13978
 *                                                                                                                     // 13979
 * This source code is licensed under the BSD-style license found in the                                               // 13980
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 13981
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 13982
 *                                                                                                                     // 13983
 * @providesModule ReactPropTransferer                                                                                 // 13984
 */                                                                                                                    // 13985
                                                                                                                       // 13986
'use strict';                                                                                                          // 13987
                                                                                                                       // 13988
var assign = require("./Object.assign");                                                                               // 13989
var emptyFunction = require("./emptyFunction");                                                                        // 13990
var joinClasses = require("./joinClasses");                                                                            // 13991
                                                                                                                       // 13992
/**                                                                                                                    // 13993
 * Creates a transfer strategy that will merge prop values using the supplied                                          // 13994
 * `mergeStrategy`. If a prop was previously unset, this just sets it.                                                 // 13995
 *                                                                                                                     // 13996
 * @param {function} mergeStrategy                                                                                     // 13997
 * @return {function}                                                                                                  // 13998
 */                                                                                                                    // 13999
function createTransferStrategy(mergeStrategy) {                                                                       // 14000
  return function(props, key, value) {                                                                                 // 14001
    if (!props.hasOwnProperty(key)) {                                                                                  // 14002
      props[key] = value;                                                                                              // 14003
    } else {                                                                                                           // 14004
      props[key] = mergeStrategy(props[key], value);                                                                   // 14005
    }                                                                                                                  // 14006
  };                                                                                                                   // 14007
}                                                                                                                      // 14008
                                                                                                                       // 14009
var transferStrategyMerge = createTransferStrategy(function(a, b) {                                                    // 14010
  // `merge` overrides the first object's (`props[key]` above) keys using the                                          // 14011
  // second object's (`value`) keys. An object's style's existing `propA` would                                        // 14012
  // get overridden. Flip the order here.                                                                              // 14013
  return assign({}, b, a);                                                                                             // 14014
});                                                                                                                    // 14015
                                                                                                                       // 14016
/**                                                                                                                    // 14017
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.                                         // 14018
 * NOTE: if you add any more exceptions to this list you should be sure to                                             // 14019
 * update `cloneWithProps()` accordingly.                                                                              // 14020
 */                                                                                                                    // 14021
var TransferStrategies = {                                                                                             // 14022
  /**                                                                                                                  // 14023
   * Never transfer `children`.                                                                                        // 14024
   */                                                                                                                  // 14025
  children: emptyFunction,                                                                                             // 14026
  /**                                                                                                                  // 14027
   * Transfer the `className` prop by merging them.                                                                    // 14028
   */                                                                                                                  // 14029
  className: createTransferStrategy(joinClasses),                                                                      // 14030
  /**                                                                                                                  // 14031
   * Transfer the `style` prop (which is an object) by merging them.                                                   // 14032
   */                                                                                                                  // 14033
  style: transferStrategyMerge                                                                                         // 14034
};                                                                                                                     // 14035
                                                                                                                       // 14036
/**                                                                                                                    // 14037
 * Mutates the first argument by transferring the properties from the second                                           // 14038
 * argument.                                                                                                           // 14039
 *                                                                                                                     // 14040
 * @param {object} props                                                                                               // 14041
 * @param {object} newProps                                                                                            // 14042
 * @return {object}                                                                                                    // 14043
 */                                                                                                                    // 14044
function transferInto(props, newProps) {                                                                               // 14045
  for (var thisKey in newProps) {                                                                                      // 14046
    if (!newProps.hasOwnProperty(thisKey)) {                                                                           // 14047
      continue;                                                                                                        // 14048
    }                                                                                                                  // 14049
                                                                                                                       // 14050
    var transferStrategy = TransferStrategies[thisKey];                                                                // 14051
                                                                                                                       // 14052
    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {                                              // 14053
      transferStrategy(props, thisKey, newProps[thisKey]);                                                             // 14054
    } else if (!props.hasOwnProperty(thisKey)) {                                                                       // 14055
      props[thisKey] = newProps[thisKey];                                                                              // 14056
    }                                                                                                                  // 14057
  }                                                                                                                    // 14058
  return props;                                                                                                        // 14059
}                                                                                                                      // 14060
                                                                                                                       // 14061
/**                                                                                                                    // 14062
 * ReactPropTransferer are capable of transferring props to another component                                          // 14063
 * using a `transferPropsTo` method.                                                                                   // 14064
 *                                                                                                                     // 14065
 * @class ReactPropTransferer                                                                                          // 14066
 */                                                                                                                    // 14067
var ReactPropTransferer = {                                                                                            // 14068
                                                                                                                       // 14069
  /**                                                                                                                  // 14070
   * Merge two props objects using TransferStrategies.                                                                 // 14071
   *                                                                                                                   // 14072
   * @param {object} oldProps original props (they take precedence)                                                    // 14073
   * @param {object} newProps new props to merge in                                                                    // 14074
   * @return {object} a new object containing both sets of props merged.                                               // 14075
   */                                                                                                                  // 14076
  mergeProps: function(oldProps, newProps) {                                                                           // 14077
    return transferInto(assign({}, oldProps), newProps);                                                               // 14078
  }                                                                                                                    // 14079
                                                                                                                       // 14080
};                                                                                                                     // 14081
                                                                                                                       // 14082
module.exports = ReactPropTransferer;                                                                                  // 14083
                                                                                                                       // 14084
},{"./Object.assign":"react/lib/Object.assign","./emptyFunction":"react/lib/emptyFunction","./joinClasses":"react/lib/joinClasses"}],"react/lib/ReactPropTypeLocationNames":[function(require,module,exports){
(function (process){                                                                                                   // 14086
/**                                                                                                                    // 14087
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14088
 * All rights reserved.                                                                                                // 14089
 *                                                                                                                     // 14090
 * This source code is licensed under the BSD-style license found in the                                               // 14091
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 14092
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 14093
 *                                                                                                                     // 14094
 * @providesModule ReactPropTypeLocationNames                                                                          // 14095
 */                                                                                                                    // 14096
                                                                                                                       // 14097
'use strict';                                                                                                          // 14098
                                                                                                                       // 14099
var ReactPropTypeLocationNames = {};                                                                                   // 14100
                                                                                                                       // 14101
if ("production" !== process.env.NODE_ENV) {                                                                           // 14102
  ReactPropTypeLocationNames = {                                                                                       // 14103
    prop: 'prop',                                                                                                      // 14104
    context: 'context',                                                                                                // 14105
    childContext: 'child context'                                                                                      // 14106
  };                                                                                                                   // 14107
}                                                                                                                      // 14108
                                                                                                                       // 14109
module.exports = ReactPropTypeLocationNames;                                                                           // 14110
                                                                                                                       // 14111
}).call(this,require('_process'))                                                                                      // 14112
                                                                                                                       // 14113
},{"_process":1}],"react/lib/ReactPropTypeLocations":[function(require,module,exports){                                // 14114
/**                                                                                                                    // 14115
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14116
 * All rights reserved.                                                                                                // 14117
 *                                                                                                                     // 14118
 * This source code is licensed under the BSD-style license found in the                                               // 14119
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 14120
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 14121
 *                                                                                                                     // 14122
 * @providesModule ReactPropTypeLocations                                                                              // 14123
 */                                                                                                                    // 14124
                                                                                                                       // 14125
'use strict';                                                                                                          // 14126
                                                                                                                       // 14127
var keyMirror = require("./keyMirror");                                                                                // 14128
                                                                                                                       // 14129
var ReactPropTypeLocations = keyMirror({                                                                               // 14130
  prop: null,                                                                                                          // 14131
  context: null,                                                                                                       // 14132
  childContext: null                                                                                                   // 14133
});                                                                                                                    // 14134
                                                                                                                       // 14135
module.exports = ReactPropTypeLocations;                                                                               // 14136
                                                                                                                       // 14137
},{"./keyMirror":"react/lib/keyMirror"}],"react/lib/ReactPropTypes":[function(require,module,exports){                 // 14138
/**                                                                                                                    // 14139
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14140
 * All rights reserved.                                                                                                // 14141
 *                                                                                                                     // 14142
 * This source code is licensed under the BSD-style license found in the                                               // 14143
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 14144
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 14145
 *                                                                                                                     // 14146
 * @providesModule ReactPropTypes                                                                                      // 14147
 */                                                                                                                    // 14148
                                                                                                                       // 14149
'use strict';                                                                                                          // 14150
                                                                                                                       // 14151
var ReactElement = require("./ReactElement");                                                                          // 14152
var ReactFragment = require("./ReactFragment");                                                                        // 14153
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");                                              // 14154
                                                                                                                       // 14155
var emptyFunction = require("./emptyFunction");                                                                        // 14156
                                                                                                                       // 14157
/**                                                                                                                    // 14158
 * Collection of methods that allow declaration and validation of props that are                                       // 14159
 * supplied to React components. Example usage:                                                                        // 14160
 *                                                                                                                     // 14161
 *   var Props = require('ReactPropTypes');                                                                            // 14162
 *   var MyArticle = React.createClass({                                                                               // 14163
 *     propTypes: {                                                                                                    // 14164
 *       // An optional string prop named "description".                                                               // 14165
 *       description: Props.string,                                                                                    // 14166
 *                                                                                                                     // 14167
 *       // A required enum prop named "category".                                                                     // 14168
 *       category: Props.oneOf(['News','Photos']).isRequired,                                                          // 14169
 *                                                                                                                     // 14170
 *       // A prop named "dialog" that requires an instance of Dialog.                                                 // 14171
 *       dialog: Props.instanceOf(Dialog).isRequired                                                                   // 14172
 *     },                                                                                                              // 14173
 *     render: function() { ... }                                                                                      // 14174
 *   });                                                                                                               // 14175
 *                                                                                                                     // 14176
 * A more formal specification of how these methods are used:                                                          // 14177
 *                                                                                                                     // 14178
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)                                         // 14179
 *   decl := ReactPropTypes.{type}(.isRequired)?                                                                       // 14180
 *                                                                                                                     // 14181
 * Each and every declaration produces a function with the same signature. This                                        // 14182
 * allows the creation of custom validation functions. For example:                                                    // 14183
 *                                                                                                                     // 14184
 *  var MyLink = React.createClass({                                                                                   // 14185
 *    propTypes: {                                                                                                     // 14186
 *      // An optional string or URI prop named "href".                                                                // 14187
 *      href: function(props, propName, componentName) {                                                               // 14188
 *        var propValue = props[propName];                                                                             // 14189
 *        if (propValue != null && typeof propValue !== 'string' &&                                                    // 14190
 *            !(propValue instanceof URI)) {                                                                           // 14191
 *          return new Error(                                                                                          // 14192
 *            'Expected a string or an URI for ' + propName + ' in ' +                                                 // 14193
 *            componentName                                                                                            // 14194
 *          );                                                                                                         // 14195
 *        }                                                                                                            // 14196
 *      }                                                                                                              // 14197
 *    },                                                                                                               // 14198
 *    render: function() {...}                                                                                         // 14199
 *  });                                                                                                                // 14200
 *                                                                                                                     // 14201
 * @internal                                                                                                           // 14202
 */                                                                                                                    // 14203
                                                                                                                       // 14204
var ANONYMOUS = '<<anonymous>>';                                                                                       // 14205
                                                                                                                       // 14206
var elementTypeChecker = createElementTypeChecker();                                                                   // 14207
var nodeTypeChecker = createNodeChecker();                                                                             // 14208
                                                                                                                       // 14209
var ReactPropTypes = {                                                                                                 // 14210
  array: createPrimitiveTypeChecker('array'),                                                                          // 14211
  bool: createPrimitiveTypeChecker('boolean'),                                                                         // 14212
  func: createPrimitiveTypeChecker('function'),                                                                        // 14213
  number: createPrimitiveTypeChecker('number'),                                                                        // 14214
  object: createPrimitiveTypeChecker('object'),                                                                        // 14215
  string: createPrimitiveTypeChecker('string'),                                                                        // 14216
                                                                                                                       // 14217
  any: createAnyTypeChecker(),                                                                                         // 14218
  arrayOf: createArrayOfTypeChecker,                                                                                   // 14219
  element: elementTypeChecker,                                                                                         // 14220
  instanceOf: createInstanceTypeChecker,                                                                               // 14221
  node: nodeTypeChecker,                                                                                               // 14222
  objectOf: createObjectOfTypeChecker,                                                                                 // 14223
  oneOf: createEnumTypeChecker,                                                                                        // 14224
  oneOfType: createUnionTypeChecker,                                                                                   // 14225
  shape: createShapeTypeChecker                                                                                        // 14226
};                                                                                                                     // 14227
                                                                                                                       // 14228
function createChainableTypeChecker(validate) {                                                                        // 14229
  function checkType(isRequired, props, propName, componentName, location) {                                           // 14230
    componentName = componentName || ANONYMOUS;                                                                        // 14231
    if (props[propName] == null) {                                                                                     // 14232
      var locationName = ReactPropTypeLocationNames[location];                                                         // 14233
      if (isRequired) {                                                                                                // 14234
        return new Error(                                                                                              // 14235
          ("Required " + locationName + " `" + propName + "` was not specified in ") +                                 // 14236
          ("`" + componentName + "`.")                                                                                 // 14237
        );                                                                                                             // 14238
      }                                                                                                                // 14239
      return null;                                                                                                     // 14240
    } else {                                                                                                           // 14241
      return validate(props, propName, componentName, location);                                                       // 14242
    }                                                                                                                  // 14243
  }                                                                                                                    // 14244
                                                                                                                       // 14245
  var chainedCheckType = checkType.bind(null, false);                                                                  // 14246
  chainedCheckType.isRequired = checkType.bind(null, true);                                                            // 14247
                                                                                                                       // 14248
  return chainedCheckType;                                                                                             // 14249
}                                                                                                                      // 14250
                                                                                                                       // 14251
function createPrimitiveTypeChecker(expectedType) {                                                                    // 14252
  function validate(props, propName, componentName, location) {                                                        // 14253
    var propValue = props[propName];                                                                                   // 14254
    var propType = getPropType(propValue);                                                                             // 14255
    if (propType !== expectedType) {                                                                                   // 14256
      var locationName = ReactPropTypeLocationNames[location];                                                         // 14257
      // `propValue` being instance of, say, date/regexp, pass the 'object'                                            // 14258
      // check, but we can offer a more precise error message here rather than                                         // 14259
      // 'of type `object`'.                                                                                           // 14260
      var preciseType = getPreciseType(propValue);                                                                     // 14261
                                                                                                                       // 14262
      return new Error(                                                                                                // 14263
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +                           // 14264
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")                                      // 14265
      );                                                                                                               // 14266
    }                                                                                                                  // 14267
    return null;                                                                                                       // 14268
  }                                                                                                                    // 14269
  return createChainableTypeChecker(validate);                                                                         // 14270
}                                                                                                                      // 14271
                                                                                                                       // 14272
function createAnyTypeChecker() {                                                                                      // 14273
  return createChainableTypeChecker(emptyFunction.thatReturns(null));                                                  // 14274
}                                                                                                                      // 14275
                                                                                                                       // 14276
function createArrayOfTypeChecker(typeChecker) {                                                                       // 14277
  function validate(props, propName, componentName, location) {                                                        // 14278
    var propValue = props[propName];                                                                                   // 14279
    if (!Array.isArray(propValue)) {                                                                                   // 14280
      var locationName = ReactPropTypeLocationNames[location];                                                         // 14281
      var propType = getPropType(propValue);                                                                           // 14282
      return new Error(                                                                                                // 14283
        ("Invalid " + locationName + " `" + propName + "` of type ") +                                                 // 14284
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")                                 // 14285
      );                                                                                                               // 14286
    }                                                                                                                  // 14287
    for (var i = 0; i < propValue.length; i++) {                                                                       // 14288
      var error = typeChecker(propValue, i, componentName, location);                                                  // 14289
      if (error instanceof Error) {                                                                                    // 14290
        return error;                                                                                                  // 14291
      }                                                                                                                // 14292
    }                                                                                                                  // 14293
    return null;                                                                                                       // 14294
  }                                                                                                                    // 14295
  return createChainableTypeChecker(validate);                                                                         // 14296
}                                                                                                                      // 14297
                                                                                                                       // 14298
function createElementTypeChecker() {                                                                                  // 14299
  function validate(props, propName, componentName, location) {                                                        // 14300
    if (!ReactElement.isValidElement(props[propName])) {                                                               // 14301
      var locationName = ReactPropTypeLocationNames[location];                                                         // 14302
      return new Error(                                                                                                // 14303
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +                                             // 14304
        ("`" + componentName + "`, expected a ReactElement.")                                                          // 14305
      );                                                                                                               // 14306
    }                                                                                                                  // 14307
    return null;                                                                                                       // 14308
  }                                                                                                                    // 14309
  return createChainableTypeChecker(validate);                                                                         // 14310
}                                                                                                                      // 14311
                                                                                                                       // 14312
function createInstanceTypeChecker(expectedClass) {                                                                    // 14313
  function validate(props, propName, componentName, location) {                                                        // 14314
    if (!(props[propName] instanceof expectedClass)) {                                                                 // 14315
      var locationName = ReactPropTypeLocationNames[location];                                                         // 14316
      var expectedClassName = expectedClass.name || ANONYMOUS;                                                         // 14317
      return new Error(                                                                                                // 14318
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +                                             // 14319
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")                                 // 14320
      );                                                                                                               // 14321
    }                                                                                                                  // 14322
    return null;                                                                                                       // 14323
  }                                                                                                                    // 14324
  return createChainableTypeChecker(validate);                                                                         // 14325
}                                                                                                                      // 14326
                                                                                                                       // 14327
function createEnumTypeChecker(expectedValues) {                                                                       // 14328
  function validate(props, propName, componentName, location) {                                                        // 14329
    var propValue = props[propName];                                                                                   // 14330
    for (var i = 0; i < expectedValues.length; i++) {                                                                  // 14331
      if (propValue === expectedValues[i]) {                                                                           // 14332
        return null;                                                                                                   // 14333
      }                                                                                                                // 14334
    }                                                                                                                  // 14335
                                                                                                                       // 14336
    var locationName = ReactPropTypeLocationNames[location];                                                           // 14337
    var valuesString = JSON.stringify(expectedValues);                                                                 // 14338
    return new Error(                                                                                                  // 14339
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +                              // 14340
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")                                   // 14341
    );                                                                                                                 // 14342
  }                                                                                                                    // 14343
  return createChainableTypeChecker(validate);                                                                         // 14344
}                                                                                                                      // 14345
                                                                                                                       // 14346
function createObjectOfTypeChecker(typeChecker) {                                                                      // 14347
  function validate(props, propName, componentName, location) {                                                        // 14348
    var propValue = props[propName];                                                                                   // 14349
    var propType = getPropType(propValue);                                                                             // 14350
    if (propType !== 'object') {                                                                                       // 14351
      var locationName = ReactPropTypeLocationNames[location];                                                         // 14352
      return new Error(                                                                                                // 14353
        ("Invalid " + locationName + " `" + propName + "` of type ") +                                                 // 14354
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")                                // 14355
      );                                                                                                               // 14356
    }                                                                                                                  // 14357
    for (var key in propValue) {                                                                                       // 14358
      if (propValue.hasOwnProperty(key)) {                                                                             // 14359
        var error = typeChecker(propValue, key, componentName, location);                                              // 14360
        if (error instanceof Error) {                                                                                  // 14361
          return error;                                                                                                // 14362
        }                                                                                                              // 14363
      }                                                                                                                // 14364
    }                                                                                                                  // 14365
    return null;                                                                                                       // 14366
  }                                                                                                                    // 14367
  return createChainableTypeChecker(validate);                                                                         // 14368
}                                                                                                                      // 14369
                                                                                                                       // 14370
function createUnionTypeChecker(arrayOfTypeCheckers) {                                                                 // 14371
  function validate(props, propName, componentName, location) {                                                        // 14372
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {                                                             // 14373
      var checker = arrayOfTypeCheckers[i];                                                                            // 14374
      if (checker(props, propName, componentName, location) == null) {                                                 // 14375
        return null;                                                                                                   // 14376
      }                                                                                                                // 14377
    }                                                                                                                  // 14378
                                                                                                                       // 14379
    var locationName = ReactPropTypeLocationNames[location];                                                           // 14380
    return new Error(                                                                                                  // 14381
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +                                               // 14382
      ("`" + componentName + "`.")                                                                                     // 14383
    );                                                                                                                 // 14384
  }                                                                                                                    // 14385
  return createChainableTypeChecker(validate);                                                                         // 14386
}                                                                                                                      // 14387
                                                                                                                       // 14388
function createNodeChecker() {                                                                                         // 14389
  function validate(props, propName, componentName, location) {                                                        // 14390
    if (!isNode(props[propName])) {                                                                                    // 14391
      var locationName = ReactPropTypeLocationNames[location];                                                         // 14392
      return new Error(                                                                                                // 14393
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +                                             // 14394
        ("`" + componentName + "`, expected a ReactNode.")                                                             // 14395
      );                                                                                                               // 14396
    }                                                                                                                  // 14397
    return null;                                                                                                       // 14398
  }                                                                                                                    // 14399
  return createChainableTypeChecker(validate);                                                                         // 14400
}                                                                                                                      // 14401
                                                                                                                       // 14402
function createShapeTypeChecker(shapeTypes) {                                                                          // 14403
  function validate(props, propName, componentName, location) {                                                        // 14404
    var propValue = props[propName];                                                                                   // 14405
    var propType = getPropType(propValue);                                                                             // 14406
    if (propType !== 'object') {                                                                                       // 14407
      var locationName = ReactPropTypeLocationNames[location];                                                         // 14408
      return new Error(                                                                                                // 14409
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +                              // 14410
        ("supplied to `" + componentName + "`, expected `object`.")                                                    // 14411
      );                                                                                                               // 14412
    }                                                                                                                  // 14413
    for (var key in shapeTypes) {                                                                                      // 14414
      var checker = shapeTypes[key];                                                                                   // 14415
      if (!checker) {                                                                                                  // 14416
        continue;                                                                                                      // 14417
      }                                                                                                                // 14418
      var error = checker(propValue, key, componentName, location);                                                    // 14419
      if (error) {                                                                                                     // 14420
        return error;                                                                                                  // 14421
      }                                                                                                                // 14422
    }                                                                                                                  // 14423
    return null;                                                                                                       // 14424
  }                                                                                                                    // 14425
  return createChainableTypeChecker(validate);                                                                         // 14426
}                                                                                                                      // 14427
                                                                                                                       // 14428
function isNode(propValue) {                                                                                           // 14429
  switch (typeof propValue) {                                                                                          // 14430
    case 'number':                                                                                                     // 14431
    case 'string':                                                                                                     // 14432
    case 'undefined':                                                                                                  // 14433
      return true;                                                                                                     // 14434
    case 'boolean':                                                                                                    // 14435
      return !propValue;                                                                                               // 14436
    case 'object':                                                                                                     // 14437
      if (Array.isArray(propValue)) {                                                                                  // 14438
        return propValue.every(isNode);                                                                                // 14439
      }                                                                                                                // 14440
      if (propValue === null || ReactElement.isValidElement(propValue)) {                                              // 14441
        return true;                                                                                                   // 14442
      }                                                                                                                // 14443
      propValue = ReactFragment.extractIfFragment(propValue);                                                          // 14444
      for (var k in propValue) {                                                                                       // 14445
        if (!isNode(propValue[k])) {                                                                                   // 14446
          return false;                                                                                                // 14447
        }                                                                                                              // 14448
      }                                                                                                                // 14449
      return true;                                                                                                     // 14450
    default:                                                                                                           // 14451
      return false;                                                                                                    // 14452
  }                                                                                                                    // 14453
}                                                                                                                      // 14454
                                                                                                                       // 14455
// Equivalent of `typeof` but with special handling for array and regexp.                                              // 14456
function getPropType(propValue) {                                                                                      // 14457
  var propType = typeof propValue;                                                                                     // 14458
  if (Array.isArray(propValue)) {                                                                                      // 14459
    return 'array';                                                                                                    // 14460
  }                                                                                                                    // 14461
  if (propValue instanceof RegExp) {                                                                                   // 14462
    // Old webkits (at least until Android 4.0) return 'function' rather than                                          // 14463
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/                                           // 14464
    // passes PropTypes.object.                                                                                        // 14465
    return 'object';                                                                                                   // 14466
  }                                                                                                                    // 14467
  return propType;                                                                                                     // 14468
}                                                                                                                      // 14469
                                                                                                                       // 14470
// This handles more types than `getPropType`. Only used for error messages.                                           // 14471
// See `createPrimitiveTypeChecker`.                                                                                   // 14472
function getPreciseType(propValue) {                                                                                   // 14473
  var propType = getPropType(propValue);                                                                               // 14474
  if (propType === 'object') {                                                                                         // 14475
    if (propValue instanceof Date) {                                                                                   // 14476
      return 'date';                                                                                                   // 14477
    } else if (propValue instanceof RegExp) {                                                                          // 14478
      return 'regexp';                                                                                                 // 14479
    }                                                                                                                  // 14480
  }                                                                                                                    // 14481
  return propType;                                                                                                     // 14482
}                                                                                                                      // 14483
                                                                                                                       // 14484
module.exports = ReactPropTypes;                                                                                       // 14485
                                                                                                                       // 14486
},{"./ReactElement":"react/lib/ReactElement","./ReactFragment":"react/lib/ReactFragment","./ReactPropTypeLocationNames":"react/lib/ReactPropTypeLocationNames","./emptyFunction":"react/lib/emptyFunction"}],"react/lib/ReactPutListenerQueue":[function(require,module,exports){
/**                                                                                                                    // 14488
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14489
 * All rights reserved.                                                                                                // 14490
 *                                                                                                                     // 14491
 * This source code is licensed under the BSD-style license found in the                                               // 14492
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 14493
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 14494
 *                                                                                                                     // 14495
 * @providesModule ReactPutListenerQueue                                                                               // 14496
 */                                                                                                                    // 14497
                                                                                                                       // 14498
'use strict';                                                                                                          // 14499
                                                                                                                       // 14500
var PooledClass = require("./PooledClass");                                                                            // 14501
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");                                                  // 14502
                                                                                                                       // 14503
var assign = require("./Object.assign");                                                                               // 14504
                                                                                                                       // 14505
function ReactPutListenerQueue() {                                                                                     // 14506
  this.listenersToPut = [];                                                                                            // 14507
}                                                                                                                      // 14508
                                                                                                                       // 14509
assign(ReactPutListenerQueue.prototype, {                                                                              // 14510
  enqueuePutListener: function(rootNodeID, propKey, propValue) {                                                       // 14511
    this.listenersToPut.push({                                                                                         // 14512
      rootNodeID: rootNodeID,                                                                                          // 14513
      propKey: propKey,                                                                                                // 14514
      propValue: propValue                                                                                             // 14515
    });                                                                                                                // 14516
  },                                                                                                                   // 14517
                                                                                                                       // 14518
  putListeners: function() {                                                                                           // 14519
    for (var i = 0; i < this.listenersToPut.length; i++) {                                                             // 14520
      var listenerToPut = this.listenersToPut[i];                                                                      // 14521
      ReactBrowserEventEmitter.putListener(                                                                            // 14522
        listenerToPut.rootNodeID,                                                                                      // 14523
        listenerToPut.propKey,                                                                                         // 14524
        listenerToPut.propValue                                                                                        // 14525
      );                                                                                                               // 14526
    }                                                                                                                  // 14527
  },                                                                                                                   // 14528
                                                                                                                       // 14529
  reset: function() {                                                                                                  // 14530
    this.listenersToPut.length = 0;                                                                                    // 14531
  },                                                                                                                   // 14532
                                                                                                                       // 14533
  destructor: function() {                                                                                             // 14534
    this.reset();                                                                                                      // 14535
  }                                                                                                                    // 14536
});                                                                                                                    // 14537
                                                                                                                       // 14538
PooledClass.addPoolingTo(ReactPutListenerQueue);                                                                       // 14539
                                                                                                                       // 14540
module.exports = ReactPutListenerQueue;                                                                                // 14541
                                                                                                                       // 14542
},{"./Object.assign":"react/lib/Object.assign","./PooledClass":"react/lib/PooledClass","./ReactBrowserEventEmitter":"react/lib/ReactBrowserEventEmitter"}],"react/lib/ReactReconcileTransaction":[function(require,module,exports){
/**                                                                                                                    // 14544
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14545
 * All rights reserved.                                                                                                // 14546
 *                                                                                                                     // 14547
 * This source code is licensed under the BSD-style license found in the                                               // 14548
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 14549
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 14550
 *                                                                                                                     // 14551
 * @providesModule ReactReconcileTransaction                                                                           // 14552
 * @typechecks static-only                                                                                             // 14553
 */                                                                                                                    // 14554
                                                                                                                       // 14555
'use strict';                                                                                                          // 14556
                                                                                                                       // 14557
var CallbackQueue = require("./CallbackQueue");                                                                        // 14558
var PooledClass = require("./PooledClass");                                                                            // 14559
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");                                                  // 14560
var ReactInputSelection = require("./ReactInputSelection");                                                            // 14561
var ReactPutListenerQueue = require("./ReactPutListenerQueue");                                                        // 14562
var Transaction = require("./Transaction");                                                                            // 14563
                                                                                                                       // 14564
var assign = require("./Object.assign");                                                                               // 14565
                                                                                                                       // 14566
/**                                                                                                                    // 14567
 * Ensures that, when possible, the selection range (currently selected text                                           // 14568
 * input) is not disturbed by performing the transaction.                                                              // 14569
 */                                                                                                                    // 14570
var SELECTION_RESTORATION = {                                                                                          // 14571
  /**                                                                                                                  // 14572
   * @return {Selection} Selection information.                                                                        // 14573
   */                                                                                                                  // 14574
  initialize: ReactInputSelection.getSelectionInformation,                                                             // 14575
  /**                                                                                                                  // 14576
   * @param {Selection} sel Selection information returned from `initialize`.                                          // 14577
   */                                                                                                                  // 14578
  close: ReactInputSelection.restoreSelection                                                                          // 14579
};                                                                                                                     // 14580
                                                                                                                       // 14581
/**                                                                                                                    // 14582
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to                                        // 14583
 * high level DOM manipulations (like temporarily removing a text input from the                                       // 14584
 * DOM).                                                                                                               // 14585
 */                                                                                                                    // 14586
var EVENT_SUPPRESSION = {                                                                                              // 14587
  /**                                                                                                                  // 14588
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before                                         // 14589
   * the reconciliation.                                                                                               // 14590
   */                                                                                                                  // 14591
  initialize: function() {                                                                                             // 14592
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();                                                       // 14593
    ReactBrowserEventEmitter.setEnabled(false);                                                                        // 14594
    return currentlyEnabled;                                                                                           // 14595
  },                                                                                                                   // 14596
                                                                                                                       // 14597
  /**                                                                                                                  // 14598
   * @param {boolean} previouslyEnabled Enabled status of                                                              // 14599
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`                                           // 14600
   *   restores the previous value.                                                                                    // 14601
   */                                                                                                                  // 14602
  close: function(previouslyEnabled) {                                                                                 // 14603
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);                                                            // 14604
  }                                                                                                                    // 14605
};                                                                                                                     // 14606
                                                                                                                       // 14607
/**                                                                                                                    // 14608
 * Provides a queue for collecting `componentDidMount` and                                                             // 14609
 * `componentDidUpdate` callbacks during the the transaction.                                                          // 14610
 */                                                                                                                    // 14611
var ON_DOM_READY_QUEUEING = {                                                                                          // 14612
  /**                                                                                                                  // 14613
   * Initializes the internal `onDOMReady` queue.                                                                      // 14614
   */                                                                                                                  // 14615
  initialize: function() {                                                                                             // 14616
    this.reactMountReady.reset();                                                                                      // 14617
  },                                                                                                                   // 14618
                                                                                                                       // 14619
  /**                                                                                                                  // 14620
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.                                               // 14621
   */                                                                                                                  // 14622
  close: function() {                                                                                                  // 14623
    this.reactMountReady.notifyAll();                                                                                  // 14624
  }                                                                                                                    // 14625
};                                                                                                                     // 14626
                                                                                                                       // 14627
var PUT_LISTENER_QUEUEING = {                                                                                          // 14628
  initialize: function() {                                                                                             // 14629
    this.putListenerQueue.reset();                                                                                     // 14630
  },                                                                                                                   // 14631
                                                                                                                       // 14632
  close: function() {                                                                                                  // 14633
    this.putListenerQueue.putListeners();                                                                              // 14634
  }                                                                                                                    // 14635
};                                                                                                                     // 14636
                                                                                                                       // 14637
/**                                                                                                                    // 14638
 * Executed within the scope of the `Transaction` instance. Consider these as                                          // 14639
 * being member methods, but with an implied ordering while being isolated from                                        // 14640
 * each other.                                                                                                         // 14641
 */                                                                                                                    // 14642
var TRANSACTION_WRAPPERS = [                                                                                           // 14643
  PUT_LISTENER_QUEUEING,                                                                                               // 14644
  SELECTION_RESTORATION,                                                                                               // 14645
  EVENT_SUPPRESSION,                                                                                                   // 14646
  ON_DOM_READY_QUEUEING                                                                                                // 14647
];                                                                                                                     // 14648
                                                                                                                       // 14649
/**                                                                                                                    // 14650
 * Currently:                                                                                                          // 14651
 * - The order that these are listed in the transaction is critical:                                                   // 14652
 * - Suppresses events.                                                                                                // 14653
 * - Restores selection range.                                                                                         // 14654
 *                                                                                                                     // 14655
 * Future:                                                                                                             // 14656
 * - Restore document/overflow scroll positions that were unintentionally                                              // 14657
 *   modified via DOM insertions above the top viewport boundary.                                                      // 14658
 * - Implement/integrate with customized constraint based layout system and keep                                       // 14659
 *   track of which dimensions must be remeasured.                                                                     // 14660
 *                                                                                                                     // 14661
 * @class ReactReconcileTransaction                                                                                    // 14662
 */                                                                                                                    // 14663
function ReactReconcileTransaction() {                                                                                 // 14664
  this.reinitializeTransaction();                                                                                      // 14665
  // Only server-side rendering really needs this option (see                                                          // 14666
  // `ReactServerRendering`), but server-side uses                                                                     // 14667
  // `ReactServerRenderingTransaction` instead. This option is here so that it's                                       // 14668
  // accessible and defaults to false when `ReactDOMComponent` and                                                     // 14669
  // `ReactTextComponent` checks it in `mountComponent`.`                                                              // 14670
  this.renderToStaticMarkup = false;                                                                                   // 14671
  this.reactMountReady = CallbackQueue.getPooled(null);                                                                // 14672
  this.putListenerQueue = ReactPutListenerQueue.getPooled();                                                           // 14673
}                                                                                                                      // 14674
                                                                                                                       // 14675
var Mixin = {                                                                                                          // 14676
  /**                                                                                                                  // 14677
   * @see Transaction                                                                                                  // 14678
   * @abstract                                                                                                         // 14679
   * @final                                                                                                            // 14680
   * @return {array<object>} List of operation wrap proceedures.                                                       // 14681
   *   TODO: convert to array<TransactionWrapper>                                                                      // 14682
   */                                                                                                                  // 14683
  getTransactionWrappers: function() {                                                                                 // 14684
    return TRANSACTION_WRAPPERS;                                                                                       // 14685
  },                                                                                                                   // 14686
                                                                                                                       // 14687
  /**                                                                                                                  // 14688
   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 14689
   */                                                                                                                  // 14690
  getReactMountReady: function() {                                                                                     // 14691
    return this.reactMountReady;                                                                                       // 14692
  },                                                                                                                   // 14693
                                                                                                                       // 14694
  getPutListenerQueue: function() {                                                                                    // 14695
    return this.putListenerQueue;                                                                                      // 14696
  },                                                                                                                   // 14697
                                                                                                                       // 14698
  /**                                                                                                                  // 14699
   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 14700
   * instance to be resused.                                                                                           // 14701
   */                                                                                                                  // 14702
  destructor: function() {                                                                                             // 14703
    CallbackQueue.release(this.reactMountReady);                                                                       // 14704
    this.reactMountReady = null;                                                                                       // 14705
                                                                                                                       // 14706
    ReactPutListenerQueue.release(this.putListenerQueue);                                                              // 14707
    this.putListenerQueue = null;                                                                                      // 14708
  }                                                                                                                    // 14709
};                                                                                                                     // 14710
                                                                                                                       // 14711
                                                                                                                       // 14712
assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);                                                 // 14713
                                                                                                                       // 14714
PooledClass.addPoolingTo(ReactReconcileTransaction);                                                                   // 14715
                                                                                                                       // 14716
module.exports = ReactReconcileTransaction;                                                                            // 14717
                                                                                                                       // 14718
},{"./CallbackQueue":"react/lib/CallbackQueue","./Object.assign":"react/lib/Object.assign","./PooledClass":"react/lib/PooledClass","./ReactBrowserEventEmitter":"react/lib/ReactBrowserEventEmitter","./ReactInputSelection":"react/lib/ReactInputSelection","./ReactPutListenerQueue":"react/lib/ReactPutListenerQueue","./Transaction":"react/lib/Transaction"}],"react/lib/ReactReconciler":[function(require,module,exports){
(function (process){                                                                                                   // 14720
/**                                                                                                                    // 14721
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14722
 * All rights reserved.                                                                                                // 14723
 *                                                                                                                     // 14724
 * This source code is licensed under the BSD-style license found in the                                               // 14725
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 14726
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 14727
 *                                                                                                                     // 14728
 * @providesModule ReactReconciler                                                                                     // 14729
 */                                                                                                                    // 14730
                                                                                                                       // 14731
'use strict';                                                                                                          // 14732
                                                                                                                       // 14733
var ReactRef = require("./ReactRef");                                                                                  // 14734
var ReactElementValidator = require("./ReactElementValidator");                                                        // 14735
                                                                                                                       // 14736
/**                                                                                                                    // 14737
 * Helper to call ReactRef.attachRefs with this composite component, split out                                         // 14738
 * to avoid allocations in the transaction mount-ready queue.                                                          // 14739
 */                                                                                                                    // 14740
function attachRefs() {                                                                                                // 14741
  ReactRef.attachRefs(this, this._currentElement);                                                                     // 14742
}                                                                                                                      // 14743
                                                                                                                       // 14744
var ReactReconciler = {                                                                                                // 14745
                                                                                                                       // 14746
  /**                                                                                                                  // 14747
   * Initializes the component, renders markup, and registers event listeners.                                         // 14748
   *                                                                                                                   // 14749
   * @param {ReactComponent} internalInstance                                                                          // 14750
   * @param {string} rootID DOM ID of the root node.                                                                   // 14751
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 14752
   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 14753
   * @final                                                                                                            // 14754
   * @internal                                                                                                         // 14755
   */                                                                                                                  // 14756
  mountComponent: function(internalInstance, rootID, transaction, context) {                                           // 14757
    var markup = internalInstance.mountComponent(rootID, transaction, context);                                        // 14758
    if ("production" !== process.env.NODE_ENV) {                                                                       // 14759
      ReactElementValidator.checkAndWarnForMutatedProps(                                                               // 14760
        internalInstance._currentElement                                                                               // 14761
      );                                                                                                               // 14762
    }                                                                                                                  // 14763
    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);                                            // 14764
    return markup;                                                                                                     // 14765
  },                                                                                                                   // 14766
                                                                                                                       // 14767
  /**                                                                                                                  // 14768
   * Releases any resources allocated by `mountComponent`.                                                             // 14769
   *                                                                                                                   // 14770
   * @final                                                                                                            // 14771
   * @internal                                                                                                         // 14772
   */                                                                                                                  // 14773
  unmountComponent: function(internalInstance) {                                                                       // 14774
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);                                           // 14775
    internalInstance.unmountComponent();                                                                               // 14776
  },                                                                                                                   // 14777
                                                                                                                       // 14778
  /**                                                                                                                  // 14779
   * Update a component using a new element.                                                                           // 14780
   *                                                                                                                   // 14781
   * @param {ReactComponent} internalInstance                                                                          // 14782
   * @param {ReactElement} nextElement                                                                                 // 14783
   * @param {ReactReconcileTransaction} transaction                                                                    // 14784
   * @param {object} context                                                                                           // 14785
   * @internal                                                                                                         // 14786
   */                                                                                                                  // 14787
  receiveComponent: function(                                                                                          // 14788
    internalInstance, nextElement, transaction, context                                                                // 14789
  ) {                                                                                                                  // 14790
    var prevElement = internalInstance._currentElement;                                                                // 14791
                                                                                                                       // 14792
    if (nextElement === prevElement && nextElement._owner != null) {                                                   // 14793
      // Since elements are immutable after the owner is rendered,                                                     // 14794
      // we can do a cheap identity compare here to determine if this is a                                             // 14795
      // superfluous reconcile. It's possible for state to be mutable but such                                         // 14796
      // change should trigger an update of the owner which would recreate                                             // 14797
      // the element. We explicitly check for the existence of an owner since                                          // 14798
      // it's possible for an element created outside a composite to be                                                // 14799
      // deeply mutated and reused.                                                                                    // 14800
      return;                                                                                                          // 14801
    }                                                                                                                  // 14802
                                                                                                                       // 14803
    if ("production" !== process.env.NODE_ENV) {                                                                       // 14804
      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);                                                  // 14805
    }                                                                                                                  // 14806
                                                                                                                       // 14807
    var refsChanged = ReactRef.shouldUpdateRefs(                                                                       // 14808
      prevElement,                                                                                                     // 14809
      nextElement                                                                                                      // 14810
    );                                                                                                                 // 14811
                                                                                                                       // 14812
    if (refsChanged) {                                                                                                 // 14813
      ReactRef.detachRefs(internalInstance, prevElement);                                                              // 14814
    }                                                                                                                  // 14815
                                                                                                                       // 14816
    internalInstance.receiveComponent(nextElement, transaction, context);                                              // 14817
                                                                                                                       // 14818
    if (refsChanged) {                                                                                                 // 14819
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);                                          // 14820
    }                                                                                                                  // 14821
  },                                                                                                                   // 14822
                                                                                                                       // 14823
  /**                                                                                                                  // 14824
   * Flush any dirty changes in a component.                                                                           // 14825
   *                                                                                                                   // 14826
   * @param {ReactComponent} internalInstance                                                                          // 14827
   * @param {ReactReconcileTransaction} transaction                                                                    // 14828
   * @internal                                                                                                         // 14829
   */                                                                                                                  // 14830
  performUpdateIfNecessary: function(                                                                                  // 14831
    internalInstance,                                                                                                  // 14832
    transaction                                                                                                        // 14833
  ) {                                                                                                                  // 14834
    internalInstance.performUpdateIfNecessary(transaction);                                                            // 14835
  }                                                                                                                    // 14836
                                                                                                                       // 14837
};                                                                                                                     // 14838
                                                                                                                       // 14839
module.exports = ReactReconciler;                                                                                      // 14840
                                                                                                                       // 14841
}).call(this,require('_process'))                                                                                      // 14842
                                                                                                                       // 14843
},{"./ReactElementValidator":"react/lib/ReactElementValidator","./ReactRef":"react/lib/ReactRef","_process":1}],"react/lib/ReactRef":[function(require,module,exports){
/**                                                                                                                    // 14845
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14846
 * All rights reserved.                                                                                                // 14847
 *                                                                                                                     // 14848
 * This source code is licensed under the BSD-style license found in the                                               // 14849
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 14850
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 14851
 *                                                                                                                     // 14852
 * @providesModule ReactRef                                                                                            // 14853
 */                                                                                                                    // 14854
                                                                                                                       // 14855
'use strict';                                                                                                          // 14856
                                                                                                                       // 14857
var ReactOwner = require("./ReactOwner");                                                                              // 14858
                                                                                                                       // 14859
var ReactRef = {};                                                                                                     // 14860
                                                                                                                       // 14861
function attachRef(ref, component, owner) {                                                                            // 14862
  if (typeof ref === 'function') {                                                                                     // 14863
    ref(component.getPublicInstance());                                                                                // 14864
  } else {                                                                                                             // 14865
    // Legacy ref                                                                                                      // 14866
    ReactOwner.addComponentAsRefTo(component, ref, owner);                                                             // 14867
  }                                                                                                                    // 14868
}                                                                                                                      // 14869
                                                                                                                       // 14870
function detachRef(ref, component, owner) {                                                                            // 14871
  if (typeof ref === 'function') {                                                                                     // 14872
    ref(null);                                                                                                         // 14873
  } else {                                                                                                             // 14874
    // Legacy ref                                                                                                      // 14875
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);                                                        // 14876
  }                                                                                                                    // 14877
}                                                                                                                      // 14878
                                                                                                                       // 14879
ReactRef.attachRefs = function(instance, element) {                                                                    // 14880
  var ref = element.ref;                                                                                               // 14881
  if (ref != null) {                                                                                                   // 14882
    attachRef(ref, instance, element._owner);                                                                          // 14883
  }                                                                                                                    // 14884
};                                                                                                                     // 14885
                                                                                                                       // 14886
ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {                                                       // 14887
  // If either the owner or a `ref` has changed, make sure the newest owner                                            // 14888
  // has stored a reference to `this`, and the previous owner (if different)                                           // 14889
  // has forgotten the reference to `this`. We use the element instead                                                 // 14890
  // of the public this.props because the post processing cannot determine                                             // 14891
  // a ref. The ref conceptually lives on the element.                                                                 // 14892
                                                                                                                       // 14893
  // TODO: Should this even be possible? The owner cannot change because                                               // 14894
  // it's forbidden by shouldUpdateReactComponent. The ref can change                                                  // 14895
  // if you swap the keys of but not the refs. Reconsider where this check                                             // 14896
  // is made. It probably belongs where the key checking and                                                           // 14897
  // instantiateReactComponent is done.                                                                                // 14898
                                                                                                                       // 14899
  return (                                                                                                             // 14900
    nextElement._owner !== prevElement._owner ||                                                                       // 14901
    nextElement.ref !== prevElement.ref                                                                                // 14902
  );                                                                                                                   // 14903
};                                                                                                                     // 14904
                                                                                                                       // 14905
ReactRef.detachRefs = function(instance, element) {                                                                    // 14906
  var ref = element.ref;                                                                                               // 14907
  if (ref != null) {                                                                                                   // 14908
    detachRef(ref, instance, element._owner);                                                                          // 14909
  }                                                                                                                    // 14910
};                                                                                                                     // 14911
                                                                                                                       // 14912
module.exports = ReactRef;                                                                                             // 14913
                                                                                                                       // 14914
},{"./ReactOwner":"react/lib/ReactOwner"}],"react/lib/ReactRootIndex":[function(require,module,exports){               // 14915
/**                                                                                                                    // 14916
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14917
 * All rights reserved.                                                                                                // 14918
 *                                                                                                                     // 14919
 * This source code is licensed under the BSD-style license found in the                                               // 14920
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 14921
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 14922
 *                                                                                                                     // 14923
 * @providesModule ReactRootIndex                                                                                      // 14924
 * @typechecks                                                                                                         // 14925
 */                                                                                                                    // 14926
                                                                                                                       // 14927
'use strict';                                                                                                          // 14928
                                                                                                                       // 14929
var ReactRootIndexInjection = {                                                                                        // 14930
  /**                                                                                                                  // 14931
   * @param {function} _createReactRootIndex                                                                           // 14932
   */                                                                                                                  // 14933
  injectCreateReactRootIndex: function(_createReactRootIndex) {                                                        // 14934
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;                                                       // 14935
  }                                                                                                                    // 14936
};                                                                                                                     // 14937
                                                                                                                       // 14938
var ReactRootIndex = {                                                                                                 // 14939
  createReactRootIndex: null,                                                                                          // 14940
  injection: ReactRootIndexInjection                                                                                   // 14941
};                                                                                                                     // 14942
                                                                                                                       // 14943
module.exports = ReactRootIndex;                                                                                       // 14944
                                                                                                                       // 14945
},{}],"react/lib/ReactServerRenderingTransaction":[function(require,module,exports){                                   // 14946
/**                                                                                                                    // 14947
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 14948
 * All rights reserved.                                                                                                // 14949
 *                                                                                                                     // 14950
 * This source code is licensed under the BSD-style license found in the                                               // 14951
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 14952
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 14953
 *                                                                                                                     // 14954
 * @providesModule ReactServerRenderingTransaction                                                                     // 14955
 * @typechecks                                                                                                         // 14956
 */                                                                                                                    // 14957
                                                                                                                       // 14958
'use strict';                                                                                                          // 14959
                                                                                                                       // 14960
var PooledClass = require("./PooledClass");                                                                            // 14961
var CallbackQueue = require("./CallbackQueue");                                                                        // 14962
var ReactPutListenerQueue = require("./ReactPutListenerQueue");                                                        // 14963
var Transaction = require("./Transaction");                                                                            // 14964
                                                                                                                       // 14965
var assign = require("./Object.assign");                                                                               // 14966
var emptyFunction = require("./emptyFunction");                                                                        // 14967
                                                                                                                       // 14968
/**                                                                                                                    // 14969
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks                                              // 14970
 * during the performing of the transaction.                                                                           // 14971
 */                                                                                                                    // 14972
var ON_DOM_READY_QUEUEING = {                                                                                          // 14973
  /**                                                                                                                  // 14974
   * Initializes the internal `onDOMReady` queue.                                                                      // 14975
   */                                                                                                                  // 14976
  initialize: function() {                                                                                             // 14977
    this.reactMountReady.reset();                                                                                      // 14978
  },                                                                                                                   // 14979
                                                                                                                       // 14980
  close: emptyFunction                                                                                                 // 14981
};                                                                                                                     // 14982
                                                                                                                       // 14983
var PUT_LISTENER_QUEUEING = {                                                                                          // 14984
  initialize: function() {                                                                                             // 14985
    this.putListenerQueue.reset();                                                                                     // 14986
  },                                                                                                                   // 14987
                                                                                                                       // 14988
  close: emptyFunction                                                                                                 // 14989
};                                                                                                                     // 14990
                                                                                                                       // 14991
/**                                                                                                                    // 14992
 * Executed within the scope of the `Transaction` instance. Consider these as                                          // 14993
 * being member methods, but with an implied ordering while being isolated from                                        // 14994
 * each other.                                                                                                         // 14995
 */                                                                                                                    // 14996
var TRANSACTION_WRAPPERS = [                                                                                           // 14997
  PUT_LISTENER_QUEUEING,                                                                                               // 14998
  ON_DOM_READY_QUEUEING                                                                                                // 14999
];                                                                                                                     // 15000
                                                                                                                       // 15001
/**                                                                                                                    // 15002
 * @class ReactServerRenderingTransaction                                                                              // 15003
 * @param {boolean} renderToStaticMarkup                                                                               // 15004
 */                                                                                                                    // 15005
function ReactServerRenderingTransaction(renderToStaticMarkup) {                                                       // 15006
  this.reinitializeTransaction();                                                                                      // 15007
  this.renderToStaticMarkup = renderToStaticMarkup;                                                                    // 15008
  this.reactMountReady = CallbackQueue.getPooled(null);                                                                // 15009
  this.putListenerQueue = ReactPutListenerQueue.getPooled();                                                           // 15010
}                                                                                                                      // 15011
                                                                                                                       // 15012
var Mixin = {                                                                                                          // 15013
  /**                                                                                                                  // 15014
   * @see Transaction                                                                                                  // 15015
   * @abstract                                                                                                         // 15016
   * @final                                                                                                            // 15017
   * @return {array} Empty list of operation wrap proceedures.                                                         // 15018
   */                                                                                                                  // 15019
  getTransactionWrappers: function() {                                                                                 // 15020
    return TRANSACTION_WRAPPERS;                                                                                       // 15021
  },                                                                                                                   // 15022
                                                                                                                       // 15023
  /**                                                                                                                  // 15024
   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 15025
   */                                                                                                                  // 15026
  getReactMountReady: function() {                                                                                     // 15027
    return this.reactMountReady;                                                                                       // 15028
  },                                                                                                                   // 15029
                                                                                                                       // 15030
  getPutListenerQueue: function() {                                                                                    // 15031
    return this.putListenerQueue;                                                                                      // 15032
  },                                                                                                                   // 15033
                                                                                                                       // 15034
  /**                                                                                                                  // 15035
   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 15036
   * instance to be resused.                                                                                           // 15037
   */                                                                                                                  // 15038
  destructor: function() {                                                                                             // 15039
    CallbackQueue.release(this.reactMountReady);                                                                       // 15040
    this.reactMountReady = null;                                                                                       // 15041
                                                                                                                       // 15042
    ReactPutListenerQueue.release(this.putListenerQueue);                                                              // 15043
    this.putListenerQueue = null;                                                                                      // 15044
  }                                                                                                                    // 15045
};                                                                                                                     // 15046
                                                                                                                       // 15047
                                                                                                                       // 15048
assign(                                                                                                                // 15049
  ReactServerRenderingTransaction.prototype,                                                                           // 15050
  Transaction.Mixin,                                                                                                   // 15051
  Mixin                                                                                                                // 15052
);                                                                                                                     // 15053
                                                                                                                       // 15054
PooledClass.addPoolingTo(ReactServerRenderingTransaction);                                                             // 15055
                                                                                                                       // 15056
module.exports = ReactServerRenderingTransaction;                                                                      // 15057
                                                                                                                       // 15058
},{"./CallbackQueue":"react/lib/CallbackQueue","./Object.assign":"react/lib/Object.assign","./PooledClass":"react/lib/PooledClass","./ReactPutListenerQueue":"react/lib/ReactPutListenerQueue","./Transaction":"react/lib/Transaction","./emptyFunction":"react/lib/emptyFunction"}],"react/lib/ReactServerRendering":[function(require,module,exports){
(function (process){                                                                                                   // 15060
/**                                                                                                                    // 15061
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 15062
 * All rights reserved.                                                                                                // 15063
 *                                                                                                                     // 15064
 * This source code is licensed under the BSD-style license found in the                                               // 15065
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 15066
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 15067
 *                                                                                                                     // 15068
 * @typechecks static-only                                                                                             // 15069
 * @providesModule ReactServerRendering                                                                                // 15070
 */                                                                                                                    // 15071
'use strict';                                                                                                          // 15072
                                                                                                                       // 15073
var ReactElement = require("./ReactElement");                                                                          // 15074
var ReactInstanceHandles = require("./ReactInstanceHandles");                                                          // 15075
var ReactMarkupChecksum = require("./ReactMarkupChecksum");                                                            // 15076
var ReactServerRenderingTransaction =                                                                                  // 15077
  require("./ReactServerRenderingTransaction");                                                                        // 15078
                                                                                                                       // 15079
var emptyObject = require("./emptyObject");                                                                            // 15080
var instantiateReactComponent = require("./instantiateReactComponent");                                                // 15081
var invariant = require("./invariant");                                                                                // 15082
                                                                                                                       // 15083
/**                                                                                                                    // 15084
 * @param {ReactElement} element                                                                                       // 15085
 * @return {string} the HTML markup                                                                                    // 15086
 */                                                                                                                    // 15087
function renderToString(element) {                                                                                     // 15088
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 15089
    ReactElement.isValidElement(element),                                                                              // 15090
    'renderToString(): You must pass a valid ReactElement.'                                                            // 15091
  ) : invariant(ReactElement.isValidElement(element)));                                                                // 15092
                                                                                                                       // 15093
  var transaction;                                                                                                     // 15094
  try {                                                                                                                // 15095
    var id = ReactInstanceHandles.createReactRootID();                                                                 // 15096
    transaction = ReactServerRenderingTransaction.getPooled(false);                                                    // 15097
                                                                                                                       // 15098
    return transaction.perform(function() {                                                                            // 15099
      var componentInstance = instantiateReactComponent(element, null);                                                // 15100
      var markup =                                                                                                     // 15101
        componentInstance.mountComponent(id, transaction, emptyObject);                                                // 15102
      return ReactMarkupChecksum.addChecksumToMarkup(markup);                                                          // 15103
    }, null);                                                                                                          // 15104
  } finally {                                                                                                          // 15105
    ReactServerRenderingTransaction.release(transaction);                                                              // 15106
  }                                                                                                                    // 15107
}                                                                                                                      // 15108
                                                                                                                       // 15109
/**                                                                                                                    // 15110
 * @param {ReactElement} element                                                                                       // 15111
 * @return {string} the HTML markup, without the extra React ID and checksum                                           // 15112
 * (for generating static pages)                                                                                       // 15113
 */                                                                                                                    // 15114
function renderToStaticMarkup(element) {                                                                               // 15115
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 15116
    ReactElement.isValidElement(element),                                                                              // 15117
    'renderToStaticMarkup(): You must pass a valid ReactElement.'                                                      // 15118
  ) : invariant(ReactElement.isValidElement(element)));                                                                // 15119
                                                                                                                       // 15120
  var transaction;                                                                                                     // 15121
  try {                                                                                                                // 15122
    var id = ReactInstanceHandles.createReactRootID();                                                                 // 15123
    transaction = ReactServerRenderingTransaction.getPooled(true);                                                     // 15124
                                                                                                                       // 15125
    return transaction.perform(function() {                                                                            // 15126
      var componentInstance = instantiateReactComponent(element, null);                                                // 15127
      return componentInstance.mountComponent(id, transaction, emptyObject);                                           // 15128
    }, null);                                                                                                          // 15129
  } finally {                                                                                                          // 15130
    ReactServerRenderingTransaction.release(transaction);                                                              // 15131
  }                                                                                                                    // 15132
}                                                                                                                      // 15133
                                                                                                                       // 15134
module.exports = {                                                                                                     // 15135
  renderToString: renderToString,                                                                                      // 15136
  renderToStaticMarkup: renderToStaticMarkup                                                                           // 15137
};                                                                                                                     // 15138
                                                                                                                       // 15139
}).call(this,require('_process'))                                                                                      // 15140
                                                                                                                       // 15141
},{"./ReactElement":"react/lib/ReactElement","./ReactInstanceHandles":"react/lib/ReactInstanceHandles","./ReactMarkupChecksum":"react/lib/ReactMarkupChecksum","./ReactServerRenderingTransaction":"react/lib/ReactServerRenderingTransaction","./emptyObject":"react/lib/emptyObject","./instantiateReactComponent":"react/lib/instantiateReactComponent","./invariant":"react/lib/invariant","_process":1}],"react/lib/ReactStateSetters":[function(require,module,exports){
/**                                                                                                                    // 15143
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 15144
 * All rights reserved.                                                                                                // 15145
 *                                                                                                                     // 15146
 * This source code is licensed under the BSD-style license found in the                                               // 15147
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 15148
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 15149
 *                                                                                                                     // 15150
 * @providesModule ReactStateSetters                                                                                   // 15151
 */                                                                                                                    // 15152
                                                                                                                       // 15153
'use strict';                                                                                                          // 15154
                                                                                                                       // 15155
var ReactStateSetters = {                                                                                              // 15156
  /**                                                                                                                  // 15157
   * Returns a function that calls the provided function, and uses the result                                          // 15158
   * of that to set the component's state.                                                                             // 15159
   *                                                                                                                   // 15160
   * @param {ReactCompositeComponent} component                                                                        // 15161
   * @param {function} funcReturningState Returned callback uses this to                                               // 15162
   *                                      determine how to update state.                                               // 15163
   * @return {function} callback that when invoked uses funcReturningState to                                          // 15164
   *                    determined the object literal to setState.                                                     // 15165
   */                                                                                                                  // 15166
  createStateSetter: function(component, funcReturningState) {                                                         // 15167
    return function(a, b, c, d, e, f) {                                                                                // 15168
      var partialState = funcReturningState.call(component, a, b, c, d, e, f);                                         // 15169
      if (partialState) {                                                                                              // 15170
        component.setState(partialState);                                                                              // 15171
      }                                                                                                                // 15172
    };                                                                                                                 // 15173
  },                                                                                                                   // 15174
                                                                                                                       // 15175
  /**                                                                                                                  // 15176
   * Returns a single-argument callback that can be used to update a single                                            // 15177
   * key in the component's state.                                                                                     // 15178
   *                                                                                                                   // 15179
   * Note: this is memoized function, which makes it inexpensive to call.                                              // 15180
   *                                                                                                                   // 15181
   * @param {ReactCompositeComponent} component                                                                        // 15182
   * @param {string} key The key in the state that you should update.                                                  // 15183
   * @return {function} callback of 1 argument which calls setState() with                                             // 15184
   *                    the provided keyName and callback argument.                                                    // 15185
   */                                                                                                                  // 15186
  createStateKeySetter: function(component, key) {                                                                     // 15187
    // Memoize the setters.                                                                                            // 15188
    var cache = component.__keySetters || (component.__keySetters = {});                                               // 15189
    return cache[key] || (cache[key] = createStateKeySetter(component, key));                                          // 15190
  }                                                                                                                    // 15191
};                                                                                                                     // 15192
                                                                                                                       // 15193
function createStateKeySetter(component, key) {                                                                        // 15194
  // Partial state is allocated outside of the function closure so it can be                                           // 15195
  // reused with every call, avoiding memory allocation when this function                                             // 15196
  // is called.                                                                                                        // 15197
  var partialState = {};                                                                                               // 15198
  return function stateKeySetter(value) {                                                                              // 15199
    partialState[key] = value;                                                                                         // 15200
    component.setState(partialState);                                                                                  // 15201
  };                                                                                                                   // 15202
}                                                                                                                      // 15203
                                                                                                                       // 15204
ReactStateSetters.Mixin = {                                                                                            // 15205
  /**                                                                                                                  // 15206
   * Returns a function that calls the provided function, and uses the result                                          // 15207
   * of that to set the component's state.                                                                             // 15208
   *                                                                                                                   // 15209
   * For example, these statements are equivalent:                                                                     // 15210
   *                                                                                                                   // 15211
   *   this.setState({x: 1});                                                                                          // 15212
   *   this.createStateSetter(function(xValue) {                                                                       // 15213
   *     return {x: xValue};                                                                                           // 15214
   *   })(1);                                                                                                          // 15215
   *                                                                                                                   // 15216
   * @param {function} funcReturningState Returned callback uses this to                                               // 15217
   *                                      determine how to update state.                                               // 15218
   * @return {function} callback that when invoked uses funcReturningState to                                          // 15219
   *                    determined the object literal to setState.                                                     // 15220
   */                                                                                                                  // 15221
  createStateSetter: function(funcReturningState) {                                                                    // 15222
    return ReactStateSetters.createStateSetter(this, funcReturningState);                                              // 15223
  },                                                                                                                   // 15224
                                                                                                                       // 15225
  /**                                                                                                                  // 15226
   * Returns a single-argument callback that can be used to update a single                                            // 15227
   * key in the component's state.                                                                                     // 15228
   *                                                                                                                   // 15229
   * For example, these statements are equivalent:                                                                     // 15230
   *                                                                                                                   // 15231
   *   this.setState({x: 1});                                                                                          // 15232
   *   this.createStateKeySetter('x')(1);                                                                              // 15233
   *                                                                                                                   // 15234
   * Note: this is memoized function, which makes it inexpensive to call.                                              // 15235
   *                                                                                                                   // 15236
   * @param {string} key The key in the state that you should update.                                                  // 15237
   * @return {function} callback of 1 argument which calls setState() with                                             // 15238
   *                    the provided keyName and callback argument.                                                    // 15239
   */                                                                                                                  // 15240
  createStateKeySetter: function(key) {                                                                                // 15241
    return ReactStateSetters.createStateKeySetter(this, key);                                                          // 15242
  }                                                                                                                    // 15243
};                                                                                                                     // 15244
                                                                                                                       // 15245
module.exports = ReactStateSetters;                                                                                    // 15246
                                                                                                                       // 15247
},{}],"react/lib/ReactTestUtils":[function(require,module,exports){                                                    // 15248
/**                                                                                                                    // 15249
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 15250
 * All rights reserved.                                                                                                // 15251
 *                                                                                                                     // 15252
 * This source code is licensed under the BSD-style license found in the                                               // 15253
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 15254
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 15255
 *                                                                                                                     // 15256
 * @providesModule ReactTestUtils                                                                                      // 15257
 */                                                                                                                    // 15258
                                                                                                                       // 15259
'use strict';                                                                                                          // 15260
                                                                                                                       // 15261
var EventConstants = require("./EventConstants");                                                                      // 15262
var EventPluginHub = require("./EventPluginHub");                                                                      // 15263
var EventPropagators = require("./EventPropagators");                                                                  // 15264
var React = require("./React");                                                                                        // 15265
var ReactElement = require("./ReactElement");                                                                          // 15266
var ReactEmptyComponent = require("./ReactEmptyComponent");                                                            // 15267
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");                                                  // 15268
var ReactCompositeComponent = require("./ReactCompositeComponent");                                                    // 15269
var ReactInstanceHandles = require("./ReactInstanceHandles");                                                          // 15270
var ReactInstanceMap = require("./ReactInstanceMap");                                                                  // 15271
var ReactMount = require("./ReactMount");                                                                              // 15272
var ReactUpdates = require("./ReactUpdates");                                                                          // 15273
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 15274
                                                                                                                       // 15275
var assign = require("./Object.assign");                                                                               // 15276
var emptyObject = require("./emptyObject");                                                                            // 15277
                                                                                                                       // 15278
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 15279
                                                                                                                       // 15280
function Event(suffix) {}                                                                                              // 15281
                                                                                                                       // 15282
/**                                                                                                                    // 15283
 * @class ReactTestUtils                                                                                               // 15284
 */                                                                                                                    // 15285
                                                                                                                       // 15286
/**                                                                                                                    // 15287
 * Todo: Support the entire DOM.scry query syntax. For now, these simple                                               // 15288
 * utilities will suffice for testing purposes.                                                                        // 15289
 * @lends ReactTestUtils                                                                                               // 15290
 */                                                                                                                    // 15291
var ReactTestUtils = {                                                                                                 // 15292
  renderIntoDocument: function(instance) {                                                                             // 15293
    var div = document.createElement('div');                                                                           // 15294
    // None of our tests actually require attaching the container to the                                               // 15295
    // DOM, and doing so creates a mess that we rely on test isolation to                                              // 15296
    // clean up, so we're going to stop honoring the name of this method                                               // 15297
    // (and probably rename it eventually) if no problems arise.                                                       // 15298
    // document.documentElement.appendChild(div);                                                                      // 15299
    return React.render(instance, div);                                                                                // 15300
  },                                                                                                                   // 15301
                                                                                                                       // 15302
  isElement: function(element) {                                                                                       // 15303
    return ReactElement.isValidElement(element);                                                                       // 15304
  },                                                                                                                   // 15305
                                                                                                                       // 15306
  isElementOfType: function(inst, convenienceConstructor) {                                                            // 15307
    return (                                                                                                           // 15308
      ReactElement.isValidElement(inst) &&                                                                             // 15309
      inst.type === convenienceConstructor                                                                             // 15310
    );                                                                                                                 // 15311
  },                                                                                                                   // 15312
                                                                                                                       // 15313
  isDOMComponent: function(inst) {                                                                                     // 15314
    // TODO: Fix this heuristic. It's just here because composites can currently                                       // 15315
    // pretend to be DOM components.                                                                                   // 15316
    return !!(inst && inst.tagName && inst.getDOMNode);                                                                // 15317
  },                                                                                                                   // 15318
                                                                                                                       // 15319
  isDOMComponentElement: function(inst) {                                                                              // 15320
    return !!(inst &&                                                                                                  // 15321
              ReactElement.isValidElement(inst) &&                                                                     // 15322
              !!inst.tagName);                                                                                         // 15323
  },                                                                                                                   // 15324
                                                                                                                       // 15325
  isCompositeComponent: function(inst) {                                                                               // 15326
    return typeof inst.render === 'function' &&                                                                        // 15327
           typeof inst.setState === 'function';                                                                        // 15328
  },                                                                                                                   // 15329
                                                                                                                       // 15330
  isCompositeComponentWithType: function(inst, type) {                                                                 // 15331
    return !!(ReactTestUtils.isCompositeComponent(inst) &&                                                             // 15332
             (inst.constructor === type));                                                                             // 15333
  },                                                                                                                   // 15334
                                                                                                                       // 15335
  isCompositeComponentElement: function(inst) {                                                                        // 15336
    if (!ReactElement.isValidElement(inst)) {                                                                          // 15337
      return false;                                                                                                    // 15338
    }                                                                                                                  // 15339
    // We check the prototype of the type that will get mounted, not the                                               // 15340
    // instance itself. This is a future proof way of duck typing.                                                     // 15341
    var prototype = inst.type.prototype;                                                                               // 15342
    return (                                                                                                           // 15343
      typeof prototype.render === 'function' &&                                                                        // 15344
      typeof prototype.setState === 'function'                                                                         // 15345
    );                                                                                                                 // 15346
  },                                                                                                                   // 15347
                                                                                                                       // 15348
  isCompositeComponentElementWithType: function(inst, type) {                                                          // 15349
    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&                                                      // 15350
             (inst.constructor === type));                                                                             // 15351
  },                                                                                                                   // 15352
                                                                                                                       // 15353
  getRenderedChildOfCompositeComponent: function(inst) {                                                               // 15354
    if (!ReactTestUtils.isCompositeComponent(inst)) {                                                                  // 15355
      return null;                                                                                                     // 15356
    }                                                                                                                  // 15357
    var internalInstance = ReactInstanceMap.get(inst);                                                                 // 15358
    return internalInstance._renderedComponent.getPublicInstance();                                                    // 15359
  },                                                                                                                   // 15360
                                                                                                                       // 15361
  findAllInRenderedTree: function(inst, test) {                                                                        // 15362
    if (!inst) {                                                                                                       // 15363
      return [];                                                                                                       // 15364
    }                                                                                                                  // 15365
    var ret = test(inst) ? [inst] : [];                                                                                // 15366
    if (ReactTestUtils.isDOMComponent(inst)) {                                                                         // 15367
      var internalInstance = ReactInstanceMap.get(inst);                                                               // 15368
      var renderedChildren = internalInstance                                                                          // 15369
        ._renderedComponent                                                                                            // 15370
        ._renderedChildren;                                                                                            // 15371
      var key;                                                                                                         // 15372
      for (key in renderedChildren) {                                                                                  // 15373
        if (!renderedChildren.hasOwnProperty(key)) {                                                                   // 15374
          continue;                                                                                                    // 15375
        }                                                                                                              // 15376
        if (!renderedChildren[key].getPublicInstance) {                                                                // 15377
          continue;                                                                                                    // 15378
        }                                                                                                              // 15379
        ret = ret.concat(                                                                                              // 15380
          ReactTestUtils.findAllInRenderedTree(                                                                        // 15381
            renderedChildren[key].getPublicInstance(),                                                                 // 15382
            test                                                                                                       // 15383
          )                                                                                                            // 15384
        );                                                                                                             // 15385
      }                                                                                                                // 15386
    } else if (ReactTestUtils.isCompositeComponent(inst)) {                                                            // 15387
      ret = ret.concat(                                                                                                // 15388
        ReactTestUtils.findAllInRenderedTree(                                                                          // 15389
          ReactTestUtils.getRenderedChildOfCompositeComponent(inst),                                                   // 15390
          test                                                                                                         // 15391
        )                                                                                                              // 15392
      );                                                                                                               // 15393
    }                                                                                                                  // 15394
    return ret;                                                                                                        // 15395
  },                                                                                                                   // 15396
                                                                                                                       // 15397
  /**                                                                                                                  // 15398
   * Finds all instance of components in the rendered tree that are DOM                                                // 15399
   * components with the class name matching `className`.                                                              // 15400
   * @return an array of all the matches.                                                                              // 15401
   */                                                                                                                  // 15402
  scryRenderedDOMComponentsWithClass: function(root, className) {                                                      // 15403
    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {                                                 // 15404
      var instClassName = inst.props.className;                                                                        // 15405
      return ReactTestUtils.isDOMComponent(inst) && (                                                                  // 15406
        (instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1)                           // 15407
      );                                                                                                               // 15408
    });                                                                                                                // 15409
  },                                                                                                                   // 15410
                                                                                                                       // 15411
  /**                                                                                                                  // 15412
   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,                                       // 15413
   * and returns that one result, or throws exception if there is any other                                            // 15414
   * number of matches besides one.                                                                                    // 15415
   * @return {!ReactDOMComponent} The one match.                                                                       // 15416
   */                                                                                                                  // 15417
  findRenderedDOMComponentWithClass: function(root, className) {                                                       // 15418
    var all =                                                                                                          // 15419
      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);                                              // 15420
    if (all.length !== 1) {                                                                                            // 15421
      throw new Error('Did not find exactly one match ' +                                                              // 15422
        '(found: ' + all.length + ') for class:' + className                                                           // 15423
      );                                                                                                               // 15424
    }                                                                                                                  // 15425
    return all[0];                                                                                                     // 15426
  },                                                                                                                   // 15427
                                                                                                                       // 15428
                                                                                                                       // 15429
  /**                                                                                                                  // 15430
   * Finds all instance of components in the rendered tree that are DOM                                                // 15431
   * components with the tag name matching `tagName`.                                                                  // 15432
   * @return an array of all the matches.                                                                              // 15433
   */                                                                                                                  // 15434
  scryRenderedDOMComponentsWithTag: function(root, tagName) {                                                          // 15435
    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {                                                 // 15436
      return ReactTestUtils.isDOMComponent(inst) &&                                                                    // 15437
            inst.tagName === tagName.toUpperCase();                                                                    // 15438
    });                                                                                                                // 15439
  },                                                                                                                   // 15440
                                                                                                                       // 15441
  /**                                                                                                                  // 15442
   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,                                         // 15443
   * and returns that one result, or throws exception if there is any other                                            // 15444
   * number of matches besides one.                                                                                    // 15445
   * @return {!ReactDOMComponent} The one match.                                                                       // 15446
   */                                                                                                                  // 15447
  findRenderedDOMComponentWithTag: function(root, tagName) {                                                           // 15448
    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);                                          // 15449
    if (all.length !== 1) {                                                                                            // 15450
      throw new Error('Did not find exactly one match for tag:' + tagName);                                            // 15451
    }                                                                                                                  // 15452
    return all[0];                                                                                                     // 15453
  },                                                                                                                   // 15454
                                                                                                                       // 15455
                                                                                                                       // 15456
  /**                                                                                                                  // 15457
   * Finds all instances of components with type equal to `componentType`.                                             // 15458
   * @return an array of all the matches.                                                                              // 15459
   */                                                                                                                  // 15460
  scryRenderedComponentsWithType: function(root, componentType) {                                                      // 15461
    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {                                                 // 15462
      return ReactTestUtils.isCompositeComponentWithType(                                                              // 15463
        inst,                                                                                                          // 15464
        componentType                                                                                                  // 15465
      );                                                                                                               // 15466
    });                                                                                                                // 15467
  },                                                                                                                   // 15468
                                                                                                                       // 15469
  /**                                                                                                                  // 15470
   * Same as `scryRenderedComponentsWithType` but expects there to be one result                                       // 15471
   * and returns that one result, or throws exception if there is any other                                            // 15472
   * number of matches besides one.                                                                                    // 15473
   * @return {!ReactComponent} The one match.                                                                          // 15474
   */                                                                                                                  // 15475
  findRenderedComponentWithType: function(root, componentType) {                                                       // 15476
    var all = ReactTestUtils.scryRenderedComponentsWithType(                                                           // 15477
      root,                                                                                                            // 15478
      componentType                                                                                                    // 15479
    );                                                                                                                 // 15480
    if (all.length !== 1) {                                                                                            // 15481
      throw new Error(                                                                                                 // 15482
        'Did not find exactly one match for componentType:' + componentType                                            // 15483
      );                                                                                                               // 15484
    }                                                                                                                  // 15485
    return all[0];                                                                                                     // 15486
  },                                                                                                                   // 15487
                                                                                                                       // 15488
  /**                                                                                                                  // 15489
   * Pass a mocked component module to this method to augment it with                                                  // 15490
   * useful methods that allow it to be used as a dummy React component.                                               // 15491
   * Instead of rendering as usual, the component will become a simple                                                 // 15492
   * <div> containing any provided children.                                                                           // 15493
   *                                                                                                                   // 15494
   * @param {object} module the mock function object exported from a                                                   // 15495
   *                        module that defines the component to be mocked                                             // 15496
   * @param {?string} mockTagName optional dummy root tag name to return                                               // 15497
   *                              from render method (overrides                                                        // 15498
   *                              module.mockTagName if provided)                                                      // 15499
   * @return {object} the ReactTestUtils object (for chaining)                                                         // 15500
   */                                                                                                                  // 15501
  mockComponent: function(module, mockTagName) {                                                                       // 15502
    mockTagName = mockTagName || module.mockTagName || "div";                                                          // 15503
                                                                                                                       // 15504
    module.prototype.render.mockImplementation(function() {                                                            // 15505
      return React.createElement(                                                                                      // 15506
        mockTagName,                                                                                                   // 15507
        null,                                                                                                          // 15508
        this.props.children                                                                                            // 15509
      );                                                                                                               // 15510
    });                                                                                                                // 15511
                                                                                                                       // 15512
    return this;                                                                                                       // 15513
  },                                                                                                                   // 15514
                                                                                                                       // 15515
  /**                                                                                                                  // 15516
   * Simulates a top level event being dispatched from a raw event that occured                                        // 15517
   * on an `Element` node.                                                                                             // 15518
   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`                                           // 15519
   * @param {!Element} node The dom to simulate an event occurring on.                                                 // 15520
   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.                                       // 15521
   */                                                                                                                  // 15522
  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {                                           // 15523
    fakeNativeEvent.target = node;                                                                                     // 15524
    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(                                                         // 15525
      topLevelType,                                                                                                    // 15526
      fakeNativeEvent                                                                                                  // 15527
    );                                                                                                                 // 15528
  },                                                                                                                   // 15529
                                                                                                                       // 15530
  /**                                                                                                                  // 15531
   * Simulates a top level event being dispatched from a raw event that occured                                        // 15532
   * on the `ReactDOMComponent` `comp`.                                                                                // 15533
   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.                                          // 15534
   * @param comp {!ReactDOMComponent}                                                                                  // 15535
   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.                                       // 15536
   */                                                                                                                  // 15537
  simulateNativeEventOnDOMComponent: function(                                                                         // 15538
      topLevelType,                                                                                                    // 15539
      comp,                                                                                                            // 15540
      fakeNativeEvent) {                                                                                               // 15541
    ReactTestUtils.simulateNativeEventOnNode(                                                                          // 15542
      topLevelType,                                                                                                    // 15543
      comp.getDOMNode(),                                                                                               // 15544
      fakeNativeEvent                                                                                                  // 15545
    );                                                                                                                 // 15546
  },                                                                                                                   // 15547
                                                                                                                       // 15548
  nativeTouchData: function(x, y) {                                                                                    // 15549
    return {                                                                                                           // 15550
      touches: [                                                                                                       // 15551
        {pageX: x, pageY: y}                                                                                           // 15552
      ]                                                                                                                // 15553
    };                                                                                                                 // 15554
  },                                                                                                                   // 15555
                                                                                                                       // 15556
  createRenderer: function() {                                                                                         // 15557
    return new ReactShallowRenderer();                                                                                 // 15558
  },                                                                                                                   // 15559
                                                                                                                       // 15560
  Simulate: null,                                                                                                      // 15561
  SimulateNative: {}                                                                                                   // 15562
};                                                                                                                     // 15563
                                                                                                                       // 15564
/**                                                                                                                    // 15565
 * @class ReactShallowRenderer                                                                                         // 15566
 */                                                                                                                    // 15567
var ReactShallowRenderer = function() {                                                                                // 15568
  this._instance = null;                                                                                               // 15569
};                                                                                                                     // 15570
                                                                                                                       // 15571
ReactShallowRenderer.prototype.getRenderOutput = function() {                                                          // 15572
  return (                                                                                                             // 15573
    (this._instance && this._instance._renderedComponent &&                                                            // 15574
     this._instance._renderedComponent._renderedOutput)                                                                // 15575
    || null                                                                                                            // 15576
  );                                                                                                                   // 15577
};                                                                                                                     // 15578
                                                                                                                       // 15579
var NoopInternalComponent = function(element) {                                                                        // 15580
  this._renderedOutput = element;                                                                                      // 15581
  this._currentElement = element === null || element === false ?                                                       // 15582
    ReactEmptyComponent.emptyElement :                                                                                 // 15583
    element;                                                                                                           // 15584
};                                                                                                                     // 15585
                                                                                                                       // 15586
NoopInternalComponent.prototype = {                                                                                    // 15587
                                                                                                                       // 15588
  mountComponent: function() {                                                                                         // 15589
  },                                                                                                                   // 15590
                                                                                                                       // 15591
  receiveComponent: function(element) {                                                                                // 15592
    this._renderedOutput = element;                                                                                    // 15593
    this._currentElement = element === null || element === false ?                                                     // 15594
      ReactEmptyComponent.emptyElement :                                                                               // 15595
      element;                                                                                                         // 15596
  },                                                                                                                   // 15597
                                                                                                                       // 15598
  unmountComponent: function() {                                                                                       // 15599
  }                                                                                                                    // 15600
                                                                                                                       // 15601
};                                                                                                                     // 15602
                                                                                                                       // 15603
var ShallowComponentWrapper = function() { };                                                                          // 15604
assign(                                                                                                                // 15605
  ShallowComponentWrapper.prototype,                                                                                   // 15606
  ReactCompositeComponent.Mixin, {                                                                                     // 15607
    _instantiateReactComponent: function(element) {                                                                    // 15608
      return new NoopInternalComponent(element);                                                                       // 15609
    },                                                                                                                 // 15610
    _replaceNodeWithMarkupByID: function() {},                                                                         // 15611
    _renderValidatedComponent:                                                                                         // 15612
      ReactCompositeComponent.Mixin.                                                                                   // 15613
        _renderValidatedComponentWithoutOwnerOrContext                                                                 // 15614
  }                                                                                                                    // 15615
);                                                                                                                     // 15616
                                                                                                                       // 15617
ReactShallowRenderer.prototype.render = function(element, context) {                                                   // 15618
  if (!context) {                                                                                                      // 15619
    context = emptyObject;                                                                                             // 15620
  }                                                                                                                    // 15621
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();                                                // 15622
  this._render(element, transaction, context);                                                                         // 15623
  ReactUpdates.ReactReconcileTransaction.release(transaction);                                                         // 15624
};                                                                                                                     // 15625
                                                                                                                       // 15626
ReactShallowRenderer.prototype.unmount = function() {                                                                  // 15627
  if (this._instance) {                                                                                                // 15628
    this._instance.unmountComponent();                                                                                 // 15629
  }                                                                                                                    // 15630
};                                                                                                                     // 15631
                                                                                                                       // 15632
ReactShallowRenderer.prototype._render = function(element, transaction, context) {                                     // 15633
  if (!this._instance) {                                                                                               // 15634
    var rootID = ReactInstanceHandles.createReactRootID();                                                             // 15635
    var instance = new ShallowComponentWrapper(element.type);                                                          // 15636
    instance.construct(element);                                                                                       // 15637
                                                                                                                       // 15638
    instance.mountComponent(rootID, transaction, context);                                                             // 15639
                                                                                                                       // 15640
    this._instance = instance;                                                                                         // 15641
  } else {                                                                                                             // 15642
    this._instance.receiveComponent(element, transaction, context);                                                    // 15643
  }                                                                                                                    // 15644
};                                                                                                                     // 15645
                                                                                                                       // 15646
/**                                                                                                                    // 15647
 * Exports:                                                                                                            // 15648
 *                                                                                                                     // 15649
 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`                                                        // 15650
 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`                                                    // 15651
 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`                                                       // 15652
 * - ... (All keys from event plugin `eventTypes` objects)                                                             // 15653
 */                                                                                                                    // 15654
function makeSimulator(eventType) {                                                                                    // 15655
  return function(domComponentOrNode, eventData) {                                                                     // 15656
    var node;                                                                                                          // 15657
    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {                                                           // 15658
      node = domComponentOrNode.getDOMNode();                                                                          // 15659
    } else if (domComponentOrNode.tagName) {                                                                           // 15660
      node = domComponentOrNode;                                                                                       // 15661
    }                                                                                                                  // 15662
                                                                                                                       // 15663
    var fakeNativeEvent = new Event();                                                                                 // 15664
    fakeNativeEvent.target = node;                                                                                     // 15665
    // We don't use SyntheticEvent.getPooled in order to not have to worry about                                       // 15666
    // properly destroying any properties assigned from `eventData` upon release                                       // 15667
    var event = new SyntheticEvent(                                                                                    // 15668
      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],                                                    // 15669
      ReactMount.getID(node),                                                                                          // 15670
      fakeNativeEvent                                                                                                  // 15671
    );                                                                                                                 // 15672
    assign(event, eventData);                                                                                          // 15673
    EventPropagators.accumulateTwoPhaseDispatches(event);                                                              // 15674
                                                                                                                       // 15675
    ReactUpdates.batchedUpdates(function() {                                                                           // 15676
      EventPluginHub.enqueueEvents(event);                                                                             // 15677
      EventPluginHub.processEventQueue();                                                                              // 15678
    });                                                                                                                // 15679
  };                                                                                                                   // 15680
}                                                                                                                      // 15681
                                                                                                                       // 15682
function buildSimulators() {                                                                                           // 15683
  ReactTestUtils.Simulate = {};                                                                                        // 15684
                                                                                                                       // 15685
  var eventType;                                                                                                       // 15686
  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {                                               // 15687
    /**                                                                                                                // 15688
     * @param {!Element || ReactDOMComponent} domComponentOrNode                                                       // 15689
     * @param {?object} eventData Fake event data to use in SyntheticEvent.                                            // 15690
     */                                                                                                                // 15691
    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);                                                     // 15692
  }                                                                                                                    // 15693
}                                                                                                                      // 15694
                                                                                                                       // 15695
// Rebuild ReactTestUtils.Simulate whenever event plugins are injected                                                 // 15696
var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;                                       // 15697
EventPluginHub.injection.injectEventPluginOrder = function() {                                                         // 15698
  oldInjectEventPluginOrder.apply(this, arguments);                                                                    // 15699
  buildSimulators();                                                                                                   // 15700
};                                                                                                                     // 15701
var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;                                         // 15702
EventPluginHub.injection.injectEventPluginsByName = function() {                                                       // 15703
  oldInjectEventPlugins.apply(this, arguments);                                                                        // 15704
  buildSimulators();                                                                                                   // 15705
};                                                                                                                     // 15706
                                                                                                                       // 15707
buildSimulators();                                                                                                     // 15708
                                                                                                                       // 15709
/**                                                                                                                    // 15710
 * Exports:                                                                                                            // 15711
 *                                                                                                                     // 15712
 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`                                                  // 15713
 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`                                              // 15714
 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`                                                        // 15715
 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`                                               // 15716
 * - ... (All keys from `EventConstants.topLevelTypes`)                                                                // 15717
 *                                                                                                                     // 15718
 * Note: Top level event types are a subset of the entire set of handler types                                         // 15719
 * (which include a broader set of "synthetic" events). For example, onDragDone                                        // 15720
 * is a synthetic event. Except when testing an event plugin or React's event                                          // 15721
 * handling code specifically, you probably want to use ReactTestUtils.Simulate                                        // 15722
 * to dispatch synthetic events.                                                                                       // 15723
 */                                                                                                                    // 15724
                                                                                                                       // 15725
function makeNativeSimulator(eventType) {                                                                              // 15726
  return function(domComponentOrNode, nativeEventData) {                                                               // 15727
    var fakeNativeEvent = new Event(eventType);                                                                        // 15728
    assign(fakeNativeEvent, nativeEventData);                                                                          // 15729
    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {                                                           // 15730
      ReactTestUtils.simulateNativeEventOnDOMComponent(                                                                // 15731
        eventType,                                                                                                     // 15732
        domComponentOrNode,                                                                                            // 15733
        fakeNativeEvent                                                                                                // 15734
      );                                                                                                               // 15735
    } else if (!!domComponentOrNode.tagName) {                                                                         // 15736
      // Will allow on actual dom nodes.                                                                               // 15737
      ReactTestUtils.simulateNativeEventOnNode(                                                                        // 15738
        eventType,                                                                                                     // 15739
        domComponentOrNode,                                                                                            // 15740
        fakeNativeEvent                                                                                                // 15741
      );                                                                                                               // 15742
    }                                                                                                                  // 15743
  };                                                                                                                   // 15744
}                                                                                                                      // 15745
                                                                                                                       // 15746
var eventType;                                                                                                         // 15747
for (eventType in topLevelTypes) {                                                                                     // 15748
  // Event type is stored as 'topClick' - we transform that to 'click'                                                 // 15749
  var convenienceName = eventType.indexOf('top') === 0 ?                                                               // 15750
    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;                                               // 15751
  /**                                                                                                                  // 15752
   * @param {!Element || ReactDOMComponent} domComponentOrNode                                                         // 15753
   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.                                       // 15754
   */                                                                                                                  // 15755
  ReactTestUtils.SimulateNative[convenienceName] =                                                                     // 15756
    makeNativeSimulator(eventType);                                                                                    // 15757
}                                                                                                                      // 15758
                                                                                                                       // 15759
module.exports = ReactTestUtils;                                                                                       // 15760
                                                                                                                       // 15761
},{"./EventConstants":"react/lib/EventConstants","./EventPluginHub":"react/lib/EventPluginHub","./EventPropagators":"react/lib/EventPropagators","./Object.assign":"react/lib/Object.assign","./React":"react/lib/React","./ReactBrowserEventEmitter":"react/lib/ReactBrowserEventEmitter","./ReactCompositeComponent":"react/lib/ReactCompositeComponent","./ReactElement":"react/lib/ReactElement","./ReactEmptyComponent":"react/lib/ReactEmptyComponent","./ReactInstanceHandles":"react/lib/ReactInstanceHandles","./ReactInstanceMap":"react/lib/ReactInstanceMap","./ReactMount":"react/lib/ReactMount","./ReactUpdates":"react/lib/ReactUpdates","./SyntheticEvent":"react/lib/SyntheticEvent","./emptyObject":"react/lib/emptyObject"}],"react/lib/ReactTransitionChildMapping":[function(require,module,exports){
/**                                                                                                                    // 15763
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 15764
 * All rights reserved.                                                                                                // 15765
 *                                                                                                                     // 15766
 * This source code is licensed under the BSD-style license found in the                                               // 15767
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 15768
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 15769
 *                                                                                                                     // 15770
 * @typechecks static-only                                                                                             // 15771
 * @providesModule ReactTransitionChildMapping                                                                         // 15772
 */                                                                                                                    // 15773
                                                                                                                       // 15774
'use strict';                                                                                                          // 15775
                                                                                                                       // 15776
var ReactChildren = require("./ReactChildren");                                                                        // 15777
var ReactFragment = require("./ReactFragment");                                                                        // 15778
                                                                                                                       // 15779
var ReactTransitionChildMapping = {                                                                                    // 15780
  /**                                                                                                                  // 15781
   * Given `this.props.children`, return an object mapping key to child. Just                                          // 15782
   * simple syntactic sugar around ReactChildren.map().                                                                // 15783
   *                                                                                                                   // 15784
   * @param {*} children `this.props.children`                                                                         // 15785
   * @return {object} Mapping of key to child                                                                          // 15786
   */                                                                                                                  // 15787
  getChildMapping: function(children) {                                                                                // 15788
    if (!children) {                                                                                                   // 15789
      return children;                                                                                                 // 15790
    }                                                                                                                  // 15791
    return ReactFragment.extract(ReactChildren.map(children, function(child) {                                         // 15792
      return child;                                                                                                    // 15793
    }));                                                                                                               // 15794
  },                                                                                                                   // 15795
                                                                                                                       // 15796
  /**                                                                                                                  // 15797
   * When you're adding or removing children some may be added or removed in the                                       // 15798
   * same render pass. We want to show *both* since we want to simultaneously                                          // 15799
   * animate elements in and out. This function takes a previous set of keys                                           // 15800
   * and a new set of keys and merges them with its best guess of the correct                                          // 15801
   * ordering. In the future we may expose some of the utilities in                                                    // 15802
   * ReactMultiChild to make this easy, but for now React itself does not                                              // 15803
   * directly have this concept of the union of prevChildren and nextChildren                                          // 15804
   * so we implement it here.                                                                                          // 15805
   *                                                                                                                   // 15806
   * @param {object} prev prev children as returned from                                                               // 15807
   * `ReactTransitionChildMapping.getChildMapping()`.                                                                  // 15808
   * @param {object} next next children as returned from                                                               // 15809
   * `ReactTransitionChildMapping.getChildMapping()`.                                                                  // 15810
   * @return {object} a key set that contains all keys in `prev` and all keys                                          // 15811
   * in `next` in a reasonable order.                                                                                  // 15812
   */                                                                                                                  // 15813
  mergeChildMappings: function(prev, next) {                                                                           // 15814
    prev = prev || {};                                                                                                 // 15815
    next = next || {};                                                                                                 // 15816
                                                                                                                       // 15817
    function getValueForKey(key) {                                                                                     // 15818
      if (next.hasOwnProperty(key)) {                                                                                  // 15819
        return next[key];                                                                                              // 15820
      } else {                                                                                                         // 15821
        return prev[key];                                                                                              // 15822
      }                                                                                                                // 15823
    }                                                                                                                  // 15824
                                                                                                                       // 15825
    // For each key of `next`, the list of keys to insert before that key in                                           // 15826
    // the combined list                                                                                               // 15827
    var nextKeysPending = {};                                                                                          // 15828
                                                                                                                       // 15829
    var pendingKeys = [];                                                                                              // 15830
    for (var prevKey in prev) {                                                                                        // 15831
      if (next.hasOwnProperty(prevKey)) {                                                                              // 15832
        if (pendingKeys.length) {                                                                                      // 15833
          nextKeysPending[prevKey] = pendingKeys;                                                                      // 15834
          pendingKeys = [];                                                                                            // 15835
        }                                                                                                              // 15836
      } else {                                                                                                         // 15837
        pendingKeys.push(prevKey);                                                                                     // 15838
      }                                                                                                                // 15839
    }                                                                                                                  // 15840
                                                                                                                       // 15841
    var i;                                                                                                             // 15842
    var childMapping = {};                                                                                             // 15843
    for (var nextKey in next) {                                                                                        // 15844
      if (nextKeysPending.hasOwnProperty(nextKey)) {                                                                   // 15845
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {                                                        // 15846
          var pendingNextKey = nextKeysPending[nextKey][i];                                                            // 15847
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(                                                  // 15848
            pendingNextKey                                                                                             // 15849
          );                                                                                                           // 15850
        }                                                                                                              // 15851
      }                                                                                                                // 15852
      childMapping[nextKey] = getValueForKey(nextKey);                                                                 // 15853
    }                                                                                                                  // 15854
                                                                                                                       // 15855
    // Finally, add the keys which didn't appear before any key in `next`                                              // 15856
    for (i = 0; i < pendingKeys.length; i++) {                                                                         // 15857
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);                                                   // 15858
    }                                                                                                                  // 15859
                                                                                                                       // 15860
    return childMapping;                                                                                               // 15861
  }                                                                                                                    // 15862
};                                                                                                                     // 15863
                                                                                                                       // 15864
module.exports = ReactTransitionChildMapping;                                                                          // 15865
                                                                                                                       // 15866
},{"./ReactChildren":"react/lib/ReactChildren","./ReactFragment":"react/lib/ReactFragment"}],"react/lib/ReactTransitionEvents":[function(require,module,exports){
/**                                                                                                                    // 15868
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 15869
 * All rights reserved.                                                                                                // 15870
 *                                                                                                                     // 15871
 * This source code is licensed under the BSD-style license found in the                                               // 15872
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 15873
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 15874
 *                                                                                                                     // 15875
 * @providesModule ReactTransitionEvents                                                                               // 15876
 */                                                                                                                    // 15877
                                                                                                                       // 15878
'use strict';                                                                                                          // 15879
                                                                                                                       // 15880
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 15881
                                                                                                                       // 15882
/**                                                                                                                    // 15883
 * EVENT_NAME_MAP is used to determine which event fired when a                                                        // 15884
 * transition/animation ends, based on the style property used to                                                      // 15885
 * define that event.                                                                                                  // 15886
 */                                                                                                                    // 15887
var EVENT_NAME_MAP = {                                                                                                 // 15888
  transitionend: {                                                                                                     // 15889
    'transition': 'transitionend',                                                                                     // 15890
    'WebkitTransition': 'webkitTransitionEnd',                                                                         // 15891
    'MozTransition': 'mozTransitionEnd',                                                                               // 15892
    'OTransition': 'oTransitionEnd',                                                                                   // 15893
    'msTransition': 'MSTransitionEnd'                                                                                  // 15894
  },                                                                                                                   // 15895
                                                                                                                       // 15896
  animationend: {                                                                                                      // 15897
    'animation': 'animationend',                                                                                       // 15898
    'WebkitAnimation': 'webkitAnimationEnd',                                                                           // 15899
    'MozAnimation': 'mozAnimationEnd',                                                                                 // 15900
    'OAnimation': 'oAnimationEnd',                                                                                     // 15901
    'msAnimation': 'MSAnimationEnd'                                                                                    // 15902
  }                                                                                                                    // 15903
};                                                                                                                     // 15904
                                                                                                                       // 15905
var endEvents = [];                                                                                                    // 15906
                                                                                                                       // 15907
function detectEvents() {                                                                                              // 15908
  var testEl = document.createElement('div');                                                                          // 15909
  var style = testEl.style;                                                                                            // 15910
                                                                                                                       // 15911
  // On some platforms, in particular some releases of Android 4.x,                                                    // 15912
  // the un-prefixed "animation" and "transition" properties are defined on the                                        // 15913
  // style object but the events that fire will still be prefixed, so we need                                          // 15914
  // to check if the un-prefixed events are useable, and if not remove them                                            // 15915
  // from the map                                                                                                      // 15916
  if (!('AnimationEvent' in window)) {                                                                                 // 15917
    delete EVENT_NAME_MAP.animationend.animation;                                                                      // 15918
  }                                                                                                                    // 15919
                                                                                                                       // 15920
  if (!('TransitionEvent' in window)) {                                                                                // 15921
    delete EVENT_NAME_MAP.transitionend.transition;                                                                    // 15922
  }                                                                                                                    // 15923
                                                                                                                       // 15924
  for (var baseEventName in EVENT_NAME_MAP) {                                                                          // 15925
    var baseEvents = EVENT_NAME_MAP[baseEventName];                                                                    // 15926
    for (var styleName in baseEvents) {                                                                                // 15927
      if (styleName in style) {                                                                                        // 15928
        endEvents.push(baseEvents[styleName]);                                                                         // 15929
        break;                                                                                                         // 15930
      }                                                                                                                // 15931
    }                                                                                                                  // 15932
  }                                                                                                                    // 15933
}                                                                                                                      // 15934
                                                                                                                       // 15935
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 15936
  detectEvents();                                                                                                      // 15937
}                                                                                                                      // 15938
                                                                                                                       // 15939
// We use the raw {add|remove}EventListener() call because EventListener                                               // 15940
// does not know how to remove event listeners and we really should                                                    // 15941
// clean up. Also, these events are not triggered in older browsers                                                    // 15942
// so we should be A-OK here.                                                                                          // 15943
                                                                                                                       // 15944
function addEventListener(node, eventName, eventListener) {                                                            // 15945
  node.addEventListener(eventName, eventListener, false);                                                              // 15946
}                                                                                                                      // 15947
                                                                                                                       // 15948
function removeEventListener(node, eventName, eventListener) {                                                         // 15949
  node.removeEventListener(eventName, eventListener, false);                                                           // 15950
}                                                                                                                      // 15951
                                                                                                                       // 15952
var ReactTransitionEvents = {                                                                                          // 15953
  addEndEventListener: function(node, eventListener) {                                                                 // 15954
    if (endEvents.length === 0) {                                                                                      // 15955
      // If CSS transitions are not supported, trigger an "end animation"                                              // 15956
      // event immediately.                                                                                            // 15957
      window.setTimeout(eventListener, 0);                                                                             // 15958
      return;                                                                                                          // 15959
    }                                                                                                                  // 15960
    endEvents.forEach(function(endEvent) {                                                                             // 15961
      addEventListener(node, endEvent, eventListener);                                                                 // 15962
    });                                                                                                                // 15963
  },                                                                                                                   // 15964
                                                                                                                       // 15965
  removeEndEventListener: function(node, eventListener) {                                                              // 15966
    if (endEvents.length === 0) {                                                                                      // 15967
      return;                                                                                                          // 15968
    }                                                                                                                  // 15969
    endEvents.forEach(function(endEvent) {                                                                             // 15970
      removeEventListener(node, endEvent, eventListener);                                                              // 15971
    });                                                                                                                // 15972
  }                                                                                                                    // 15973
};                                                                                                                     // 15974
                                                                                                                       // 15975
module.exports = ReactTransitionEvents;                                                                                // 15976
                                                                                                                       // 15977
},{"./ExecutionEnvironment":"react/lib/ExecutionEnvironment"}],"react/lib/ReactTransitionGroup":[function(require,module,exports){
/**                                                                                                                    // 15979
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 15980
 * All rights reserved.                                                                                                // 15981
 *                                                                                                                     // 15982
 * This source code is licensed under the BSD-style license found in the                                               // 15983
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 15984
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 15985
 *                                                                                                                     // 15986
 * @providesModule ReactTransitionGroup                                                                                // 15987
 */                                                                                                                    // 15988
                                                                                                                       // 15989
'use strict';                                                                                                          // 15990
                                                                                                                       // 15991
var React = require("./React");                                                                                        // 15992
var ReactTransitionChildMapping = require("./ReactTransitionChildMapping");                                            // 15993
                                                                                                                       // 15994
var assign = require("./Object.assign");                                                                               // 15995
var cloneWithProps = require("./cloneWithProps");                                                                      // 15996
var emptyFunction = require("./emptyFunction");                                                                        // 15997
                                                                                                                       // 15998
var ReactTransitionGroup = React.createClass({                                                                         // 15999
  displayName: 'ReactTransitionGroup',                                                                                 // 16000
                                                                                                                       // 16001
  propTypes: {                                                                                                         // 16002
    component: React.PropTypes.any,                                                                                    // 16003
    childFactory: React.PropTypes.func                                                                                 // 16004
  },                                                                                                                   // 16005
                                                                                                                       // 16006
  getDefaultProps: function() {                                                                                        // 16007
    return {                                                                                                           // 16008
      component: 'span',                                                                                               // 16009
      childFactory: emptyFunction.thatReturnsArgument                                                                  // 16010
    };                                                                                                                 // 16011
  },                                                                                                                   // 16012
                                                                                                                       // 16013
  getInitialState: function() {                                                                                        // 16014
    return {                                                                                                           // 16015
      children: ReactTransitionChildMapping.getChildMapping(this.props.children)                                       // 16016
    };                                                                                                                 // 16017
  },                                                                                                                   // 16018
                                                                                                                       // 16019
  componentWillMount: function() {                                                                                     // 16020
    this.currentlyTransitioningKeys = {};                                                                              // 16021
    this.keysToEnter = [];                                                                                             // 16022
    this.keysToLeave = [];                                                                                             // 16023
  },                                                                                                                   // 16024
                                                                                                                       // 16025
  componentDidMount: function() {                                                                                      // 16026
    var initialChildMapping = this.state.children;                                                                     // 16027
    for (var key in initialChildMapping) {                                                                             // 16028
      if (initialChildMapping[key]) {                                                                                  // 16029
        this.performAppear(key);                                                                                       // 16030
      }                                                                                                                // 16031
    }                                                                                                                  // 16032
  },                                                                                                                   // 16033
                                                                                                                       // 16034
  componentWillReceiveProps: function(nextProps) {                                                                     // 16035
    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(                                                // 16036
      nextProps.children                                                                                               // 16037
    );                                                                                                                 // 16038
    var prevChildMapping = this.state.children;                                                                        // 16039
                                                                                                                       // 16040
    this.setState({                                                                                                    // 16041
      children: ReactTransitionChildMapping.mergeChildMappings(                                                        // 16042
        prevChildMapping,                                                                                              // 16043
        nextChildMapping                                                                                               // 16044
      )                                                                                                                // 16045
    });                                                                                                                // 16046
                                                                                                                       // 16047
    var key;                                                                                                           // 16048
                                                                                                                       // 16049
    for (key in nextChildMapping) {                                                                                    // 16050
      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);                                          // 16051
      if (nextChildMapping[key] && !hasPrev &&                                                                         // 16052
          !this.currentlyTransitioningKeys[key]) {                                                                     // 16053
        this.keysToEnter.push(key);                                                                                    // 16054
      }                                                                                                                // 16055
    }                                                                                                                  // 16056
                                                                                                                       // 16057
    for (key in prevChildMapping) {                                                                                    // 16058
      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);                                          // 16059
      if (prevChildMapping[key] && !hasNext &&                                                                         // 16060
          !this.currentlyTransitioningKeys[key]) {                                                                     // 16061
        this.keysToLeave.push(key);                                                                                    // 16062
      }                                                                                                                // 16063
    }                                                                                                                  // 16064
                                                                                                                       // 16065
    // If we want to someday check for reordering, we could do it here.                                                // 16066
  },                                                                                                                   // 16067
                                                                                                                       // 16068
  componentDidUpdate: function() {                                                                                     // 16069
    var keysToEnter = this.keysToEnter;                                                                                // 16070
    this.keysToEnter = [];                                                                                             // 16071
    keysToEnter.forEach(this.performEnter);                                                                            // 16072
                                                                                                                       // 16073
    var keysToLeave = this.keysToLeave;                                                                                // 16074
    this.keysToLeave = [];                                                                                             // 16075
    keysToLeave.forEach(this.performLeave);                                                                            // 16076
  },                                                                                                                   // 16077
                                                                                                                       // 16078
  performAppear: function(key) {                                                                                       // 16079
    this.currentlyTransitioningKeys[key] = true;                                                                       // 16080
                                                                                                                       // 16081
    var component = this.refs[key];                                                                                    // 16082
                                                                                                                       // 16083
    if (component.componentWillAppear) {                                                                               // 16084
      component.componentWillAppear(                                                                                   // 16085
        this._handleDoneAppearing.bind(this, key)                                                                      // 16086
      );                                                                                                               // 16087
    } else {                                                                                                           // 16088
      this._handleDoneAppearing(key);                                                                                  // 16089
    }                                                                                                                  // 16090
  },                                                                                                                   // 16091
                                                                                                                       // 16092
  _handleDoneAppearing: function(key) {                                                                                // 16093
    var component = this.refs[key];                                                                                    // 16094
    if (component.componentDidAppear) {                                                                                // 16095
      component.componentDidAppear();                                                                                  // 16096
    }                                                                                                                  // 16097
                                                                                                                       // 16098
    delete this.currentlyTransitioningKeys[key];                                                                       // 16099
                                                                                                                       // 16100
    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(                                             // 16101
      this.props.children                                                                                              // 16102
    );                                                                                                                 // 16103
                                                                                                                       // 16104
    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {                                            // 16105
      // This was removed before it had fully appeared. Remove it.                                                     // 16106
      this.performLeave(key);                                                                                          // 16107
    }                                                                                                                  // 16108
  },                                                                                                                   // 16109
                                                                                                                       // 16110
  performEnter: function(key) {                                                                                        // 16111
    this.currentlyTransitioningKeys[key] = true;                                                                       // 16112
                                                                                                                       // 16113
    var component = this.refs[key];                                                                                    // 16114
                                                                                                                       // 16115
    if (component.componentWillEnter) {                                                                                // 16116
      component.componentWillEnter(                                                                                    // 16117
        this._handleDoneEntering.bind(this, key)                                                                       // 16118
      );                                                                                                               // 16119
    } else {                                                                                                           // 16120
      this._handleDoneEntering(key);                                                                                   // 16121
    }                                                                                                                  // 16122
  },                                                                                                                   // 16123
                                                                                                                       // 16124
  _handleDoneEntering: function(key) {                                                                                 // 16125
    var component = this.refs[key];                                                                                    // 16126
    if (component.componentDidEnter) {                                                                                 // 16127
      component.componentDidEnter();                                                                                   // 16128
    }                                                                                                                  // 16129
                                                                                                                       // 16130
    delete this.currentlyTransitioningKeys[key];                                                                       // 16131
                                                                                                                       // 16132
    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(                                             // 16133
      this.props.children                                                                                              // 16134
    );                                                                                                                 // 16135
                                                                                                                       // 16136
    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {                                            // 16137
      // This was removed before it had fully entered. Remove it.                                                      // 16138
      this.performLeave(key);                                                                                          // 16139
    }                                                                                                                  // 16140
  },                                                                                                                   // 16141
                                                                                                                       // 16142
  performLeave: function(key) {                                                                                        // 16143
    this.currentlyTransitioningKeys[key] = true;                                                                       // 16144
                                                                                                                       // 16145
    var component = this.refs[key];                                                                                    // 16146
    if (component.componentWillLeave) {                                                                                // 16147
      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));                                           // 16148
    } else {                                                                                                           // 16149
      // Note that this is somewhat dangerous b/c it calls setState()                                                  // 16150
      // again, effectively mutating the component before all the work                                                 // 16151
      // is done.                                                                                                      // 16152
      this._handleDoneLeaving(key);                                                                                    // 16153
    }                                                                                                                  // 16154
  },                                                                                                                   // 16155
                                                                                                                       // 16156
  _handleDoneLeaving: function(key) {                                                                                  // 16157
    var component = this.refs[key];                                                                                    // 16158
                                                                                                                       // 16159
    if (component.componentDidLeave) {                                                                                 // 16160
      component.componentDidLeave();                                                                                   // 16161
    }                                                                                                                  // 16162
                                                                                                                       // 16163
    delete this.currentlyTransitioningKeys[key];                                                                       // 16164
                                                                                                                       // 16165
    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(                                             // 16166
      this.props.children                                                                                              // 16167
    );                                                                                                                 // 16168
                                                                                                                       // 16169
    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {                                              // 16170
      // This entered again before it fully left. Add it again.                                                        // 16171
      this.performEnter(key);                                                                                          // 16172
    } else {                                                                                                           // 16173
      var newChildren = assign({}, this.state.children);                                                               // 16174
      delete newChildren[key];                                                                                         // 16175
      this.setState({children: newChildren});                                                                          // 16176
    }                                                                                                                  // 16177
  },                                                                                                                   // 16178
                                                                                                                       // 16179
  render: function() {                                                                                                 // 16180
    // TODO: we could get rid of the need for the wrapper node                                                         // 16181
    // by cloning a single child                                                                                       // 16182
    var childrenToRender = [];                                                                                         // 16183
    for (var key in this.state.children) {                                                                             // 16184
      var child = this.state.children[key];                                                                            // 16185
      if (child) {                                                                                                     // 16186
        // You may need to apply reactive updates to a child as it is leaving.                                         // 16187
        // The normal React way to do it won't work since the child will have                                          // 16188
        // already been removed. In case you need this behavior you can provide                                        // 16189
        // a childFactory function to wrap every child, even the ones that are                                         // 16190
        // leaving.                                                                                                    // 16191
        childrenToRender.push(cloneWithProps(                                                                          // 16192
          this.props.childFactory(child),                                                                              // 16193
          {ref: key, key: key}                                                                                         // 16194
        ));                                                                                                            // 16195
      }                                                                                                                // 16196
    }                                                                                                                  // 16197
    return React.createElement(                                                                                        // 16198
      this.props.component,                                                                                            // 16199
      this.props,                                                                                                      // 16200
      childrenToRender                                                                                                 // 16201
    );                                                                                                                 // 16202
  }                                                                                                                    // 16203
});                                                                                                                    // 16204
                                                                                                                       // 16205
module.exports = ReactTransitionGroup;                                                                                 // 16206
                                                                                                                       // 16207
},{"./Object.assign":"react/lib/Object.assign","./React":"react/lib/React","./ReactTransitionChildMapping":"react/lib/ReactTransitionChildMapping","./cloneWithProps":"react/lib/cloneWithProps","./emptyFunction":"react/lib/emptyFunction"}],"react/lib/ReactUpdateQueue":[function(require,module,exports){
(function (process){                                                                                                   // 16209
/**                                                                                                                    // 16210
 * Copyright 2015, Facebook, Inc.                                                                                      // 16211
 * All rights reserved.                                                                                                // 16212
 *                                                                                                                     // 16213
 * This source code is licensed under the BSD-style license found in the                                               // 16214
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 16215
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 16216
 *                                                                                                                     // 16217
 * @providesModule ReactUpdateQueue                                                                                    // 16218
 */                                                                                                                    // 16219
                                                                                                                       // 16220
'use strict';                                                                                                          // 16221
                                                                                                                       // 16222
var ReactLifeCycle = require("./ReactLifeCycle");                                                                      // 16223
var ReactCurrentOwner = require("./ReactCurrentOwner");                                                                // 16224
var ReactElement = require("./ReactElement");                                                                          // 16225
var ReactInstanceMap = require("./ReactInstanceMap");                                                                  // 16226
var ReactUpdates = require("./ReactUpdates");                                                                          // 16227
                                                                                                                       // 16228
var assign = require("./Object.assign");                                                                               // 16229
var invariant = require("./invariant");                                                                                // 16230
var warning = require("./warning");                                                                                    // 16231
                                                                                                                       // 16232
function enqueueUpdate(internalInstance) {                                                                             // 16233
  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {                                                 // 16234
    // If we're in a componentWillMount handler, don't enqueue a rerender                                              // 16235
    // because ReactUpdates assumes we're in a browser context (which is                                               // 16236
    // wrong for server rendering) and we're about to do a render anyway.                                              // 16237
    // See bug in #1740.                                                                                               // 16238
    ReactUpdates.enqueueUpdate(internalInstance);                                                                      // 16239
  }                                                                                                                    // 16240
}                                                                                                                      // 16241
                                                                                                                       // 16242
function getInternalInstanceReadyForUpdate(publicInstance, callerName) {                                               // 16243
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 16244
    ReactCurrentOwner.current == null,                                                                                 // 16245
    '%s(...): Cannot update during an existing state transition ' +                                                    // 16246
    '(such as within `render`). Render methods should be a pure function ' +                                           // 16247
    'of props and state.',                                                                                             // 16248
    callerName                                                                                                         // 16249
  ) : invariant(ReactCurrentOwner.current == null));                                                                   // 16250
                                                                                                                       // 16251
  var internalInstance = ReactInstanceMap.get(publicInstance);                                                         // 16252
  if (!internalInstance) {                                                                                             // 16253
    if ("production" !== process.env.NODE_ENV) {                                                                       // 16254
      // Only warn when we have a callerName. Otherwise we should be silent.                                           // 16255
      // We're probably calling from enqueueCallback. We don't want to warn                                            // 16256
      // there because we already warned for the corresponding lifecycle method.                                       // 16257
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 16258
        !callerName,                                                                                                   // 16259
        '%s(...): Can only update a mounted or mounting component. ' +                                                 // 16260
        'This usually means you called %s() on an unmounted ' +                                                        // 16261
        'component. This is a no-op.',                                                                                 // 16262
        callerName,                                                                                                    // 16263
        callerName                                                                                                     // 16264
      ) : null);                                                                                                       // 16265
    }                                                                                                                  // 16266
    return null;                                                                                                       // 16267
  }                                                                                                                    // 16268
                                                                                                                       // 16269
  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {                                               // 16270
    return null;                                                                                                       // 16271
  }                                                                                                                    // 16272
                                                                                                                       // 16273
  return internalInstance;                                                                                             // 16274
}                                                                                                                      // 16275
                                                                                                                       // 16276
/**                                                                                                                    // 16277
 * ReactUpdateQueue allows for state updates to be scheduled into a later                                              // 16278
 * reconciliation step.                                                                                                // 16279
 */                                                                                                                    // 16280
var ReactUpdateQueue = {                                                                                               // 16281
                                                                                                                       // 16282
  /**                                                                                                                  // 16283
   * Enqueue a callback that will be executed after all the pending updates                                            // 16284
   * have processed.                                                                                                   // 16285
   *                                                                                                                   // 16286
   * @param {ReactClass} publicInstance The instance to use as `this` context.                                         // 16287
   * @param {?function} callback Called after state is updated.                                                        // 16288
   * @internal                                                                                                         // 16289
   */                                                                                                                  // 16290
  enqueueCallback: function(publicInstance, callback) {                                                                // 16291
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 16292
      typeof callback === 'function',                                                                                  // 16293
      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +                                                // 16294
      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +                                           // 16295
      'isn\'t callable.'                                                                                               // 16296
    ) : invariant(typeof callback === 'function'));                                                                    // 16297
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);                                          // 16298
                                                                                                                       // 16299
    // Previously we would throw an error if we didn't have an internal                                                // 16300
    // instance. Since we want to make it a no-op instead, we mirror the same                                          // 16301
    // behavior we have in other enqueue* methods.                                                                     // 16302
    // We also need to ignore callbacks in componentWillMount. See                                                     // 16303
    // enqueueUpdates.                                                                                                 // 16304
    if (!internalInstance ||                                                                                           // 16305
        internalInstance === ReactLifeCycle.currentlyMountingInstance) {                                               // 16306
      return null;                                                                                                     // 16307
    }                                                                                                                  // 16308
                                                                                                                       // 16309
    if (internalInstance._pendingCallbacks) {                                                                          // 16310
      internalInstance._pendingCallbacks.push(callback);                                                               // 16311
    } else {                                                                                                           // 16312
      internalInstance._pendingCallbacks = [callback];                                                                 // 16313
    }                                                                                                                  // 16314
    // TODO: The callback here is ignored when setState is called from                                                 // 16315
    // componentWillMount. Either fix it or disallow doing so completely in                                            // 16316
    // favor of getInitialState. Alternatively, we can disallow                                                        // 16317
    // componentWillMount during server-side rendering.                                                                // 16318
    enqueueUpdate(internalInstance);                                                                                   // 16319
  },                                                                                                                   // 16320
                                                                                                                       // 16321
  enqueueCallbackInternal: function(internalInstance, callback) {                                                      // 16322
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 16323
      typeof callback === 'function',                                                                                  // 16324
      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +                                                // 16325
      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +                                           // 16326
      'isn\'t callable.'                                                                                               // 16327
    ) : invariant(typeof callback === 'function'));                                                                    // 16328
    if (internalInstance._pendingCallbacks) {                                                                          // 16329
      internalInstance._pendingCallbacks.push(callback);                                                               // 16330
    } else {                                                                                                           // 16331
      internalInstance._pendingCallbacks = [callback];                                                                 // 16332
    }                                                                                                                  // 16333
    enqueueUpdate(internalInstance);                                                                                   // 16334
  },                                                                                                                   // 16335
                                                                                                                       // 16336
  /**                                                                                                                  // 16337
   * Forces an update. This should only be invoked when it is known with                                               // 16338
   * certainty that we are **not** in a DOM transaction.                                                               // 16339
   *                                                                                                                   // 16340
   * You may want to call this when you know that some deeper aspect of the                                            // 16341
   * component's state has changed but `setState` was not called.                                                      // 16342
   *                                                                                                                   // 16343
   * This will not invoke `shouldUpdateComponent`, but it will invoke                                                  // 16344
   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 16345
   *                                                                                                                   // 16346
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 16347
   * @internal                                                                                                         // 16348
   */                                                                                                                  // 16349
  enqueueForceUpdate: function(publicInstance) {                                                                       // 16350
    var internalInstance = getInternalInstanceReadyForUpdate(                                                          // 16351
      publicInstance,                                                                                                  // 16352
      'forceUpdate'                                                                                                    // 16353
    );                                                                                                                 // 16354
                                                                                                                       // 16355
    if (!internalInstance) {                                                                                           // 16356
      return;                                                                                                          // 16357
    }                                                                                                                  // 16358
                                                                                                                       // 16359
    internalInstance._pendingForceUpdate = true;                                                                       // 16360
                                                                                                                       // 16361
    enqueueUpdate(internalInstance);                                                                                   // 16362
  },                                                                                                                   // 16363
                                                                                                                       // 16364
  /**                                                                                                                  // 16365
   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 16366
   * You should treat `this.state` as immutable.                                                                       // 16367
   *                                                                                                                   // 16368
   * There is no guarantee that `this.state` will be immediately updated, so                                           // 16369
   * accessing `this.state` after calling this method may return the old value.                                        // 16370
   *                                                                                                                   // 16371
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 16372
   * @param {object} completeState Next state.                                                                         // 16373
   * @internal                                                                                                         // 16374
   */                                                                                                                  // 16375
  enqueueReplaceState: function(publicInstance, completeState) {                                                       // 16376
    var internalInstance = getInternalInstanceReadyForUpdate(                                                          // 16377
      publicInstance,                                                                                                  // 16378
      'replaceState'                                                                                                   // 16379
    );                                                                                                                 // 16380
                                                                                                                       // 16381
    if (!internalInstance) {                                                                                           // 16382
      return;                                                                                                          // 16383
    }                                                                                                                  // 16384
                                                                                                                       // 16385
    internalInstance._pendingStateQueue = [completeState];                                                             // 16386
    internalInstance._pendingReplaceState = true;                                                                      // 16387
                                                                                                                       // 16388
    enqueueUpdate(internalInstance);                                                                                   // 16389
  },                                                                                                                   // 16390
                                                                                                                       // 16391
  /**                                                                                                                  // 16392
   * Sets a subset of the state. This only exists because _pendingState is                                             // 16393
   * internal. This provides a merging strategy that is not available to deep                                          // 16394
   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 16395
   * during the merge.                                                                                                 // 16396
   *                                                                                                                   // 16397
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 16398
   * @param {object} partialState Next partial state to be merged with state.                                          // 16399
   * @internal                                                                                                         // 16400
   */                                                                                                                  // 16401
  enqueueSetState: function(publicInstance, partialState) {                                                            // 16402
    var internalInstance = getInternalInstanceReadyForUpdate(                                                          // 16403
      publicInstance,                                                                                                  // 16404
      'setState'                                                                                                       // 16405
    );                                                                                                                 // 16406
                                                                                                                       // 16407
    if (!internalInstance) {                                                                                           // 16408
      return;                                                                                                          // 16409
    }                                                                                                                  // 16410
                                                                                                                       // 16411
    var queue =                                                                                                        // 16412
      internalInstance._pendingStateQueue ||                                                                           // 16413
      (internalInstance._pendingStateQueue = []);                                                                      // 16414
    queue.push(partialState);                                                                                          // 16415
                                                                                                                       // 16416
    enqueueUpdate(internalInstance);                                                                                   // 16417
  },                                                                                                                   // 16418
                                                                                                                       // 16419
  /**                                                                                                                  // 16420
   * Sets a subset of the props.                                                                                       // 16421
   *                                                                                                                   // 16422
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 16423
   * @param {object} partialProps Subset of the next props.                                                            // 16424
   * @internal                                                                                                         // 16425
   */                                                                                                                  // 16426
  enqueueSetProps: function(publicInstance, partialProps) {                                                            // 16427
    var internalInstance = getInternalInstanceReadyForUpdate(                                                          // 16428
      publicInstance,                                                                                                  // 16429
      'setProps'                                                                                                       // 16430
    );                                                                                                                 // 16431
                                                                                                                       // 16432
    if (!internalInstance) {                                                                                           // 16433
      return;                                                                                                          // 16434
    }                                                                                                                  // 16435
                                                                                                                       // 16436
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 16437
      internalInstance._isTopLevel,                                                                                    // 16438
      'setProps(...): You called `setProps` on a ' +                                                                   // 16439
      'component with a parent. This is an anti-pattern since props will ' +                                           // 16440
      'get reactively updated when rendered. Instead, change the owner\'s ' +                                          // 16441
      '`render` method to pass the correct value as props to the component ' +                                         // 16442
      'where it is created.'                                                                                           // 16443
    ) : invariant(internalInstance._isTopLevel));                                                                      // 16444
                                                                                                                       // 16445
    // Merge with the pending element if it exists, otherwise with existing                                            // 16446
    // element props.                                                                                                  // 16447
    var element = internalInstance._pendingElement ||                                                                  // 16448
                  internalInstance._currentElement;                                                                    // 16449
    var props = assign({}, element.props, partialProps);                                                               // 16450
    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(                                              // 16451
      element,                                                                                                         // 16452
      props                                                                                                            // 16453
    );                                                                                                                 // 16454
                                                                                                                       // 16455
    enqueueUpdate(internalInstance);                                                                                   // 16456
  },                                                                                                                   // 16457
                                                                                                                       // 16458
  /**                                                                                                                  // 16459
   * Replaces all of the props.                                                                                        // 16460
   *                                                                                                                   // 16461
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 16462
   * @param {object} props New props.                                                                                  // 16463
   * @internal                                                                                                         // 16464
   */                                                                                                                  // 16465
  enqueueReplaceProps: function(publicInstance, props) {                                                               // 16466
    var internalInstance = getInternalInstanceReadyForUpdate(                                                          // 16467
      publicInstance,                                                                                                  // 16468
      'replaceProps'                                                                                                   // 16469
    );                                                                                                                 // 16470
                                                                                                                       // 16471
    if (!internalInstance) {                                                                                           // 16472
      return;                                                                                                          // 16473
    }                                                                                                                  // 16474
                                                                                                                       // 16475
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 16476
      internalInstance._isTopLevel,                                                                                    // 16477
      'replaceProps(...): You called `replaceProps` on a ' +                                                           // 16478
      'component with a parent. This is an anti-pattern since props will ' +                                           // 16479
      'get reactively updated when rendered. Instead, change the owner\'s ' +                                          // 16480
      '`render` method to pass the correct value as props to the component ' +                                         // 16481
      'where it is created.'                                                                                           // 16482
    ) : invariant(internalInstance._isTopLevel));                                                                      // 16483
                                                                                                                       // 16484
    // Merge with the pending element if it exists, otherwise with existing                                            // 16485
    // element props.                                                                                                  // 16486
    var element = internalInstance._pendingElement ||                                                                  // 16487
                  internalInstance._currentElement;                                                                    // 16488
    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(                                              // 16489
      element,                                                                                                         // 16490
      props                                                                                                            // 16491
    );                                                                                                                 // 16492
                                                                                                                       // 16493
    enqueueUpdate(internalInstance);                                                                                   // 16494
  },                                                                                                                   // 16495
                                                                                                                       // 16496
  enqueueElementInternal: function(internalInstance, newElement) {                                                     // 16497
    internalInstance._pendingElement = newElement;                                                                     // 16498
    enqueueUpdate(internalInstance);                                                                                   // 16499
  }                                                                                                                    // 16500
                                                                                                                       // 16501
};                                                                                                                     // 16502
                                                                                                                       // 16503
module.exports = ReactUpdateQueue;                                                                                     // 16504
                                                                                                                       // 16505
}).call(this,require('_process'))                                                                                      // 16506
                                                                                                                       // 16507
},{"./Object.assign":"react/lib/Object.assign","./ReactCurrentOwner":"react/lib/ReactCurrentOwner","./ReactElement":"react/lib/ReactElement","./ReactInstanceMap":"react/lib/ReactInstanceMap","./ReactLifeCycle":"react/lib/ReactLifeCycle","./ReactUpdates":"react/lib/ReactUpdates","./invariant":"react/lib/invariant","./warning":"react/lib/warning","_process":1}],"react/lib/ReactUpdates":[function(require,module,exports){
(function (process){                                                                                                   // 16509
/**                                                                                                                    // 16510
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 16511
 * All rights reserved.                                                                                                // 16512
 *                                                                                                                     // 16513
 * This source code is licensed under the BSD-style license found in the                                               // 16514
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 16515
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 16516
 *                                                                                                                     // 16517
 * @providesModule ReactUpdates                                                                                        // 16518
 */                                                                                                                    // 16519
                                                                                                                       // 16520
'use strict';                                                                                                          // 16521
                                                                                                                       // 16522
var CallbackQueue = require("./CallbackQueue");                                                                        // 16523
var PooledClass = require("./PooledClass");                                                                            // 16524
var ReactCurrentOwner = require("./ReactCurrentOwner");                                                                // 16525
var ReactPerf = require("./ReactPerf");                                                                                // 16526
var ReactReconciler = require("./ReactReconciler");                                                                    // 16527
var Transaction = require("./Transaction");                                                                            // 16528
                                                                                                                       // 16529
var assign = require("./Object.assign");                                                                               // 16530
var invariant = require("./invariant");                                                                                // 16531
var warning = require("./warning");                                                                                    // 16532
                                                                                                                       // 16533
var dirtyComponents = [];                                                                                              // 16534
var asapCallbackQueue = CallbackQueue.getPooled();                                                                     // 16535
var asapEnqueued = false;                                                                                              // 16536
                                                                                                                       // 16537
var batchingStrategy = null;                                                                                           // 16538
                                                                                                                       // 16539
function ensureInjected() {                                                                                            // 16540
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 16541
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,                                                        // 16542
    'ReactUpdates: must inject a reconcile transaction class and batching ' +                                          // 16543
    'strategy'                                                                                                         // 16544
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));                                          // 16545
}                                                                                                                      // 16546
                                                                                                                       // 16547
var NESTED_UPDATES = {                                                                                                 // 16548
  initialize: function() {                                                                                             // 16549
    this.dirtyComponentsLength = dirtyComponents.length;                                                               // 16550
  },                                                                                                                   // 16551
  close: function() {                                                                                                  // 16552
    if (this.dirtyComponentsLength !== dirtyComponents.length) {                                                       // 16553
      // Additional updates were enqueued by componentDidUpdate handlers or                                            // 16554
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run                                        // 16555
      // these new updates so that if A's componentDidUpdate calls setState on                                         // 16556
      // B, B will update before the callback A's updater provided when calling                                        // 16557
      // setState.                                                                                                     // 16558
      dirtyComponents.splice(0, this.dirtyComponentsLength);                                                           // 16559
      flushBatchedUpdates();                                                                                           // 16560
    } else {                                                                                                           // 16561
      dirtyComponents.length = 0;                                                                                      // 16562
    }                                                                                                                  // 16563
  }                                                                                                                    // 16564
};                                                                                                                     // 16565
                                                                                                                       // 16566
var UPDATE_QUEUEING = {                                                                                                // 16567
  initialize: function() {                                                                                             // 16568
    this.callbackQueue.reset();                                                                                        // 16569
  },                                                                                                                   // 16570
  close: function() {                                                                                                  // 16571
    this.callbackQueue.notifyAll();                                                                                    // 16572
  }                                                                                                                    // 16573
};                                                                                                                     // 16574
                                                                                                                       // 16575
var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];                                                          // 16576
                                                                                                                       // 16577
function ReactUpdatesFlushTransaction() {                                                                              // 16578
  this.reinitializeTransaction();                                                                                      // 16579
  this.dirtyComponentsLength = null;                                                                                   // 16580
  this.callbackQueue = CallbackQueue.getPooled();                                                                      // 16581
  this.reconcileTransaction =                                                                                          // 16582
    ReactUpdates.ReactReconcileTransaction.getPooled();                                                                // 16583
}                                                                                                                      // 16584
                                                                                                                       // 16585
assign(                                                                                                                // 16586
  ReactUpdatesFlushTransaction.prototype,                                                                              // 16587
  Transaction.Mixin, {                                                                                                 // 16588
  getTransactionWrappers: function() {                                                                                 // 16589
    return TRANSACTION_WRAPPERS;                                                                                       // 16590
  },                                                                                                                   // 16591
                                                                                                                       // 16592
  destructor: function() {                                                                                             // 16593
    this.dirtyComponentsLength = null;                                                                                 // 16594
    CallbackQueue.release(this.callbackQueue);                                                                         // 16595
    this.callbackQueue = null;                                                                                         // 16596
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);                                         // 16597
    this.reconcileTransaction = null;                                                                                  // 16598
  },                                                                                                                   // 16599
                                                                                                                       // 16600
  perform: function(method, scope, a) {                                                                                // 16601
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`                                         // 16602
    // with this transaction's wrappers around it.                                                                     // 16603
    return Transaction.Mixin.perform.call(                                                                             // 16604
      this,                                                                                                            // 16605
      this.reconcileTransaction.perform,                                                                               // 16606
      this.reconcileTransaction,                                                                                       // 16607
      method,                                                                                                          // 16608
      scope,                                                                                                           // 16609
      a                                                                                                                // 16610
    );                                                                                                                 // 16611
  }                                                                                                                    // 16612
});                                                                                                                    // 16613
                                                                                                                       // 16614
PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);                                                                // 16615
                                                                                                                       // 16616
function batchedUpdates(callback, a, b, c, d) {                                                                        // 16617
  ensureInjected();                                                                                                    // 16618
  batchingStrategy.batchedUpdates(callback, a, b, c, d);                                                               // 16619
}                                                                                                                      // 16620
                                                                                                                       // 16621
/**                                                                                                                    // 16622
 * Array comparator for ReactComponents by mount ordering.                                                             // 16623
 *                                                                                                                     // 16624
 * @param {ReactComponent} c1 first component you're comparing                                                         // 16625
 * @param {ReactComponent} c2 second component you're comparing                                                        // 16626
 * @return {number} Return value usable by Array.prototype.sort().                                                     // 16627
 */                                                                                                                    // 16628
function mountOrderComparator(c1, c2) {                                                                                // 16629
  return c1._mountOrder - c2._mountOrder;                                                                              // 16630
}                                                                                                                      // 16631
                                                                                                                       // 16632
function runBatchedUpdates(transaction) {                                                                              // 16633
  var len = transaction.dirtyComponentsLength;                                                                         // 16634
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 16635
    len === dirtyComponents.length,                                                                                    // 16636
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +                                          // 16637
    'match dirty-components array length (%s).',                                                                       // 16638
    len,                                                                                                               // 16639
    dirtyComponents.length                                                                                             // 16640
  ) : invariant(len === dirtyComponents.length));                                                                      // 16641
                                                                                                                       // 16642
  // Since reconciling a component higher in the owner hierarchy usually (not                                          // 16643
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile                                         // 16644
  // them before their children by sorting the array.                                                                  // 16645
  dirtyComponents.sort(mountOrderComparator);                                                                          // 16646
                                                                                                                       // 16647
  for (var i = 0; i < len; i++) {                                                                                      // 16648
    // If a component is unmounted before pending changes apply, it will still                                         // 16649
    // be here, but we assume that it has cleared its _pendingCallbacks and                                            // 16650
    // that performUpdateIfNecessary is a noop.                                                                        // 16651
    var component = dirtyComponents[i];                                                                                // 16652
                                                                                                                       // 16653
    // If performUpdateIfNecessary happens to enqueue any new updates, we                                              // 16654
    // shouldn't execute the callbacks until the next render happens, so                                               // 16655
    // stash the callbacks first                                                                                       // 16656
    var callbacks = component._pendingCallbacks;                                                                       // 16657
    component._pendingCallbacks = null;                                                                                // 16658
                                                                                                                       // 16659
    ReactReconciler.performUpdateIfNecessary(                                                                          // 16660
      component,                                                                                                       // 16661
      transaction.reconcileTransaction                                                                                 // 16662
    );                                                                                                                 // 16663
                                                                                                                       // 16664
    if (callbacks) {                                                                                                   // 16665
      for (var j = 0; j < callbacks.length; j++) {                                                                     // 16666
        transaction.callbackQueue.enqueue(                                                                             // 16667
          callbacks[j],                                                                                                // 16668
          component.getPublicInstance()                                                                                // 16669
        );                                                                                                             // 16670
      }                                                                                                                // 16671
    }                                                                                                                  // 16672
  }                                                                                                                    // 16673
}                                                                                                                      // 16674
                                                                                                                       // 16675
var flushBatchedUpdates = function() {                                                                                 // 16676
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents                                            // 16677
  // array and perform any updates enqueued by mount-ready handlers (i.e.,                                             // 16678
  // componentDidUpdate) but we need to check here too in order to catch                                               // 16679
  // updates enqueued by setState callbacks and asap calls.                                                            // 16680
  while (dirtyComponents.length || asapEnqueued) {                                                                     // 16681
    if (dirtyComponents.length) {                                                                                      // 16682
      var transaction = ReactUpdatesFlushTransaction.getPooled();                                                      // 16683
      transaction.perform(runBatchedUpdates, null, transaction);                                                       // 16684
      ReactUpdatesFlushTransaction.release(transaction);                                                               // 16685
    }                                                                                                                  // 16686
                                                                                                                       // 16687
    if (asapEnqueued) {                                                                                                // 16688
      asapEnqueued = false;                                                                                            // 16689
      var queue = asapCallbackQueue;                                                                                   // 16690
      asapCallbackQueue = CallbackQueue.getPooled();                                                                   // 16691
      queue.notifyAll();                                                                                               // 16692
      CallbackQueue.release(queue);                                                                                    // 16693
    }                                                                                                                  // 16694
  }                                                                                                                    // 16695
};                                                                                                                     // 16696
flushBatchedUpdates = ReactPerf.measure(                                                                               // 16697
  'ReactUpdates',                                                                                                      // 16698
  'flushBatchedUpdates',                                                                                               // 16699
  flushBatchedUpdates                                                                                                  // 16700
);                                                                                                                     // 16701
                                                                                                                       // 16702
/**                                                                                                                    // 16703
 * Mark a component as needing a rerender, adding an optional callback to a                                            // 16704
 * list of functions which will be executed once the rerender occurs.                                                  // 16705
 */                                                                                                                    // 16706
function enqueueUpdate(component) {                                                                                    // 16707
  ensureInjected();                                                                                                    // 16708
                                                                                                                       // 16709
  // Various parts of our code (such as ReactCompositeComponent's                                                      // 16710
  // _renderValidatedComponent) assume that calls to render aren't nested;                                             // 16711
  // verify that that's the case. (This is called by each top-level update                                             // 16712
  // function, like setProps, setState, forceUpdate, etc.; creation and                                                // 16713
  // destruction of top-level components is guarded in ReactMount.)                                                    // 16714
  ("production" !== process.env.NODE_ENV ? warning(                                                                    // 16715
    ReactCurrentOwner.current == null,                                                                                 // 16716
    'enqueueUpdate(): Render methods should be a pure function of props ' +                                            // 16717
    'and state; triggering nested component updates from render is not ' +                                             // 16718
    'allowed. If necessary, trigger nested updates in ' +                                                              // 16719
    'componentDidUpdate.'                                                                                              // 16720
  ) : null);                                                                                                           // 16721
                                                                                                                       // 16722
  if (!batchingStrategy.isBatchingUpdates) {                                                                           // 16723
    batchingStrategy.batchedUpdates(enqueueUpdate, component);                                                         // 16724
    return;                                                                                                            // 16725
  }                                                                                                                    // 16726
                                                                                                                       // 16727
  dirtyComponents.push(component);                                                                                     // 16728
}                                                                                                                      // 16729
                                                                                                                       // 16730
/**                                                                                                                    // 16731
 * Enqueue a callback to be run at the end of the current batching cycle. Throws                                       // 16732
 * if no updates are currently being performed.                                                                        // 16733
 */                                                                                                                    // 16734
function asap(callback, context) {                                                                                     // 16735
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 16736
    batchingStrategy.isBatchingUpdates,                                                                                // 16737
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +                                          // 16738
    'updates are not being batched.'                                                                                   // 16739
  ) : invariant(batchingStrategy.isBatchingUpdates));                                                                  // 16740
  asapCallbackQueue.enqueue(callback, context);                                                                        // 16741
  asapEnqueued = true;                                                                                                 // 16742
}                                                                                                                      // 16743
                                                                                                                       // 16744
var ReactUpdatesInjection = {                                                                                          // 16745
  injectReconcileTransaction: function(ReconcileTransaction) {                                                         // 16746
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 16747
      ReconcileTransaction,                                                                                            // 16748
      'ReactUpdates: must provide a reconcile transaction class'                                                       // 16749
    ) : invariant(ReconcileTransaction));                                                                              // 16750
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;                                                     // 16751
  },                                                                                                                   // 16752
                                                                                                                       // 16753
  injectBatchingStrategy: function(_batchingStrategy) {                                                                // 16754
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 16755
      _batchingStrategy,                                                                                               // 16756
      'ReactUpdates: must provide a batching strategy'                                                                 // 16757
    ) : invariant(_batchingStrategy));                                                                                 // 16758
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 16759
      typeof _batchingStrategy.batchedUpdates === 'function',                                                          // 16760
      'ReactUpdates: must provide a batchedUpdates() function'                                                         // 16761
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));                                            // 16762
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 16763
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',                                                        // 16764
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'                                              // 16765
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));                                          // 16766
    batchingStrategy = _batchingStrategy;                                                                              // 16767
  }                                                                                                                    // 16768
};                                                                                                                     // 16769
                                                                                                                       // 16770
var ReactUpdates = {                                                                                                   // 16771
  /**                                                                                                                  // 16772
   * React references `ReactReconcileTransaction` using this property in order                                         // 16773
   * to allow dependency injection.                                                                                    // 16774
   *                                                                                                                   // 16775
   * @internal                                                                                                         // 16776
   */                                                                                                                  // 16777
  ReactReconcileTransaction: null,                                                                                     // 16778
                                                                                                                       // 16779
  batchedUpdates: batchedUpdates,                                                                                      // 16780
  enqueueUpdate: enqueueUpdate,                                                                                        // 16781
  flushBatchedUpdates: flushBatchedUpdates,                                                                            // 16782
  injection: ReactUpdatesInjection,                                                                                    // 16783
  asap: asap                                                                                                           // 16784
};                                                                                                                     // 16785
                                                                                                                       // 16786
module.exports = ReactUpdates;                                                                                         // 16787
                                                                                                                       // 16788
}).call(this,require('_process'))                                                                                      // 16789
                                                                                                                       // 16790
},{"./CallbackQueue":"react/lib/CallbackQueue","./Object.assign":"react/lib/Object.assign","./PooledClass":"react/lib/PooledClass","./ReactCurrentOwner":"react/lib/ReactCurrentOwner","./ReactPerf":"react/lib/ReactPerf","./ReactReconciler":"react/lib/ReactReconciler","./Transaction":"react/lib/Transaction","./invariant":"react/lib/invariant","./warning":"react/lib/warning","_process":1}],"react/lib/ReactWithAddons":[function(require,module,exports){
(function (process){                                                                                                   // 16792
/**                                                                                                                    // 16793
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 16794
 * All rights reserved.                                                                                                // 16795
 *                                                                                                                     // 16796
 * This source code is licensed under the BSD-style license found in the                                               // 16797
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 16798
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 16799
 *                                                                                                                     // 16800
 * @providesModule ReactWithAddons                                                                                     // 16801
 */                                                                                                                    // 16802
                                                                                                                       // 16803
/**                                                                                                                    // 16804
 * This module exists purely in the open source project, and is meant as a way                                         // 16805
 * to create a separate standalone build of React. This build has "addons", or                                         // 16806
 * functionality we've built and think might be useful but doesn't have a good                                         // 16807
 * place to live inside React core.                                                                                    // 16808
 */                                                                                                                    // 16809
                                                                                                                       // 16810
'use strict';                                                                                                          // 16811
                                                                                                                       // 16812
var LinkedStateMixin = require("./LinkedStateMixin");                                                                  // 16813
var React = require("./React");                                                                                        // 16814
var ReactComponentWithPureRenderMixin =                                                                                // 16815
  require("./ReactComponentWithPureRenderMixin");                                                                      // 16816
var ReactCSSTransitionGroup = require("./ReactCSSTransitionGroup");                                                    // 16817
var ReactFragment = require("./ReactFragment");                                                                        // 16818
var ReactTransitionGroup = require("./ReactTransitionGroup");                                                          // 16819
var ReactUpdates = require("./ReactUpdates");                                                                          // 16820
                                                                                                                       // 16821
var cx = require("./cx");                                                                                              // 16822
var cloneWithProps = require("./cloneWithProps");                                                                      // 16823
var update = require("./update");                                                                                      // 16824
                                                                                                                       // 16825
React.addons = {                                                                                                       // 16826
  CSSTransitionGroup: ReactCSSTransitionGroup,                                                                         // 16827
  LinkedStateMixin: LinkedStateMixin,                                                                                  // 16828
  PureRenderMixin: ReactComponentWithPureRenderMixin,                                                                  // 16829
  TransitionGroup: ReactTransitionGroup,                                                                               // 16830
                                                                                                                       // 16831
  batchedUpdates: ReactUpdates.batchedUpdates,                                                                         // 16832
  classSet: cx,                                                                                                        // 16833
  cloneWithProps: cloneWithProps,                                                                                      // 16834
  createFragment: ReactFragment.create,                                                                                // 16835
  update: update                                                                                                       // 16836
};                                                                                                                     // 16837
                                                                                                                       // 16838
if ("production" !== process.env.NODE_ENV) {                                                                           // 16839
  React.addons.Perf = require("./ReactDefaultPerf");                                                                   // 16840
  React.addons.TestUtils = require("./ReactTestUtils");                                                                // 16841
}                                                                                                                      // 16842
                                                                                                                       // 16843
module.exports = React;                                                                                                // 16844
                                                                                                                       // 16845
}).call(this,require('_process'))                                                                                      // 16846
                                                                                                                       // 16847
},{"./LinkedStateMixin":"react/lib/LinkedStateMixin","./React":"react/lib/React","./ReactCSSTransitionGroup":"react/lib/ReactCSSTransitionGroup","./ReactComponentWithPureRenderMixin":"react/lib/ReactComponentWithPureRenderMixin","./ReactDefaultPerf":"react/lib/ReactDefaultPerf","./ReactFragment":"react/lib/ReactFragment","./ReactTestUtils":"react/lib/ReactTestUtils","./ReactTransitionGroup":"react/lib/ReactTransitionGroup","./ReactUpdates":"react/lib/ReactUpdates","./cloneWithProps":"react/lib/cloneWithProps","./cx":"react/lib/cx","./update":"react/lib/update","_process":1}],"react/lib/React":[function(require,module,exports){
(function (process){                                                                                                   // 16849
/**                                                                                                                    // 16850
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 16851
 * All rights reserved.                                                                                                // 16852
 *                                                                                                                     // 16853
 * This source code is licensed under the BSD-style license found in the                                               // 16854
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 16855
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 16856
 *                                                                                                                     // 16857
 * @providesModule React                                                                                               // 16858
 */                                                                                                                    // 16859
                                                                                                                       // 16860
/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/                                                                            // 16861
                                                                                                                       // 16862
'use strict';                                                                                                          // 16863
                                                                                                                       // 16864
var EventPluginUtils = require("./EventPluginUtils");                                                                  // 16865
var ReactChildren = require("./ReactChildren");                                                                        // 16866
var ReactComponent = require("./ReactComponent");                                                                      // 16867
var ReactClass = require("./ReactClass");                                                                              // 16868
var ReactContext = require("./ReactContext");                                                                          // 16869
var ReactCurrentOwner = require("./ReactCurrentOwner");                                                                // 16870
var ReactElement = require("./ReactElement");                                                                          // 16871
var ReactElementValidator = require("./ReactElementValidator");                                                        // 16872
var ReactDOM = require("./ReactDOM");                                                                                  // 16873
var ReactDOMTextComponent = require("./ReactDOMTextComponent");                                                        // 16874
var ReactDefaultInjection = require("./ReactDefaultInjection");                                                        // 16875
var ReactInstanceHandles = require("./ReactInstanceHandles");                                                          // 16876
var ReactMount = require("./ReactMount");                                                                              // 16877
var ReactPerf = require("./ReactPerf");                                                                                // 16878
var ReactPropTypes = require("./ReactPropTypes");                                                                      // 16879
var ReactReconciler = require("./ReactReconciler");                                                                    // 16880
var ReactServerRendering = require("./ReactServerRendering");                                                          // 16881
                                                                                                                       // 16882
var assign = require("./Object.assign");                                                                               // 16883
var findDOMNode = require("./findDOMNode");                                                                            // 16884
var onlyChild = require("./onlyChild");                                                                                // 16885
                                                                                                                       // 16886
ReactDefaultInjection.inject();                                                                                        // 16887
                                                                                                                       // 16888
var createElement = ReactElement.createElement;                                                                        // 16889
var createFactory = ReactElement.createFactory;                                                                        // 16890
var cloneElement = ReactElement.cloneElement;                                                                          // 16891
                                                                                                                       // 16892
if ("production" !== process.env.NODE_ENV) {                                                                           // 16893
  createElement = ReactElementValidator.createElement;                                                                 // 16894
  createFactory = ReactElementValidator.createFactory;                                                                 // 16895
  cloneElement = ReactElementValidator.cloneElement;                                                                   // 16896
}                                                                                                                      // 16897
                                                                                                                       // 16898
var render = ReactPerf.measure('React', 'render', ReactMount.render);                                                  // 16899
                                                                                                                       // 16900
var React = {                                                                                                          // 16901
  Children: {                                                                                                          // 16902
    map: ReactChildren.map,                                                                                            // 16903
    forEach: ReactChildren.forEach,                                                                                    // 16904
    count: ReactChildren.count,                                                                                        // 16905
    only: onlyChild                                                                                                    // 16906
  },                                                                                                                   // 16907
  Component: ReactComponent,                                                                                           // 16908
  DOM: ReactDOM,                                                                                                       // 16909
  PropTypes: ReactPropTypes,                                                                                           // 16910
  initializeTouchEvents: function(shouldUseTouch) {                                                                    // 16911
    EventPluginUtils.useTouchEvents = shouldUseTouch;                                                                  // 16912
  },                                                                                                                   // 16913
  createClass: ReactClass.createClass,                                                                                 // 16914
  createElement: createElement,                                                                                        // 16915
  cloneElement: cloneElement,                                                                                          // 16916
  createFactory: createFactory,                                                                                        // 16917
  createMixin: function(mixin) {                                                                                       // 16918
    // Currently a noop. Will be used to validate and trace mixins.                                                    // 16919
    return mixin;                                                                                                      // 16920
  },                                                                                                                   // 16921
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,                                                 // 16922
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,                                         // 16923
  findDOMNode: findDOMNode,                                                                                            // 16924
  render: render,                                                                                                      // 16925
  renderToString: ReactServerRendering.renderToString,                                                                 // 16926
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,                                                     // 16927
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,                                                           // 16928
  isValidElement: ReactElement.isValidElement,                                                                         // 16929
  withContext: ReactContext.withContext,                                                                               // 16930
                                                                                                                       // 16931
  // Hook for JSX spread, don't use this for anything else.                                                            // 16932
  __spread: assign                                                                                                     // 16933
};                                                                                                                     // 16934
                                                                                                                       // 16935
// Inject the runtime into a devtools global hook regardless of browser.                                               // 16936
// Allows for debugging when the hook is injected on the page.                                                         // 16937
if (                                                                                                                   // 16938
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&                                                             // 16939
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {                                                       // 16940
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({                                                                              // 16941
    CurrentOwner: ReactCurrentOwner,                                                                                   // 16942
    InstanceHandles: ReactInstanceHandles,                                                                             // 16943
    Mount: ReactMount,                                                                                                 // 16944
    Reconciler: ReactReconciler,                                                                                       // 16945
    TextComponent: ReactDOMTextComponent                                                                               // 16946
  });                                                                                                                  // 16947
}                                                                                                                      // 16948
                                                                                                                       // 16949
if ("production" !== process.env.NODE_ENV) {                                                                           // 16950
  var ExecutionEnvironment = require("./ExecutionEnvironment");                                                        // 16951
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {                                                  // 16952
                                                                                                                       // 16953
    // If we're in Chrome, look for the devtools marker and provide a download                                         // 16954
    // link if not installed.                                                                                          // 16955
    if (navigator.userAgent.indexOf('Chrome') > -1) {                                                                  // 16956
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {                                                     // 16957
        console.debug(                                                                                                 // 16958
          'Download the React DevTools for a better development experience: ' +                                        // 16959
          'https://fb.me/react-devtools'                                                                               // 16960
        );                                                                                                             // 16961
      }                                                                                                                // 16962
    }                                                                                                                  // 16963
                                                                                                                       // 16964
    var expectedFeatures = [                                                                                           // 16965
      // shims                                                                                                         // 16966
      Array.isArray,                                                                                                   // 16967
      Array.prototype.every,                                                                                           // 16968
      Array.prototype.forEach,                                                                                         // 16969
      Array.prototype.indexOf,                                                                                         // 16970
      Array.prototype.map,                                                                                             // 16971
      Date.now,                                                                                                        // 16972
      Function.prototype.bind,                                                                                         // 16973
      Object.keys,                                                                                                     // 16974
      String.prototype.split,                                                                                          // 16975
      String.prototype.trim,                                                                                           // 16976
                                                                                                                       // 16977
      // shams                                                                                                         // 16978
      Object_create,                                                                                                   // 16979
      Object_freeze                                                                                                    // 16980
    ];                                                                                                                 // 16981
                                                                                                                       // 16982
    for (var i = 0; i < expectedFeatures.length; i++) {                                                                // 16983
      if (!expectedFeatures[i]) {                                                                                      // 16984
        console.error(                                                                                                 // 16985
          'One or more ES5 shims expected by React are not available: ' +                                              // 16986
          'Add the es5-shim package with `meteor add es5-shim`'                                                        // 16987
        );                                                                                                             // 16988
        break;                                                                                                         // 16989
      }                                                                                                                // 16990
    }                                                                                                                  // 16991
  }                                                                                                                    // 16992
}                                                                                                                      // 16993
                                                                                                                       // 16994
React.version = '0.13.3';                                                                                              // 16995
                                                                                                                       // 16996
module.exports = React;                                                                                                // 16997
                                                                                                                       // 16998
}).call(this,require('_process'))                                                                                      // 16999
                                                                                                                       // 17000
},{"./EventPluginUtils":"react/lib/EventPluginUtils","./ExecutionEnvironment":"react/lib/ExecutionEnvironment","./Object.assign":"react/lib/Object.assign","./ReactChildren":"react/lib/ReactChildren","./ReactClass":"react/lib/ReactClass","./ReactComponent":"react/lib/ReactComponent","./ReactContext":"react/lib/ReactContext","./ReactCurrentOwner":"react/lib/ReactCurrentOwner","./ReactDOM":"react/lib/ReactDOM","./ReactDOMTextComponent":"react/lib/ReactDOMTextComponent","./ReactDefaultInjection":"react/lib/ReactDefaultInjection","./ReactElement":"react/lib/ReactElement","./ReactElementValidator":"react/lib/ReactElementValidator","./ReactInstanceHandles":"react/lib/ReactInstanceHandles","./ReactMount":"react/lib/ReactMount","./ReactPerf":"react/lib/ReactPerf","./ReactPropTypes":"react/lib/ReactPropTypes","./ReactReconciler":"react/lib/ReactReconciler","./ReactServerRendering":"react/lib/ReactServerRendering","./findDOMNode":"react/lib/findDOMNode","./onlyChild":"react/lib/onlyChild","_process":1}],"react/lib/SVGDOMPropertyConfig":[function(require,module,exports){
/**                                                                                                                    // 17002
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17003
 * All rights reserved.                                                                                                // 17004
 *                                                                                                                     // 17005
 * This source code is licensed under the BSD-style license found in the                                               // 17006
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 17007
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 17008
 *                                                                                                                     // 17009
 * @providesModule SVGDOMPropertyConfig                                                                                // 17010
 */                                                                                                                    // 17011
                                                                                                                       // 17012
/*jslint bitwise: true*/                                                                                               // 17013
                                                                                                                       // 17014
'use strict';                                                                                                          // 17015
                                                                                                                       // 17016
var DOMProperty = require("./DOMProperty");                                                                            // 17017
                                                                                                                       // 17018
var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;                                                     // 17019
                                                                                                                       // 17020
var SVGDOMPropertyConfig = {                                                                                           // 17021
  Properties: {                                                                                                        // 17022
    clipPath: MUST_USE_ATTRIBUTE,                                                                                      // 17023
    cx: MUST_USE_ATTRIBUTE,                                                                                            // 17024
    cy: MUST_USE_ATTRIBUTE,                                                                                            // 17025
    d: MUST_USE_ATTRIBUTE,                                                                                             // 17026
    dx: MUST_USE_ATTRIBUTE,                                                                                            // 17027
    dy: MUST_USE_ATTRIBUTE,                                                                                            // 17028
    fill: MUST_USE_ATTRIBUTE,                                                                                          // 17029
    fillOpacity: MUST_USE_ATTRIBUTE,                                                                                   // 17030
    fontFamily: MUST_USE_ATTRIBUTE,                                                                                    // 17031
    fontSize: MUST_USE_ATTRIBUTE,                                                                                      // 17032
    fx: MUST_USE_ATTRIBUTE,                                                                                            // 17033
    fy: MUST_USE_ATTRIBUTE,                                                                                            // 17034
    gradientTransform: MUST_USE_ATTRIBUTE,                                                                             // 17035
    gradientUnits: MUST_USE_ATTRIBUTE,                                                                                 // 17036
    markerEnd: MUST_USE_ATTRIBUTE,                                                                                     // 17037
    markerMid: MUST_USE_ATTRIBUTE,                                                                                     // 17038
    markerStart: MUST_USE_ATTRIBUTE,                                                                                   // 17039
    offset: MUST_USE_ATTRIBUTE,                                                                                        // 17040
    opacity: MUST_USE_ATTRIBUTE,                                                                                       // 17041
    patternContentUnits: MUST_USE_ATTRIBUTE,                                                                           // 17042
    patternUnits: MUST_USE_ATTRIBUTE,                                                                                  // 17043
    points: MUST_USE_ATTRIBUTE,                                                                                        // 17044
    preserveAspectRatio: MUST_USE_ATTRIBUTE,                                                                           // 17045
    r: MUST_USE_ATTRIBUTE,                                                                                             // 17046
    rx: MUST_USE_ATTRIBUTE,                                                                                            // 17047
    ry: MUST_USE_ATTRIBUTE,                                                                                            // 17048
    spreadMethod: MUST_USE_ATTRIBUTE,                                                                                  // 17049
    stopColor: MUST_USE_ATTRIBUTE,                                                                                     // 17050
    stopOpacity: MUST_USE_ATTRIBUTE,                                                                                   // 17051
    stroke: MUST_USE_ATTRIBUTE,                                                                                        // 17052
    strokeDasharray: MUST_USE_ATTRIBUTE,                                                                               // 17053
    strokeLinecap: MUST_USE_ATTRIBUTE,                                                                                 // 17054
    strokeOpacity: MUST_USE_ATTRIBUTE,                                                                                 // 17055
    strokeWidth: MUST_USE_ATTRIBUTE,                                                                                   // 17056
    textAnchor: MUST_USE_ATTRIBUTE,                                                                                    // 17057
    transform: MUST_USE_ATTRIBUTE,                                                                                     // 17058
    version: MUST_USE_ATTRIBUTE,                                                                                       // 17059
    viewBox: MUST_USE_ATTRIBUTE,                                                                                       // 17060
    x1: MUST_USE_ATTRIBUTE,                                                                                            // 17061
    x2: MUST_USE_ATTRIBUTE,                                                                                            // 17062
    x: MUST_USE_ATTRIBUTE,                                                                                             // 17063
    y1: MUST_USE_ATTRIBUTE,                                                                                            // 17064
    y2: MUST_USE_ATTRIBUTE,                                                                                            // 17065
    y: MUST_USE_ATTRIBUTE                                                                                              // 17066
  },                                                                                                                   // 17067
  DOMAttributeNames: {                                                                                                 // 17068
    clipPath: 'clip-path',                                                                                             // 17069
    fillOpacity: 'fill-opacity',                                                                                       // 17070
    fontFamily: 'font-family',                                                                                         // 17071
    fontSize: 'font-size',                                                                                             // 17072
    gradientTransform: 'gradientTransform',                                                                            // 17073
    gradientUnits: 'gradientUnits',                                                                                    // 17074
    markerEnd: 'marker-end',                                                                                           // 17075
    markerMid: 'marker-mid',                                                                                           // 17076
    markerStart: 'marker-start',                                                                                       // 17077
    patternContentUnits: 'patternContentUnits',                                                                        // 17078
    patternUnits: 'patternUnits',                                                                                      // 17079
    preserveAspectRatio: 'preserveAspectRatio',                                                                        // 17080
    spreadMethod: 'spreadMethod',                                                                                      // 17081
    stopColor: 'stop-color',                                                                                           // 17082
    stopOpacity: 'stop-opacity',                                                                                       // 17083
    strokeDasharray: 'stroke-dasharray',                                                                               // 17084
    strokeLinecap: 'stroke-linecap',                                                                                   // 17085
    strokeOpacity: 'stroke-opacity',                                                                                   // 17086
    strokeWidth: 'stroke-width',                                                                                       // 17087
    textAnchor: 'text-anchor',                                                                                         // 17088
    viewBox: 'viewBox'                                                                                                 // 17089
  }                                                                                                                    // 17090
};                                                                                                                     // 17091
                                                                                                                       // 17092
module.exports = SVGDOMPropertyConfig;                                                                                 // 17093
                                                                                                                       // 17094
},{"./DOMProperty":"react/lib/DOMProperty"}],"react/lib/SelectEventPlugin":[function(require,module,exports){          // 17095
/**                                                                                                                    // 17096
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17097
 * All rights reserved.                                                                                                // 17098
 *                                                                                                                     // 17099
 * This source code is licensed under the BSD-style license found in the                                               // 17100
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 17101
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 17102
 *                                                                                                                     // 17103
 * @providesModule SelectEventPlugin                                                                                   // 17104
 */                                                                                                                    // 17105
                                                                                                                       // 17106
'use strict';                                                                                                          // 17107
                                                                                                                       // 17108
var EventConstants = require("./EventConstants");                                                                      // 17109
var EventPropagators = require("./EventPropagators");                                                                  // 17110
var ReactInputSelection = require("./ReactInputSelection");                                                            // 17111
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 17112
                                                                                                                       // 17113
var getActiveElement = require("./getActiveElement");                                                                  // 17114
var isTextInputElement = require("./isTextInputElement");                                                              // 17115
var keyOf = require("./keyOf");                                                                                        // 17116
var shallowEqual = require("./shallowEqual");                                                                          // 17117
                                                                                                                       // 17118
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 17119
                                                                                                                       // 17120
var eventTypes = {                                                                                                     // 17121
  select: {                                                                                                            // 17122
    phasedRegistrationNames: {                                                                                         // 17123
      bubbled: keyOf({onSelect: null}),                                                                                // 17124
      captured: keyOf({onSelectCapture: null})                                                                         // 17125
    },                                                                                                                 // 17126
    dependencies: [                                                                                                    // 17127
      topLevelTypes.topBlur,                                                                                           // 17128
      topLevelTypes.topContextMenu,                                                                                    // 17129
      topLevelTypes.topFocus,                                                                                          // 17130
      topLevelTypes.topKeyDown,                                                                                        // 17131
      topLevelTypes.topMouseDown,                                                                                      // 17132
      topLevelTypes.topMouseUp,                                                                                        // 17133
      topLevelTypes.topSelectionChange                                                                                 // 17134
    ]                                                                                                                  // 17135
  }                                                                                                                    // 17136
};                                                                                                                     // 17137
                                                                                                                       // 17138
var activeElement = null;                                                                                              // 17139
var activeElementID = null;                                                                                            // 17140
var lastSelection = null;                                                                                              // 17141
var mouseDown = false;                                                                                                 // 17142
                                                                                                                       // 17143
/**                                                                                                                    // 17144
 * Get an object which is a unique representation of the current selection.                                            // 17145
 *                                                                                                                     // 17146
 * The return value will not be consistent across nodes or browsers, but                                               // 17147
 * two identical selections on the same node will return identical objects.                                            // 17148
 *                                                                                                                     // 17149
 * @param {DOMElement} node                                                                                            // 17150
 * @param {object}                                                                                                     // 17151
 */                                                                                                                    // 17152
function getSelection(node) {                                                                                          // 17153
  if ('selectionStart' in node &&                                                                                      // 17154
      ReactInputSelection.hasSelectionCapabilities(node)) {                                                            // 17155
    return {                                                                                                           // 17156
      start: node.selectionStart,                                                                                      // 17157
      end: node.selectionEnd                                                                                           // 17158
    };                                                                                                                 // 17159
  } else if (window.getSelection) {                                                                                    // 17160
    var selection = window.getSelection();                                                                             // 17161
    return {                                                                                                           // 17162
      anchorNode: selection.anchorNode,                                                                                // 17163
      anchorOffset: selection.anchorOffset,                                                                            // 17164
      focusNode: selection.focusNode,                                                                                  // 17165
      focusOffset: selection.focusOffset                                                                               // 17166
    };                                                                                                                 // 17167
  } else if (document.selection) {                                                                                     // 17168
    var range = document.selection.createRange();                                                                      // 17169
    return {                                                                                                           // 17170
      parentElement: range.parentElement(),                                                                            // 17171
      text: range.text,                                                                                                // 17172
      top: range.boundingTop,                                                                                          // 17173
      left: range.boundingLeft                                                                                         // 17174
    };                                                                                                                 // 17175
  }                                                                                                                    // 17176
}                                                                                                                      // 17177
                                                                                                                       // 17178
/**                                                                                                                    // 17179
 * Poll selection to see whether it's changed.                                                                         // 17180
 *                                                                                                                     // 17181
 * @param {object} nativeEvent                                                                                         // 17182
 * @return {?SyntheticEvent}                                                                                           // 17183
 */                                                                                                                    // 17184
function constructSelectEvent(nativeEvent) {                                                                           // 17185
  // Ensure we have the right element, and that the user is not dragging a                                             // 17186
  // selection (this matches native `select` event behavior). In HTML5, select                                         // 17187
  // fires only on input and textarea thus if there's no focused element we                                            // 17188
  // won't dispatch.                                                                                                   // 17189
  if (mouseDown ||                                                                                                     // 17190
      activeElement == null ||                                                                                         // 17191
      activeElement !== getActiveElement()) {                                                                          // 17192
    return null;                                                                                                       // 17193
  }                                                                                                                    // 17194
                                                                                                                       // 17195
  // Only fire when selection has actually changed.                                                                    // 17196
  var currentSelection = getSelection(activeElement);                                                                  // 17197
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {                                              // 17198
    lastSelection = currentSelection;                                                                                  // 17199
                                                                                                                       // 17200
    var syntheticEvent = SyntheticEvent.getPooled(                                                                     // 17201
      eventTypes.select,                                                                                               // 17202
      activeElementID,                                                                                                 // 17203
      nativeEvent                                                                                                      // 17204
    );                                                                                                                 // 17205
                                                                                                                       // 17206
    syntheticEvent.type = 'select';                                                                                    // 17207
    syntheticEvent.target = activeElement;                                                                             // 17208
                                                                                                                       // 17209
    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);                                                     // 17210
                                                                                                                       // 17211
    return syntheticEvent;                                                                                             // 17212
  }                                                                                                                    // 17213
}                                                                                                                      // 17214
                                                                                                                       // 17215
/**                                                                                                                    // 17216
 * This plugin creates an `onSelect` event that normalizes select events                                               // 17217
 * across form elements.                                                                                               // 17218
 *                                                                                                                     // 17219
 * Supported elements are:                                                                                             // 17220
 * - input (see `isTextInputElement`)                                                                                  // 17221
 * - textarea                                                                                                          // 17222
 * - contentEditable                                                                                                   // 17223
 *                                                                                                                     // 17224
 * This differs from native browser implementations in the following ways:                                             // 17225
 * - Fires on contentEditable fields as well as inputs.                                                                // 17226
 * - Fires for collapsed selection.                                                                                    // 17227
 * - Fires after user input.                                                                                           // 17228
 */                                                                                                                    // 17229
var SelectEventPlugin = {                                                                                              // 17230
                                                                                                                       // 17231
  eventTypes: eventTypes,                                                                                              // 17232
                                                                                                                       // 17233
  /**                                                                                                                  // 17234
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 17235
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 17236
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 17237
   * @param {object} nativeEvent Native browser event.                                                                 // 17238
   * @return {*} An accumulation of synthetic events.                                                                  // 17239
   * @see {EventPluginHub.extractEvents}                                                                               // 17240
   */                                                                                                                  // 17241
  extractEvents: function(                                                                                             // 17242
      topLevelType,                                                                                                    // 17243
      topLevelTarget,                                                                                                  // 17244
      topLevelTargetID,                                                                                                // 17245
      nativeEvent) {                                                                                                   // 17246
                                                                                                                       // 17247
    switch (topLevelType) {                                                                                            // 17248
      // Track the input node that has focus.                                                                          // 17249
      case topLevelTypes.topFocus:                                                                                     // 17250
        if (isTextInputElement(topLevelTarget) ||                                                                      // 17251
            topLevelTarget.contentEditable === 'true') {                                                               // 17252
          activeElement = topLevelTarget;                                                                              // 17253
          activeElementID = topLevelTargetID;                                                                          // 17254
          lastSelection = null;                                                                                        // 17255
        }                                                                                                              // 17256
        break;                                                                                                         // 17257
      case topLevelTypes.topBlur:                                                                                      // 17258
        activeElement = null;                                                                                          // 17259
        activeElementID = null;                                                                                        // 17260
        lastSelection = null;                                                                                          // 17261
        break;                                                                                                         // 17262
                                                                                                                       // 17263
      // Don't fire the event while the user is dragging. This matches the                                             // 17264
      // semantics of the native select event.                                                                         // 17265
      case topLevelTypes.topMouseDown:                                                                                 // 17266
        mouseDown = true;                                                                                              // 17267
        break;                                                                                                         // 17268
      case topLevelTypes.topContextMenu:                                                                               // 17269
      case topLevelTypes.topMouseUp:                                                                                   // 17270
        mouseDown = false;                                                                                             // 17271
        return constructSelectEvent(nativeEvent);                                                                      // 17272
                                                                                                                       // 17273
      // Chrome and IE fire non-standard event when selection is changed (and                                          // 17274
      // sometimes when it hasn't).                                                                                    // 17275
      // Firefox doesn't support selectionchange, so check selection status                                            // 17276
      // after each key entry. The selection changes after keydown and before                                          // 17277
      // keyup, but we check on keydown as well in the case of holding down a                                          // 17278
      // key, when multiple keydown events are fired but only one keyup is.                                            // 17279
      case topLevelTypes.topSelectionChange:                                                                           // 17280
      case topLevelTypes.topKeyDown:                                                                                   // 17281
      case topLevelTypes.topKeyUp:                                                                                     // 17282
        return constructSelectEvent(nativeEvent);                                                                      // 17283
    }                                                                                                                  // 17284
  }                                                                                                                    // 17285
};                                                                                                                     // 17286
                                                                                                                       // 17287
module.exports = SelectEventPlugin;                                                                                    // 17288
                                                                                                                       // 17289
},{"./EventConstants":"react/lib/EventConstants","./EventPropagators":"react/lib/EventPropagators","./ReactInputSelection":"react/lib/ReactInputSelection","./SyntheticEvent":"react/lib/SyntheticEvent","./getActiveElement":"react/lib/getActiveElement","./isTextInputElement":"react/lib/isTextInputElement","./keyOf":"react/lib/keyOf","./shallowEqual":"react/lib/shallowEqual"}],"react/lib/ServerReactRootIndex":[function(require,module,exports){
/**                                                                                                                    // 17291
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17292
 * All rights reserved.                                                                                                // 17293
 *                                                                                                                     // 17294
 * This source code is licensed under the BSD-style license found in the                                               // 17295
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 17296
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 17297
 *                                                                                                                     // 17298
 * @providesModule ServerReactRootIndex                                                                                // 17299
 * @typechecks                                                                                                         // 17300
 */                                                                                                                    // 17301
                                                                                                                       // 17302
'use strict';                                                                                                          // 17303
                                                                                                                       // 17304
/**                                                                                                                    // 17305
 * Size of the reactRoot ID space. We generate random numbers for React root                                           // 17306
 * IDs and if there's a collision the events and DOM update system will                                                // 17307
 * get confused. In the future we need a way to generate GUIDs but for                                                 // 17308
 * now this will work on a smaller scale.                                                                              // 17309
 */                                                                                                                    // 17310
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);                                                                          // 17311
                                                                                                                       // 17312
var ServerReactRootIndex = {                                                                                           // 17313
  createReactRootIndex: function() {                                                                                   // 17314
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);                                                          // 17315
  }                                                                                                                    // 17316
};                                                                                                                     // 17317
                                                                                                                       // 17318
module.exports = ServerReactRootIndex;                                                                                 // 17319
                                                                                                                       // 17320
},{}],"react/lib/SimpleEventPlugin":[function(require,module,exports){                                                 // 17321
(function (process){                                                                                                   // 17322
/**                                                                                                                    // 17323
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17324
 * All rights reserved.                                                                                                // 17325
 *                                                                                                                     // 17326
 * This source code is licensed under the BSD-style license found in the                                               // 17327
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 17328
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 17329
 *                                                                                                                     // 17330
 * @providesModule SimpleEventPlugin                                                                                   // 17331
 */                                                                                                                    // 17332
                                                                                                                       // 17333
'use strict';                                                                                                          // 17334
                                                                                                                       // 17335
var EventConstants = require("./EventConstants");                                                                      // 17336
var EventPluginUtils = require("./EventPluginUtils");                                                                  // 17337
var EventPropagators = require("./EventPropagators");                                                                  // 17338
var SyntheticClipboardEvent = require("./SyntheticClipboardEvent");                                                    // 17339
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 17340
var SyntheticFocusEvent = require("./SyntheticFocusEvent");                                                            // 17341
var SyntheticKeyboardEvent = require("./SyntheticKeyboardEvent");                                                      // 17342
var SyntheticMouseEvent = require("./SyntheticMouseEvent");                                                            // 17343
var SyntheticDragEvent = require("./SyntheticDragEvent");                                                              // 17344
var SyntheticTouchEvent = require("./SyntheticTouchEvent");                                                            // 17345
var SyntheticUIEvent = require("./SyntheticUIEvent");                                                                  // 17346
var SyntheticWheelEvent = require("./SyntheticWheelEvent");                                                            // 17347
                                                                                                                       // 17348
var getEventCharCode = require("./getEventCharCode");                                                                  // 17349
                                                                                                                       // 17350
var invariant = require("./invariant");                                                                                // 17351
var keyOf = require("./keyOf");                                                                                        // 17352
var warning = require("./warning");                                                                                    // 17353
                                                                                                                       // 17354
var topLevelTypes = EventConstants.topLevelTypes;                                                                      // 17355
                                                                                                                       // 17356
var eventTypes = {                                                                                                     // 17357
  blur: {                                                                                                              // 17358
    phasedRegistrationNames: {                                                                                         // 17359
      bubbled: keyOf({onBlur: true}),                                                                                  // 17360
      captured: keyOf({onBlurCapture: true})                                                                           // 17361
    }                                                                                                                  // 17362
  },                                                                                                                   // 17363
  click: {                                                                                                             // 17364
    phasedRegistrationNames: {                                                                                         // 17365
      bubbled: keyOf({onClick: true}),                                                                                 // 17366
      captured: keyOf({onClickCapture: true})                                                                          // 17367
    }                                                                                                                  // 17368
  },                                                                                                                   // 17369
  contextMenu: {                                                                                                       // 17370
    phasedRegistrationNames: {                                                                                         // 17371
      bubbled: keyOf({onContextMenu: true}),                                                                           // 17372
      captured: keyOf({onContextMenuCapture: true})                                                                    // 17373
    }                                                                                                                  // 17374
  },                                                                                                                   // 17375
  copy: {                                                                                                              // 17376
    phasedRegistrationNames: {                                                                                         // 17377
      bubbled: keyOf({onCopy: true}),                                                                                  // 17378
      captured: keyOf({onCopyCapture: true})                                                                           // 17379
    }                                                                                                                  // 17380
  },                                                                                                                   // 17381
  cut: {                                                                                                               // 17382
    phasedRegistrationNames: {                                                                                         // 17383
      bubbled: keyOf({onCut: true}),                                                                                   // 17384
      captured: keyOf({onCutCapture: true})                                                                            // 17385
    }                                                                                                                  // 17386
  },                                                                                                                   // 17387
  doubleClick: {                                                                                                       // 17388
    phasedRegistrationNames: {                                                                                         // 17389
      bubbled: keyOf({onDoubleClick: true}),                                                                           // 17390
      captured: keyOf({onDoubleClickCapture: true})                                                                    // 17391
    }                                                                                                                  // 17392
  },                                                                                                                   // 17393
  drag: {                                                                                                              // 17394
    phasedRegistrationNames: {                                                                                         // 17395
      bubbled: keyOf({onDrag: true}),                                                                                  // 17396
      captured: keyOf({onDragCapture: true})                                                                           // 17397
    }                                                                                                                  // 17398
  },                                                                                                                   // 17399
  dragEnd: {                                                                                                           // 17400
    phasedRegistrationNames: {                                                                                         // 17401
      bubbled: keyOf({onDragEnd: true}),                                                                               // 17402
      captured: keyOf({onDragEndCapture: true})                                                                        // 17403
    }                                                                                                                  // 17404
  },                                                                                                                   // 17405
  dragEnter: {                                                                                                         // 17406
    phasedRegistrationNames: {                                                                                         // 17407
      bubbled: keyOf({onDragEnter: true}),                                                                             // 17408
      captured: keyOf({onDragEnterCapture: true})                                                                      // 17409
    }                                                                                                                  // 17410
  },                                                                                                                   // 17411
  dragExit: {                                                                                                          // 17412
    phasedRegistrationNames: {                                                                                         // 17413
      bubbled: keyOf({onDragExit: true}),                                                                              // 17414
      captured: keyOf({onDragExitCapture: true})                                                                       // 17415
    }                                                                                                                  // 17416
  },                                                                                                                   // 17417
  dragLeave: {                                                                                                         // 17418
    phasedRegistrationNames: {                                                                                         // 17419
      bubbled: keyOf({onDragLeave: true}),                                                                             // 17420
      captured: keyOf({onDragLeaveCapture: true})                                                                      // 17421
    }                                                                                                                  // 17422
  },                                                                                                                   // 17423
  dragOver: {                                                                                                          // 17424
    phasedRegistrationNames: {                                                                                         // 17425
      bubbled: keyOf({onDragOver: true}),                                                                              // 17426
      captured: keyOf({onDragOverCapture: true})                                                                       // 17427
    }                                                                                                                  // 17428
  },                                                                                                                   // 17429
  dragStart: {                                                                                                         // 17430
    phasedRegistrationNames: {                                                                                         // 17431
      bubbled: keyOf({onDragStart: true}),                                                                             // 17432
      captured: keyOf({onDragStartCapture: true})                                                                      // 17433
    }                                                                                                                  // 17434
  },                                                                                                                   // 17435
  drop: {                                                                                                              // 17436
    phasedRegistrationNames: {                                                                                         // 17437
      bubbled: keyOf({onDrop: true}),                                                                                  // 17438
      captured: keyOf({onDropCapture: true})                                                                           // 17439
    }                                                                                                                  // 17440
  },                                                                                                                   // 17441
  focus: {                                                                                                             // 17442
    phasedRegistrationNames: {                                                                                         // 17443
      bubbled: keyOf({onFocus: true}),                                                                                 // 17444
      captured: keyOf({onFocusCapture: true})                                                                          // 17445
    }                                                                                                                  // 17446
  },                                                                                                                   // 17447
  input: {                                                                                                             // 17448
    phasedRegistrationNames: {                                                                                         // 17449
      bubbled: keyOf({onInput: true}),                                                                                 // 17450
      captured: keyOf({onInputCapture: true})                                                                          // 17451
    }                                                                                                                  // 17452
  },                                                                                                                   // 17453
  keyDown: {                                                                                                           // 17454
    phasedRegistrationNames: {                                                                                         // 17455
      bubbled: keyOf({onKeyDown: true}),                                                                               // 17456
      captured: keyOf({onKeyDownCapture: true})                                                                        // 17457
    }                                                                                                                  // 17458
  },                                                                                                                   // 17459
  keyPress: {                                                                                                          // 17460
    phasedRegistrationNames: {                                                                                         // 17461
      bubbled: keyOf({onKeyPress: true}),                                                                              // 17462
      captured: keyOf({onKeyPressCapture: true})                                                                       // 17463
    }                                                                                                                  // 17464
  },                                                                                                                   // 17465
  keyUp: {                                                                                                             // 17466
    phasedRegistrationNames: {                                                                                         // 17467
      bubbled: keyOf({onKeyUp: true}),                                                                                 // 17468
      captured: keyOf({onKeyUpCapture: true})                                                                          // 17469
    }                                                                                                                  // 17470
  },                                                                                                                   // 17471
  load: {                                                                                                              // 17472
    phasedRegistrationNames: {                                                                                         // 17473
      bubbled: keyOf({onLoad: true}),                                                                                  // 17474
      captured: keyOf({onLoadCapture: true})                                                                           // 17475
    }                                                                                                                  // 17476
  },                                                                                                                   // 17477
  error: {                                                                                                             // 17478
    phasedRegistrationNames: {                                                                                         // 17479
      bubbled: keyOf({onError: true}),                                                                                 // 17480
      captured: keyOf({onErrorCapture: true})                                                                          // 17481
    }                                                                                                                  // 17482
  },                                                                                                                   // 17483
  // Note: We do not allow listening to mouseOver events. Instead, use the                                             // 17484
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.                                                     // 17485
  mouseDown: {                                                                                                         // 17486
    phasedRegistrationNames: {                                                                                         // 17487
      bubbled: keyOf({onMouseDown: true}),                                                                             // 17488
      captured: keyOf({onMouseDownCapture: true})                                                                      // 17489
    }                                                                                                                  // 17490
  },                                                                                                                   // 17491
  mouseMove: {                                                                                                         // 17492
    phasedRegistrationNames: {                                                                                         // 17493
      bubbled: keyOf({onMouseMove: true}),                                                                             // 17494
      captured: keyOf({onMouseMoveCapture: true})                                                                      // 17495
    }                                                                                                                  // 17496
  },                                                                                                                   // 17497
  mouseOut: {                                                                                                          // 17498
    phasedRegistrationNames: {                                                                                         // 17499
      bubbled: keyOf({onMouseOut: true}),                                                                              // 17500
      captured: keyOf({onMouseOutCapture: true})                                                                       // 17501
    }                                                                                                                  // 17502
  },                                                                                                                   // 17503
  mouseOver: {                                                                                                         // 17504
    phasedRegistrationNames: {                                                                                         // 17505
      bubbled: keyOf({onMouseOver: true}),                                                                             // 17506
      captured: keyOf({onMouseOverCapture: true})                                                                      // 17507
    }                                                                                                                  // 17508
  },                                                                                                                   // 17509
  mouseUp: {                                                                                                           // 17510
    phasedRegistrationNames: {                                                                                         // 17511
      bubbled: keyOf({onMouseUp: true}),                                                                               // 17512
      captured: keyOf({onMouseUpCapture: true})                                                                        // 17513
    }                                                                                                                  // 17514
  },                                                                                                                   // 17515
  paste: {                                                                                                             // 17516
    phasedRegistrationNames: {                                                                                         // 17517
      bubbled: keyOf({onPaste: true}),                                                                                 // 17518
      captured: keyOf({onPasteCapture: true})                                                                          // 17519
    }                                                                                                                  // 17520
  },                                                                                                                   // 17521
  reset: {                                                                                                             // 17522
    phasedRegistrationNames: {                                                                                         // 17523
      bubbled: keyOf({onReset: true}),                                                                                 // 17524
      captured: keyOf({onResetCapture: true})                                                                          // 17525
    }                                                                                                                  // 17526
  },                                                                                                                   // 17527
  scroll: {                                                                                                            // 17528
    phasedRegistrationNames: {                                                                                         // 17529
      bubbled: keyOf({onScroll: true}),                                                                                // 17530
      captured: keyOf({onScrollCapture: true})                                                                         // 17531
    }                                                                                                                  // 17532
  },                                                                                                                   // 17533
  submit: {                                                                                                            // 17534
    phasedRegistrationNames: {                                                                                         // 17535
      bubbled: keyOf({onSubmit: true}),                                                                                // 17536
      captured: keyOf({onSubmitCapture: true})                                                                         // 17537
    }                                                                                                                  // 17538
  },                                                                                                                   // 17539
  touchCancel: {                                                                                                       // 17540
    phasedRegistrationNames: {                                                                                         // 17541
      bubbled: keyOf({onTouchCancel: true}),                                                                           // 17542
      captured: keyOf({onTouchCancelCapture: true})                                                                    // 17543
    }                                                                                                                  // 17544
  },                                                                                                                   // 17545
  touchEnd: {                                                                                                          // 17546
    phasedRegistrationNames: {                                                                                         // 17547
      bubbled: keyOf({onTouchEnd: true}),                                                                              // 17548
      captured: keyOf({onTouchEndCapture: true})                                                                       // 17549
    }                                                                                                                  // 17550
  },                                                                                                                   // 17551
  touchMove: {                                                                                                         // 17552
    phasedRegistrationNames: {                                                                                         // 17553
      bubbled: keyOf({onTouchMove: true}),                                                                             // 17554
      captured: keyOf({onTouchMoveCapture: true})                                                                      // 17555
    }                                                                                                                  // 17556
  },                                                                                                                   // 17557
  touchStart: {                                                                                                        // 17558
    phasedRegistrationNames: {                                                                                         // 17559
      bubbled: keyOf({onTouchStart: true}),                                                                            // 17560
      captured: keyOf({onTouchStartCapture: true})                                                                     // 17561
    }                                                                                                                  // 17562
  },                                                                                                                   // 17563
  wheel: {                                                                                                             // 17564
    phasedRegistrationNames: {                                                                                         // 17565
      bubbled: keyOf({onWheel: true}),                                                                                 // 17566
      captured: keyOf({onWheelCapture: true})                                                                          // 17567
    }                                                                                                                  // 17568
  }                                                                                                                    // 17569
};                                                                                                                     // 17570
                                                                                                                       // 17571
var topLevelEventsToDispatchConfig = {                                                                                 // 17572
  topBlur:        eventTypes.blur,                                                                                     // 17573
  topClick:       eventTypes.click,                                                                                    // 17574
  topContextMenu: eventTypes.contextMenu,                                                                              // 17575
  topCopy:        eventTypes.copy,                                                                                     // 17576
  topCut:         eventTypes.cut,                                                                                      // 17577
  topDoubleClick: eventTypes.doubleClick,                                                                              // 17578
  topDrag:        eventTypes.drag,                                                                                     // 17579
  topDragEnd:     eventTypes.dragEnd,                                                                                  // 17580
  topDragEnter:   eventTypes.dragEnter,                                                                                // 17581
  topDragExit:    eventTypes.dragExit,                                                                                 // 17582
  topDragLeave:   eventTypes.dragLeave,                                                                                // 17583
  topDragOver:    eventTypes.dragOver,                                                                                 // 17584
  topDragStart:   eventTypes.dragStart,                                                                                // 17585
  topDrop:        eventTypes.drop,                                                                                     // 17586
  topError:       eventTypes.error,                                                                                    // 17587
  topFocus:       eventTypes.focus,                                                                                    // 17588
  topInput:       eventTypes.input,                                                                                    // 17589
  topKeyDown:     eventTypes.keyDown,                                                                                  // 17590
  topKeyPress:    eventTypes.keyPress,                                                                                 // 17591
  topKeyUp:       eventTypes.keyUp,                                                                                    // 17592
  topLoad:        eventTypes.load,                                                                                     // 17593
  topMouseDown:   eventTypes.mouseDown,                                                                                // 17594
  topMouseMove:   eventTypes.mouseMove,                                                                                // 17595
  topMouseOut:    eventTypes.mouseOut,                                                                                 // 17596
  topMouseOver:   eventTypes.mouseOver,                                                                                // 17597
  topMouseUp:     eventTypes.mouseUp,                                                                                  // 17598
  topPaste:       eventTypes.paste,                                                                                    // 17599
  topReset:       eventTypes.reset,                                                                                    // 17600
  topScroll:      eventTypes.scroll,                                                                                   // 17601
  topSubmit:      eventTypes.submit,                                                                                   // 17602
  topTouchCancel: eventTypes.touchCancel,                                                                              // 17603
  topTouchEnd:    eventTypes.touchEnd,                                                                                 // 17604
  topTouchMove:   eventTypes.touchMove,                                                                                // 17605
  topTouchStart:  eventTypes.touchStart,                                                                               // 17606
  topWheel:       eventTypes.wheel                                                                                     // 17607
};                                                                                                                     // 17608
                                                                                                                       // 17609
for (var type in topLevelEventsToDispatchConfig) {                                                                     // 17610
  topLevelEventsToDispatchConfig[type].dependencies = [type];                                                          // 17611
}                                                                                                                      // 17612
                                                                                                                       // 17613
var SimpleEventPlugin = {                                                                                              // 17614
                                                                                                                       // 17615
  eventTypes: eventTypes,                                                                                              // 17616
                                                                                                                       // 17617
  /**                                                                                                                  // 17618
   * Same as the default implementation, except cancels the event when return                                          // 17619
   * value is false. This behavior will be disabled in a future release.                                               // 17620
   *                                                                                                                   // 17621
   * @param {object} Event to be dispatched.                                                                           // 17622
   * @param {function} Application-level callback.                                                                     // 17623
   * @param {string} domID DOM ID to pass to the callback.                                                             // 17624
   */                                                                                                                  // 17625
  executeDispatch: function(event, listener, domID) {                                                                  // 17626
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);                                        // 17627
                                                                                                                       // 17628
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 17629
      typeof returnValue !== 'boolean',                                                                                // 17630
      'Returning `false` from an event handler is deprecated and will be ' +                                           // 17631
      'ignored in a future release. Instead, manually call ' +                                                         // 17632
      'e.stopPropagation() or e.preventDefault(), as appropriate.'                                                     // 17633
    ) : null);                                                                                                         // 17634
                                                                                                                       // 17635
    if (returnValue === false) {                                                                                       // 17636
      event.stopPropagation();                                                                                         // 17637
      event.preventDefault();                                                                                          // 17638
    }                                                                                                                  // 17639
  },                                                                                                                   // 17640
                                                                                                                       // 17641
  /**                                                                                                                  // 17642
   * @param {string} topLevelType Record from `EventConstants`.                                                        // 17643
   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 17644
   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 17645
   * @param {object} nativeEvent Native browser event.                                                                 // 17646
   * @return {*} An accumulation of synthetic events.                                                                  // 17647
   * @see {EventPluginHub.extractEvents}                                                                               // 17648
   */                                                                                                                  // 17649
  extractEvents: function(                                                                                             // 17650
      topLevelType,                                                                                                    // 17651
      topLevelTarget,                                                                                                  // 17652
      topLevelTargetID,                                                                                                // 17653
      nativeEvent) {                                                                                                   // 17654
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];                                                 // 17655
    if (!dispatchConfig) {                                                                                             // 17656
      return null;                                                                                                     // 17657
    }                                                                                                                  // 17658
    var EventConstructor;                                                                                              // 17659
    switch (topLevelType) {                                                                                            // 17660
      case topLevelTypes.topInput:                                                                                     // 17661
      case topLevelTypes.topLoad:                                                                                      // 17662
      case topLevelTypes.topError:                                                                                     // 17663
      case topLevelTypes.topReset:                                                                                     // 17664
      case topLevelTypes.topSubmit:                                                                                    // 17665
        // HTML Events                                                                                                 // 17666
        // @see http://www.w3.org/TR/html5/index.html#events-0                                                         // 17667
        EventConstructor = SyntheticEvent;                                                                             // 17668
        break;                                                                                                         // 17669
      case topLevelTypes.topKeyPress:                                                                                  // 17670
        // FireFox creates a keypress event for function keys too. This removes                                        // 17671
        // the unwanted keypress events. Enter is however both printable and                                           // 17672
        // non-printable. One would expect Tab to be as well (but it isn't).                                           // 17673
        if (getEventCharCode(nativeEvent) === 0) {                                                                     // 17674
          return null;                                                                                                 // 17675
        }                                                                                                              // 17676
        /* falls through */                                                                                            // 17677
      case topLevelTypes.topKeyDown:                                                                                   // 17678
      case topLevelTypes.topKeyUp:                                                                                     // 17679
        EventConstructor = SyntheticKeyboardEvent;                                                                     // 17680
        break;                                                                                                         // 17681
      case topLevelTypes.topBlur:                                                                                      // 17682
      case topLevelTypes.topFocus:                                                                                     // 17683
        EventConstructor = SyntheticFocusEvent;                                                                        // 17684
        break;                                                                                                         // 17685
      case topLevelTypes.topClick:                                                                                     // 17686
        // Firefox creates a click event on right mouse clicks. This removes the                                       // 17687
        // unwanted click events.                                                                                      // 17688
        if (nativeEvent.button === 2) {                                                                                // 17689
          return null;                                                                                                 // 17690
        }                                                                                                              // 17691
        /* falls through */                                                                                            // 17692
      case topLevelTypes.topContextMenu:                                                                               // 17693
      case topLevelTypes.topDoubleClick:                                                                               // 17694
      case topLevelTypes.topMouseDown:                                                                                 // 17695
      case topLevelTypes.topMouseMove:                                                                                 // 17696
      case topLevelTypes.topMouseOut:                                                                                  // 17697
      case topLevelTypes.topMouseOver:                                                                                 // 17698
      case topLevelTypes.topMouseUp:                                                                                   // 17699
        EventConstructor = SyntheticMouseEvent;                                                                        // 17700
        break;                                                                                                         // 17701
      case topLevelTypes.topDrag:                                                                                      // 17702
      case topLevelTypes.topDragEnd:                                                                                   // 17703
      case topLevelTypes.topDragEnter:                                                                                 // 17704
      case topLevelTypes.topDragExit:                                                                                  // 17705
      case topLevelTypes.topDragLeave:                                                                                 // 17706
      case topLevelTypes.topDragOver:                                                                                  // 17707
      case topLevelTypes.topDragStart:                                                                                 // 17708
      case topLevelTypes.topDrop:                                                                                      // 17709
        EventConstructor = SyntheticDragEvent;                                                                         // 17710
        break;                                                                                                         // 17711
      case topLevelTypes.topTouchCancel:                                                                               // 17712
      case topLevelTypes.topTouchEnd:                                                                                  // 17713
      case topLevelTypes.topTouchMove:                                                                                 // 17714
      case topLevelTypes.topTouchStart:                                                                                // 17715
        EventConstructor = SyntheticTouchEvent;                                                                        // 17716
        break;                                                                                                         // 17717
      case topLevelTypes.topScroll:                                                                                    // 17718
        EventConstructor = SyntheticUIEvent;                                                                           // 17719
        break;                                                                                                         // 17720
      case topLevelTypes.topWheel:                                                                                     // 17721
        EventConstructor = SyntheticWheelEvent;                                                                        // 17722
        break;                                                                                                         // 17723
      case topLevelTypes.topCopy:                                                                                      // 17724
      case topLevelTypes.topCut:                                                                                       // 17725
      case topLevelTypes.topPaste:                                                                                     // 17726
        EventConstructor = SyntheticClipboardEvent;                                                                    // 17727
        break;                                                                                                         // 17728
    }                                                                                                                  // 17729
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 17730
      EventConstructor,                                                                                                // 17731
      'SimpleEventPlugin: Unhandled event type, `%s`.',                                                                // 17732
      topLevelType                                                                                                     // 17733
    ) : invariant(EventConstructor));                                                                                  // 17734
    var event = EventConstructor.getPooled(                                                                            // 17735
      dispatchConfig,                                                                                                  // 17736
      topLevelTargetID,                                                                                                // 17737
      nativeEvent                                                                                                      // 17738
    );                                                                                                                 // 17739
    EventPropagators.accumulateTwoPhaseDispatches(event);                                                              // 17740
    return event;                                                                                                      // 17741
  }                                                                                                                    // 17742
                                                                                                                       // 17743
};                                                                                                                     // 17744
                                                                                                                       // 17745
module.exports = SimpleEventPlugin;                                                                                    // 17746
                                                                                                                       // 17747
}).call(this,require('_process'))                                                                                      // 17748
                                                                                                                       // 17749
},{"./EventConstants":"react/lib/EventConstants","./EventPluginUtils":"react/lib/EventPluginUtils","./EventPropagators":"react/lib/EventPropagators","./SyntheticClipboardEvent":"react/lib/SyntheticClipboardEvent","./SyntheticDragEvent":"react/lib/SyntheticDragEvent","./SyntheticEvent":"react/lib/SyntheticEvent","./SyntheticFocusEvent":"react/lib/SyntheticFocusEvent","./SyntheticKeyboardEvent":"react/lib/SyntheticKeyboardEvent","./SyntheticMouseEvent":"react/lib/SyntheticMouseEvent","./SyntheticTouchEvent":"react/lib/SyntheticTouchEvent","./SyntheticUIEvent":"react/lib/SyntheticUIEvent","./SyntheticWheelEvent":"react/lib/SyntheticWheelEvent","./getEventCharCode":"react/lib/getEventCharCode","./invariant":"react/lib/invariant","./keyOf":"react/lib/keyOf","./warning":"react/lib/warning","_process":1}],"react/lib/SyntheticClipboardEvent":[function(require,module,exports){
/**                                                                                                                    // 17751
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17752
 * All rights reserved.                                                                                                // 17753
 *                                                                                                                     // 17754
 * This source code is licensed under the BSD-style license found in the                                               // 17755
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 17756
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 17757
 *                                                                                                                     // 17758
 * @providesModule SyntheticClipboardEvent                                                                             // 17759
 * @typechecks static-only                                                                                             // 17760
 */                                                                                                                    // 17761
                                                                                                                       // 17762
'use strict';                                                                                                          // 17763
                                                                                                                       // 17764
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 17765
                                                                                                                       // 17766
/**                                                                                                                    // 17767
 * @interface Event                                                                                                    // 17768
 * @see http://www.w3.org/TR/clipboard-apis/                                                                           // 17769
 */                                                                                                                    // 17770
var ClipboardEventInterface = {                                                                                        // 17771
  clipboardData: function(event) {                                                                                     // 17772
    return (                                                                                                           // 17773
      'clipboardData' in event ?                                                                                       // 17774
        event.clipboardData :                                                                                          // 17775
        window.clipboardData                                                                                           // 17776
    );                                                                                                                 // 17777
  }                                                                                                                    // 17778
};                                                                                                                     // 17779
                                                                                                                       // 17780
/**                                                                                                                    // 17781
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 17782
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 17783
 * @param {object} nativeEvent Native browser event.                                                                   // 17784
 * @extends {SyntheticUIEvent}                                                                                         // 17785
 */                                                                                                                    // 17786
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                        // 17787
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 17788
}                                                                                                                      // 17789
                                                                                                                       // 17790
SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);                                         // 17791
                                                                                                                       // 17792
module.exports = SyntheticClipboardEvent;                                                                              // 17793
                                                                                                                       // 17794
},{"./SyntheticEvent":"react/lib/SyntheticEvent"}],"react/lib/SyntheticCompositionEvent":[function(require,module,exports){
/**                                                                                                                    // 17796
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17797
 * All rights reserved.                                                                                                // 17798
 *                                                                                                                     // 17799
 * This source code is licensed under the BSD-style license found in the                                               // 17800
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 17801
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 17802
 *                                                                                                                     // 17803
 * @providesModule SyntheticCompositionEvent                                                                           // 17804
 * @typechecks static-only                                                                                             // 17805
 */                                                                                                                    // 17806
                                                                                                                       // 17807
'use strict';                                                                                                          // 17808
                                                                                                                       // 17809
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 17810
                                                                                                                       // 17811
/**                                                                                                                    // 17812
 * @interface Event                                                                                                    // 17813
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents                                              // 17814
 */                                                                                                                    // 17815
var CompositionEventInterface = {                                                                                      // 17816
  data: null                                                                                                           // 17817
};                                                                                                                     // 17818
                                                                                                                       // 17819
/**                                                                                                                    // 17820
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 17821
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 17822
 * @param {object} nativeEvent Native browser event.                                                                   // 17823
 * @extends {SyntheticUIEvent}                                                                                         // 17824
 */                                                                                                                    // 17825
function SyntheticCompositionEvent(                                                                                    // 17826
  dispatchConfig,                                                                                                      // 17827
  dispatchMarker,                                                                                                      // 17828
  nativeEvent) {                                                                                                       // 17829
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 17830
}                                                                                                                      // 17831
                                                                                                                       // 17832
SyntheticEvent.augmentClass(                                                                                           // 17833
  SyntheticCompositionEvent,                                                                                           // 17834
  CompositionEventInterface                                                                                            // 17835
);                                                                                                                     // 17836
                                                                                                                       // 17837
module.exports = SyntheticCompositionEvent;                                                                            // 17838
                                                                                                                       // 17839
},{"./SyntheticEvent":"react/lib/SyntheticEvent"}],"react/lib/SyntheticDragEvent":[function(require,module,exports){   // 17840
/**                                                                                                                    // 17841
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17842
 * All rights reserved.                                                                                                // 17843
 *                                                                                                                     // 17844
 * This source code is licensed under the BSD-style license found in the                                               // 17845
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 17846
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 17847
 *                                                                                                                     // 17848
 * @providesModule SyntheticDragEvent                                                                                  // 17849
 * @typechecks static-only                                                                                             // 17850
 */                                                                                                                    // 17851
                                                                                                                       // 17852
'use strict';                                                                                                          // 17853
                                                                                                                       // 17854
var SyntheticMouseEvent = require("./SyntheticMouseEvent");                                                            // 17855
                                                                                                                       // 17856
/**                                                                                                                    // 17857
 * @interface DragEvent                                                                                                // 17858
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 17859
 */                                                                                                                    // 17860
var DragEventInterface = {                                                                                             // 17861
  dataTransfer: null                                                                                                   // 17862
};                                                                                                                     // 17863
                                                                                                                       // 17864
/**                                                                                                                    // 17865
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 17866
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 17867
 * @param {object} nativeEvent Native browser event.                                                                   // 17868
 * @extends {SyntheticUIEvent}                                                                                         // 17869
 */                                                                                                                    // 17870
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                             // 17871
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                         // 17872
}                                                                                                                      // 17873
                                                                                                                       // 17874
SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);                                              // 17875
                                                                                                                       // 17876
module.exports = SyntheticDragEvent;                                                                                   // 17877
                                                                                                                       // 17878
},{"./SyntheticMouseEvent":"react/lib/SyntheticMouseEvent"}],"react/lib/SyntheticEvent":[function(require,module,exports){
/**                                                                                                                    // 17880
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17881
 * All rights reserved.                                                                                                // 17882
 *                                                                                                                     // 17883
 * This source code is licensed under the BSD-style license found in the                                               // 17884
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 17885
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 17886
 *                                                                                                                     // 17887
 * @providesModule SyntheticEvent                                                                                      // 17888
 * @typechecks static-only                                                                                             // 17889
 */                                                                                                                    // 17890
                                                                                                                       // 17891
'use strict';                                                                                                          // 17892
                                                                                                                       // 17893
var PooledClass = require("./PooledClass");                                                                            // 17894
                                                                                                                       // 17895
var assign = require("./Object.assign");                                                                               // 17896
var emptyFunction = require("./emptyFunction");                                                                        // 17897
var getEventTarget = require("./getEventTarget");                                                                      // 17898
                                                                                                                       // 17899
/**                                                                                                                    // 17900
 * @interface Event                                                                                                    // 17901
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 17902
 */                                                                                                                    // 17903
var EventInterface = {                                                                                                 // 17904
  type: null,                                                                                                          // 17905
  target: getEventTarget,                                                                                              // 17906
  // currentTarget is set when dispatching; no use in copying it here                                                  // 17907
  currentTarget: emptyFunction.thatReturnsNull,                                                                        // 17908
  eventPhase: null,                                                                                                    // 17909
  bubbles: null,                                                                                                       // 17910
  cancelable: null,                                                                                                    // 17911
  timeStamp: function(event) {                                                                                         // 17912
    return event.timeStamp || Date.now();                                                                              // 17913
  },                                                                                                                   // 17914
  defaultPrevented: null,                                                                                              // 17915
  isTrusted: null                                                                                                      // 17916
};                                                                                                                     // 17917
                                                                                                                       // 17918
/**                                                                                                                    // 17919
 * Synthetic events are dispatched by event plugins, typically in response to a                                        // 17920
 * top-level event delegation handler.                                                                                 // 17921
 *                                                                                                                     // 17922
 * These systems should generally use pooling to reduce the frequency of garbage                                       // 17923
 * collection. The system should check `isPersistent` to determine whether the                                         // 17924
 * event should be released into the pool after being dispatched. Users that                                           // 17925
 * need a persisted event should invoke `persist`.                                                                     // 17926
 *                                                                                                                     // 17927
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by                                           // 17928
 * normalizing browser quirks. Subclasses do not necessarily have to implement a                                       // 17929
 * DOM interface; custom application-specific events can also subclass this.                                           // 17930
 *                                                                                                                     // 17931
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 17932
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 17933
 * @param {object} nativeEvent Native browser event.                                                                   // 17934
 */                                                                                                                    // 17935
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                                 // 17936
  this.dispatchConfig = dispatchConfig;                                                                                // 17937
  this.dispatchMarker = dispatchMarker;                                                                                // 17938
  this.nativeEvent = nativeEvent;                                                                                      // 17939
                                                                                                                       // 17940
  var Interface = this.constructor.Interface;                                                                          // 17941
  for (var propName in Interface) {                                                                                    // 17942
    if (!Interface.hasOwnProperty(propName)) {                                                                         // 17943
      continue;                                                                                                        // 17944
    }                                                                                                                  // 17945
    var normalize = Interface[propName];                                                                               // 17946
    if (normalize) {                                                                                                   // 17947
      this[propName] = normalize(nativeEvent);                                                                         // 17948
    } else {                                                                                                           // 17949
      this[propName] = nativeEvent[propName];                                                                          // 17950
    }                                                                                                                  // 17951
  }                                                                                                                    // 17952
                                                                                                                       // 17953
  var defaultPrevented = nativeEvent.defaultPrevented != null ?                                                        // 17954
    nativeEvent.defaultPrevented :                                                                                     // 17955
    nativeEvent.returnValue === false;                                                                                 // 17956
  if (defaultPrevented) {                                                                                              // 17957
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 17958
  } else {                                                                                                             // 17959
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;                                                          // 17960
  }                                                                                                                    // 17961
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;                                                          // 17962
}                                                                                                                      // 17963
                                                                                                                       // 17964
assign(SyntheticEvent.prototype, {                                                                                     // 17965
                                                                                                                       // 17966
  preventDefault: function() {                                                                                         // 17967
    this.defaultPrevented = true;                                                                                      // 17968
    var event = this.nativeEvent;                                                                                      // 17969
    if (event.preventDefault) {                                                                                        // 17970
      event.preventDefault();                                                                                          // 17971
    } else {                                                                                                           // 17972
      event.returnValue = false;                                                                                       // 17973
    }                                                                                                                  // 17974
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 17975
  },                                                                                                                   // 17976
                                                                                                                       // 17977
  stopPropagation: function() {                                                                                        // 17978
    var event = this.nativeEvent;                                                                                      // 17979
    if (event.stopPropagation) {                                                                                       // 17980
      event.stopPropagation();                                                                                         // 17981
    } else {                                                                                                           // 17982
      event.cancelBubble = true;                                                                                       // 17983
    }                                                                                                                  // 17984
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;                                                         // 17985
  },                                                                                                                   // 17986
                                                                                                                       // 17987
  /**                                                                                                                  // 17988
   * We release all dispatched `SyntheticEvent`s after each event loop, adding                                         // 17989
   * them back into the pool. This allows a way to hold onto a reference that                                          // 17990
   * won't be added back into the pool.                                                                                // 17991
   */                                                                                                                  // 17992
  persist: function() {                                                                                                // 17993
    this.isPersistent = emptyFunction.thatReturnsTrue;                                                                 // 17994
  },                                                                                                                   // 17995
                                                                                                                       // 17996
  /**                                                                                                                  // 17997
   * Checks if this event should be released back into the pool.                                                       // 17998
   *                                                                                                                   // 17999
   * @return {boolean} True if this should not be released, false otherwise.                                           // 18000
   */                                                                                                                  // 18001
  isPersistent: emptyFunction.thatReturnsFalse,                                                                        // 18002
                                                                                                                       // 18003
  /**                                                                                                                  // 18004
   * `PooledClass` looks for `destructor` on each instance it releases.                                                // 18005
   */                                                                                                                  // 18006
  destructor: function() {                                                                                             // 18007
    var Interface = this.constructor.Interface;                                                                        // 18008
    for (var propName in Interface) {                                                                                  // 18009
      this[propName] = null;                                                                                           // 18010
    }                                                                                                                  // 18011
    this.dispatchConfig = null;                                                                                        // 18012
    this.dispatchMarker = null;                                                                                        // 18013
    this.nativeEvent = null;                                                                                           // 18014
  }                                                                                                                    // 18015
                                                                                                                       // 18016
});                                                                                                                    // 18017
                                                                                                                       // 18018
SyntheticEvent.Interface = EventInterface;                                                                             // 18019
                                                                                                                       // 18020
/**                                                                                                                    // 18021
 * Helper to reduce boilerplate when creating subclasses.                                                              // 18022
 *                                                                                                                     // 18023
 * @param {function} Class                                                                                             // 18024
 * @param {?object} Interface                                                                                          // 18025
 */                                                                                                                    // 18026
SyntheticEvent.augmentClass = function(Class, Interface) {                                                             // 18027
  var Super = this;                                                                                                    // 18028
                                                                                                                       // 18029
  var prototype = Object_create(Super.prototype);                                                                      // 18030
  assign(prototype, Class.prototype);                                                                                  // 18031
  Class.prototype = prototype;                                                                                         // 18032
  Class.prototype.constructor = Class;                                                                                 // 18033
                                                                                                                       // 18034
  Class.Interface = assign({}, Super.Interface, Interface);                                                            // 18035
  Class.augmentClass = Super.augmentClass;                                                                             // 18036
                                                                                                                       // 18037
  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);                                                    // 18038
};                                                                                                                     // 18039
                                                                                                                       // 18040
PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);                                             // 18041
                                                                                                                       // 18042
module.exports = SyntheticEvent;                                                                                       // 18043
                                                                                                                       // 18044
},{"./Object.assign":"react/lib/Object.assign","./PooledClass":"react/lib/PooledClass","./emptyFunction":"react/lib/emptyFunction","./getEventTarget":"react/lib/getEventTarget"}],"react/lib/SyntheticFocusEvent":[function(require,module,exports){
/**                                                                                                                    // 18046
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18047
 * All rights reserved.                                                                                                // 18048
 *                                                                                                                     // 18049
 * This source code is licensed under the BSD-style license found in the                                               // 18050
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18051
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18052
 *                                                                                                                     // 18053
 * @providesModule SyntheticFocusEvent                                                                                 // 18054
 * @typechecks static-only                                                                                             // 18055
 */                                                                                                                    // 18056
                                                                                                                       // 18057
'use strict';                                                                                                          // 18058
                                                                                                                       // 18059
var SyntheticUIEvent = require("./SyntheticUIEvent");                                                                  // 18060
                                                                                                                       // 18061
/**                                                                                                                    // 18062
 * @interface FocusEvent                                                                                               // 18063
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 18064
 */                                                                                                                    // 18065
var FocusEventInterface = {                                                                                            // 18066
  relatedTarget: null                                                                                                  // 18067
};                                                                                                                     // 18068
                                                                                                                       // 18069
/**                                                                                                                    // 18070
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18071
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18072
 * @param {object} nativeEvent Native browser event.                                                                   // 18073
 * @extends {SyntheticUIEvent}                                                                                         // 18074
 */                                                                                                                    // 18075
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 18076
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 18077
}                                                                                                                      // 18078
                                                                                                                       // 18079
SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);                                               // 18080
                                                                                                                       // 18081
module.exports = SyntheticFocusEvent;                                                                                  // 18082
                                                                                                                       // 18083
},{"./SyntheticUIEvent":"react/lib/SyntheticUIEvent"}],"react/lib/SyntheticInputEvent":[function(require,module,exports){
/**                                                                                                                    // 18085
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18086
 * All rights reserved.                                                                                                // 18087
 *                                                                                                                     // 18088
 * This source code is licensed under the BSD-style license found in the                                               // 18089
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18090
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18091
 *                                                                                                                     // 18092
 * @providesModule SyntheticInputEvent                                                                                 // 18093
 * @typechecks static-only                                                                                             // 18094
 */                                                                                                                    // 18095
                                                                                                                       // 18096
'use strict';                                                                                                          // 18097
                                                                                                                       // 18098
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 18099
                                                                                                                       // 18100
/**                                                                                                                    // 18101
 * @interface Event                                                                                                    // 18102
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105                                                       // 18103
 *      /#events-inputevents                                                                                           // 18104
 */                                                                                                                    // 18105
var InputEventInterface = {                                                                                            // 18106
  data: null                                                                                                           // 18107
};                                                                                                                     // 18108
                                                                                                                       // 18109
/**                                                                                                                    // 18110
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18111
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18112
 * @param {object} nativeEvent Native browser event.                                                                   // 18113
 * @extends {SyntheticUIEvent}                                                                                         // 18114
 */                                                                                                                    // 18115
function SyntheticInputEvent(                                                                                          // 18116
  dispatchConfig,                                                                                                      // 18117
  dispatchMarker,                                                                                                      // 18118
  nativeEvent) {                                                                                                       // 18119
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 18120
}                                                                                                                      // 18121
                                                                                                                       // 18122
SyntheticEvent.augmentClass(                                                                                           // 18123
  SyntheticInputEvent,                                                                                                 // 18124
  InputEventInterface                                                                                                  // 18125
);                                                                                                                     // 18126
                                                                                                                       // 18127
module.exports = SyntheticInputEvent;                                                                                  // 18128
                                                                                                                       // 18129
},{"./SyntheticEvent":"react/lib/SyntheticEvent"}],"react/lib/SyntheticKeyboardEvent":[function(require,module,exports){
/**                                                                                                                    // 18131
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18132
 * All rights reserved.                                                                                                // 18133
 *                                                                                                                     // 18134
 * This source code is licensed under the BSD-style license found in the                                               // 18135
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18136
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18137
 *                                                                                                                     // 18138
 * @providesModule SyntheticKeyboardEvent                                                                              // 18139
 * @typechecks static-only                                                                                             // 18140
 */                                                                                                                    // 18141
                                                                                                                       // 18142
'use strict';                                                                                                          // 18143
                                                                                                                       // 18144
var SyntheticUIEvent = require("./SyntheticUIEvent");                                                                  // 18145
                                                                                                                       // 18146
var getEventCharCode = require("./getEventCharCode");                                                                  // 18147
var getEventKey = require("./getEventKey");                                                                            // 18148
var getEventModifierState = require("./getEventModifierState");                                                        // 18149
                                                                                                                       // 18150
/**                                                                                                                    // 18151
 * @interface KeyboardEvent                                                                                            // 18152
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 18153
 */                                                                                                                    // 18154
var KeyboardEventInterface = {                                                                                         // 18155
  key: getEventKey,                                                                                                    // 18156
  location: null,                                                                                                      // 18157
  ctrlKey: null,                                                                                                       // 18158
  shiftKey: null,                                                                                                      // 18159
  altKey: null,                                                                                                        // 18160
  metaKey: null,                                                                                                       // 18161
  repeat: null,                                                                                                        // 18162
  locale: null,                                                                                                        // 18163
  getModifierState: getEventModifierState,                                                                             // 18164
  // Legacy Interface                                                                                                  // 18165
  charCode: function(event) {                                                                                          // 18166
    // `charCode` is the result of a KeyPress event and represents the value of                                        // 18167
    // the actual printable character.                                                                                 // 18168
                                                                                                                       // 18169
    // KeyPress is deprecated, but its replacement is not yet final and not                                            // 18170
    // implemented in any major browser. Only KeyPress has charCode.                                                   // 18171
    if (event.type === 'keypress') {                                                                                   // 18172
      return getEventCharCode(event);                                                                                  // 18173
    }                                                                                                                  // 18174
    return 0;                                                                                                          // 18175
  },                                                                                                                   // 18176
  keyCode: function(event) {                                                                                           // 18177
    // `keyCode` is the result of a KeyDown/Up event and represents the value of                                       // 18178
    // physical keyboard key.                                                                                          // 18179
                                                                                                                       // 18180
    // The actual meaning of the value depends on the users' keyboard layout                                           // 18181
    // which cannot be detected. Assuming that it is a US keyboard layout                                              // 18182
    // provides a surprisingly accurate mapping for US and European users.                                             // 18183
    // Due to this, it is left to the user to implement at this time.                                                  // 18184
    if (event.type === 'keydown' || event.type === 'keyup') {                                                          // 18185
      return event.keyCode;                                                                                            // 18186
    }                                                                                                                  // 18187
    return 0;                                                                                                          // 18188
  },                                                                                                                   // 18189
  which: function(event) {                                                                                             // 18190
    // `which` is an alias for either `keyCode` or `charCode` depending on the                                         // 18191
    // type of the event.                                                                                              // 18192
    if (event.type === 'keypress') {                                                                                   // 18193
      return getEventCharCode(event);                                                                                  // 18194
    }                                                                                                                  // 18195
    if (event.type === 'keydown' || event.type === 'keyup') {                                                          // 18196
      return event.keyCode;                                                                                            // 18197
    }                                                                                                                  // 18198
    return 0;                                                                                                          // 18199
  }                                                                                                                    // 18200
};                                                                                                                     // 18201
                                                                                                                       // 18202
/**                                                                                                                    // 18203
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18204
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18205
 * @param {object} nativeEvent Native browser event.                                                                   // 18206
 * @extends {SyntheticUIEvent}                                                                                         // 18207
 */                                                                                                                    // 18208
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                         // 18209
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 18210
}                                                                                                                      // 18211
                                                                                                                       // 18212
SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);                                         // 18213
                                                                                                                       // 18214
module.exports = SyntheticKeyboardEvent;                                                                               // 18215
                                                                                                                       // 18216
},{"./SyntheticUIEvent":"react/lib/SyntheticUIEvent","./getEventCharCode":"react/lib/getEventCharCode","./getEventKey":"react/lib/getEventKey","./getEventModifierState":"react/lib/getEventModifierState"}],"react/lib/SyntheticMouseEvent":[function(require,module,exports){
/**                                                                                                                    // 18218
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18219
 * All rights reserved.                                                                                                // 18220
 *                                                                                                                     // 18221
 * This source code is licensed under the BSD-style license found in the                                               // 18222
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18223
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18224
 *                                                                                                                     // 18225
 * @providesModule SyntheticMouseEvent                                                                                 // 18226
 * @typechecks static-only                                                                                             // 18227
 */                                                                                                                    // 18228
                                                                                                                       // 18229
'use strict';                                                                                                          // 18230
                                                                                                                       // 18231
var SyntheticUIEvent = require("./SyntheticUIEvent");                                                                  // 18232
var ViewportMetrics = require("./ViewportMetrics");                                                                    // 18233
                                                                                                                       // 18234
var getEventModifierState = require("./getEventModifierState");                                                        // 18235
                                                                                                                       // 18236
/**                                                                                                                    // 18237
 * @interface MouseEvent                                                                                               // 18238
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 18239
 */                                                                                                                    // 18240
var MouseEventInterface = {                                                                                            // 18241
  screenX: null,                                                                                                       // 18242
  screenY: null,                                                                                                       // 18243
  clientX: null,                                                                                                       // 18244
  clientY: null,                                                                                                       // 18245
  ctrlKey: null,                                                                                                       // 18246
  shiftKey: null,                                                                                                      // 18247
  altKey: null,                                                                                                        // 18248
  metaKey: null,                                                                                                       // 18249
  getModifierState: getEventModifierState,                                                                             // 18250
  button: function(event) {                                                                                            // 18251
    // Webkit, Firefox, IE9+                                                                                           // 18252
    // which:  1 2 3                                                                                                   // 18253
    // button: 0 1 2 (standard)                                                                                        // 18254
    var button = event.button;                                                                                         // 18255
    if ('which' in event) {                                                                                            // 18256
      return button;                                                                                                   // 18257
    }                                                                                                                  // 18258
    // IE<9                                                                                                            // 18259
    // which:  undefined                                                                                               // 18260
    // button: 0 0 0                                                                                                   // 18261
    // button: 1 4 2 (onmouseup)                                                                                       // 18262
    return button === 2 ? 2 : button === 4 ? 1 : 0;                                                                    // 18263
  },                                                                                                                   // 18264
  buttons: null,                                                                                                       // 18265
  relatedTarget: function(event) {                                                                                     // 18266
    return event.relatedTarget || (                                                                                    // 18267
      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))                                 // 18268
    );                                                                                                                 // 18269
  },                                                                                                                   // 18270
  // "Proprietary" Interface.                                                                                          // 18271
  pageX: function(event) {                                                                                             // 18272
    return 'pageX' in event ?                                                                                          // 18273
      event.pageX :                                                                                                    // 18274
      event.clientX + ViewportMetrics.currentScrollLeft;                                                               // 18275
  },                                                                                                                   // 18276
  pageY: function(event) {                                                                                             // 18277
    return 'pageY' in event ?                                                                                          // 18278
      event.pageY :                                                                                                    // 18279
      event.clientY + ViewportMetrics.currentScrollTop;                                                                // 18280
  }                                                                                                                    // 18281
};                                                                                                                     // 18282
                                                                                                                       // 18283
/**                                                                                                                    // 18284
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18285
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18286
 * @param {object} nativeEvent Native browser event.                                                                   // 18287
 * @extends {SyntheticUIEvent}                                                                                         // 18288
 */                                                                                                                    // 18289
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 18290
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 18291
}                                                                                                                      // 18292
                                                                                                                       // 18293
SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);                                               // 18294
                                                                                                                       // 18295
module.exports = SyntheticMouseEvent;                                                                                  // 18296
                                                                                                                       // 18297
},{"./SyntheticUIEvent":"react/lib/SyntheticUIEvent","./ViewportMetrics":"react/lib/ViewportMetrics","./getEventModifierState":"react/lib/getEventModifierState"}],"react/lib/SyntheticTouchEvent":[function(require,module,exports){
/**                                                                                                                    // 18299
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18300
 * All rights reserved.                                                                                                // 18301
 *                                                                                                                     // 18302
 * This source code is licensed under the BSD-style license found in the                                               // 18303
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18304
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18305
 *                                                                                                                     // 18306
 * @providesModule SyntheticTouchEvent                                                                                 // 18307
 * @typechecks static-only                                                                                             // 18308
 */                                                                                                                    // 18309
                                                                                                                       // 18310
'use strict';                                                                                                          // 18311
                                                                                                                       // 18312
var SyntheticUIEvent = require("./SyntheticUIEvent");                                                                  // 18313
                                                                                                                       // 18314
var getEventModifierState = require("./getEventModifierState");                                                        // 18315
                                                                                                                       // 18316
/**                                                                                                                    // 18317
 * @interface TouchEvent                                                                                               // 18318
 * @see http://www.w3.org/TR/touch-events/                                                                             // 18319
 */                                                                                                                    // 18320
var TouchEventInterface = {                                                                                            // 18321
  touches: null,                                                                                                       // 18322
  targetTouches: null,                                                                                                 // 18323
  changedTouches: null,                                                                                                // 18324
  altKey: null,                                                                                                        // 18325
  metaKey: null,                                                                                                       // 18326
  ctrlKey: null,                                                                                                       // 18327
  shiftKey: null,                                                                                                      // 18328
  getModifierState: getEventModifierState                                                                              // 18329
};                                                                                                                     // 18330
                                                                                                                       // 18331
/**                                                                                                                    // 18332
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18333
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18334
 * @param {object} nativeEvent Native browser event.                                                                   // 18335
 * @extends {SyntheticUIEvent}                                                                                         // 18336
 */                                                                                                                    // 18337
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 18338
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 18339
}                                                                                                                      // 18340
                                                                                                                       // 18341
SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);                                               // 18342
                                                                                                                       // 18343
module.exports = SyntheticTouchEvent;                                                                                  // 18344
                                                                                                                       // 18345
},{"./SyntheticUIEvent":"react/lib/SyntheticUIEvent","./getEventModifierState":"react/lib/getEventModifierState"}],"react/lib/SyntheticUIEvent":[function(require,module,exports){
/**                                                                                                                    // 18347
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18348
 * All rights reserved.                                                                                                // 18349
 *                                                                                                                     // 18350
 * This source code is licensed under the BSD-style license found in the                                               // 18351
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18352
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18353
 *                                                                                                                     // 18354
 * @providesModule SyntheticUIEvent                                                                                    // 18355
 * @typechecks static-only                                                                                             // 18356
 */                                                                                                                    // 18357
                                                                                                                       // 18358
'use strict';                                                                                                          // 18359
                                                                                                                       // 18360
var SyntheticEvent = require("./SyntheticEvent");                                                                      // 18361
                                                                                                                       // 18362
var getEventTarget = require("./getEventTarget");                                                                      // 18363
                                                                                                                       // 18364
/**                                                                                                                    // 18365
 * @interface UIEvent                                                                                                  // 18366
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 18367
 */                                                                                                                    // 18368
var UIEventInterface = {                                                                                               // 18369
  view: function(event) {                                                                                              // 18370
    if (event.view) {                                                                                                  // 18371
      return event.view;                                                                                               // 18372
    }                                                                                                                  // 18373
                                                                                                                       // 18374
    var target = getEventTarget(event);                                                                                // 18375
    if (target != null && target.window === target) {                                                                  // 18376
      // target is a window object                                                                                     // 18377
      return target;                                                                                                   // 18378
    }                                                                                                                  // 18379
                                                                                                                       // 18380
    var doc = target.ownerDocument;                                                                                    // 18381
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                             // 18382
    if (doc) {                                                                                                         // 18383
      return doc.defaultView || doc.parentWindow;                                                                      // 18384
    } else {                                                                                                           // 18385
      return window;                                                                                                   // 18386
    }                                                                                                                  // 18387
  },                                                                                                                   // 18388
  detail: function(event) {                                                                                            // 18389
    return event.detail || 0;                                                                                          // 18390
  }                                                                                                                    // 18391
};                                                                                                                     // 18392
                                                                                                                       // 18393
/**                                                                                                                    // 18394
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18395
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18396
 * @param {object} nativeEvent Native browser event.                                                                   // 18397
 * @extends {SyntheticEvent}                                                                                           // 18398
 */                                                                                                                    // 18399
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                               // 18400
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 18401
}                                                                                                                      // 18402
                                                                                                                       // 18403
SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);                                                       // 18404
                                                                                                                       // 18405
module.exports = SyntheticUIEvent;                                                                                     // 18406
                                                                                                                       // 18407
},{"./SyntheticEvent":"react/lib/SyntheticEvent","./getEventTarget":"react/lib/getEventTarget"}],"react/lib/SyntheticWheelEvent":[function(require,module,exports){
/**                                                                                                                    // 18409
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18410
 * All rights reserved.                                                                                                // 18411
 *                                                                                                                     // 18412
 * This source code is licensed under the BSD-style license found in the                                               // 18413
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18414
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18415
 *                                                                                                                     // 18416
 * @providesModule SyntheticWheelEvent                                                                                 // 18417
 * @typechecks static-only                                                                                             // 18418
 */                                                                                                                    // 18419
                                                                                                                       // 18420
'use strict';                                                                                                          // 18421
                                                                                                                       // 18422
var SyntheticMouseEvent = require("./SyntheticMouseEvent");                                                            // 18423
                                                                                                                       // 18424
/**                                                                                                                    // 18425
 * @interface WheelEvent                                                                                               // 18426
 * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 18427
 */                                                                                                                    // 18428
var WheelEventInterface = {                                                                                            // 18429
  deltaX: function(event) {                                                                                            // 18430
    return (                                                                                                           // 18431
      'deltaX' in event ? event.deltaX :                                                                               // 18432
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).                                       // 18433
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0                                                                  // 18434
    );                                                                                                                 // 18435
  },                                                                                                                   // 18436
  deltaY: function(event) {                                                                                            // 18437
    return (                                                                                                           // 18438
      'deltaY' in event ? event.deltaY :                                                                               // 18439
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).                                        // 18440
      'wheelDeltaY' in event ? -event.wheelDeltaY :                                                                    // 18441
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).                                           // 18442
      'wheelDelta' in event ? -event.wheelDelta : 0                                                                    // 18443
    );                                                                                                                 // 18444
  },                                                                                                                   // 18445
  deltaZ: null,                                                                                                        // 18446
                                                                                                                       // 18447
  // Browsers without "deltaMode" is reporting in raw wheel delta where one                                            // 18448
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.                                              // 18449
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or                                              // 18450
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.                                                // 18451
  deltaMode: null                                                                                                      // 18452
};                                                                                                                     // 18453
                                                                                                                       // 18454
/**                                                                                                                    // 18455
 * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18456
 * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18457
 * @param {object} nativeEvent Native browser event.                                                                   // 18458
 * @extends {SyntheticMouseEvent}                                                                                      // 18459
 */                                                                                                                    // 18460
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 18461
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                         // 18462
}                                                                                                                      // 18463
                                                                                                                       // 18464
SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);                                            // 18465
                                                                                                                       // 18466
module.exports = SyntheticWheelEvent;                                                                                  // 18467
                                                                                                                       // 18468
},{"./SyntheticMouseEvent":"react/lib/SyntheticMouseEvent"}],"react/lib/Transaction":[function(require,module,exports){
(function (process){                                                                                                   // 18470
/**                                                                                                                    // 18471
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18472
 * All rights reserved.                                                                                                // 18473
 *                                                                                                                     // 18474
 * This source code is licensed under the BSD-style license found in the                                               // 18475
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18476
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18477
 *                                                                                                                     // 18478
 * @providesModule Transaction                                                                                         // 18479
 */                                                                                                                    // 18480
                                                                                                                       // 18481
'use strict';                                                                                                          // 18482
                                                                                                                       // 18483
var invariant = require("./invariant");                                                                                // 18484
                                                                                                                       // 18485
/**                                                                                                                    // 18486
 * `Transaction` creates a black box that is able to wrap any method such that                                         // 18487
 * certain invariants are maintained before and after the method is invoked                                            // 18488
 * (Even if an exception is thrown while invoking the wrapped method). Whoever                                         // 18489
 * instantiates a transaction can provide enforcers of the invariants at                                               // 18490
 * creation time. The `Transaction` class itself will supply one additional                                            // 18491
 * automatic invariant for you - the invariant that any transaction instance                                           // 18492
 * should not be run while it is already being run. You would typically create a                                       // 18493
 * single instance of a `Transaction` for reuse multiple times, that potentially                                       // 18494
 * is used to wrap several different methods. Wrappers are extremely simple -                                          // 18495
 * they only require implementing two methods.                                                                         // 18496
 *                                                                                                                     // 18497
 * <pre>                                                                                                               // 18498
 *                       wrappers (injected at creation time)                                                          // 18499
 *                                      +        +                                                                     // 18500
 *                                      |        |                                                                     // 18501
 *                    +-----------------|--------|--------------+                                                      // 18502
 *                    |                 v        |              |                                                      // 18503
 *                    |      +---------------+   |              |                                                      // 18504
 *                    |   +--|    wrapper1   |---|----+         |                                                      // 18505
 *                    |   |  +---------------+   v    |         |                                                      // 18506
 *                    |   |          +-------------+  |         |                                                      // 18507
 *                    |   |     +----|   wrapper2  |--------+   |                                                      // 18508
 *                    |   |     |    +-------------+  |     |   |                                                      // 18509
 *                    |   |     |                     |     |   |                                                      // 18510
 *                    |   v     v                     v     v   | wrapper                                              // 18511
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants                                           // 18512
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained                                           // 18513
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->                                             // 18514
 *                    | |   | |   |   |         |   |   | |   | |                                                      // 18515
 *                    | |   | |   |   |         |   |   | |   | |                                                      // 18516
 *                    | |   | |   |   |         |   |   | |   | |                                                      // 18517
 *                    | +---+ +---+   +---------+   +---+ +---+ |                                                      // 18518
 *                    |  initialize                    close    |                                                      // 18519
 *                    +-----------------------------------------+                                                      // 18520
 * </pre>                                                                                                              // 18521
 *                                                                                                                     // 18522
 * Use cases:                                                                                                          // 18523
 * - Preserving the input selection ranges before/after reconciliation.                                                // 18524
 *   Restoring selection even in the event of an unexpected error.                                                     // 18525
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,                                          // 18526
 *   while guaranteeing that afterwards, the event system is reactivated.                                              // 18527
 * - Flushing a queue of collected DOM mutations to the main UI thread after a                                         // 18528
 *   reconciliation takes place in a worker thread.                                                                    // 18529
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new                                         // 18530
 *   content.                                                                                                          // 18531
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue                                         // 18532
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).                                                      // 18533
 * - (Future use case): Layout calculations before and after DOM updates.                                              // 18534
 *                                                                                                                     // 18535
 * Transactional plugin API:                                                                                           // 18536
 * - A module that has an `initialize` method that returns any precomputation.                                         // 18537
 * - and a `close` method that accepts the precomputation. `close` is invoked                                          // 18538
 *   when the wrapped process is completed, or has failed.                                                             // 18539
 *                                                                                                                     // 18540
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules                                             // 18541
 * that implement `initialize` and `close`.                                                                            // 18542
 * @return {Transaction} Single transaction for reuse in thread.                                                       // 18543
 *                                                                                                                     // 18544
 * @class Transaction                                                                                                  // 18545
 */                                                                                                                    // 18546
var Mixin = {                                                                                                          // 18547
  /**                                                                                                                  // 18548
   * Sets up this instance so that it is prepared for collecting metrics. Does                                         // 18549
   * so such that this setup method may be used on an instance that is already                                         // 18550
   * initialized, in a way that does not consume additional memory upon reuse.                                         // 18551
   * That can be useful if you decide to make your subclass of this mixin a                                            // 18552
   * "PooledClass".                                                                                                    // 18553
   */                                                                                                                  // 18554
  reinitializeTransaction: function() {                                                                                // 18555
    this.transactionWrappers = this.getTransactionWrappers();                                                          // 18556
    if (!this.wrapperInitData) {                                                                                       // 18557
      this.wrapperInitData = [];                                                                                       // 18558
    } else {                                                                                                           // 18559
      this.wrapperInitData.length = 0;                                                                                 // 18560
    }                                                                                                                  // 18561
    this._isInTransaction = false;                                                                                     // 18562
  },                                                                                                                   // 18563
                                                                                                                       // 18564
  _isInTransaction: false,                                                                                             // 18565
                                                                                                                       // 18566
  /**                                                                                                                  // 18567
   * @abstract                                                                                                         // 18568
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.                                                // 18569
   */                                                                                                                  // 18570
  getTransactionWrappers: null,                                                                                        // 18571
                                                                                                                       // 18572
  isInTransaction: function() {                                                                                        // 18573
    return !!this._isInTransaction;                                                                                    // 18574
  },                                                                                                                   // 18575
                                                                                                                       // 18576
  /**                                                                                                                  // 18577
   * Executes the function within a safety window. Use this for the top level                                          // 18578
   * methods that result in large amounts of computation/mutations that would                                          // 18579
   * need to be safety checked.                                                                                        // 18580
   *                                                                                                                   // 18581
   * @param {function} method Member of scope to call.                                                                 // 18582
   * @param {Object} scope Scope to invoke from.                                                                       // 18583
   * @param {Object?=} args... Arguments to pass to the method (optional).                                             // 18584
   *                           Helps prevent need to bind in many cases.                                               // 18585
   * @return Return value from `method`.                                                                               // 18586
   */                                                                                                                  // 18587
  perform: function(method, scope, a, b, c, d, e, f) {                                                                 // 18588
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 18589
      !this.isInTransaction(),                                                                                         // 18590
      'Transaction.perform(...): Cannot initialize a transaction when there ' +                                        // 18591
      'is already an outstanding transaction.'                                                                         // 18592
    ) : invariant(!this.isInTransaction()));                                                                           // 18593
    var errorThrown;                                                                                                   // 18594
    var ret;                                                                                                           // 18595
    try {                                                                                                              // 18596
      this._isInTransaction = true;                                                                                    // 18597
      // Catching errors makes debugging more difficult, so we start with                                              // 18598
      // errorThrown set to true before setting it to false after calling                                              // 18599
      // close -- if it's still set to true in the finally block, it means                                             // 18600
      // one of these calls threw.                                                                                     // 18601
      errorThrown = true;                                                                                              // 18602
      this.initializeAll(0);                                                                                           // 18603
      ret = method.call(scope, a, b, c, d, e, f);                                                                      // 18604
      errorThrown = false;                                                                                             // 18605
    } finally {                                                                                                        // 18606
      try {                                                                                                            // 18607
        if (errorThrown) {                                                                                             // 18608
          // If `method` throws, prefer to show that stack trace over any thrown                                       // 18609
          // by invoking `closeAll`.                                                                                   // 18610
          try {                                                                                                        // 18611
            this.closeAll(0);                                                                                          // 18612
          } catch (err) {                                                                                              // 18613
          }                                                                                                            // 18614
        } else {                                                                                                       // 18615
          // Since `method` didn't throw, we don't want to silence the exception                                       // 18616
          // here.                                                                                                     // 18617
          this.closeAll(0);                                                                                            // 18618
        }                                                                                                              // 18619
      } finally {                                                                                                      // 18620
        this._isInTransaction = false;                                                                                 // 18621
      }                                                                                                                // 18622
    }                                                                                                                  // 18623
    return ret;                                                                                                        // 18624
  },                                                                                                                   // 18625
                                                                                                                       // 18626
  initializeAll: function(startIndex) {                                                                                // 18627
    var transactionWrappers = this.transactionWrappers;                                                                // 18628
    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 18629
      var wrapper = transactionWrappers[i];                                                                            // 18630
      try {                                                                                                            // 18631
        // Catching errors makes debugging more difficult, so we start with the                                        // 18632
        // OBSERVED_ERROR state before overwriting it with the real return value                                       // 18633
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally                                         // 18634
        // block, it means wrapper.initialize threw.                                                                   // 18635
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;                                                          // 18636
        this.wrapperInitData[i] = wrapper.initialize ?                                                                 // 18637
          wrapper.initialize.call(this) :                                                                              // 18638
          null;                                                                                                        // 18639
      } finally {                                                                                                      // 18640
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {                                                  // 18641
          // The initializer for wrapper i threw an error; initialize the                                              // 18642
          // remaining wrappers but silence any exceptions from them to ensure                                         // 18643
          // that the first error is the one to bubble up.                                                             // 18644
          try {                                                                                                        // 18645
            this.initializeAll(i + 1);                                                                                 // 18646
          } catch (err) {                                                                                              // 18647
          }                                                                                                            // 18648
        }                                                                                                              // 18649
      }                                                                                                                // 18650
    }                                                                                                                  // 18651
  },                                                                                                                   // 18652
                                                                                                                       // 18653
  /**                                                                                                                  // 18654
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into                                       // 18655
   * them the respective return values of `this.transactionWrappers.init[i]`                                           // 18656
   * (`close`rs that correspond to initializers that failed will not be                                                // 18657
   * invoked).                                                                                                         // 18658
   */                                                                                                                  // 18659
  closeAll: function(startIndex) {                                                                                     // 18660
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 18661
      this.isInTransaction(),                                                                                          // 18662
      'Transaction.closeAll(): Cannot close transaction when none are open.'                                           // 18663
    ) : invariant(this.isInTransaction()));                                                                            // 18664
    var transactionWrappers = this.transactionWrappers;                                                                // 18665
    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 18666
      var wrapper = transactionWrappers[i];                                                                            // 18667
      var initData = this.wrapperInitData[i];                                                                          // 18668
      var errorThrown;                                                                                                 // 18669
      try {                                                                                                            // 18670
        // Catching errors makes debugging more difficult, so we start with                                            // 18671
        // errorThrown set to true before setting it to false after calling                                            // 18672
        // close -- if it's still set to true in the finally block, it means                                           // 18673
        // wrapper.close threw.                                                                                        // 18674
        errorThrown = true;                                                                                            // 18675
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {                                                // 18676
          wrapper.close.call(this, initData);                                                                          // 18677
        }                                                                                                              // 18678
        errorThrown = false;                                                                                           // 18679
      } finally {                                                                                                      // 18680
        if (errorThrown) {                                                                                             // 18681
          // The closer for wrapper i threw an error; close the remaining                                              // 18682
          // wrappers but silence any exceptions from them to ensure that the                                          // 18683
          // first error is the one to bubble up.                                                                      // 18684
          try {                                                                                                        // 18685
            this.closeAll(i + 1);                                                                                      // 18686
          } catch (e) {                                                                                                // 18687
          }                                                                                                            // 18688
        }                                                                                                              // 18689
      }                                                                                                                // 18690
    }                                                                                                                  // 18691
    this.wrapperInitData.length = 0;                                                                                   // 18692
  }                                                                                                                    // 18693
};                                                                                                                     // 18694
                                                                                                                       // 18695
var Transaction = {                                                                                                    // 18696
                                                                                                                       // 18697
  Mixin: Mixin,                                                                                                        // 18698
                                                                                                                       // 18699
  /**                                                                                                                  // 18700
   * Token to look for to determine if an error occured.                                                               // 18701
   */                                                                                                                  // 18702
  OBSERVED_ERROR: {}                                                                                                   // 18703
                                                                                                                       // 18704
};                                                                                                                     // 18705
                                                                                                                       // 18706
module.exports = Transaction;                                                                                          // 18707
                                                                                                                       // 18708
}).call(this,require('_process'))                                                                                      // 18709
                                                                                                                       // 18710
},{"./invariant":"react/lib/invariant","_process":1}],"react/lib/ViewportMetrics":[function(require,module,exports){   // 18711
/**                                                                                                                    // 18712
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18713
 * All rights reserved.                                                                                                // 18714
 *                                                                                                                     // 18715
 * This source code is licensed under the BSD-style license found in the                                               // 18716
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18717
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18718
 *                                                                                                                     // 18719
 * @providesModule ViewportMetrics                                                                                     // 18720
 */                                                                                                                    // 18721
                                                                                                                       // 18722
'use strict';                                                                                                          // 18723
                                                                                                                       // 18724
var ViewportMetrics = {                                                                                                // 18725
                                                                                                                       // 18726
  currentScrollLeft: 0,                                                                                                // 18727
                                                                                                                       // 18728
  currentScrollTop: 0,                                                                                                 // 18729
                                                                                                                       // 18730
  refreshScrollValues: function(scrollPosition) {                                                                      // 18731
    ViewportMetrics.currentScrollLeft = scrollPosition.x;                                                              // 18732
    ViewportMetrics.currentScrollTop = scrollPosition.y;                                                               // 18733
  }                                                                                                                    // 18734
                                                                                                                       // 18735
};                                                                                                                     // 18736
                                                                                                                       // 18737
module.exports = ViewportMetrics;                                                                                      // 18738
                                                                                                                       // 18739
},{}],"react/lib/accumulateInto":[function(require,module,exports){                                                    // 18740
(function (process){                                                                                                   // 18741
/**                                                                                                                    // 18742
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 18743
 * All rights reserved.                                                                                                // 18744
 *                                                                                                                     // 18745
 * This source code is licensed under the BSD-style license found in the                                               // 18746
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18747
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18748
 *                                                                                                                     // 18749
 * @providesModule accumulateInto                                                                                      // 18750
 */                                                                                                                    // 18751
                                                                                                                       // 18752
'use strict';                                                                                                          // 18753
                                                                                                                       // 18754
var invariant = require("./invariant");                                                                                // 18755
                                                                                                                       // 18756
/**                                                                                                                    // 18757
 *                                                                                                                     // 18758
 * Accumulates items that must not be null or undefined into the first one. This                                       // 18759
 * is used to conserve memory by avoiding array allocations, and thus sacrifices                                       // 18760
 * API cleanness. Since `current` can be null before being passed in and not                                           // 18761
 * null after this function, make sure to assign it back to `current`:                                                 // 18762
 *                                                                                                                     // 18763
 * `a = accumulateInto(a, b);`                                                                                         // 18764
 *                                                                                                                     // 18765
 * This API should be sparingly used. Try `accumulate` for something cleaner.                                          // 18766
 *                                                                                                                     // 18767
 * @return {*|array<*>} An accumulation of items.                                                                      // 18768
 */                                                                                                                    // 18769
                                                                                                                       // 18770
function accumulateInto(current, next) {                                                                               // 18771
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 18772
    next != null,                                                                                                      // 18773
    'accumulateInto(...): Accumulated items must not be null or undefined.'                                            // 18774
  ) : invariant(next != null));                                                                                        // 18775
  if (current == null) {                                                                                               // 18776
    return next;                                                                                                       // 18777
  }                                                                                                                    // 18778
                                                                                                                       // 18779
  // Both are not empty. Warning: Never call x.concat(y) when you are not                                              // 18780
  // certain that x is an Array (x could be a string with concat method).                                              // 18781
  var currentIsArray = Array.isArray(current);                                                                         // 18782
  var nextIsArray = Array.isArray(next);                                                                               // 18783
                                                                                                                       // 18784
  if (currentIsArray && nextIsArray) {                                                                                 // 18785
    current.push.apply(current, next);                                                                                 // 18786
    return current;                                                                                                    // 18787
  }                                                                                                                    // 18788
                                                                                                                       // 18789
  if (currentIsArray) {                                                                                                // 18790
    current.push(next);                                                                                                // 18791
    return current;                                                                                                    // 18792
  }                                                                                                                    // 18793
                                                                                                                       // 18794
  if (nextIsArray) {                                                                                                   // 18795
    // A bit too dangerous to mutate `next`.                                                                           // 18796
    return [current].concat(next);                                                                                     // 18797
  }                                                                                                                    // 18798
                                                                                                                       // 18799
  return [current, next];                                                                                              // 18800
}                                                                                                                      // 18801
                                                                                                                       // 18802
module.exports = accumulateInto;                                                                                       // 18803
                                                                                                                       // 18804
}).call(this,require('_process'))                                                                                      // 18805
                                                                                                                       // 18806
},{"./invariant":"react/lib/invariant","_process":1}],"react/lib/adler32":[function(require,module,exports){           // 18807
/**                                                                                                                    // 18808
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18809
 * All rights reserved.                                                                                                // 18810
 *                                                                                                                     // 18811
 * This source code is licensed under the BSD-style license found in the                                               // 18812
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18813
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18814
 *                                                                                                                     // 18815
 * @providesModule adler32                                                                                             // 18816
 */                                                                                                                    // 18817
                                                                                                                       // 18818
/* jslint bitwise:true */                                                                                              // 18819
                                                                                                                       // 18820
'use strict';                                                                                                          // 18821
                                                                                                                       // 18822
var MOD = 65521;                                                                                                       // 18823
                                                                                                                       // 18824
// This is a clean-room implementation of adler32 designed for detecting                                               // 18825
// if markup is not what we expect it to be. It does not need to be                                                    // 18826
// cryptographically strong, only reasonably good at detecting if markup                                               // 18827
// generated on the server is different than that on the client.                                                       // 18828
function adler32(data) {                                                                                               // 18829
  var a = 1;                                                                                                           // 18830
  var b = 0;                                                                                                           // 18831
  for (var i = 0; i < data.length; i++) {                                                                              // 18832
    a = (a + data.charCodeAt(i)) % MOD;                                                                                // 18833
    b = (b + a) % MOD;                                                                                                 // 18834
  }                                                                                                                    // 18835
  return a | (b << 16);                                                                                                // 18836
}                                                                                                                      // 18837
                                                                                                                       // 18838
module.exports = adler32;                                                                                              // 18839
                                                                                                                       // 18840
},{}],"react/lib/camelizeStyleName":[function(require,module,exports){                                                 // 18841
/**                                                                                                                    // 18842
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 18843
 * All rights reserved.                                                                                                // 18844
 *                                                                                                                     // 18845
 * This source code is licensed under the BSD-style license found in the                                               // 18846
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18847
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18848
 *                                                                                                                     // 18849
 * @providesModule camelizeStyleName                                                                                   // 18850
 * @typechecks                                                                                                         // 18851
 */                                                                                                                    // 18852
                                                                                                                       // 18853
"use strict";                                                                                                          // 18854
                                                                                                                       // 18855
var camelize = require("./camelize");                                                                                  // 18856
                                                                                                                       // 18857
var msPattern = /^-ms-/;                                                                                               // 18858
                                                                                                                       // 18859
/**                                                                                                                    // 18860
 * Camelcases a hyphenated CSS property name, for example:                                                             // 18861
 *                                                                                                                     // 18862
 *   > camelizeStyleName('background-color')                                                                           // 18863
 *   < "backgroundColor"                                                                                               // 18864
 *   > camelizeStyleName('-moz-transition')                                                                            // 18865
 *   < "MozTransition"                                                                                                 // 18866
 *   > camelizeStyleName('-ms-transition')                                                                             // 18867
 *   < "msTransition"                                                                                                  // 18868
 *                                                                                                                     // 18869
 * As Andi Smith suggests                                                                                              // 18870
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix                                        // 18871
 * is converted to lowercase `ms`.                                                                                     // 18872
 *                                                                                                                     // 18873
 * @param {string} string                                                                                              // 18874
 * @return {string}                                                                                                    // 18875
 */                                                                                                                    // 18876
function camelizeStyleName(string) {                                                                                   // 18877
  return camelize(string.replace(msPattern, 'ms-'));                                                                   // 18878
}                                                                                                                      // 18879
                                                                                                                       // 18880
module.exports = camelizeStyleName;                                                                                    // 18881
                                                                                                                       // 18882
},{"./camelize":"react/lib/camelize"}],"react/lib/camelize":[function(require,module,exports){                         // 18883
/**                                                                                                                    // 18884
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18885
 * All rights reserved.                                                                                                // 18886
 *                                                                                                                     // 18887
 * This source code is licensed under the BSD-style license found in the                                               // 18888
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18889
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18890
 *                                                                                                                     // 18891
 * @providesModule camelize                                                                                            // 18892
 * @typechecks                                                                                                         // 18893
 */                                                                                                                    // 18894
                                                                                                                       // 18895
var _hyphenPattern = /-(.)/g;                                                                                          // 18896
                                                                                                                       // 18897
/**                                                                                                                    // 18898
 * Camelcases a hyphenated string, for example:                                                                        // 18899
 *                                                                                                                     // 18900
 *   > camelize('background-color')                                                                                    // 18901
 *   < "backgroundColor"                                                                                               // 18902
 *                                                                                                                     // 18903
 * @param {string} string                                                                                              // 18904
 * @return {string}                                                                                                    // 18905
 */                                                                                                                    // 18906
function camelize(string) {                                                                                            // 18907
  return string.replace(_hyphenPattern, function(_, character) {                                                       // 18908
    return character.toUpperCase();                                                                                    // 18909
  });                                                                                                                  // 18910
}                                                                                                                      // 18911
                                                                                                                       // 18912
module.exports = camelize;                                                                                             // 18913
                                                                                                                       // 18914
},{}],"react/lib/cloneWithProps":[function(require,module,exports){                                                    // 18915
(function (process){                                                                                                   // 18916
/**                                                                                                                    // 18917
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18918
 * All rights reserved.                                                                                                // 18919
 *                                                                                                                     // 18920
 * This source code is licensed under the BSD-style license found in the                                               // 18921
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18922
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18923
 *                                                                                                                     // 18924
 * @typechecks static-only                                                                                             // 18925
 * @providesModule cloneWithProps                                                                                      // 18926
 */                                                                                                                    // 18927
                                                                                                                       // 18928
'use strict';                                                                                                          // 18929
                                                                                                                       // 18930
var ReactElement = require("./ReactElement");                                                                          // 18931
var ReactPropTransferer = require("./ReactPropTransferer");                                                            // 18932
                                                                                                                       // 18933
var keyOf = require("./keyOf");                                                                                        // 18934
var warning = require("./warning");                                                                                    // 18935
                                                                                                                       // 18936
var CHILDREN_PROP = keyOf({children: null});                                                                           // 18937
                                                                                                                       // 18938
/**                                                                                                                    // 18939
 * Sometimes you want to change the props of a child passed to you. Usually                                            // 18940
 * this is to add a CSS class.                                                                                         // 18941
 *                                                                                                                     // 18942
 * @param {ReactElement} child child element you'd like to clone                                                       // 18943
 * @param {object} props props you'd like to modify. className and style will be                                       // 18944
 * merged automatically.                                                                                               // 18945
 * @return {ReactElement} a clone of child with props merged in.                                                       // 18946
 */                                                                                                                    // 18947
function cloneWithProps(child, props) {                                                                                // 18948
  if ("production" !== process.env.NODE_ENV) {                                                                         // 18949
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 18950
      !child.ref,                                                                                                      // 18951
      'You are calling cloneWithProps() on a child with a ref. This is ' +                                             // 18952
      'dangerous because you\'re creating a new child which will not be ' +                                            // 18953
      'added as a ref to its parent.'                                                                                  // 18954
    ) : null);                                                                                                         // 18955
  }                                                                                                                    // 18956
                                                                                                                       // 18957
  var newProps = ReactPropTransferer.mergeProps(props, child.props);                                                   // 18958
                                                                                                                       // 18959
  // Use `child.props.children` if it is provided.                                                                     // 18960
  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&                                                                       // 18961
      child.props.hasOwnProperty(CHILDREN_PROP)) {                                                                     // 18962
    newProps.children = child.props.children;                                                                          // 18963
  }                                                                                                                    // 18964
                                                                                                                       // 18965
  // The current API doesn't retain _owner and _context, which is why this                                             // 18966
  // doesn't use ReactElement.cloneAndReplaceProps.                                                                    // 18967
  return ReactElement.createElement(child.type, newProps);                                                             // 18968
}                                                                                                                      // 18969
                                                                                                                       // 18970
module.exports = cloneWithProps;                                                                                       // 18971
                                                                                                                       // 18972
}).call(this,require('_process'))                                                                                      // 18973
                                                                                                                       // 18974
},{"./ReactElement":"react/lib/ReactElement","./ReactPropTransferer":"react/lib/ReactPropTransferer","./keyOf":"react/lib/keyOf","./warning":"react/lib/warning","_process":1}],"react/lib/containsNode":[function(require,module,exports){
/**                                                                                                                    // 18976
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18977
 * All rights reserved.                                                                                                // 18978
 *                                                                                                                     // 18979
 * This source code is licensed under the BSD-style license found in the                                               // 18980
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 18981
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 18982
 *                                                                                                                     // 18983
 * @providesModule containsNode                                                                                        // 18984
 * @typechecks                                                                                                         // 18985
 */                                                                                                                    // 18986
                                                                                                                       // 18987
var isTextNode = require("./isTextNode");                                                                              // 18988
                                                                                                                       // 18989
/*jslint bitwise:true */                                                                                               // 18990
                                                                                                                       // 18991
/**                                                                                                                    // 18992
 * Checks if a given DOM node contains or is another DOM node.                                                         // 18993
 *                                                                                                                     // 18994
 * @param {?DOMNode} outerNode Outer DOM node.                                                                         // 18995
 * @param {?DOMNode} innerNode Inner DOM node.                                                                         // 18996
 * @return {boolean} True if `outerNode` contains or is `innerNode`.                                                   // 18997
 */                                                                                                                    // 18998
function containsNode(outerNode, innerNode) {                                                                          // 18999
  if (!outerNode || !innerNode) {                                                                                      // 19000
    return false;                                                                                                      // 19001
  } else if (outerNode === innerNode) {                                                                                // 19002
    return true;                                                                                                       // 19003
  } else if (isTextNode(outerNode)) {                                                                                  // 19004
    return false;                                                                                                      // 19005
  } else if (isTextNode(innerNode)) {                                                                                  // 19006
    return containsNode(outerNode, innerNode.parentNode);                                                              // 19007
  } else if (outerNode.contains) {                                                                                     // 19008
    return outerNode.contains(innerNode);                                                                              // 19009
  } else if (outerNode.compareDocumentPosition) {                                                                      // 19010
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);                                                      // 19011
  } else {                                                                                                             // 19012
    return false;                                                                                                      // 19013
  }                                                                                                                    // 19014
}                                                                                                                      // 19015
                                                                                                                       // 19016
module.exports = containsNode;                                                                                         // 19017
                                                                                                                       // 19018
},{"./isTextNode":"react/lib/isTextNode"}],"react/lib/createArrayFromMixed":[function(require,module,exports){         // 19019
/**                                                                                                                    // 19020
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19021
 * All rights reserved.                                                                                                // 19022
 *                                                                                                                     // 19023
 * This source code is licensed under the BSD-style license found in the                                               // 19024
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19025
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19026
 *                                                                                                                     // 19027
 * @providesModule createArrayFromMixed                                                                                // 19028
 * @typechecks                                                                                                         // 19029
 */                                                                                                                    // 19030
                                                                                                                       // 19031
var toArray = require("./toArray");                                                                                    // 19032
                                                                                                                       // 19033
/**                                                                                                                    // 19034
 * Perform a heuristic test to determine if an object is "array-like".                                                 // 19035
 *                                                                                                                     // 19036
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"                                                      // 19037
 *   Joshu replied: "Mu."                                                                                              // 19038
 *                                                                                                                     // 19039
 * This function determines if its argument has "array nature": it returns                                             // 19040
 * true if the argument is an actual array, an `arguments' object, or an                                               // 19041
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).                                               // 19042
 *                                                                                                                     // 19043
 * It will return false for other array-like objects like Filelist.                                                    // 19044
 *                                                                                                                     // 19045
 * @param {*} obj                                                                                                      // 19046
 * @return {boolean}                                                                                                   // 19047
 */                                                                                                                    // 19048
function hasArrayNature(obj) {                                                                                         // 19049
  return (                                                                                                             // 19050
    // not null/false                                                                                                  // 19051
    !!obj &&                                                                                                           // 19052
    // arrays are objects, NodeLists are functions in Safari                                                           // 19053
    (typeof obj == 'object' || typeof obj == 'function') &&                                                            // 19054
    // quacks like an array                                                                                            // 19055
    ('length' in obj) &&                                                                                               // 19056
    // not window                                                                                                      // 19057
    !('setInterval' in obj) &&                                                                                         // 19058
    // no DOM node should be considered an array-like                                                                  // 19059
    // a 'select' element has 'length' and 'item' properties on IE8                                                    // 19060
    (typeof obj.nodeType != 'number') &&                                                                               // 19061
    (                                                                                                                  // 19062
      // a real array                                                                                                  // 19063
      (// HTMLCollection/NodeList                                                                                      // 19064
      (Array.isArray(obj) ||                                                                                           // 19065
      // arguments                                                                                                     // 19066
      ('callee' in obj) || 'item' in obj))                                                                             // 19067
    )                                                                                                                  // 19068
  );                                                                                                                   // 19069
}                                                                                                                      // 19070
                                                                                                                       // 19071
/**                                                                                                                    // 19072
 * Ensure that the argument is an array by wrapping it in an array if it is not.                                       // 19073
 * Creates a copy of the argument if it is already an array.                                                           // 19074
 *                                                                                                                     // 19075
 * This is mostly useful idiomatically:                                                                                // 19076
 *                                                                                                                     // 19077
 *   var createArrayFromMixed = require('createArrayFromMixed');                                                       // 19078
 *                                                                                                                     // 19079
 *   function takesOneOrMoreThings(things) {                                                                           // 19080
 *     things = createArrayFromMixed(things);                                                                          // 19081
 *     ...                                                                                                             // 19082
 *   }                                                                                                                 // 19083
 *                                                                                                                     // 19084
 * This allows you to treat `things' as an array, but accept scalars in the API.                                       // 19085
 *                                                                                                                     // 19086
 * If you need to convert an array-like object, like `arguments`, into an array                                        // 19087
 * use toArray instead.                                                                                                // 19088
 *                                                                                                                     // 19089
 * @param {*} obj                                                                                                      // 19090
 * @return {array}                                                                                                     // 19091
 */                                                                                                                    // 19092
function createArrayFromMixed(obj) {                                                                                   // 19093
  if (!hasArrayNature(obj)) {                                                                                          // 19094
    return [obj];                                                                                                      // 19095
  } else if (Array.isArray(obj)) {                                                                                     // 19096
    return obj.slice();                                                                                                // 19097
  } else {                                                                                                             // 19098
    return toArray(obj);                                                                                               // 19099
  }                                                                                                                    // 19100
}                                                                                                                      // 19101
                                                                                                                       // 19102
module.exports = createArrayFromMixed;                                                                                 // 19103
                                                                                                                       // 19104
},{"./toArray":"react/lib/toArray"}],"react/lib/createFullPageComponent":[function(require,module,exports){            // 19105
(function (process){                                                                                                   // 19106
/**                                                                                                                    // 19107
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19108
 * All rights reserved.                                                                                                // 19109
 *                                                                                                                     // 19110
 * This source code is licensed under the BSD-style license found in the                                               // 19111
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19112
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19113
 *                                                                                                                     // 19114
 * @providesModule createFullPageComponent                                                                             // 19115
 * @typechecks                                                                                                         // 19116
 */                                                                                                                    // 19117
                                                                                                                       // 19118
'use strict';                                                                                                          // 19119
                                                                                                                       // 19120
// Defeat circular references by requiring this directly.                                                              // 19121
var ReactClass = require("./ReactClass");                                                                              // 19122
var ReactElement = require("./ReactElement");                                                                          // 19123
                                                                                                                       // 19124
var invariant = require("./invariant");                                                                                // 19125
                                                                                                                       // 19126
/**                                                                                                                    // 19127
 * Create a component that will throw an exception when unmounted.                                                     // 19128
 *                                                                                                                     // 19129
 * Components like <html> <head> and <body> can't be removed or added                                                  // 19130
 * easily in a cross-browser way, however it's valuable to be able to                                                  // 19131
 * take advantage of React's reconciliation for styling and <title>                                                    // 19132
 * management. So we just document it and throw in dangerous cases.                                                    // 19133
 *                                                                                                                     // 19134
 * @param {string} tag The tag to wrap                                                                                 // 19135
 * @return {function} convenience constructor of new component                                                         // 19136
 */                                                                                                                    // 19137
function createFullPageComponent(tag) {                                                                                // 19138
  var elementFactory = ReactElement.createFactory(tag);                                                                // 19139
                                                                                                                       // 19140
  var FullPageComponent = ReactClass.createClass({                                                                     // 19141
    tagName: tag.toUpperCase(),                                                                                        // 19142
    displayName: 'ReactFullPageComponent' + tag,                                                                       // 19143
                                                                                                                       // 19144
    componentWillUnmount: function() {                                                                                 // 19145
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 19146
        false,                                                                                                         // 19147
        '%s tried to unmount. Because of cross-browser quirks it is ' +                                                // 19148
        'impossible to unmount some top-level components (eg <html>, <head>, ' +                                       // 19149
        'and <body>) reliably and efficiently. To fix this, have a single ' +                                          // 19150
        'top-level component that never unmounts render these elements.',                                              // 19151
        this.constructor.displayName                                                                                   // 19152
      ) : invariant(false));                                                                                           // 19153
    },                                                                                                                 // 19154
                                                                                                                       // 19155
    render: function() {                                                                                               // 19156
      return elementFactory(this.props);                                                                               // 19157
    }                                                                                                                  // 19158
  });                                                                                                                  // 19159
                                                                                                                       // 19160
  return FullPageComponent;                                                                                            // 19161
}                                                                                                                      // 19162
                                                                                                                       // 19163
module.exports = createFullPageComponent;                                                                              // 19164
                                                                                                                       // 19165
}).call(this,require('_process'))                                                                                      // 19166
                                                                                                                       // 19167
},{"./ReactClass":"react/lib/ReactClass","./ReactElement":"react/lib/ReactElement","./invariant":"react/lib/invariant","_process":1}],"react/lib/createNodesFromMarkup":[function(require,module,exports){
(function (process){                                                                                                   // 19169
/**                                                                                                                    // 19170
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19171
 * All rights reserved.                                                                                                // 19172
 *                                                                                                                     // 19173
 * This source code is licensed under the BSD-style license found in the                                               // 19174
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19175
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19176
 *                                                                                                                     // 19177
 * @providesModule createNodesFromMarkup                                                                               // 19178
 * @typechecks                                                                                                         // 19179
 */                                                                                                                    // 19180
                                                                                                                       // 19181
/*jslint evil: true, sub: true */                                                                                      // 19182
                                                                                                                       // 19183
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 19184
                                                                                                                       // 19185
var createArrayFromMixed = require("./createArrayFromMixed");                                                          // 19186
var getMarkupWrap = require("./getMarkupWrap");                                                                        // 19187
var invariant = require("./invariant");                                                                                // 19188
                                                                                                                       // 19189
/**                                                                                                                    // 19190
 * Dummy container used to render all markup.                                                                          // 19191
 */                                                                                                                    // 19192
var dummyNode =                                                                                                        // 19193
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                               // 19194
                                                                                                                       // 19195
/**                                                                                                                    // 19196
 * Pattern used by `getNodeName`.                                                                                      // 19197
 */                                                                                                                    // 19198
var nodeNamePattern = /^\s*<(\w+)/;                                                                                    // 19199
                                                                                                                       // 19200
/**                                                                                                                    // 19201
 * Extracts the `nodeName` of the first element in a string of markup.                                                 // 19202
 *                                                                                                                     // 19203
 * @param {string} markup String of markup.                                                                            // 19204
 * @return {?string} Node name of the supplied markup.                                                                 // 19205
 */                                                                                                                    // 19206
function getNodeName(markup) {                                                                                         // 19207
  var nodeNameMatch = markup.match(nodeNamePattern);                                                                   // 19208
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();                                                              // 19209
}                                                                                                                      // 19210
                                                                                                                       // 19211
/**                                                                                                                    // 19212
 * Creates an array containing the nodes rendered from the supplied markup. The                                        // 19213
 * optionally supplied `handleScript` function will be invoked once for each                                           // 19214
 * <script> element that is rendered. If no `handleScript` function is supplied,                                       // 19215
 * an exception is thrown if any <script> elements are rendered.                                                       // 19216
 *                                                                                                                     // 19217
 * @param {string} markup A string of valid HTML markup.                                                               // 19218
 * @param {?function} handleScript Invoked once for each rendered <script>.                                            // 19219
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.                                                 // 19220
 */                                                                                                                    // 19221
function createNodesFromMarkup(markup, handleScript) {                                                                 // 19222
  var node = dummyNode;                                                                                                // 19223
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);                                                                                  // 19225
                                                                                                                       // 19226
  var wrap = nodeName && getMarkupWrap(nodeName);                                                                      // 19227
  if (wrap) {                                                                                                          // 19228
    node.innerHTML = wrap[1] + markup + wrap[2];                                                                       // 19229
                                                                                                                       // 19230
    var wrapDepth = wrap[0];                                                                                           // 19231
    while (wrapDepth--) {                                                                                              // 19232
      node = node.lastChild;                                                                                           // 19233
    }                                                                                                                  // 19234
  } else {                                                                                                             // 19235
    node.innerHTML = markup;                                                                                           // 19236
  }                                                                                                                    // 19237
                                                                                                                       // 19238
  var scripts = node.getElementsByTagName('script');                                                                   // 19239
  if (scripts.length) {                                                                                                // 19240
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 19241
      handleScript,                                                                                                    // 19242
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'                                              // 19243
    ) : invariant(handleScript));                                                                                      // 19244
    createArrayFromMixed(scripts).forEach(handleScript);                                                               // 19245
  }                                                                                                                    // 19246
                                                                                                                       // 19247
  var nodes = createArrayFromMixed(node.childNodes);                                                                   // 19248
  while (node.lastChild) {                                                                                             // 19249
    node.removeChild(node.lastChild);                                                                                  // 19250
  }                                                                                                                    // 19251
  return nodes;                                                                                                        // 19252
}                                                                                                                      // 19253
                                                                                                                       // 19254
module.exports = createNodesFromMarkup;                                                                                // 19255
                                                                                                                       // 19256
}).call(this,require('_process'))                                                                                      // 19257
                                                                                                                       // 19258
},{"./ExecutionEnvironment":"react/lib/ExecutionEnvironment","./createArrayFromMixed":"react/lib/createArrayFromMixed","./getMarkupWrap":"react/lib/getMarkupWrap","./invariant":"react/lib/invariant","_process":1}],"react/lib/cx":[function(require,module,exports){
(function (process){                                                                                                   // 19260
/**                                                                                                                    // 19261
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19262
 * All rights reserved.                                                                                                // 19263
 *                                                                                                                     // 19264
 * This source code is licensed under the BSD-style license found in the                                               // 19265
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19266
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19267
 *                                                                                                                     // 19268
 * @providesModule cx                                                                                                  // 19269
 */                                                                                                                    // 19270
                                                                                                                       // 19271
/**                                                                                                                    // 19272
 * This function is used to mark string literals representing CSS class names                                          // 19273
 * so that they can be transformed statically. This allows for modularization                                          // 19274
 * and minification of CSS class names.                                                                                // 19275
 *                                                                                                                     // 19276
 * In static_upstream, this function is actually implemented, but it should                                            // 19277
 * eventually be replaced with something more descriptive, and the transform                                           // 19278
 * that is used in the main stack should be ported for use elsewhere.                                                  // 19279
 *                                                                                                                     // 19280
 * @param string|object className to modularize, or an object of key/values.                                           // 19281
 *                      In the object case, the values are conditions that                                             // 19282
 *                      determine if the className keys should be included.                                            // 19283
 * @param [string ...]  Variable list of classNames in the string case.                                                // 19284
 * @return string       Renderable space-separated CSS className.                                                      // 19285
 */                                                                                                                    // 19286
                                                                                                                       // 19287
'use strict';                                                                                                          // 19288
var warning = require("./warning");                                                                                    // 19289
                                                                                                                       // 19290
var warned = false;                                                                                                    // 19291
                                                                                                                       // 19292
function cx(classNames) {                                                                                              // 19293
  if ("production" !== process.env.NODE_ENV) {                                                                         // 19294
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 19295
      warned,                                                                                                          // 19296
      'React.addons.classSet will be deprecated in a future version. See ' +                                           // 19297
      'http://fb.me/react-addons-classset'                                                                             // 19298
    ) : null);                                                                                                         // 19299
    warned = true;                                                                                                     // 19300
  }                                                                                                                    // 19301
                                                                                                                       // 19302
  if (typeof classNames == 'object') {                                                                                 // 19303
    return Object.keys(classNames).filter(function(className) {                                                        // 19304
      return classNames[className];                                                                                    // 19305
    }).join(' ');                                                                                                      // 19306
  } else {                                                                                                             // 19307
    return Array.prototype.join.call(arguments, ' ');                                                                  // 19308
  }                                                                                                                    // 19309
}                                                                                                                      // 19310
                                                                                                                       // 19311
module.exports = cx;                                                                                                   // 19312
                                                                                                                       // 19313
}).call(this,require('_process'))                                                                                      // 19314
                                                                                                                       // 19315
},{"./warning":"react/lib/warning","_process":1}],"react/lib/dangerousStyleValue":[function(require,module,exports){   // 19316
/**                                                                                                                    // 19317
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19318
 * All rights reserved.                                                                                                // 19319
 *                                                                                                                     // 19320
 * This source code is licensed under the BSD-style license found in the                                               // 19321
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19322
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19323
 *                                                                                                                     // 19324
 * @providesModule dangerousStyleValue                                                                                 // 19325
 * @typechecks static-only                                                                                             // 19326
 */                                                                                                                    // 19327
                                                                                                                       // 19328
'use strict';                                                                                                          // 19329
                                                                                                                       // 19330
var CSSProperty = require("./CSSProperty");                                                                            // 19331
                                                                                                                       // 19332
var isUnitlessNumber = CSSProperty.isUnitlessNumber;                                                                   // 19333
                                                                                                                       // 19334
/**                                                                                                                    // 19335
 * Convert a value into the proper css writable value. The style name `name`                                           // 19336
 * should be logical (no hyphens), as specified                                                                        // 19337
 * in `CSSProperty.isUnitlessNumber`.                                                                                  // 19338
 *                                                                                                                     // 19339
 * @param {string} name CSS property name such as `topMargin`.                                                         // 19340
 * @param {*} value CSS property value such as `10px`.                                                                 // 19341
 * @return {string} Normalized style value with dimensions applied.                                                    // 19342
 */                                                                                                                    // 19343
function dangerousStyleValue(name, value) {                                                                            // 19344
  // Note that we've removed escapeTextForBrowser() calls here since the                                               // 19345
  // whole string will be escaped when the attribute is injected into                                                  // 19346
  // the markup. If you provide unsafe user data here they can inject                                                  // 19347
  // arbitrary CSS which may be problematic (I couldn't repro this):                                                   // 19348
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet                                                    // 19349
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/                                                // 19350
  // This is not an XSS hole but instead a potential CSS injection issue                                               // 19351
  // which has lead to a greater discussion about how we're going to                                                   // 19352
  // trust URLs moving forward. See #2115901                                                                           // 19353
                                                                                                                       // 19354
  var isEmpty = value == null || typeof value === 'boolean' || value === '';                                           // 19355
  if (isEmpty) {                                                                                                       // 19356
    return '';                                                                                                         // 19357
  }                                                                                                                    // 19358
                                                                                                                       // 19359
  var isNonNumeric = isNaN(value);                                                                                     // 19360
  if (isNonNumeric || value === 0 ||                                                                                   // 19361
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {                                               // 19362
    return '' + value; // cast to string                                                                               // 19363
  }                                                                                                                    // 19364
                                                                                                                       // 19365
  if (typeof value === 'string') {                                                                                     // 19366
    value = value.trim();                                                                                              // 19367
  }                                                                                                                    // 19368
  return value + 'px';                                                                                                 // 19369
}                                                                                                                      // 19370
                                                                                                                       // 19371
module.exports = dangerousStyleValue;                                                                                  // 19372
                                                                                                                       // 19373
},{"./CSSProperty":"react/lib/CSSProperty"}],"react/lib/emptyFunction":[function(require,module,exports){              // 19374
/**                                                                                                                    // 19375
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19376
 * All rights reserved.                                                                                                // 19377
 *                                                                                                                     // 19378
 * This source code is licensed under the BSD-style license found in the                                               // 19379
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19380
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19381
 *                                                                                                                     // 19382
 * @providesModule emptyFunction                                                                                       // 19383
 */                                                                                                                    // 19384
                                                                                                                       // 19385
function makeEmptyFunction(arg) {                                                                                      // 19386
  return function() {                                                                                                  // 19387
    return arg;                                                                                                        // 19388
  };                                                                                                                   // 19389
}                                                                                                                      // 19390
                                                                                                                       // 19391
/**                                                                                                                    // 19392
 * This function accepts and discards inputs; it has no side effects. This is                                          // 19393
 * primarily useful idiomatically for overridable function endpoints which                                             // 19394
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.                                             // 19395
 */                                                                                                                    // 19396
function emptyFunction() {}                                                                                            // 19397
                                                                                                                       // 19398
emptyFunction.thatReturns = makeEmptyFunction;                                                                         // 19399
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);                                                             // 19400
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);                                                               // 19401
emptyFunction.thatReturnsNull = makeEmptyFunction(null);                                                               // 19402
emptyFunction.thatReturnsThis = function() { return this; };                                                           // 19403
emptyFunction.thatReturnsArgument = function(arg) { return arg; };                                                     // 19404
                                                                                                                       // 19405
module.exports = emptyFunction;                                                                                        // 19406
                                                                                                                       // 19407
},{}],"react/lib/emptyObject":[function(require,module,exports){                                                       // 19408
(function (process){                                                                                                   // 19409
/**                                                                                                                    // 19410
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19411
 * All rights reserved.                                                                                                // 19412
 *                                                                                                                     // 19413
 * This source code is licensed under the BSD-style license found in the                                               // 19414
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19415
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19416
 *                                                                                                                     // 19417
 * @providesModule emptyObject                                                                                         // 19418
 */                                                                                                                    // 19419
                                                                                                                       // 19420
"use strict";                                                                                                          // 19421
                                                                                                                       // 19422
var emptyObject = {};                                                                                                  // 19423
                                                                                                                       // 19424
if ("production" !== process.env.NODE_ENV) {                                                                           // 19425
  Object_freeze(emptyObject);                                                                                          // 19426
}                                                                                                                      // 19427
                                                                                                                       // 19428
module.exports = emptyObject;                                                                                          // 19429
                                                                                                                       // 19430
}).call(this,require('_process'))                                                                                      // 19431
                                                                                                                       // 19432
},{"_process":1}],"react/lib/escapeTextContentForBrowser":[function(require,module,exports){                           // 19433
/**                                                                                                                    // 19434
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19435
 * All rights reserved.                                                                                                // 19436
 *                                                                                                                     // 19437
 * This source code is licensed under the BSD-style license found in the                                               // 19438
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19439
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19440
 *                                                                                                                     // 19441
 * @providesModule escapeTextContentForBrowser                                                                         // 19442
 */                                                                                                                    // 19443
                                                                                                                       // 19444
'use strict';                                                                                                          // 19445
                                                                                                                       // 19446
var ESCAPE_LOOKUP = {                                                                                                  // 19447
  '&': '&amp;',                                                                                                        // 19448
  '>': '&gt;',                                                                                                         // 19449
  '<': '&lt;',                                                                                                         // 19450
  '"': '&quot;',                                                                                                       // 19451
  '\'': '&#x27;'                                                                                                       // 19452
};                                                                                                                     // 19453
                                                                                                                       // 19454
var ESCAPE_REGEX = /[&><"']/g;                                                                                         // 19455
                                                                                                                       // 19456
function escaper(match) {                                                                                              // 19457
  return ESCAPE_LOOKUP[match];                                                                                         // 19458
}                                                                                                                      // 19459
                                                                                                                       // 19460
/**                                                                                                                    // 19461
 * Escapes text to prevent scripting attacks.                                                                          // 19462
 *                                                                                                                     // 19463
 * @param {*} text Text value to escape.                                                                               // 19464
 * @return {string} An escaped string.                                                                                 // 19465
 */                                                                                                                    // 19466
function escapeTextContentForBrowser(text) {                                                                           // 19467
  return ('' + text).replace(ESCAPE_REGEX, escaper);                                                                   // 19468
}                                                                                                                      // 19469
                                                                                                                       // 19470
module.exports = escapeTextContentForBrowser;                                                                          // 19471
                                                                                                                       // 19472
},{}],"react/lib/findDOMNode":[function(require,module,exports){                                                       // 19473
(function (process){                                                                                                   // 19474
/**                                                                                                                    // 19475
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19476
 * All rights reserved.                                                                                                // 19477
 *                                                                                                                     // 19478
 * This source code is licensed under the BSD-style license found in the                                               // 19479
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19480
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19481
 *                                                                                                                     // 19482
 * @providesModule findDOMNode                                                                                         // 19483
 * @typechecks static-only                                                                                             // 19484
 */                                                                                                                    // 19485
                                                                                                                       // 19486
'use strict';                                                                                                          // 19487
                                                                                                                       // 19488
var ReactCurrentOwner = require("./ReactCurrentOwner");                                                                // 19489
var ReactInstanceMap = require("./ReactInstanceMap");                                                                  // 19490
var ReactMount = require("./ReactMount");                                                                              // 19491
                                                                                                                       // 19492
var invariant = require("./invariant");                                                                                // 19493
var isNode = require("./isNode");                                                                                      // 19494
var warning = require("./warning");                                                                                    // 19495
                                                                                                                       // 19496
/**                                                                                                                    // 19497
 * Returns the DOM node rendered by this element.                                                                      // 19498
 *                                                                                                                     // 19499
 * @param {ReactComponent|DOMElement} componentOrElement                                                               // 19500
 * @return {DOMElement} The root node of this element.                                                                 // 19501
 */                                                                                                                    // 19502
function findDOMNode(componentOrElement) {                                                                             // 19503
  if ("production" !== process.env.NODE_ENV) {                                                                         // 19504
    var owner = ReactCurrentOwner.current;                                                                             // 19505
    if (owner !== null) {                                                                                              // 19506
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 19507
        owner._warnedAboutRefsInRender,                                                                                // 19508
        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +                                            // 19509
        'render() should be a pure function of props and state. It should ' +                                          // 19510
        'never access something that requires stale data from the previous ' +                                         // 19511
        'render, such as refs. Move this logic to componentDidMount and ' +                                            // 19512
        'componentDidUpdate instead.',                                                                                 // 19513
        owner.getName() || 'A component'                                                                               // 19514
      ) : null);                                                                                                       // 19515
      owner._warnedAboutRefsInRender = true;                                                                           // 19516
    }                                                                                                                  // 19517
  }                                                                                                                    // 19518
  if (componentOrElement == null) {                                                                                    // 19519
    return null;                                                                                                       // 19520
  }                                                                                                                    // 19521
  if (isNode(componentOrElement)) {                                                                                    // 19522
    return componentOrElement;                                                                                         // 19523
  }                                                                                                                    // 19524
  if (ReactInstanceMap.has(componentOrElement)) {                                                                      // 19525
    return ReactMount.getNodeFromInstance(componentOrElement);                                                         // 19526
  }                                                                                                                    // 19527
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 19528
    componentOrElement.render == null ||                                                                               // 19529
    typeof componentOrElement.render !== 'function',                                                                   // 19530
    'Component (with keys: %s) contains `render` method ' +                                                            // 19531
    'but is not mounted in the DOM',                                                                                   // 19532
    Object.keys(componentOrElement)                                                                                    // 19533
  ) : invariant(componentOrElement.render == null ||                                                                   // 19534
  typeof componentOrElement.render !== 'function'));                                                                   // 19535
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 19536
    false,                                                                                                             // 19537
    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',                                             // 19538
    Object.keys(componentOrElement)                                                                                    // 19539
  ) : invariant(false));                                                                                               // 19540
}                                                                                                                      // 19541
                                                                                                                       // 19542
module.exports = findDOMNode;                                                                                          // 19543
                                                                                                                       // 19544
}).call(this,require('_process'))                                                                                      // 19545
                                                                                                                       // 19546
},{"./ReactCurrentOwner":"react/lib/ReactCurrentOwner","./ReactInstanceMap":"react/lib/ReactInstanceMap","./ReactMount":"react/lib/ReactMount","./invariant":"react/lib/invariant","./isNode":"react/lib/isNode","./warning":"react/lib/warning","_process":1}],"react/lib/flattenChildren":[function(require,module,exports){
(function (process){                                                                                                   // 19548
/**                                                                                                                    // 19549
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19550
 * All rights reserved.                                                                                                // 19551
 *                                                                                                                     // 19552
 * This source code is licensed under the BSD-style license found in the                                               // 19553
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19554
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19555
 *                                                                                                                     // 19556
 * @providesModule flattenChildren                                                                                     // 19557
 */                                                                                                                    // 19558
                                                                                                                       // 19559
'use strict';                                                                                                          // 19560
                                                                                                                       // 19561
var traverseAllChildren = require("./traverseAllChildren");                                                            // 19562
var warning = require("./warning");                                                                                    // 19563
                                                                                                                       // 19564
/**                                                                                                                    // 19565
 * @param {function} traverseContext Context passed through traversal.                                                 // 19566
 * @param {?ReactComponent} child React child component.                                                               // 19567
 * @param {!string} name String name of key path to child.                                                             // 19568
 */                                                                                                                    // 19569
function flattenSingleChildIntoContext(traverseContext, child, name) {                                                 // 19570
  // We found a component instance.                                                                                    // 19571
  var result = traverseContext;                                                                                        // 19572
  var keyUnique = !result.hasOwnProperty(name);                                                                        // 19573
  if ("production" !== process.env.NODE_ENV) {                                                                         // 19574
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 19575
      keyUnique,                                                                                                       // 19576
      'flattenChildren(...): Encountered two children with the same key, ' +                                           // 19577
      '`%s`. Child keys must be unique; when two children share a key, only ' +                                        // 19578
      'the first child will be used.',                                                                                 // 19579
      name                                                                                                             // 19580
    ) : null);                                                                                                         // 19581
  }                                                                                                                    // 19582
  if (keyUnique && child != null) {                                                                                    // 19583
    result[name] = child;                                                                                              // 19584
  }                                                                                                                    // 19585
}                                                                                                                      // 19586
                                                                                                                       // 19587
/**                                                                                                                    // 19588
 * Flattens children that are typically specified as `props.children`. Any null                                        // 19589
 * children will not be included in the resulting object.                                                              // 19590
 * @return {!object} flattened children keyed by name.                                                                 // 19591
 */                                                                                                                    // 19592
function flattenChildren(children) {                                                                                   // 19593
  if (children == null) {                                                                                              // 19594
    return children;                                                                                                   // 19595
  }                                                                                                                    // 19596
  var result = {};                                                                                                     // 19597
  traverseAllChildren(children, flattenSingleChildIntoContext, result);                                                // 19598
  return result;                                                                                                       // 19599
}                                                                                                                      // 19600
                                                                                                                       // 19601
module.exports = flattenChildren;                                                                                      // 19602
                                                                                                                       // 19603
}).call(this,require('_process'))                                                                                      // 19604
                                                                                                                       // 19605
},{"./traverseAllChildren":"react/lib/traverseAllChildren","./warning":"react/lib/warning","_process":1}],"react/lib/focusNode":[function(require,module,exports){
/**                                                                                                                    // 19607
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 19608
 * All rights reserved.                                                                                                // 19609
 *                                                                                                                     // 19610
 * This source code is licensed under the BSD-style license found in the                                               // 19611
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19612
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19613
 *                                                                                                                     // 19614
 * @providesModule focusNode                                                                                           // 19615
 */                                                                                                                    // 19616
                                                                                                                       // 19617
"use strict";                                                                                                          // 19618
                                                                                                                       // 19619
/**                                                                                                                    // 19620
 * @param {DOMElement} node input/textarea to focus                                                                    // 19621
 */                                                                                                                    // 19622
function focusNode(node) {                                                                                             // 19623
  // IE8 can throw "Can't move focus to the control because it is invisible,                                           // 19624
  // not enabled, or of a type that does not accept the focus." for all kinds of                                       // 19625
  // reasons that are too expensive and fragile to test.                                                               // 19626
  try {                                                                                                                // 19627
    node.focus();                                                                                                      // 19628
  } catch(e) {                                                                                                         // 19629
  }                                                                                                                    // 19630
}                                                                                                                      // 19631
                                                                                                                       // 19632
module.exports = focusNode;                                                                                            // 19633
                                                                                                                       // 19634
},{}],"react/lib/forEachAccumulated":[function(require,module,exports){                                                // 19635
/**                                                                                                                    // 19636
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19637
 * All rights reserved.                                                                                                // 19638
 *                                                                                                                     // 19639
 * This source code is licensed under the BSD-style license found in the                                               // 19640
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19641
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19642
 *                                                                                                                     // 19643
 * @providesModule forEachAccumulated                                                                                  // 19644
 */                                                                                                                    // 19645
                                                                                                                       // 19646
'use strict';                                                                                                          // 19647
                                                                                                                       // 19648
/**                                                                                                                    // 19649
 * @param {array} an "accumulation" of items which is either an Array or                                               // 19650
 * a single item. Useful when paired with the `accumulate` module. This is a                                           // 19651
 * simple utility that allows us to reason about a collection of items, but                                            // 19652
 * handling the case when there is exactly one item (and we do not need to                                             // 19653
 * allocate an array).                                                                                                 // 19654
 */                                                                                                                    // 19655
var forEachAccumulated = function(arr, cb, scope) {                                                                    // 19656
  if (Array.isArray(arr)) {                                                                                            // 19657
    arr.forEach(cb, scope);                                                                                            // 19658
  } else if (arr) {                                                                                                    // 19659
    cb.call(scope, arr);                                                                                               // 19660
  }                                                                                                                    // 19661
};                                                                                                                     // 19662
                                                                                                                       // 19663
module.exports = forEachAccumulated;                                                                                   // 19664
                                                                                                                       // 19665
},{}],"react/lib/getActiveElement":[function(require,module,exports){                                                  // 19666
/**                                                                                                                    // 19667
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19668
 * All rights reserved.                                                                                                // 19669
 *                                                                                                                     // 19670
 * This source code is licensed under the BSD-style license found in the                                               // 19671
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19672
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19673
 *                                                                                                                     // 19674
 * @providesModule getActiveElement                                                                                    // 19675
 * @typechecks                                                                                                         // 19676
 */                                                                                                                    // 19677
                                                                                                                       // 19678
/**                                                                                                                    // 19679
 * Same as document.activeElement but wraps in a try-catch block. In IE it is                                          // 19680
 * not safe to call document.activeElement if there is nothing focused.                                                // 19681
 *                                                                                                                     // 19682
 * The activeElement will be null only if the document body is not yet defined.                                        // 19683
 */                                                                                                                    // 19684
function getActiveElement() /*?DOMElement*/ {                                                                          // 19685
  try {                                                                                                                // 19686
    return document.activeElement || document.body;                                                                    // 19687
  } catch (e) {                                                                                                        // 19688
    return document.body;                                                                                              // 19689
  }                                                                                                                    // 19690
}                                                                                                                      // 19691
                                                                                                                       // 19692
module.exports = getActiveElement;                                                                                     // 19693
                                                                                                                       // 19694
},{}],"react/lib/getEventCharCode":[function(require,module,exports){                                                  // 19695
/**                                                                                                                    // 19696
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19697
 * All rights reserved.                                                                                                // 19698
 *                                                                                                                     // 19699
 * This source code is licensed under the BSD-style license found in the                                               // 19700
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19701
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19702
 *                                                                                                                     // 19703
 * @providesModule getEventCharCode                                                                                    // 19704
 * @typechecks static-only                                                                                             // 19705
 */                                                                                                                    // 19706
                                                                                                                       // 19707
'use strict';                                                                                                          // 19708
                                                                                                                       // 19709
/**                                                                                                                    // 19710
 * `charCode` represents the actual "character code" and is safe to use with                                           // 19711
 * `String.fromCharCode`. As such, only keys that correspond to printable                                              // 19712
 * characters produce a valid `charCode`, the only exception to this is Enter.                                         // 19713
 * The Tab-key is considered non-printable and does not have a `charCode`,                                             // 19714
 * presumably because it does not produce a tab-character in browsers.                                                 // 19715
 *                                                                                                                     // 19716
 * @param {object} nativeEvent Native browser event.                                                                   // 19717
 * @return {string} Normalized `charCode` property.                                                                    // 19718
 */                                                                                                                    // 19719
function getEventCharCode(nativeEvent) {                                                                               // 19720
  var charCode;                                                                                                        // 19721
  var keyCode = nativeEvent.keyCode;                                                                                   // 19722
                                                                                                                       // 19723
  if ('charCode' in nativeEvent) {                                                                                     // 19724
    charCode = nativeEvent.charCode;                                                                                   // 19725
                                                                                                                       // 19726
    // FF does not set `charCode` for the Enter-key, check against `keyCode`.                                          // 19727
    if (charCode === 0 && keyCode === 13) {                                                                            // 19728
      charCode = 13;                                                                                                   // 19729
    }                                                                                                                  // 19730
  } else {                                                                                                             // 19731
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.                                         // 19732
    charCode = keyCode;                                                                                                // 19733
  }                                                                                                                    // 19734
                                                                                                                       // 19735
  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.                                       // 19736
  // Must not discard the (non-)printable Enter-key.                                                                   // 19737
  if (charCode >= 32 || charCode === 13) {                                                                             // 19738
    return charCode;                                                                                                   // 19739
  }                                                                                                                    // 19740
                                                                                                                       // 19741
  return 0;                                                                                                            // 19742
}                                                                                                                      // 19743
                                                                                                                       // 19744
module.exports = getEventCharCode;                                                                                     // 19745
                                                                                                                       // 19746
},{}],"react/lib/getEventKey":[function(require,module,exports){                                                       // 19747
/**                                                                                                                    // 19748
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19749
 * All rights reserved.                                                                                                // 19750
 *                                                                                                                     // 19751
 * This source code is licensed under the BSD-style license found in the                                               // 19752
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19753
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19754
 *                                                                                                                     // 19755
 * @providesModule getEventKey                                                                                         // 19756
 * @typechecks static-only                                                                                             // 19757
 */                                                                                                                    // 19758
                                                                                                                       // 19759
'use strict';                                                                                                          // 19760
                                                                                                                       // 19761
var getEventCharCode = require("./getEventCharCode");                                                                  // 19762
                                                                                                                       // 19763
/**                                                                                                                    // 19764
 * Normalization of deprecated HTML5 `key` values                                                                      // 19765
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 19766
 */                                                                                                                    // 19767
var normalizeKey = {                                                                                                   // 19768
  'Esc': 'Escape',                                                                                                     // 19769
  'Spacebar': ' ',                                                                                                     // 19770
  'Left': 'ArrowLeft',                                                                                                 // 19771
  'Up': 'ArrowUp',                                                                                                     // 19772
  'Right': 'ArrowRight',                                                                                               // 19773
  'Down': 'ArrowDown',                                                                                                 // 19774
  'Del': 'Delete',                                                                                                     // 19775
  'Win': 'OS',                                                                                                         // 19776
  'Menu': 'ContextMenu',                                                                                               // 19777
  'Apps': 'ContextMenu',                                                                                               // 19778
  'Scroll': 'ScrollLock',                                                                                              // 19779
  'MozPrintableKey': 'Unidentified'                                                                                    // 19780
};                                                                                                                     // 19781
                                                                                                                       // 19782
/**                                                                                                                    // 19783
 * Translation from legacy `keyCode` to HTML5 `key`                                                                    // 19784
 * Only special keys supported, all others depend on keyboard layout or browser                                        // 19785
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 19786
 */                                                                                                                    // 19787
var translateToKey = {                                                                                                 // 19788
  8: 'Backspace',                                                                                                      // 19789
  9: 'Tab',                                                                                                            // 19790
  12: 'Clear',                                                                                                         // 19791
  13: 'Enter',                                                                                                         // 19792
  16: 'Shift',                                                                                                         // 19793
  17: 'Control',                                                                                                       // 19794
  18: 'Alt',                                                                                                           // 19795
  19: 'Pause',                                                                                                         // 19796
  20: 'CapsLock',                                                                                                      // 19797
  27: 'Escape',                                                                                                        // 19798
  32: ' ',                                                                                                             // 19799
  33: 'PageUp',                                                                                                        // 19800
  34: 'PageDown',                                                                                                      // 19801
  35: 'End',                                                                                                           // 19802
  36: 'Home',                                                                                                          // 19803
  37: 'ArrowLeft',                                                                                                     // 19804
  38: 'ArrowUp',                                                                                                       // 19805
  39: 'ArrowRight',                                                                                                    // 19806
  40: 'ArrowDown',                                                                                                     // 19807
  45: 'Insert',                                                                                                        // 19808
  46: 'Delete',                                                                                                        // 19809
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',                                                    // 19810
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',                                                 // 19811
  144: 'NumLock',                                                                                                      // 19812
  145: 'ScrollLock',                                                                                                   // 19813
  224: 'Meta'                                                                                                          // 19814
};                                                                                                                     // 19815
                                                                                                                       // 19816
/**                                                                                                                    // 19817
 * @param {object} nativeEvent Native browser event.                                                                   // 19818
 * @return {string} Normalized `key` property.                                                                         // 19819
 */                                                                                                                    // 19820
function getEventKey(nativeEvent) {                                                                                    // 19821
  if (nativeEvent.key) {                                                                                               // 19822
    // Normalize inconsistent values reported by browsers due to                                                       // 19823
    // implementations of a working draft specification.                                                               // 19824
                                                                                                                       // 19825
    // FireFox implements `key` but returns `MozPrintableKey` for all                                                  // 19826
    // printable characters (normalized to `Unidentified`), ignore it.                                                 // 19827
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;                                                        // 19828
    if (key !== 'Unidentified') {                                                                                      // 19829
      return key;                                                                                                      // 19830
    }                                                                                                                  // 19831
  }                                                                                                                    // 19832
                                                                                                                       // 19833
  // Browser does not implement `key`, polyfill as much of it as we can.                                               // 19834
  if (nativeEvent.type === 'keypress') {                                                                               // 19835
    var charCode = getEventCharCode(nativeEvent);                                                                      // 19836
                                                                                                                       // 19837
    // The enter-key is technically both printable and non-printable and can                                           // 19838
    // thus be captured by `keypress`, no other non-printable key should.                                              // 19839
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);                                                  // 19840
  }                                                                                                                    // 19841
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {                                                // 19842
    // While user keyboard layout determines the actual meaning of each                                                // 19843
    // `keyCode` value, almost all function keys have a universal value.                                               // 19844
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';                                                      // 19845
  }                                                                                                                    // 19846
  return '';                                                                                                           // 19847
}                                                                                                                      // 19848
                                                                                                                       // 19849
module.exports = getEventKey;                                                                                          // 19850
                                                                                                                       // 19851
},{"./getEventCharCode":"react/lib/getEventCharCode"}],"react/lib/getEventModifierState":[function(require,module,exports){
/**                                                                                                                    // 19853
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19854
 * All rights reserved.                                                                                                // 19855
 *                                                                                                                     // 19856
 * This source code is licensed under the BSD-style license found in the                                               // 19857
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19858
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19859
 *                                                                                                                     // 19860
 * @providesModule getEventModifierState                                                                               // 19861
 * @typechecks static-only                                                                                             // 19862
 */                                                                                                                    // 19863
                                                                                                                       // 19864
'use strict';                                                                                                          // 19865
                                                                                                                       // 19866
/**                                                                                                                    // 19867
 * Translation from modifier key to the associated property in the event.                                              // 19868
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers                                                        // 19869
 */                                                                                                                    // 19870
                                                                                                                       // 19871
var modifierKeyToProp = {                                                                                              // 19872
  'Alt': 'altKey',                                                                                                     // 19873
  'Control': 'ctrlKey',                                                                                                // 19874
  'Meta': 'metaKey',                                                                                                   // 19875
  'Shift': 'shiftKey'                                                                                                  // 19876
};                                                                                                                     // 19877
                                                                                                                       // 19878
// IE8 does not implement getModifierState so we simply map it to the only                                             // 19879
// modifier keys exposed by the event itself, does not support Lock-keys.                                              // 19880
// Currently, all major browsers except Chrome seems to support Lock-keys.                                             // 19881
function modifierStateGetter(keyArg) {                                                                                 // 19882
  /*jshint validthis:true */                                                                                           // 19883
  var syntheticEvent = this;                                                                                           // 19884
  var nativeEvent = syntheticEvent.nativeEvent;                                                                        // 19885
  if (nativeEvent.getModifierState) {                                                                                  // 19886
    return nativeEvent.getModifierState(keyArg);                                                                       // 19887
  }                                                                                                                    // 19888
  var keyProp = modifierKeyToProp[keyArg];                                                                             // 19889
  return keyProp ? !!nativeEvent[keyProp] : false;                                                                     // 19890
}                                                                                                                      // 19891
                                                                                                                       // 19892
function getEventModifierState(nativeEvent) {                                                                          // 19893
  return modifierStateGetter;                                                                                          // 19894
}                                                                                                                      // 19895
                                                                                                                       // 19896
module.exports = getEventModifierState;                                                                                // 19897
                                                                                                                       // 19898
},{}],"react/lib/getEventTarget":[function(require,module,exports){                                                    // 19899
/**                                                                                                                    // 19900
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19901
 * All rights reserved.                                                                                                // 19902
 *                                                                                                                     // 19903
 * This source code is licensed under the BSD-style license found in the                                               // 19904
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19905
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19906
 *                                                                                                                     // 19907
 * @providesModule getEventTarget                                                                                      // 19908
 * @typechecks static-only                                                                                             // 19909
 */                                                                                                                    // 19910
                                                                                                                       // 19911
'use strict';                                                                                                          // 19912
                                                                                                                       // 19913
/**                                                                                                                    // 19914
 * Gets the target node from a native browser event by accounting for                                                  // 19915
 * inconsistencies in browser DOM APIs.                                                                                // 19916
 *                                                                                                                     // 19917
 * @param {object} nativeEvent Native browser event.                                                                   // 19918
 * @return {DOMEventTarget} Target node.                                                                               // 19919
 */                                                                                                                    // 19920
function getEventTarget(nativeEvent) {                                                                                 // 19921
  var target = nativeEvent.target || nativeEvent.srcElement || window;                                                 // 19922
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).                                                       // 19923
  // @see http://www.quirksmode.org/js/events_properties.html                                                          // 19924
  return target.nodeType === 3 ? target.parentNode : target;                                                           // 19925
}                                                                                                                      // 19926
                                                                                                                       // 19927
module.exports = getEventTarget;                                                                                       // 19928
                                                                                                                       // 19929
},{}],"react/lib/getIteratorFn":[function(require,module,exports){                                                     // 19930
/**                                                                                                                    // 19931
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19932
 * All rights reserved.                                                                                                // 19933
 *                                                                                                                     // 19934
 * This source code is licensed under the BSD-style license found in the                                               // 19935
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19936
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19937
 *                                                                                                                     // 19938
 * @providesModule getIteratorFn                                                                                       // 19939
 * @typechecks static-only                                                                                             // 19940
 */                                                                                                                    // 19941
                                                                                                                       // 19942
'use strict';                                                                                                          // 19943
                                                                                                                       // 19944
/* global Symbol */                                                                                                    // 19945
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                                 // 19946
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.                                                        // 19947
                                                                                                                       // 19948
/**                                                                                                                    // 19949
 * Returns the iterator method function contained on the iterable object.                                              // 19950
 *                                                                                                                     // 19951
 * Be sure to invoke the function with the iterable as context:                                                        // 19952
 *                                                                                                                     // 19953
 *     var iteratorFn = getIteratorFn(myIterable);                                                                     // 19954
 *     if (iteratorFn) {                                                                                               // 19955
 *       var iterator = iteratorFn.call(myIterable);                                                                   // 19956
 *       ...                                                                                                           // 19957
 *     }                                                                                                               // 19958
 *                                                                                                                     // 19959
 * @param {?object} maybeIterable                                                                                      // 19960
 * @return {?function}                                                                                                 // 19961
 */                                                                                                                    // 19962
function getIteratorFn(maybeIterable) {                                                                                // 19963
  var iteratorFn = maybeIterable && (                                                                                  // 19964
    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])                         // 19965
  );                                                                                                                   // 19966
  if (typeof iteratorFn === 'function') {                                                                              // 19967
    return iteratorFn;                                                                                                 // 19968
  }                                                                                                                    // 19969
}                                                                                                                      // 19970
                                                                                                                       // 19971
module.exports = getIteratorFn;                                                                                        // 19972
                                                                                                                       // 19973
},{}],"react/lib/getMarkupWrap":[function(require,module,exports){                                                     // 19974
(function (process){                                                                                                   // 19975
/**                                                                                                                    // 19976
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19977
 * All rights reserved.                                                                                                // 19978
 *                                                                                                                     // 19979
 * This source code is licensed under the BSD-style license found in the                                               // 19980
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 19981
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 19982
 *                                                                                                                     // 19983
 * @providesModule getMarkupWrap                                                                                       // 19984
 */                                                                                                                    // 19985
                                                                                                                       // 19986
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 19987
                                                                                                                       // 19988
var invariant = require("./invariant");                                                                                // 19989
                                                                                                                       // 19990
/**                                                                                                                    // 19991
 * Dummy container used to detect which wraps are necessary.                                                           // 19992
 */                                                                                                                    // 19993
var dummyNode =                                                                                                        // 19994
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                               // 19995
                                                                                                                       // 19996
/**                                                                                                                    // 19997
 * Some browsers cannot use `innerHTML` to render certain elements standalone,                                         // 19998
 * so we wrap them, render the wrapped nodes, then extract the desired node.                                           // 19999
 *                                                                                                                     // 20000
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').                                           // 20001
 */                                                                                                                    // 20002
var shouldWrap = {                                                                                                     // 20003
  // Force wrapping for SVG elements because if they get created inside a <div>,                                       // 20004
  // they will be initialized in the wrong namespace (and will not display).                                           // 20005
  'circle': true,                                                                                                      // 20006
  'clipPath': true,                                                                                                    // 20007
  'defs': true,                                                                                                        // 20008
  'ellipse': true,                                                                                                     // 20009
  'g': true,                                                                                                           // 20010
  'line': true,                                                                                                        // 20011
  'linearGradient': true,                                                                                              // 20012
  'path': true,                                                                                                        // 20013
  'polygon': true,                                                                                                     // 20014
  'polyline': true,                                                                                                    // 20015
  'radialGradient': true,                                                                                              // 20016
  'rect': true,                                                                                                        // 20017
  'stop': true,                                                                                                        // 20018
  'text': true                                                                                                         // 20019
};                                                                                                                     // 20020
                                                                                                                       // 20021
var selectWrap = [1, '<select multiple="true">', '</select>'];                                                         // 20022
var tableWrap = [1, '<table>', '</table>'];                                                                            // 20023
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];                                                       // 20024
                                                                                                                       // 20025
var svgWrap = [1, '<svg>', '</svg>'];                                                                                  // 20026
                                                                                                                       // 20027
var markupWrap = {                                                                                                     // 20028
  '*': [1, '?<div>', '</div>'],                                                                                        // 20029
                                                                                                                       // 20030
  'area': [1, '<map>', '</map>'],                                                                                      // 20031
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],                                               // 20032
  'legend': [1, '<fieldset>', '</fieldset>'],                                                                          // 20033
  'param': [1, '<object>', '</object>'],                                                                               // 20034
  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 20035
                                                                                                                       // 20036
  'optgroup': selectWrap,                                                                                              // 20037
  'option': selectWrap,                                                                                                // 20038
                                                                                                                       // 20039
  'caption': tableWrap,                                                                                                // 20040
  'colgroup': tableWrap,                                                                                               // 20041
  'tbody': tableWrap,                                                                                                  // 20042
  'tfoot': tableWrap,                                                                                                  // 20043
  'thead': tableWrap,                                                                                                  // 20044
                                                                                                                       // 20045
  'td': trWrap,                                                                                                        // 20046
  'th': trWrap,                                                                                                        // 20047
                                                                                                                       // 20048
  'circle': svgWrap,                                                                                                   // 20049
  'clipPath': svgWrap,                                                                                                 // 20050
  'defs': svgWrap,                                                                                                     // 20051
  'ellipse': svgWrap,                                                                                                  // 20052
  'g': svgWrap,                                                                                                        // 20053
  'line': svgWrap,                                                                                                     // 20054
  'linearGradient': svgWrap,                                                                                           // 20055
  'path': svgWrap,                                                                                                     // 20056
  'polygon': svgWrap,                                                                                                  // 20057
  'polyline': svgWrap,                                                                                                 // 20058
  'radialGradient': svgWrap,                                                                                           // 20059
  'rect': svgWrap,                                                                                                     // 20060
  'stop': svgWrap,                                                                                                     // 20061
  'text': svgWrap                                                                                                      // 20062
};                                                                                                                     // 20063
                                                                                                                       // 20064
/**                                                                                                                    // 20065
 * Gets the markup wrap configuration for the supplied `nodeName`.                                                     // 20066
 *                                                                                                                     // 20067
 * NOTE: This lazily detects which wraps are necessary for the current browser.                                        // 20068
 *                                                                                                                     // 20069
 * @param {string} nodeName Lowercase `nodeName`.                                                                      // 20070
 * @return {?array} Markup wrap configuration, if applicable.                                                          // 20071
 */                                                                                                                    // 20072
function getMarkupWrap(nodeName) {                                                                                     // 20073
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {                                                                          // 20075
    nodeName = '*';                                                                                                    // 20076
  }                                                                                                                    // 20077
  if (!shouldWrap.hasOwnProperty(nodeName)) {                                                                          // 20078
    if (nodeName === '*') {                                                                                            // 20079
      dummyNode.innerHTML = '<link />';                                                                                // 20080
    } else {                                                                                                           // 20081
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';                                                   // 20082
    }                                                                                                                  // 20083
    shouldWrap[nodeName] = !dummyNode.firstChild;                                                                      // 20084
  }                                                                                                                    // 20085
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;                                                           // 20086
}                                                                                                                      // 20087
                                                                                                                       // 20088
                                                                                                                       // 20089
module.exports = getMarkupWrap;                                                                                        // 20090
                                                                                                                       // 20091
}).call(this,require('_process'))                                                                                      // 20092
                                                                                                                       // 20093
},{"./ExecutionEnvironment":"react/lib/ExecutionEnvironment","./invariant":"react/lib/invariant","_process":1}],"react/lib/getNodeForCharacterOffset":[function(require,module,exports){
/**                                                                                                                    // 20095
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20096
 * All rights reserved.                                                                                                // 20097
 *                                                                                                                     // 20098
 * This source code is licensed under the BSD-style license found in the                                               // 20099
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20100
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20101
 *                                                                                                                     // 20102
 * @providesModule getNodeForCharacterOffset                                                                           // 20103
 */                                                                                                                    // 20104
                                                                                                                       // 20105
'use strict';                                                                                                          // 20106
                                                                                                                       // 20107
/**                                                                                                                    // 20108
 * Given any node return the first leaf node without children.                                                         // 20109
 *                                                                                                                     // 20110
 * @param {DOMElement|DOMTextNode} node                                                                                // 20111
 * @return {DOMElement|DOMTextNode}                                                                                    // 20112
 */                                                                                                                    // 20113
function getLeafNode(node) {                                                                                           // 20114
  while (node && node.firstChild) {                                                                                    // 20115
    node = node.firstChild;                                                                                            // 20116
  }                                                                                                                    // 20117
  return node;                                                                                                         // 20118
}                                                                                                                      // 20119
                                                                                                                       // 20120
/**                                                                                                                    // 20121
 * Get the next sibling within a container. This will walk up the                                                      // 20122
 * DOM if a node's siblings have been exhausted.                                                                       // 20123
 *                                                                                                                     // 20124
 * @param {DOMElement|DOMTextNode} node                                                                                // 20125
 * @return {?DOMElement|DOMTextNode}                                                                                   // 20126
 */                                                                                                                    // 20127
function getSiblingNode(node) {                                                                                        // 20128
  while (node) {                                                                                                       // 20129
    if (node.nextSibling) {                                                                                            // 20130
      return node.nextSibling;                                                                                         // 20131
    }                                                                                                                  // 20132
    node = node.parentNode;                                                                                            // 20133
  }                                                                                                                    // 20134
}                                                                                                                      // 20135
                                                                                                                       // 20136
/**                                                                                                                    // 20137
 * Get object describing the nodes which contain characters at offset.                                                 // 20138
 *                                                                                                                     // 20139
 * @param {DOMElement|DOMTextNode} root                                                                                // 20140
 * @param {number} offset                                                                                              // 20141
 * @return {?object}                                                                                                   // 20142
 */                                                                                                                    // 20143
function getNodeForCharacterOffset(root, offset) {                                                                     // 20144
  var node = getLeafNode(root);                                                                                        // 20145
  var nodeStart = 0;                                                                                                   // 20146
  var nodeEnd = 0;                                                                                                     // 20147
                                                                                                                       // 20148
  while (node) {                                                                                                       // 20149
    if (node.nodeType === 3) {                                                                                         // 20150
      nodeEnd = nodeStart + node.textContent.length;                                                                   // 20151
                                                                                                                       // 20152
      if (nodeStart <= offset && nodeEnd >= offset) {                                                                  // 20153
        return {                                                                                                       // 20154
          node: node,                                                                                                  // 20155
          offset: offset - nodeStart                                                                                   // 20156
        };                                                                                                             // 20157
      }                                                                                                                // 20158
                                                                                                                       // 20159
      nodeStart = nodeEnd;                                                                                             // 20160
    }                                                                                                                  // 20161
                                                                                                                       // 20162
    node = getLeafNode(getSiblingNode(node));                                                                          // 20163
  }                                                                                                                    // 20164
}                                                                                                                      // 20165
                                                                                                                       // 20166
module.exports = getNodeForCharacterOffset;                                                                            // 20167
                                                                                                                       // 20168
},{}],"react/lib/getReactRootElementInContainer":[function(require,module,exports){                                    // 20169
/**                                                                                                                    // 20170
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20171
 * All rights reserved.                                                                                                // 20172
 *                                                                                                                     // 20173
 * This source code is licensed under the BSD-style license found in the                                               // 20174
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20175
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20176
 *                                                                                                                     // 20177
 * @providesModule getReactRootElementInContainer                                                                      // 20178
 */                                                                                                                    // 20179
                                                                                                                       // 20180
'use strict';                                                                                                          // 20181
                                                                                                                       // 20182
var DOC_NODE_TYPE = 9;                                                                                                 // 20183
                                                                                                                       // 20184
/**                                                                                                                    // 20185
 * @param {DOMElement|DOMDocument} container DOM element that may contain                                              // 20186
 *                                           a React component                                                         // 20187
 * @return {?*} DOM element that may have the reactRoot ID, or null.                                                   // 20188
 */                                                                                                                    // 20189
function getReactRootElementInContainer(container) {                                                                   // 20190
  if (!container) {                                                                                                    // 20191
    return null;                                                                                                       // 20192
  }                                                                                                                    // 20193
                                                                                                                       // 20194
  if (container.nodeType === DOC_NODE_TYPE) {                                                                          // 20195
    return container.documentElement;                                                                                  // 20196
  } else {                                                                                                             // 20197
    return container.firstChild;                                                                                       // 20198
  }                                                                                                                    // 20199
}                                                                                                                      // 20200
                                                                                                                       // 20201
module.exports = getReactRootElementInContainer;                                                                       // 20202
                                                                                                                       // 20203
},{}],"react/lib/getTextContentAccessor":[function(require,module,exports){                                            // 20204
/**                                                                                                                    // 20205
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20206
 * All rights reserved.                                                                                                // 20207
 *                                                                                                                     // 20208
 * This source code is licensed under the BSD-style license found in the                                               // 20209
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20210
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20211
 *                                                                                                                     // 20212
 * @providesModule getTextContentAccessor                                                                              // 20213
 */                                                                                                                    // 20214
                                                                                                                       // 20215
'use strict';                                                                                                          // 20216
                                                                                                                       // 20217
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 20218
                                                                                                                       // 20219
var contentKey = null;                                                                                                 // 20220
                                                                                                                       // 20221
/**                                                                                                                    // 20222
 * Gets the key used to access text content on a DOM node.                                                             // 20223
 *                                                                                                                     // 20224
 * @return {?string} Key used to access text content.                                                                  // 20225
 * @internal                                                                                                           // 20226
 */                                                                                                                    // 20227
function getTextContentAccessor() {                                                                                    // 20228
  if (!contentKey && ExecutionEnvironment.canUseDOM) {                                                                 // 20229
    // Prefer textContent to innerText because many browsers support both but                                          // 20230
    // SVG <text> elements don't support innerText even when <div> does.                                               // 20231
    contentKey = 'textContent' in document.documentElement ?                                                           // 20232
      'textContent' :                                                                                                  // 20233
      'innerText';                                                                                                     // 20234
  }                                                                                                                    // 20235
  return contentKey;                                                                                                   // 20236
}                                                                                                                      // 20237
                                                                                                                       // 20238
module.exports = getTextContentAccessor;                                                                               // 20239
                                                                                                                       // 20240
},{"./ExecutionEnvironment":"react/lib/ExecutionEnvironment"}],"react/lib/getUnboundedScrollPosition":[function(require,module,exports){
/**                                                                                                                    // 20242
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20243
 * All rights reserved.                                                                                                // 20244
 *                                                                                                                     // 20245
 * This source code is licensed under the BSD-style license found in the                                               // 20246
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20247
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20248
 *                                                                                                                     // 20249
 * @providesModule getUnboundedScrollPosition                                                                          // 20250
 * @typechecks                                                                                                         // 20251
 */                                                                                                                    // 20252
                                                                                                                       // 20253
"use strict";                                                                                                          // 20254
                                                                                                                       // 20255
/**                                                                                                                    // 20256
 * Gets the scroll position of the supplied element or window.                                                         // 20257
 *                                                                                                                     // 20258
 * The return values are unbounded, unlike `getScrollPosition`. This means they                                        // 20259
 * may be negative or exceed the element boundaries (which is possible using                                           // 20260
 * inertial scrolling).                                                                                                // 20261
 *                                                                                                                     // 20262
 * @param {DOMWindow|DOMElement} scrollable                                                                            // 20263
 * @return {object} Map with `x` and `y` keys.                                                                         // 20264
 */                                                                                                                    // 20265
function getUnboundedScrollPosition(scrollable) {                                                                      // 20266
  if (scrollable === window) {                                                                                         // 20267
    return {                                                                                                           // 20268
      x: window.pageXOffset || document.documentElement.scrollLeft,                                                    // 20269
      y: window.pageYOffset || document.documentElement.scrollTop                                                      // 20270
    };                                                                                                                 // 20271
  }                                                                                                                    // 20272
  return {                                                                                                             // 20273
    x: scrollable.scrollLeft,                                                                                          // 20274
    y: scrollable.scrollTop                                                                                            // 20275
  };                                                                                                                   // 20276
}                                                                                                                      // 20277
                                                                                                                       // 20278
module.exports = getUnboundedScrollPosition;                                                                           // 20279
                                                                                                                       // 20280
},{}],"react/lib/hyphenateStyleName":[function(require,module,exports){                                                // 20281
/**                                                                                                                    // 20282
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20283
 * All rights reserved.                                                                                                // 20284
 *                                                                                                                     // 20285
 * This source code is licensed under the BSD-style license found in the                                               // 20286
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20287
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20288
 *                                                                                                                     // 20289
 * @providesModule hyphenateStyleName                                                                                  // 20290
 * @typechecks                                                                                                         // 20291
 */                                                                                                                    // 20292
                                                                                                                       // 20293
"use strict";                                                                                                          // 20294
                                                                                                                       // 20295
var hyphenate = require("./hyphenate");                                                                                // 20296
                                                                                                                       // 20297
var msPattern = /^ms-/;                                                                                                // 20298
                                                                                                                       // 20299
/**                                                                                                                    // 20300
 * Hyphenates a camelcased CSS property name, for example:                                                             // 20301
 *                                                                                                                     // 20302
 *   > hyphenateStyleName('backgroundColor')                                                                           // 20303
 *   < "background-color"                                                                                              // 20304
 *   > hyphenateStyleName('MozTransition')                                                                             // 20305
 *   < "-moz-transition"                                                                                               // 20306
 *   > hyphenateStyleName('msTransition')                                                                              // 20307
 *   < "-ms-transition"                                                                                                // 20308
 *                                                                                                                     // 20309
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix                                         // 20310
 * is converted to `-ms-`.                                                                                             // 20311
 *                                                                                                                     // 20312
 * @param {string} string                                                                                              // 20313
 * @return {string}                                                                                                    // 20314
 */                                                                                                                    // 20315
function hyphenateStyleName(string) {                                                                                  // 20316
  return hyphenate(string).replace(msPattern, '-ms-');                                                                 // 20317
}                                                                                                                      // 20318
                                                                                                                       // 20319
module.exports = hyphenateStyleName;                                                                                   // 20320
                                                                                                                       // 20321
},{"./hyphenate":"react/lib/hyphenate"}],"react/lib/hyphenate":[function(require,module,exports){                      // 20322
/**                                                                                                                    // 20323
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20324
 * All rights reserved.                                                                                                // 20325
 *                                                                                                                     // 20326
 * This source code is licensed under the BSD-style license found in the                                               // 20327
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20328
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20329
 *                                                                                                                     // 20330
 * @providesModule hyphenate                                                                                           // 20331
 * @typechecks                                                                                                         // 20332
 */                                                                                                                    // 20333
                                                                                                                       // 20334
var _uppercasePattern = /([A-Z])/g;                                                                                    // 20335
                                                                                                                       // 20336
/**                                                                                                                    // 20337
 * Hyphenates a camelcased string, for example:                                                                        // 20338
 *                                                                                                                     // 20339
 *   > hyphenate('backgroundColor')                                                                                    // 20340
 *   < "background-color"                                                                                              // 20341
 *                                                                                                                     // 20342
 * For CSS style names, use `hyphenateStyleName` instead which works properly                                          // 20343
 * with all vendor prefixes, including `ms`.                                                                           // 20344
 *                                                                                                                     // 20345
 * @param {string} string                                                                                              // 20346
 * @return {string}                                                                                                    // 20347
 */                                                                                                                    // 20348
function hyphenate(string) {                                                                                           // 20349
  return string.replace(_uppercasePattern, '-$1').toLowerCase();                                                       // 20350
}                                                                                                                      // 20351
                                                                                                                       // 20352
module.exports = hyphenate;                                                                                            // 20353
                                                                                                                       // 20354
},{}],"react/lib/instantiateReactComponent":[function(require,module,exports){                                         // 20355
(function (process){                                                                                                   // 20356
/**                                                                                                                    // 20357
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20358
 * All rights reserved.                                                                                                // 20359
 *                                                                                                                     // 20360
 * This source code is licensed under the BSD-style license found in the                                               // 20361
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20362
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20363
 *                                                                                                                     // 20364
 * @providesModule instantiateReactComponent                                                                           // 20365
 * @typechecks static-only                                                                                             // 20366
 */                                                                                                                    // 20367
                                                                                                                       // 20368
'use strict';                                                                                                          // 20369
                                                                                                                       // 20370
var ReactCompositeComponent = require("./ReactCompositeComponent");                                                    // 20371
var ReactEmptyComponent = require("./ReactEmptyComponent");                                                            // 20372
var ReactNativeComponent = require("./ReactNativeComponent");                                                          // 20373
                                                                                                                       // 20374
var assign = require("./Object.assign");                                                                               // 20375
var invariant = require("./invariant");                                                                                // 20376
var warning = require("./warning");                                                                                    // 20377
                                                                                                                       // 20378
// To avoid a cyclic dependency, we create the final class in this module                                              // 20379
var ReactCompositeComponentWrapper = function() { };                                                                   // 20380
assign(                                                                                                                // 20381
  ReactCompositeComponentWrapper.prototype,                                                                            // 20382
  ReactCompositeComponent.Mixin,                                                                                       // 20383
  {                                                                                                                    // 20384
    _instantiateReactComponent: instantiateReactComponent                                                              // 20385
  }                                                                                                                    // 20386
);                                                                                                                     // 20387
                                                                                                                       // 20388
/**                                                                                                                    // 20389
 * Check if the type reference is a known internal type. I.e. not a user                                               // 20390
 * provided composite type.                                                                                            // 20391
 *                                                                                                                     // 20392
 * @param {function} type                                                                                              // 20393
 * @return {boolean} Returns true if this is a valid internal type.                                                    // 20394
 */                                                                                                                    // 20395
function isInternalComponentType(type) {                                                                               // 20396
  return (                                                                                                             // 20397
    typeof type === 'function' &&                                                                                      // 20398
    typeof type.prototype !== 'undefined' &&                                                                           // 20399
    typeof type.prototype.mountComponent === 'function' &&                                                             // 20400
    typeof type.prototype.receiveComponent === 'function'                                                              // 20401
  );                                                                                                                   // 20402
}                                                                                                                      // 20403
                                                                                                                       // 20404
/**                                                                                                                    // 20405
 * Given a ReactNode, create an instance that will actually be mounted.                                                // 20406
 *                                                                                                                     // 20407
 * @param {ReactNode} node                                                                                             // 20408
 * @param {*} parentCompositeType The composite type that resolved this.                                               // 20409
 * @return {object} A new instance of the element's constructor.                                                       // 20410
 * @protected                                                                                                          // 20411
 */                                                                                                                    // 20412
function instantiateReactComponent(node, parentCompositeType) {                                                        // 20413
  var instance;                                                                                                        // 20414
                                                                                                                       // 20415
  if (node === null || node === false) {                                                                               // 20416
    node = ReactEmptyComponent.emptyElement;                                                                           // 20417
  }                                                                                                                    // 20418
                                                                                                                       // 20419
  if (typeof node === 'object') {                                                                                      // 20420
    var element = node;                                                                                                // 20421
    if ("production" !== process.env.NODE_ENV) {                                                                       // 20422
      ("production" !== process.env.NODE_ENV ? warning(                                                                // 20423
        element && (typeof element.type === 'function' ||                                                              // 20424
                    typeof element.type === 'string'),                                                                 // 20425
        'Only functions or strings can be mounted as React components.'                                                // 20426
      ) : null);                                                                                                       // 20427
    }                                                                                                                  // 20428
                                                                                                                       // 20429
    // Special case string values                                                                                      // 20430
    if (parentCompositeType === element.type &&                                                                        // 20431
        typeof element.type === 'string') {                                                                            // 20432
      // Avoid recursion if the wrapper renders itself.                                                                // 20433
      instance = ReactNativeComponent.createInternalComponent(element);                                                // 20434
      // All native components are currently wrapped in a composite so we're                                           // 20435
      // safe to assume that this is what we should instantiate.                                                       // 20436
    } else if (isInternalComponentType(element.type)) {                                                                // 20437
      // This is temporarily available for custom components that are not string                                       // 20438
      // represenations. I.e. ART. Once those are updated to use the string                                            // 20439
      // representation, we can drop this code path.                                                                   // 20440
      instance = new element.type(element);                                                                            // 20441
    } else {                                                                                                           // 20442
      instance = new ReactCompositeComponentWrapper();                                                                 // 20443
    }                                                                                                                  // 20444
  } else if (typeof node === 'string' || typeof node === 'number') {                                                   // 20445
    instance = ReactNativeComponent.createInstanceForText(node);                                                       // 20446
  } else {                                                                                                             // 20447
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 20448
      false,                                                                                                           // 20449
      'Encountered invalid React node of type %s',                                                                     // 20450
      typeof node                                                                                                      // 20451
    ) : invariant(false));                                                                                             // 20452
  }                                                                                                                    // 20453
                                                                                                                       // 20454
  if ("production" !== process.env.NODE_ENV) {                                                                         // 20455
    ("production" !== process.env.NODE_ENV ? warning(                                                                  // 20456
      typeof instance.construct === 'function' &&                                                                      // 20457
      typeof instance.mountComponent === 'function' &&                                                                 // 20458
      typeof instance.receiveComponent === 'function' &&                                                               // 20459
      typeof instance.unmountComponent === 'function',                                                                 // 20460
      'Only React Components can be mounted.'                                                                          // 20461
    ) : null);                                                                                                         // 20462
  }                                                                                                                    // 20463
                                                                                                                       // 20464
  // Sets up the instance. This can probably just move into the constructor now.                                       // 20465
  instance.construct(node);                                                                                            // 20466
                                                                                                                       // 20467
  // These two fields are used by the DOM and ART diffing algorithms                                                   // 20468
  // respectively. Instead of using expandos on components, we should be                                               // 20469
  // storing the state needed by the diffing algorithms elsewhere.                                                     // 20470
  instance._mountIndex = 0;                                                                                            // 20471
  instance._mountImage = null;                                                                                         // 20472
                                                                                                                       // 20473
  if ("production" !== process.env.NODE_ENV) {                                                                         // 20474
    instance._isOwnerNecessary = false;                                                                                // 20475
    instance._warnedAboutRefsInRender = false;                                                                         // 20476
  }                                                                                                                    // 20477
                                                                                                                       // 20478
  // Internal instances should fully constructed at this point, so they should                                         // 20479
  // not get any new fields added to them at this point.                                                               // 20480
  if ("production" !== process.env.NODE_ENV) {                                                                         // 20481
    if (Object.preventExtensions) {                                                                                    // 20482
      Object.preventExtensions(instance);                                                                              // 20483
    }                                                                                                                  // 20484
  }                                                                                                                    // 20485
                                                                                                                       // 20486
  return instance;                                                                                                     // 20487
}                                                                                                                      // 20488
                                                                                                                       // 20489
module.exports = instantiateReactComponent;                                                                            // 20490
                                                                                                                       // 20491
}).call(this,require('_process'))                                                                                      // 20492
                                                                                                                       // 20493
},{"./Object.assign":"react/lib/Object.assign","./ReactCompositeComponent":"react/lib/ReactCompositeComponent","./ReactEmptyComponent":"react/lib/ReactEmptyComponent","./ReactNativeComponent":"react/lib/ReactNativeComponent","./invariant":"react/lib/invariant","./warning":"react/lib/warning","_process":1}],"react/lib/invariant":[function(require,module,exports){
(function (process){                                                                                                   // 20495
/**                                                                                                                    // 20496
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20497
 * All rights reserved.                                                                                                // 20498
 *                                                                                                                     // 20499
 * This source code is licensed under the BSD-style license found in the                                               // 20500
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20501
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20502
 *                                                                                                                     // 20503
 * @providesModule invariant                                                                                           // 20504
 */                                                                                                                    // 20505
                                                                                                                       // 20506
"use strict";                                                                                                          // 20507
                                                                                                                       // 20508
/**                                                                                                                    // 20509
 * Use invariant() to assert state which your program assumes to be true.                                              // 20510
 *                                                                                                                     // 20511
 * Provide sprintf-style format (only %s is supported) and arguments                                                   // 20512
 * to provide information about what broke and what you were                                                           // 20513
 * expecting.                                                                                                          // 20514
 *                                                                                                                     // 20515
 * The invariant message will be stripped in production, but the invariant                                             // 20516
 * will remain to ensure logic does not differ in production.                                                          // 20517
 */                                                                                                                    // 20518
                                                                                                                       // 20519
var invariant = function(condition, format, a, b, c, d, e, f) {                                                        // 20520
  if ("production" !== process.env.NODE_ENV) {                                                                         // 20521
    if (format === undefined) {                                                                                        // 20522
      throw new Error('invariant requires an error message argument');                                                 // 20523
    }                                                                                                                  // 20524
  }                                                                                                                    // 20525
                                                                                                                       // 20526
  if (!condition) {                                                                                                    // 20527
    var error;                                                                                                         // 20528
    if (format === undefined) {                                                                                        // 20529
      error = new Error(                                                                                               // 20530
        'Minified exception occurred; use the non-minified dev environment ' +                                         // 20531
        'for the full error message and additional helpful warnings.'                                                  // 20532
      );                                                                                                               // 20533
    } else {                                                                                                           // 20534
      var args = [a, b, c, d, e, f];                                                                                   // 20535
      var argIndex = 0;                                                                                                // 20536
      error = new Error(                                                                                               // 20537
        'Invariant Violation: ' +                                                                                      // 20538
        format.replace(/%s/g, function() { return args[argIndex++]; })                                                 // 20539
      );                                                                                                               // 20540
    }                                                                                                                  // 20541
                                                                                                                       // 20542
    error.framesToPop = 1; // we don't care about invariant's own frame                                                // 20543
    throw error;                                                                                                       // 20544
  }                                                                                                                    // 20545
};                                                                                                                     // 20546
                                                                                                                       // 20547
module.exports = invariant;                                                                                            // 20548
                                                                                                                       // 20549
}).call(this,require('_process'))                                                                                      // 20550
                                                                                                                       // 20551
},{"_process":1}],"react/lib/isEventSupported":[function(require,module,exports){                                      // 20552
/**                                                                                                                    // 20553
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20554
 * All rights reserved.                                                                                                // 20555
 *                                                                                                                     // 20556
 * This source code is licensed under the BSD-style license found in the                                               // 20557
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20558
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20559
 *                                                                                                                     // 20560
 * @providesModule isEventSupported                                                                                    // 20561
 */                                                                                                                    // 20562
                                                                                                                       // 20563
'use strict';                                                                                                          // 20564
                                                                                                                       // 20565
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 20566
                                                                                                                       // 20567
var useHasFeature;                                                                                                     // 20568
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 20569
  useHasFeature =                                                                                                      // 20570
    document.implementation &&                                                                                         // 20571
    document.implementation.hasFeature &&                                                                              // 20572
    // always returns true in newer browsers as per the standard.                                                      // 20573
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature                                               // 20574
    document.implementation.hasFeature('', '') !== true;                                                               // 20575
}                                                                                                                      // 20576
                                                                                                                       // 20577
/**                                                                                                                    // 20578
 * Checks if an event is supported in the current execution environment.                                               // 20579
 *                                                                                                                     // 20580
 * NOTE: This will not work correctly for non-generic events such as `change`,                                         // 20581
 * `reset`, `load`, `error`, and `select`.                                                                             // 20582
 *                                                                                                                     // 20583
 * Borrows from Modernizr.                                                                                             // 20584
 *                                                                                                                     // 20585
 * @param {string} eventNameSuffix Event name, e.g. "click".                                                           // 20586
 * @param {?boolean} capture Check if the capture phase is supported.                                                  // 20587
 * @return {boolean} True if the event is supported.                                                                   // 20588
 * @internal                                                                                                           // 20589
 * @license Modernizr 3.0.0pre (Custom Build) | MIT                                                                    // 20590
 */                                                                                                                    // 20591
function isEventSupported(eventNameSuffix, capture) {                                                                  // 20592
  if (!ExecutionEnvironment.canUseDOM ||                                                                               // 20593
      capture && !('addEventListener' in document)) {                                                                  // 20594
    return false;                                                                                                      // 20595
  }                                                                                                                    // 20596
                                                                                                                       // 20597
  var eventName = 'on' + eventNameSuffix;                                                                              // 20598
  var isSupported = eventName in document;                                                                             // 20599
                                                                                                                       // 20600
  if (!isSupported) {                                                                                                  // 20601
    var element = document.createElement('div');                                                                       // 20602
    element.setAttribute(eventName, 'return;');                                                                        // 20603
    isSupported = typeof element[eventName] === 'function';                                                            // 20604
  }                                                                                                                    // 20605
                                                                                                                       // 20606
  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {                                                  // 20607
    // This is the only way to test support for the `wheel` event in IE9+.                                             // 20608
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');                                           // 20609
  }                                                                                                                    // 20610
                                                                                                                       // 20611
  return isSupported;                                                                                                  // 20612
}                                                                                                                      // 20613
                                                                                                                       // 20614
module.exports = isEventSupported;                                                                                     // 20615
                                                                                                                       // 20616
},{"./ExecutionEnvironment":"react/lib/ExecutionEnvironment"}],"react/lib/isNode":[function(require,module,exports){   // 20617
/**                                                                                                                    // 20618
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20619
 * All rights reserved.                                                                                                // 20620
 *                                                                                                                     // 20621
 * This source code is licensed under the BSD-style license found in the                                               // 20622
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20623
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20624
 *                                                                                                                     // 20625
 * @providesModule isNode                                                                                              // 20626
 * @typechecks                                                                                                         // 20627
 */                                                                                                                    // 20628
                                                                                                                       // 20629
/**                                                                                                                    // 20630
 * @param {*} object The object to check.                                                                              // 20631
 * @return {boolean} Whether or not the object is a DOM node.                                                          // 20632
 */                                                                                                                    // 20633
function isNode(object) {                                                                                              // 20634
  return !!(object && (                                                                                                // 20635
    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&                              // 20636
    typeof object.nodeType === 'number' &&                                                                             // 20637
    typeof object.nodeName === 'string'))                                                                              // 20638
  ));                                                                                                                  // 20639
}                                                                                                                      // 20640
                                                                                                                       // 20641
module.exports = isNode;                                                                                               // 20642
                                                                                                                       // 20643
},{}],"react/lib/isTextInputElement":[function(require,module,exports){                                                // 20644
/**                                                                                                                    // 20645
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20646
 * All rights reserved.                                                                                                // 20647
 *                                                                                                                     // 20648
 * This source code is licensed under the BSD-style license found in the                                               // 20649
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20650
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20651
 *                                                                                                                     // 20652
 * @providesModule isTextInputElement                                                                                  // 20653
 */                                                                                                                    // 20654
                                                                                                                       // 20655
'use strict';                                                                                                          // 20656
                                                                                                                       // 20657
/**                                                                                                                    // 20658
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary     // 20659
 */                                                                                                                    // 20660
var supportedInputTypes = {                                                                                            // 20661
  'color': true,                                                                                                       // 20662
  'date': true,                                                                                                        // 20663
  'datetime': true,                                                                                                    // 20664
  'datetime-local': true,                                                                                              // 20665
  'email': true,                                                                                                       // 20666
  'month': true,                                                                                                       // 20667
  'number': true,                                                                                                      // 20668
  'password': true,                                                                                                    // 20669
  'range': true,                                                                                                       // 20670
  'search': true,                                                                                                      // 20671
  'tel': true,                                                                                                         // 20672
  'text': true,                                                                                                        // 20673
  'time': true,                                                                                                        // 20674
  'url': true,                                                                                                         // 20675
  'week': true                                                                                                         // 20676
};                                                                                                                     // 20677
                                                                                                                       // 20678
function isTextInputElement(elem) {                                                                                    // 20679
  return elem && (                                                                                                     // 20680
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')                      // 20681
  );                                                                                                                   // 20682
}                                                                                                                      // 20683
                                                                                                                       // 20684
module.exports = isTextInputElement;                                                                                   // 20685
                                                                                                                       // 20686
},{}],"react/lib/isTextNode":[function(require,module,exports){                                                        // 20687
/**                                                                                                                    // 20688
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20689
 * All rights reserved.                                                                                                // 20690
 *                                                                                                                     // 20691
 * This source code is licensed under the BSD-style license found in the                                               // 20692
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20693
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20694
 *                                                                                                                     // 20695
 * @providesModule isTextNode                                                                                          // 20696
 * @typechecks                                                                                                         // 20697
 */                                                                                                                    // 20698
                                                                                                                       // 20699
var isNode = require("./isNode");                                                                                      // 20700
                                                                                                                       // 20701
/**                                                                                                                    // 20702
 * @param {*} object The object to check.                                                                              // 20703
 * @return {boolean} Whether or not the object is a DOM text node.                                                     // 20704
 */                                                                                                                    // 20705
function isTextNode(object) {                                                                                          // 20706
  return isNode(object) && object.nodeType == 3;                                                                       // 20707
}                                                                                                                      // 20708
                                                                                                                       // 20709
module.exports = isTextNode;                                                                                           // 20710
                                                                                                                       // 20711
},{"./isNode":"react/lib/isNode"}],"react/lib/joinClasses":[function(require,module,exports){                          // 20712
/**                                                                                                                    // 20713
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20714
 * All rights reserved.                                                                                                // 20715
 *                                                                                                                     // 20716
 * This source code is licensed under the BSD-style license found in the                                               // 20717
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20718
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20719
 *                                                                                                                     // 20720
 * @providesModule joinClasses                                                                                         // 20721
 * @typechecks static-only                                                                                             // 20722
 */                                                                                                                    // 20723
                                                                                                                       // 20724
'use strict';                                                                                                          // 20725
                                                                                                                       // 20726
/**                                                                                                                    // 20727
 * Combines multiple className strings into one.                                                                       // 20728
 * http://jsperf.com/joinclasses-args-vs-array                                                                         // 20729
 *                                                                                                                     // 20730
 * @param {...?string} classes                                                                                         // 20731
 * @return {string}                                                                                                    // 20732
 */                                                                                                                    // 20733
function joinClasses(className/*, ... */) {                                                                            // 20734
  if (!className) {                                                                                                    // 20735
    className = '';                                                                                                    // 20736
  }                                                                                                                    // 20737
  var nextClass;                                                                                                       // 20738
  var argLength = arguments.length;                                                                                    // 20739
  if (argLength > 1) {                                                                                                 // 20740
    for (var ii = 1; ii < argLength; ii++) {                                                                           // 20741
      nextClass = arguments[ii];                                                                                       // 20742
      if (nextClass) {                                                                                                 // 20743
        className = (className ? className + ' ' : '') + nextClass;                                                    // 20744
      }                                                                                                                // 20745
    }                                                                                                                  // 20746
  }                                                                                                                    // 20747
  return className;                                                                                                    // 20748
}                                                                                                                      // 20749
                                                                                                                       // 20750
module.exports = joinClasses;                                                                                          // 20751
                                                                                                                       // 20752
},{}],"react/lib/keyMirror":[function(require,module,exports){                                                         // 20753
(function (process){                                                                                                   // 20754
/**                                                                                                                    // 20755
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20756
 * All rights reserved.                                                                                                // 20757
 *                                                                                                                     // 20758
 * This source code is licensed under the BSD-style license found in the                                               // 20759
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20760
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20761
 *                                                                                                                     // 20762
 * @providesModule keyMirror                                                                                           // 20763
 * @typechecks static-only                                                                                             // 20764
 */                                                                                                                    // 20765
                                                                                                                       // 20766
'use strict';                                                                                                          // 20767
                                                                                                                       // 20768
var invariant = require("./invariant");                                                                                // 20769
                                                                                                                       // 20770
/**                                                                                                                    // 20771
 * Constructs an enumeration with keys equal to their value.                                                           // 20772
 *                                                                                                                     // 20773
 * For example:                                                                                                        // 20774
 *                                                                                                                     // 20775
 *   var COLORS = keyMirror({blue: null, red: null});                                                                  // 20776
 *   var myColor = COLORS.blue;                                                                                        // 20777
 *   var isColorValid = !!COLORS[myColor];                                                                             // 20778
 *                                                                                                                     // 20779
 * The last line could not be performed if the values of the generated enum were                                       // 20780
 * not equal to their keys.                                                                                            // 20781
 *                                                                                                                     // 20782
 *   Input:  {key1: val1, key2: val2}                                                                                  // 20783
 *   Output: {key1: key1, key2: key2}                                                                                  // 20784
 *                                                                                                                     // 20785
 * @param {object} obj                                                                                                 // 20786
 * @return {object}                                                                                                    // 20787
 */                                                                                                                    // 20788
var keyMirror = function(obj) {                                                                                        // 20789
  var ret = {};                                                                                                        // 20790
  var key;                                                                                                             // 20791
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 20792
    obj instanceof Object && !Array.isArray(obj),                                                                      // 20793
    'keyMirror(...): Argument must be an object.'                                                                      // 20794
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));                                                        // 20795
  for (key in obj) {                                                                                                   // 20796
    if (!obj.hasOwnProperty(key)) {                                                                                    // 20797
      continue;                                                                                                        // 20798
    }                                                                                                                  // 20799
    ret[key] = key;                                                                                                    // 20800
  }                                                                                                                    // 20801
  return ret;                                                                                                          // 20802
};                                                                                                                     // 20803
                                                                                                                       // 20804
module.exports = keyMirror;                                                                                            // 20805
                                                                                                                       // 20806
}).call(this,require('_process'))                                                                                      // 20807
                                                                                                                       // 20808
},{"./invariant":"react/lib/invariant","_process":1}],"react/lib/keyOf":[function(require,module,exports){             // 20809
/**                                                                                                                    // 20810
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20811
 * All rights reserved.                                                                                                // 20812
 *                                                                                                                     // 20813
 * This source code is licensed under the BSD-style license found in the                                               // 20814
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20815
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20816
 *                                                                                                                     // 20817
 * @providesModule keyOf                                                                                               // 20818
 */                                                                                                                    // 20819
                                                                                                                       // 20820
/**                                                                                                                    // 20821
 * Allows extraction of a minified key. Let's the build system minify keys                                             // 20822
 * without loosing the ability to dynamically use key strings as values                                                // 20823
 * themselves. Pass in an object with a single key/val pair and it will return                                         // 20824
 * you the string key of that single record. Suppose you want to grab the                                              // 20825
 * value for a key 'className' inside of an object. Key/val minification may                                           // 20826
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return                                            // 20827
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then                                        // 20828
 * reuse those resolutions.                                                                                            // 20829
 */                                                                                                                    // 20830
var keyOf = function(oneKeyObj) {                                                                                      // 20831
  var key;                                                                                                             // 20832
  for (key in oneKeyObj) {                                                                                             // 20833
    if (!oneKeyObj.hasOwnProperty(key)) {                                                                              // 20834
      continue;                                                                                                        // 20835
    }                                                                                                                  // 20836
    return key;                                                                                                        // 20837
  }                                                                                                                    // 20838
  return null;                                                                                                         // 20839
};                                                                                                                     // 20840
                                                                                                                       // 20841
                                                                                                                       // 20842
module.exports = keyOf;                                                                                                // 20843
                                                                                                                       // 20844
},{}],"react/lib/mapObject":[function(require,module,exports){                                                         // 20845
/**                                                                                                                    // 20846
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20847
 * All rights reserved.                                                                                                // 20848
 *                                                                                                                     // 20849
 * This source code is licensed under the BSD-style license found in the                                               // 20850
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20851
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20852
 *                                                                                                                     // 20853
 * @providesModule mapObject                                                                                           // 20854
 */                                                                                                                    // 20855
                                                                                                                       // 20856
'use strict';                                                                                                          // 20857
                                                                                                                       // 20858
var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 20859
                                                                                                                       // 20860
/**                                                                                                                    // 20861
 * Executes the provided `callback` once for each enumerable own property in the                                       // 20862
 * object and constructs a new object from the results. The `callback` is                                              // 20863
 * invoked with three arguments:                                                                                       // 20864
 *                                                                                                                     // 20865
 *  - the property value                                                                                               // 20866
 *  - the property name                                                                                                // 20867
 *  - the object being traversed                                                                                       // 20868
 *                                                                                                                     // 20869
 * Properties that are added after the call to `mapObject` will not be visited                                         // 20870
 * by `callback`. If the values of existing properties are changed, the value                                          // 20871
 * passed to `callback` will be the value at the time `mapObject` visits them.                                         // 20872
 * Properties that are deleted before being visited are not visited.                                                   // 20873
 *                                                                                                                     // 20874
 * @grep function objectMap()                                                                                          // 20875
 * @grep function objMap()                                                                                             // 20876
 *                                                                                                                     // 20877
 * @param {?object} object                                                                                             // 20878
 * @param {function} callback                                                                                          // 20879
 * @param {*} context                                                                                                  // 20880
 * @return {?object}                                                                                                   // 20881
 */                                                                                                                    // 20882
function mapObject(object, callback, context) {                                                                        // 20883
  if (!object) {                                                                                                       // 20884
    return null;                                                                                                       // 20885
  }                                                                                                                    // 20886
  var result = {};                                                                                                     // 20887
  for (var name in object) {                                                                                           // 20888
    if (hasOwnProperty.call(object, name)) {                                                                           // 20889
      result[name] = callback.call(context, object[name], name, object);                                               // 20890
    }                                                                                                                  // 20891
  }                                                                                                                    // 20892
  return result;                                                                                                       // 20893
}                                                                                                                      // 20894
                                                                                                                       // 20895
module.exports = mapObject;                                                                                            // 20896
                                                                                                                       // 20897
},{}],"react/lib/memoizeStringOnly":[function(require,module,exports){                                                 // 20898
/**                                                                                                                    // 20899
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20900
 * All rights reserved.                                                                                                // 20901
 *                                                                                                                     // 20902
 * This source code is licensed under the BSD-style license found in the                                               // 20903
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20904
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20905
 *                                                                                                                     // 20906
 * @providesModule memoizeStringOnly                                                                                   // 20907
 * @typechecks static-only                                                                                             // 20908
 */                                                                                                                    // 20909
                                                                                                                       // 20910
'use strict';                                                                                                          // 20911
                                                                                                                       // 20912
/**                                                                                                                    // 20913
 * Memoizes the return value of a function that accepts one string argument.                                           // 20914
 *                                                                                                                     // 20915
 * @param {function} callback                                                                                          // 20916
 * @return {function}                                                                                                  // 20917
 */                                                                                                                    // 20918
function memoizeStringOnly(callback) {                                                                                 // 20919
  var cache = {};                                                                                                      // 20920
  return function(string) {                                                                                            // 20921
    if (!cache.hasOwnProperty(string)) {                                                                               // 20922
      cache[string] = callback.call(this, string);                                                                     // 20923
    }                                                                                                                  // 20924
    return cache[string];                                                                                              // 20925
  };                                                                                                                   // 20926
}                                                                                                                      // 20927
                                                                                                                       // 20928
module.exports = memoizeStringOnly;                                                                                    // 20929
                                                                                                                       // 20930
},{}],"react/lib/onlyChild":[function(require,module,exports){                                                         // 20931
(function (process){                                                                                                   // 20932
/**                                                                                                                    // 20933
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20934
 * All rights reserved.                                                                                                // 20935
 *                                                                                                                     // 20936
 * This source code is licensed under the BSD-style license found in the                                               // 20937
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20938
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20939
 *                                                                                                                     // 20940
 * @providesModule onlyChild                                                                                           // 20941
 */                                                                                                                    // 20942
'use strict';                                                                                                          // 20943
                                                                                                                       // 20944
var ReactElement = require("./ReactElement");                                                                          // 20945
                                                                                                                       // 20946
var invariant = require("./invariant");                                                                                // 20947
                                                                                                                       // 20948
/**                                                                                                                    // 20949
 * Returns the first child in a collection of children and verifies that there                                         // 20950
 * is only one child in the collection. The current implementation of this                                             // 20951
 * function assumes that a single child gets passed without a wrapper, but the                                         // 20952
 * purpose of this helper function is to abstract away the particular structure                                        // 20953
 * of children.                                                                                                        // 20954
 *                                                                                                                     // 20955
 * @param {?object} children Child collection structure.                                                               // 20956
 * @return {ReactComponent} The first and only `ReactComponent` contained in the                                       // 20957
 * structure.                                                                                                          // 20958
 */                                                                                                                    // 20959
function onlyChild(children) {                                                                                         // 20960
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 20961
    ReactElement.isValidElement(children),                                                                             // 20962
    'onlyChild must be passed a children with exactly one child.'                                                      // 20963
  ) : invariant(ReactElement.isValidElement(children)));                                                               // 20964
  return children;                                                                                                     // 20965
}                                                                                                                      // 20966
                                                                                                                       // 20967
module.exports = onlyChild;                                                                                            // 20968
                                                                                                                       // 20969
}).call(this,require('_process'))                                                                                      // 20970
                                                                                                                       // 20971
},{"./ReactElement":"react/lib/ReactElement","./invariant":"react/lib/invariant","_process":1}],"react/lib/performanceNow":[function(require,module,exports){
/**                                                                                                                    // 20973
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20974
 * All rights reserved.                                                                                                // 20975
 *                                                                                                                     // 20976
 * This source code is licensed under the BSD-style license found in the                                               // 20977
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 20978
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 20979
 *                                                                                                                     // 20980
 * @providesModule performanceNow                                                                                      // 20981
 * @typechecks                                                                                                         // 20982
 */                                                                                                                    // 20983
                                                                                                                       // 20984
var performance = require("./performance");                                                                            // 20985
                                                                                                                       // 20986
/**                                                                                                                    // 20987
 * Detect if we can use `window.performance.now()` and gracefully fallback to                                          // 20988
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now                                           // 20989
 * because of Facebook's testing infrastructure.                                                                       // 20990
 */                                                                                                                    // 20991
if (!performance || !performance.now) {                                                                                // 20992
  performance = Date;                                                                                                  // 20993
}                                                                                                                      // 20994
                                                                                                                       // 20995
var performanceNow = performance.now.bind(performance);                                                                // 20996
                                                                                                                       // 20997
module.exports = performanceNow;                                                                                       // 20998
                                                                                                                       // 20999
},{"./performance":"react/lib/performance"}],"react/lib/performance":[function(require,module,exports){                // 21000
/**                                                                                                                    // 21001
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21002
 * All rights reserved.                                                                                                // 21003
 *                                                                                                                     // 21004
 * This source code is licensed under the BSD-style license found in the                                               // 21005
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 21006
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 21007
 *                                                                                                                     // 21008
 * @providesModule performance                                                                                         // 21009
 * @typechecks                                                                                                         // 21010
 */                                                                                                                    // 21011
                                                                                                                       // 21012
"use strict";                                                                                                          // 21013
                                                                                                                       // 21014
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 21015
                                                                                                                       // 21016
var performance;                                                                                                       // 21017
                                                                                                                       // 21018
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 21019
  performance =                                                                                                        // 21020
    window.performance ||                                                                                              // 21021
    window.msPerformance ||                                                                                            // 21022
    window.webkitPerformance;                                                                                          // 21023
}                                                                                                                      // 21024
                                                                                                                       // 21025
module.exports = performance || {};                                                                                    // 21026
                                                                                                                       // 21027
},{"./ExecutionEnvironment":"react/lib/ExecutionEnvironment"}],"react/lib/quoteAttributeValueForBrowser":[function(require,module,exports){
/**                                                                                                                    // 21029
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21030
 * All rights reserved.                                                                                                // 21031
 *                                                                                                                     // 21032
 * This source code is licensed under the BSD-style license found in the                                               // 21033
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 21034
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 21035
 *                                                                                                                     // 21036
 * @providesModule quoteAttributeValueForBrowser                                                                       // 21037
 */                                                                                                                    // 21038
                                                                                                                       // 21039
'use strict';                                                                                                          // 21040
                                                                                                                       // 21041
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");                                            // 21042
                                                                                                                       // 21043
/**                                                                                                                    // 21044
 * Escapes attribute value to prevent scripting attacks.                                                               // 21045
 *                                                                                                                     // 21046
 * @param {*} value Value to escape.                                                                                   // 21047
 * @return {string} An escaped string.                                                                                 // 21048
 */                                                                                                                    // 21049
function quoteAttributeValueForBrowser(value) {                                                                        // 21050
  return '"' + escapeTextContentForBrowser(value) + '"';                                                               // 21051
}                                                                                                                      // 21052
                                                                                                                       // 21053
module.exports = quoteAttributeValueForBrowser;                                                                        // 21054
                                                                                                                       // 21055
},{"./escapeTextContentForBrowser":"react/lib/escapeTextContentForBrowser"}],"react/lib/setInnerHTML":[function(require,module,exports){
/**                                                                                                                    // 21057
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21058
 * All rights reserved.                                                                                                // 21059
 *                                                                                                                     // 21060
 * This source code is licensed under the BSD-style license found in the                                               // 21061
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 21062
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 21063
 *                                                                                                                     // 21064
 * @providesModule setInnerHTML                                                                                        // 21065
 */                                                                                                                    // 21066
                                                                                                                       // 21067
/* globals MSApp */                                                                                                    // 21068
                                                                                                                       // 21069
'use strict';                                                                                                          // 21070
                                                                                                                       // 21071
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 21072
                                                                                                                       // 21073
var WHITESPACE_TEST = /^[ \r\n\t\f]/;                                                                                  // 21074
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;                                          // 21075
                                                                                                                       // 21076
/**                                                                                                                    // 21077
 * Set the innerHTML property of a node, ensuring that whitespace is preserved                                         // 21078
 * even in IE8.                                                                                                        // 21079
 *                                                                                                                     // 21080
 * @param {DOMElement} node                                                                                            // 21081
 * @param {string} html                                                                                                // 21082
 * @internal                                                                                                           // 21083
 */                                                                                                                    // 21084
var setInnerHTML = function(node, html) {                                                                              // 21085
  node.innerHTML = html;                                                                                               // 21086
};                                                                                                                     // 21087
                                                                                                                       // 21088
// Win8 apps: Allow all html to be inserted                                                                            // 21089
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {                                                   // 21090
  setInnerHTML = function(node, html) {                                                                                // 21091
    MSApp.execUnsafeLocalFunction(function() {                                                                         // 21092
      node.innerHTML = html;                                                                                           // 21093
    });                                                                                                                // 21094
  };                                                                                                                   // 21095
}                                                                                                                      // 21096
                                                                                                                       // 21097
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 21098
  // IE8: When updating a just created node with innerHTML only leading                                                // 21099
  // whitespace is removed. When updating an existing node with innerHTML                                              // 21100
  // whitespace in root TextNodes is also collapsed.                                                                   // 21101
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html                                              // 21102
                                                                                                                       // 21103
  // Feature detection; only IE8 is known to behave improperly like this.                                              // 21104
  var testElement = document.createElement('div');                                                                     // 21105
  testElement.innerHTML = ' ';                                                                                         // 21106
  if (testElement.innerHTML === '') {                                                                                  // 21107
    setInnerHTML = function(node, html) {                                                                              // 21108
      // Magic theory: IE8 supposedly differentiates between added and updated                                         // 21109
      // nodes when processing innerHTML, innerHTML on updated nodes suffers                                           // 21110
      // from worse whitespace behavior. Re-adding a node like this triggers                                           // 21111
      // the initial and more favorable whitespace behavior.                                                           // 21112
      // TODO: What to do on a detached node?                                                                          // 21113
      if (node.parentNode) {                                                                                           // 21114
        node.parentNode.replaceChild(node, node);                                                                      // 21115
      }                                                                                                                // 21116
                                                                                                                       // 21117
      // We also implement a workaround for non-visible tags disappearing into                                         // 21118
      // thin air on IE8, this only happens if there is no visible text                                                // 21119
      // in-front of the non-visible tags. Piggyback on the whitespace fix                                             // 21120
      // and simply check if any non-visible tags appear in the source.                                                // 21121
      if (WHITESPACE_TEST.test(html) ||                                                                                // 21122
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {                                                             // 21123
        // Recover leading whitespace by temporarily prepending any character.                                         // 21124
        // \uFEFF has the potential advantage of being zero-width/invisible.                                           // 21125
        node.innerHTML = '\uFEFF' + html;                                                                              // 21126
                                                                                                                       // 21127
        // deleteData leaves an empty `TextNode` which offsets the index of all                                        // 21128
        // children. Definitely want to avoid this.                                                                    // 21129
        var textNode = node.firstChild;                                                                                // 21130
        if (textNode.data.length === 1) {                                                                              // 21131
          node.removeChild(textNode);                                                                                  // 21132
        } else {                                                                                                       // 21133
          textNode.deleteData(0, 1);                                                                                   // 21134
        }                                                                                                              // 21135
      } else {                                                                                                         // 21136
        node.innerHTML = html;                                                                                         // 21137
      }                                                                                                                // 21138
    };                                                                                                                 // 21139
  }                                                                                                                    // 21140
}                                                                                                                      // 21141
                                                                                                                       // 21142
module.exports = setInnerHTML;                                                                                         // 21143
                                                                                                                       // 21144
},{"./ExecutionEnvironment":"react/lib/ExecutionEnvironment"}],"react/lib/setTextContent":[function(require,module,exports){
/**                                                                                                                    // 21146
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21147
 * All rights reserved.                                                                                                // 21148
 *                                                                                                                     // 21149
 * This source code is licensed under the BSD-style license found in the                                               // 21150
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 21151
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 21152
 *                                                                                                                     // 21153
 * @providesModule setTextContent                                                                                      // 21154
 */                                                                                                                    // 21155
                                                                                                                       // 21156
'use strict';                                                                                                          // 21157
                                                                                                                       // 21158
var ExecutionEnvironment = require("./ExecutionEnvironment");                                                          // 21159
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");                                            // 21160
var setInnerHTML = require("./setInnerHTML");                                                                          // 21161
                                                                                                                       // 21162
/**                                                                                                                    // 21163
 * Set the textContent property of a node, ensuring that whitespace is preserved                                       // 21164
 * even in IE8. innerText is a poor substitute for textContent and, among many                                         // 21165
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves                                        // 21166
 * as it should.                                                                                                       // 21167
 *                                                                                                                     // 21168
 * @param {DOMElement} node                                                                                            // 21169
 * @param {string} text                                                                                                // 21170
 * @internal                                                                                                           // 21171
 */                                                                                                                    // 21172
var setTextContent = function(node, text) {                                                                            // 21173
  node.textContent = text;                                                                                             // 21174
};                                                                                                                     // 21175
                                                                                                                       // 21176
if (ExecutionEnvironment.canUseDOM) {                                                                                  // 21177
  if (!('textContent' in document.documentElement)) {                                                                  // 21178
    setTextContent = function(node, text) {                                                                            // 21179
      setInnerHTML(node, escapeTextContentForBrowser(text));                                                           // 21180
    };                                                                                                                 // 21181
  }                                                                                                                    // 21182
}                                                                                                                      // 21183
                                                                                                                       // 21184
module.exports = setTextContent;                                                                                       // 21185
                                                                                                                       // 21186
},{"./ExecutionEnvironment":"react/lib/ExecutionEnvironment","./escapeTextContentForBrowser":"react/lib/escapeTextContentForBrowser","./setInnerHTML":"react/lib/setInnerHTML"}],"react/lib/shallowEqual":[function(require,module,exports){
/**                                                                                                                    // 21188
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21189
 * All rights reserved.                                                                                                // 21190
 *                                                                                                                     // 21191
 * This source code is licensed under the BSD-style license found in the                                               // 21192
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 21193
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 21194
 *                                                                                                                     // 21195
 * @providesModule shallowEqual                                                                                        // 21196
 */                                                                                                                    // 21197
                                                                                                                       // 21198
'use strict';                                                                                                          // 21199
                                                                                                                       // 21200
/**                                                                                                                    // 21201
 * Performs equality by iterating through keys on an object and returning                                              // 21202
 * false when any key has values which are not strictly equal between                                                  // 21203
 * objA and objB. Returns true when the values of all keys are strictly equal.                                         // 21204
 *                                                                                                                     // 21205
 * @return {boolean}                                                                                                   // 21206
 */                                                                                                                    // 21207
function shallowEqual(objA, objB) {                                                                                    // 21208
  if (objA === objB) {                                                                                                 // 21209
    return true;                                                                                                       // 21210
  }                                                                                                                    // 21211
  var key;                                                                                                             // 21212
  // Test for A's keys different from B.                                                                               // 21213
  for (key in objA) {                                                                                                  // 21214
    if (objA.hasOwnProperty(key) &&                                                                                    // 21215
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {                                                      // 21216
      return false;                                                                                                    // 21217
    }                                                                                                                  // 21218
  }                                                                                                                    // 21219
  // Test for B's keys missing from A.                                                                                 // 21220
  for (key in objB) {                                                                                                  // 21221
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {                                                       // 21222
      return false;                                                                                                    // 21223
    }                                                                                                                  // 21224
  }                                                                                                                    // 21225
  return true;                                                                                                         // 21226
}                                                                                                                      // 21227
                                                                                                                       // 21228
module.exports = shallowEqual;                                                                                         // 21229
                                                                                                                       // 21230
},{}],"react/lib/shouldUpdateReactComponent":[function(require,module,exports){                                        // 21231
(function (process){                                                                                                   // 21232
/**                                                                                                                    // 21233
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21234
 * All rights reserved.                                                                                                // 21235
 *                                                                                                                     // 21236
 * This source code is licensed under the BSD-style license found in the                                               // 21237
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 21238
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 21239
 *                                                                                                                     // 21240
 * @providesModule shouldUpdateReactComponent                                                                          // 21241
 * @typechecks static-only                                                                                             // 21242
 */                                                                                                                    // 21243
                                                                                                                       // 21244
'use strict';                                                                                                          // 21245
                                                                                                                       // 21246
var warning = require("./warning");                                                                                    // 21247
                                                                                                                       // 21248
/**                                                                                                                    // 21249
 * Given a `prevElement` and `nextElement`, determines if the existing                                                 // 21250
 * instance should be updated as opposed to being destroyed or replaced by a new                                       // 21251
 * instance. Both arguments are elements. This ensures that this logic can                                             // 21252
 * operate on stateless trees without any backing instance.                                                            // 21253
 *                                                                                                                     // 21254
 * @param {?object} prevElement                                                                                        // 21255
 * @param {?object} nextElement                                                                                        // 21256
 * @return {boolean} True if the existing instance should be updated.                                                  // 21257
 * @protected                                                                                                          // 21258
 */                                                                                                                    // 21259
function shouldUpdateReactComponent(prevElement, nextElement) {                                                        // 21260
  if (prevElement != null && nextElement != null) {                                                                    // 21261
    var prevType = typeof prevElement;                                                                                 // 21262
    var nextType = typeof nextElement;                                                                                 // 21263
    if (prevType === 'string' || prevType === 'number') {                                                              // 21264
      return (nextType === 'string' || nextType === 'number');                                                         // 21265
    } else {                                                                                                           // 21266
      if (nextType === 'object' &&                                                                                     // 21267
          prevElement.type === nextElement.type &&                                                                     // 21268
          prevElement.key === nextElement.key) {                                                                       // 21269
        var ownersMatch = prevElement._owner === nextElement._owner;                                                   // 21270
        var prevName = null;                                                                                           // 21271
        var nextName = null;                                                                                           // 21272
        var nextDisplayName = null;                                                                                    // 21273
        if ("production" !== process.env.NODE_ENV) {                                                                   // 21274
          if (!ownersMatch) {                                                                                          // 21275
            if (prevElement._owner != null &&                                                                          // 21276
                prevElement._owner.getPublicInstance() != null &&                                                      // 21277
                prevElement._owner.getPublicInstance().constructor != null) {                                          // 21278
              prevName =                                                                                               // 21279
                prevElement._owner.getPublicInstance().constructor.displayName;                                        // 21280
            }                                                                                                          // 21281
            if (nextElement._owner != null &&                                                                          // 21282
                nextElement._owner.getPublicInstance() != null &&                                                      // 21283
                nextElement._owner.getPublicInstance().constructor != null) {                                          // 21284
              nextName =                                                                                               // 21285
                nextElement._owner.getPublicInstance().constructor.displayName;                                        // 21286
            }                                                                                                          // 21287
            if (nextElement.type != null &&                                                                            // 21288
                nextElement.type.displayName != null) {                                                                // 21289
              nextDisplayName = nextElement.type.displayName;                                                          // 21290
            }                                                                                                          // 21291
            if (nextElement.type != null && typeof nextElement.type === 'string') {                                    // 21292
              nextDisplayName = nextElement.type;                                                                      // 21293
            }                                                                                                          // 21294
            if (typeof nextElement.type !== 'string' ||                                                                // 21295
                nextElement.type === 'input' ||                                                                        // 21296
                nextElement.type === 'textarea') {                                                                     // 21297
              if ((prevElement._owner != null &&                                                                       // 21298
                  prevElement._owner._isOwnerNecessary === false) ||                                                   // 21299
                  (nextElement._owner != null &&                                                                       // 21300
                  nextElement._owner._isOwnerNecessary === false)) {                                                   // 21301
                if (prevElement._owner != null) {                                                                      // 21302
                  prevElement._owner._isOwnerNecessary = true;                                                         // 21303
                }                                                                                                      // 21304
                if (nextElement._owner != null) {                                                                      // 21305
                  nextElement._owner._isOwnerNecessary = true;                                                         // 21306
                }                                                                                                      // 21307
                ("production" !== process.env.NODE_ENV ? warning(                                                      // 21308
                  false,                                                                                               // 21309
                  '<%s /> is being rendered by both %s and %s using the same ' +                                       // 21310
                  'key (%s) in the same place. Currently, this means that ' +                                          // 21311
                  'they don\'t preserve state. This behavior should be very ' +                                        // 21312
                  'rare so we\'re considering deprecating it. Please contact ' +                                       // 21313
                  'the React team and explain your use case so that we can ' +                                         // 21314
                  'take that into consideration.',                                                                     // 21315
                  nextDisplayName || 'Unknown Component',                                                              // 21316
                  prevName || '[Unknown]',                                                                             // 21317
                  nextName || '[Unknown]',                                                                             // 21318
                  prevElement.key                                                                                      // 21319
                ) : null);                                                                                             // 21320
              }                                                                                                        // 21321
            }                                                                                                          // 21322
          }                                                                                                            // 21323
        }                                                                                                              // 21324
        return ownersMatch;                                                                                            // 21325
      }                                                                                                                // 21326
    }                                                                                                                  // 21327
  }                                                                                                                    // 21328
  return false;                                                                                                        // 21329
}                                                                                                                      // 21330
                                                                                                                       // 21331
module.exports = shouldUpdateReactComponent;                                                                           // 21332
                                                                                                                       // 21333
}).call(this,require('_process'))                                                                                      // 21334
                                                                                                                       // 21335
},{"./warning":"react/lib/warning","_process":1}],"react/lib/toArray":[function(require,module,exports){               // 21336
(function (process){                                                                                                   // 21337
/**                                                                                                                    // 21338
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 21339
 * All rights reserved.                                                                                                // 21340
 *                                                                                                                     // 21341
 * This source code is licensed under the BSD-style license found in the                                               // 21342
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 21343
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 21344
 *                                                                                                                     // 21345
 * @providesModule toArray                                                                                             // 21346
 * @typechecks                                                                                                         // 21347
 */                                                                                                                    // 21348
                                                                                                                       // 21349
var invariant = require("./invariant");                                                                                // 21350
                                                                                                                       // 21351
/**                                                                                                                    // 21352
 * Convert array-like objects to arrays.                                                                               // 21353
 *                                                                                                                     // 21354
 * This API assumes the caller knows the contents of the data type. For less                                           // 21355
 * well defined inputs use createArrayFromMixed.                                                                       // 21356
 *                                                                                                                     // 21357
 * @param {object|function|filelist} obj                                                                               // 21358
 * @return {array}                                                                                                     // 21359
 */                                                                                                                    // 21360
function toArray(obj) {                                                                                                // 21361
  var length = obj.length;                                                                                             // 21362
                                                                                                                       // 21363
  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in                                        // 21364
  // old versions of Safari).                                                                                          // 21365
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 21366
    !Array.isArray(obj) &&                                                                                             // 21367
    (typeof obj === 'object' || typeof obj === 'function'),                                                            // 21368
    'toArray: Array-like object expected'                                                                              // 21369
  ) : invariant(!Array.isArray(obj) &&                                                                                 // 21370
  (typeof obj === 'object' || typeof obj === 'function')));                                                            // 21371
                                                                                                                       // 21372
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 21373
    typeof length === 'number',                                                                                        // 21374
    'toArray: Object needs a length property'                                                                          // 21375
  ) : invariant(typeof length === 'number'));                                                                          // 21376
                                                                                                                       // 21377
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 21378
    length === 0 ||                                                                                                    // 21379
    (length - 1) in obj,                                                                                               // 21380
    'toArray: Object should have keys for indices'                                                                     // 21381
  ) : invariant(length === 0 ||                                                                                        // 21382
  (length - 1) in obj));                                                                                               // 21383
                                                                                                                       // 21384
  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs                                           // 21385
  // without method will throw during the slice call and skip straight to the                                          // 21386
  // fallback.                                                                                                         // 21387
  if (obj.hasOwnProperty) {                                                                                            // 21388
    try {                                                                                                              // 21389
      return Array.prototype.slice.call(obj);                                                                          // 21390
    } catch (e) {                                                                                                      // 21391
      // IE < 9 does not support Array#slice on collections objects                                                    // 21392
    }                                                                                                                  // 21393
  }                                                                                                                    // 21394
                                                                                                                       // 21395
  // Fall back to copying key by key. This assumes all keys have a value,                                              // 21396
  // so will not preserve sparsely populated inputs.                                                                   // 21397
  var ret = Array(length);                                                                                             // 21398
  for (var ii = 0; ii < length; ii++) {                                                                                // 21399
    ret[ii] = obj[ii];                                                                                                 // 21400
  }                                                                                                                    // 21401
  return ret;                                                                                                          // 21402
}                                                                                                                      // 21403
                                                                                                                       // 21404
module.exports = toArray;                                                                                              // 21405
                                                                                                                       // 21406
}).call(this,require('_process'))                                                                                      // 21407
                                                                                                                       // 21408
},{"./invariant":"react/lib/invariant","_process":1}],"react/lib/traverseAllChildren":[function(require,module,exports){
(function (process){                                                                                                   // 21410
/**                                                                                                                    // 21411
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21412
 * All rights reserved.                                                                                                // 21413
 *                                                                                                                     // 21414
 * This source code is licensed under the BSD-style license found in the                                               // 21415
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 21416
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 21417
 *                                                                                                                     // 21418
 * @providesModule traverseAllChildren                                                                                 // 21419
 */                                                                                                                    // 21420
                                                                                                                       // 21421
'use strict';                                                                                                          // 21422
                                                                                                                       // 21423
var ReactElement = require("./ReactElement");                                                                          // 21424
var ReactFragment = require("./ReactFragment");                                                                        // 21425
var ReactInstanceHandles = require("./ReactInstanceHandles");                                                          // 21426
                                                                                                                       // 21427
var getIteratorFn = require("./getIteratorFn");                                                                        // 21428
var invariant = require("./invariant");                                                                                // 21429
var warning = require("./warning");                                                                                    // 21430
                                                                                                                       // 21431
var SEPARATOR = ReactInstanceHandles.SEPARATOR;                                                                        // 21432
var SUBSEPARATOR = ':';                                                                                                // 21433
                                                                                                                       // 21434
/**                                                                                                                    // 21435
 * TODO: Test that a single child and an array with one item have the same key                                         // 21436
 * pattern.                                                                                                            // 21437
 */                                                                                                                    // 21438
                                                                                                                       // 21439
var userProvidedKeyEscaperLookup = {                                                                                   // 21440
  '=': '=0',                                                                                                           // 21441
  '.': '=1',                                                                                                           // 21442
  ':': '=2'                                                                                                            // 21443
};                                                                                                                     // 21444
                                                                                                                       // 21445
var userProvidedKeyEscapeRegex = /[=.:]/g;                                                                             // 21446
                                                                                                                       // 21447
var didWarnAboutMaps = false;                                                                                          // 21448
                                                                                                                       // 21449
function userProvidedKeyEscaper(match) {                                                                               // 21450
  return userProvidedKeyEscaperLookup[match];                                                                          // 21451
}                                                                                                                      // 21452
                                                                                                                       // 21453
/**                                                                                                                    // 21454
 * Generate a key string that identifies a component within a set.                                                     // 21455
 *                                                                                                                     // 21456
 * @param {*} component A component that could contain a manual key.                                                   // 21457
 * @param {number} index Index that is used if a manual key is not provided.                                           // 21458
 * @return {string}                                                                                                    // 21459
 */                                                                                                                    // 21460
function getComponentKey(component, index) {                                                                           // 21461
  if (component && component.key != null) {                                                                            // 21462
    // Explicit key                                                                                                    // 21463
    return wrapUserProvidedKey(component.key);                                                                         // 21464
  }                                                                                                                    // 21465
  // Implicit key determined by the index in the set                                                                   // 21466
  return index.toString(36);                                                                                           // 21467
}                                                                                                                      // 21468
                                                                                                                       // 21469
/**                                                                                                                    // 21470
 * Escape a component key so that it is safe to use in a reactid.                                                      // 21471
 *                                                                                                                     // 21472
 * @param {*} key Component key to be escaped.                                                                         // 21473
 * @return {string} An escaped string.                                                                                 // 21474
 */                                                                                                                    // 21475
function escapeUserProvidedKey(text) {                                                                                 // 21476
  return ('' + text).replace(                                                                                          // 21477
    userProvidedKeyEscapeRegex,                                                                                        // 21478
    userProvidedKeyEscaper                                                                                             // 21479
  );                                                                                                                   // 21480
}                                                                                                                      // 21481
                                                                                                                       // 21482
/**                                                                                                                    // 21483
 * Wrap a `key` value explicitly provided by the user to distinguish it from                                           // 21484
 * implicitly-generated keys generated by a component's index in its parent.                                           // 21485
 *                                                                                                                     // 21486
 * @param {string} key Value of a user-provided `key` attribute                                                        // 21487
 * @return {string}                                                                                                    // 21488
 */                                                                                                                    // 21489
function wrapUserProvidedKey(key) {                                                                                    // 21490
  return '$' + escapeUserProvidedKey(key);                                                                             // 21491
}                                                                                                                      // 21492
                                                                                                                       // 21493
/**                                                                                                                    // 21494
 * @param {?*} children Children tree container.                                                                       // 21495
 * @param {!string} nameSoFar Name of the key path so far.                                                             // 21496
 * @param {!number} indexSoFar Number of children encountered until this point.                                        // 21497
 * @param {!function} callback Callback to invoke with each child found.                                               // 21498
 * @param {?*} traverseContext Used to pass information throughout the traversal                                       // 21499
 * process.                                                                                                            // 21500
 * @return {!number} The number of children in this subtree.                                                           // 21501
 */                                                                                                                    // 21502
function traverseAllChildrenImpl(                                                                                      // 21503
  children,                                                                                                            // 21504
  nameSoFar,                                                                                                           // 21505
  indexSoFar,                                                                                                          // 21506
  callback,                                                                                                            // 21507
  traverseContext                                                                                                      // 21508
) {                                                                                                                    // 21509
  var type = typeof children;                                                                                          // 21510
                                                                                                                       // 21511
  if (type === 'undefined' || type === 'boolean') {                                                                    // 21512
    // All of the above are perceived as null.                                                                         // 21513
    children = null;                                                                                                   // 21514
  }                                                                                                                    // 21515
                                                                                                                       // 21516
  if (children === null ||                                                                                             // 21517
      type === 'string' ||                                                                                             // 21518
      type === 'number' ||                                                                                             // 21519
      ReactElement.isValidElement(children)) {                                                                         // 21520
    callback(                                                                                                          // 21521
      traverseContext,                                                                                                 // 21522
      children,                                                                                                        // 21523
      // If it's the only child, treat the name as if it was wrapped in an array                                       // 21524
      // so that it's consistent if the number of children grows.                                                      // 21525
      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,                                         // 21526
      indexSoFar                                                                                                       // 21527
    );                                                                                                                 // 21528
    return 1;                                                                                                          // 21529
  }                                                                                                                    // 21530
                                                                                                                       // 21531
  var child, nextName, nextIndex;                                                                                      // 21532
  var subtreeCount = 0; // Count of children found in the current subtree.                                             // 21533
                                                                                                                       // 21534
  if (Array.isArray(children)) {                                                                                       // 21535
    for (var i = 0; i < children.length; i++) {                                                                        // 21536
      child = children[i];                                                                                             // 21537
      nextName = (                                                                                                     // 21538
        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +                                                    // 21539
        getComponentKey(child, i)                                                                                      // 21540
      );                                                                                                               // 21541
      nextIndex = indexSoFar + subtreeCount;                                                                           // 21542
      subtreeCount += traverseAllChildrenImpl(                                                                         // 21543
        child,                                                                                                         // 21544
        nextName,                                                                                                      // 21545
        nextIndex,                                                                                                     // 21546
        callback,                                                                                                      // 21547
        traverseContext                                                                                                // 21548
      );                                                                                                               // 21549
    }                                                                                                                  // 21550
  } else {                                                                                                             // 21551
    var iteratorFn = getIteratorFn(children);                                                                          // 21552
    if (iteratorFn) {                                                                                                  // 21553
      var iterator = iteratorFn.call(children);                                                                        // 21554
      var step;                                                                                                        // 21555
      if (iteratorFn !== children.entries) {                                                                           // 21556
        var ii = 0;                                                                                                    // 21557
        while (!(step = iterator.next()).done) {                                                                       // 21558
          child = step.value;                                                                                          // 21559
          nextName = (                                                                                                 // 21560
            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +                                                // 21561
            getComponentKey(child, ii++)                                                                               // 21562
          );                                                                                                           // 21563
          nextIndex = indexSoFar + subtreeCount;                                                                       // 21564
          subtreeCount += traverseAllChildrenImpl(                                                                     // 21565
            child,                                                                                                     // 21566
            nextName,                                                                                                  // 21567
            nextIndex,                                                                                                 // 21568
            callback,                                                                                                  // 21569
            traverseContext                                                                                            // 21570
          );                                                                                                           // 21571
        }                                                                                                              // 21572
      } else {                                                                                                         // 21573
        if ("production" !== process.env.NODE_ENV) {                                                                   // 21574
          ("production" !== process.env.NODE_ENV ? warning(                                                            // 21575
            didWarnAboutMaps,                                                                                          // 21576
            'Using Maps as children is not yet fully supported. It is an ' +                                           // 21577
            'experimental feature that might be removed. Convert it to a ' +                                           // 21578
            'sequence / iterable of keyed ReactElements instead.'                                                      // 21579
          ) : null);                                                                                                   // 21580
          didWarnAboutMaps = true;                                                                                     // 21581
        }                                                                                                              // 21582
        // Iterator will provide entry [k,v] tuples rather than values.                                                // 21583
        while (!(step = iterator.next()).done) {                                                                       // 21584
          var entry = step.value;                                                                                      // 21585
          if (entry) {                                                                                                 // 21586
            child = entry[1];                                                                                          // 21587
            nextName = (                                                                                               // 21588
              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +                                              // 21589
              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +                                                           // 21590
              getComponentKey(child, 0)                                                                                // 21591
            );                                                                                                         // 21592
            nextIndex = indexSoFar + subtreeCount;                                                                     // 21593
            subtreeCount += traverseAllChildrenImpl(                                                                   // 21594
              child,                                                                                                   // 21595
              nextName,                                                                                                // 21596
              nextIndex,                                                                                               // 21597
              callback,                                                                                                // 21598
              traverseContext                                                                                          // 21599
            );                                                                                                         // 21600
          }                                                                                                            // 21601
        }                                                                                                              // 21602
      }                                                                                                                // 21603
    } else if (type === 'object') {                                                                                    // 21604
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 21605
        children.nodeType !== 1,                                                                                       // 21606
        'traverseAllChildren(...): Encountered an invalid child; DOM ' +                                               // 21607
        'elements are not valid children of React components.'                                                         // 21608
      ) : invariant(children.nodeType !== 1));                                                                         // 21609
      var fragment = ReactFragment.extract(children);                                                                  // 21610
      for (var key in fragment) {                                                                                      // 21611
        if (fragment.hasOwnProperty(key)) {                                                                            // 21612
          child = fragment[key];                                                                                       // 21613
          nextName = (                                                                                                 // 21614
            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +                                                // 21615
            wrapUserProvidedKey(key) + SUBSEPARATOR +                                                                  // 21616
            getComponentKey(child, 0)                                                                                  // 21617
          );                                                                                                           // 21618
          nextIndex = indexSoFar + subtreeCount;                                                                       // 21619
          subtreeCount += traverseAllChildrenImpl(                                                                     // 21620
            child,                                                                                                     // 21621
            nextName,                                                                                                  // 21622
            nextIndex,                                                                                                 // 21623
            callback,                                                                                                  // 21624
            traverseContext                                                                                            // 21625
          );                                                                                                           // 21626
        }                                                                                                              // 21627
      }                                                                                                                // 21628
    }                                                                                                                  // 21629
  }                                                                                                                    // 21630
                                                                                                                       // 21631
  return subtreeCount;                                                                                                 // 21632
}                                                                                                                      // 21633
                                                                                                                       // 21634
/**                                                                                                                    // 21635
 * Traverses children that are typically specified as `props.children`, but                                            // 21636
 * might also be specified through attributes:                                                                         // 21637
 *                                                                                                                     // 21638
 * - `traverseAllChildren(this.props.children, ...)`                                                                   // 21639
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`                                                          // 21640
 *                                                                                                                     // 21641
 * The `traverseContext` is an optional argument that is passed through the                                            // 21642
 * entire traversal. It can be used to store accumulations or anything else that                                       // 21643
 * the callback might find relevant.                                                                                   // 21644
 *                                                                                                                     // 21645
 * @param {?*} children Children tree object.                                                                          // 21646
 * @param {!function} callback To invoke upon traversing each child.                                                   // 21647
 * @param {?*} traverseContext Context for traversal.                                                                  // 21648
 * @return {!number} The number of children in this subtree.                                                           // 21649
 */                                                                                                                    // 21650
function traverseAllChildren(children, callback, traverseContext) {                                                    // 21651
  if (children == null) {                                                                                              // 21652
    return 0;                                                                                                          // 21653
  }                                                                                                                    // 21654
                                                                                                                       // 21655
  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);                                          // 21656
}                                                                                                                      // 21657
                                                                                                                       // 21658
module.exports = traverseAllChildren;                                                                                  // 21659
                                                                                                                       // 21660
}).call(this,require('_process'))                                                                                      // 21661
                                                                                                                       // 21662
},{"./ReactElement":"react/lib/ReactElement","./ReactFragment":"react/lib/ReactFragment","./ReactInstanceHandles":"react/lib/ReactInstanceHandles","./getIteratorFn":"react/lib/getIteratorFn","./invariant":"react/lib/invariant","./warning":"react/lib/warning","_process":1}],"react/lib/update":[function(require,module,exports){
(function (process){                                                                                                   // 21664
/**                                                                                                                    // 21665
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21666
 * All rights reserved.                                                                                                // 21667
 *                                                                                                                     // 21668
 * This source code is licensed under the BSD-style license found in the                                               // 21669
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 21670
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 21671
 *                                                                                                                     // 21672
 * @providesModule update                                                                                              // 21673
 */                                                                                                                    // 21674
                                                                                                                       // 21675
 /* global hasOwnProperty:true */                                                                                      // 21676
                                                                                                                       // 21677
'use strict';                                                                                                          // 21678
                                                                                                                       // 21679
var assign = require("./Object.assign");                                                                               // 21680
var keyOf = require("./keyOf");                                                                                        // 21681
var invariant = require("./invariant");                                                                                // 21682
var hasOwnProperty = {}.hasOwnProperty;                                                                                // 21683
                                                                                                                       // 21684
function shallowCopy(x) {                                                                                              // 21685
  if (Array.isArray(x)) {                                                                                              // 21686
    return x.concat();                                                                                                 // 21687
  } else if (x && typeof x === 'object') {                                                                             // 21688
    return assign(new x.constructor(), x);                                                                             // 21689
  } else {                                                                                                             // 21690
    return x;                                                                                                          // 21691
  }                                                                                                                    // 21692
}                                                                                                                      // 21693
                                                                                                                       // 21694
var COMMAND_PUSH = keyOf({$push: null});                                                                               // 21695
var COMMAND_UNSHIFT = keyOf({$unshift: null});                                                                         // 21696
var COMMAND_SPLICE = keyOf({$splice: null});                                                                           // 21697
var COMMAND_SET = keyOf({$set: null});                                                                                 // 21698
var COMMAND_MERGE = keyOf({$merge: null});                                                                             // 21699
var COMMAND_APPLY = keyOf({$apply: null});                                                                             // 21700
                                                                                                                       // 21701
var ALL_COMMANDS_LIST = [                                                                                              // 21702
  COMMAND_PUSH,                                                                                                        // 21703
  COMMAND_UNSHIFT,                                                                                                     // 21704
  COMMAND_SPLICE,                                                                                                      // 21705
  COMMAND_SET,                                                                                                         // 21706
  COMMAND_MERGE,                                                                                                       // 21707
  COMMAND_APPLY                                                                                                        // 21708
];                                                                                                                     // 21709
                                                                                                                       // 21710
var ALL_COMMANDS_SET = {};                                                                                             // 21711
                                                                                                                       // 21712
ALL_COMMANDS_LIST.forEach(function(command) {                                                                          // 21713
  ALL_COMMANDS_SET[command] = true;                                                                                    // 21714
});                                                                                                                    // 21715
                                                                                                                       // 21716
function invariantArrayCase(value, spec, command) {                                                                    // 21717
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 21718
    Array.isArray(value),                                                                                              // 21719
    'update(): expected target of %s to be an array; got %s.',                                                         // 21720
    command,                                                                                                           // 21721
    value                                                                                                              // 21722
  ) : invariant(Array.isArray(value)));                                                                                // 21723
  var specValue = spec[command];                                                                                       // 21724
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 21725
    Array.isArray(specValue),                                                                                          // 21726
    'update(): expected spec of %s to be an array; got %s. ' +                                                         // 21727
    'Did you forget to wrap your parameter in an array?',                                                              // 21728
    command,                                                                                                           // 21729
    specValue                                                                                                          // 21730
  ) : invariant(Array.isArray(specValue)));                                                                            // 21731
}                                                                                                                      // 21732
                                                                                                                       // 21733
function update(value, spec) {                                                                                         // 21734
  ("production" !== process.env.NODE_ENV ? invariant(                                                                  // 21735
    typeof spec === 'object',                                                                                          // 21736
    'update(): You provided a key path to update() that did not contain one ' +                                        // 21737
    'of %s. Did you forget to include {%s: ...}?',                                                                     // 21738
    ALL_COMMANDS_LIST.join(', '),                                                                                      // 21739
    COMMAND_SET                                                                                                        // 21740
  ) : invariant(typeof spec === 'object'));                                                                            // 21741
                                                                                                                       // 21742
  if (hasOwnProperty.call(spec, COMMAND_SET)) {                                                                        // 21743
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 21744
      Object.keys(spec).length === 1,                                                                                  // 21745
      'Cannot have more than one key in an object with %s',                                                            // 21746
      COMMAND_SET                                                                                                      // 21747
    ) : invariant(Object.keys(spec).length === 1));                                                                    // 21748
                                                                                                                       // 21749
    return spec[COMMAND_SET];                                                                                          // 21750
  }                                                                                                                    // 21751
                                                                                                                       // 21752
  var nextValue = shallowCopy(value);                                                                                  // 21753
                                                                                                                       // 21754
  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {                                                                      // 21755
    var mergeObj = spec[COMMAND_MERGE];                                                                                // 21756
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 21757
      mergeObj && typeof mergeObj === 'object',                                                                        // 21758
      'update(): %s expects a spec of type \'object\'; got %s',                                                        // 21759
      COMMAND_MERGE,                                                                                                   // 21760
      mergeObj                                                                                                         // 21761
    ) : invariant(mergeObj && typeof mergeObj === 'object'));                                                          // 21762
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 21763
      nextValue && typeof nextValue === 'object',                                                                      // 21764
      'update(): %s expects a target of type \'object\'; got %s',                                                      // 21765
      COMMAND_MERGE,                                                                                                   // 21766
      nextValue                                                                                                        // 21767
    ) : invariant(nextValue && typeof nextValue === 'object'));                                                        // 21768
    assign(nextValue, spec[COMMAND_MERGE]);                                                                            // 21769
  }                                                                                                                    // 21770
                                                                                                                       // 21771
  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {                                                                       // 21772
    invariantArrayCase(value, spec, COMMAND_PUSH);                                                                     // 21773
    spec[COMMAND_PUSH].forEach(function(item) {                                                                        // 21774
      nextValue.push(item);                                                                                            // 21775
    });                                                                                                                // 21776
  }                                                                                                                    // 21777
                                                                                                                       // 21778
  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {                                                                    // 21779
    invariantArrayCase(value, spec, COMMAND_UNSHIFT);                                                                  // 21780
    spec[COMMAND_UNSHIFT].forEach(function(item) {                                                                     // 21781
      nextValue.unshift(item);                                                                                         // 21782
    });                                                                                                                // 21783
  }                                                                                                                    // 21784
                                                                                                                       // 21785
  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {                                                                     // 21786
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 21787
      Array.isArray(value),                                                                                            // 21788
      'Expected %s target to be an array; got %s',                                                                     // 21789
      COMMAND_SPLICE,                                                                                                  // 21790
      value                                                                                                            // 21791
    ) : invariant(Array.isArray(value)));                                                                              // 21792
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 21793
      Array.isArray(spec[COMMAND_SPLICE]),                                                                             // 21794
      'update(): expected spec of %s to be an array of arrays; got %s. ' +                                             // 21795
      'Did you forget to wrap your parameters in an array?',                                                           // 21796
      COMMAND_SPLICE,                                                                                                  // 21797
      spec[COMMAND_SPLICE]                                                                                             // 21798
    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));                                                               // 21799
    spec[COMMAND_SPLICE].forEach(function(args) {                                                                      // 21800
      ("production" !== process.env.NODE_ENV ? invariant(                                                              // 21801
        Array.isArray(args),                                                                                           // 21802
        'update(): expected spec of %s to be an array of arrays; got %s. ' +                                           // 21803
        'Did you forget to wrap your parameters in an array?',                                                         // 21804
        COMMAND_SPLICE,                                                                                                // 21805
        spec[COMMAND_SPLICE]                                                                                           // 21806
      ) : invariant(Array.isArray(args)));                                                                             // 21807
      nextValue.splice.apply(nextValue, args);                                                                         // 21808
    });                                                                                                                // 21809
  }                                                                                                                    // 21810
                                                                                                                       // 21811
  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {                                                                      // 21812
    ("production" !== process.env.NODE_ENV ? invariant(                                                                // 21813
      typeof spec[COMMAND_APPLY] === 'function',                                                                       // 21814
      'update(): expected spec of %s to be a function; got %s.',                                                       // 21815
      COMMAND_APPLY,                                                                                                   // 21816
      spec[COMMAND_APPLY]                                                                                              // 21817
    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));                                                         // 21818
    nextValue = spec[COMMAND_APPLY](nextValue);                                                                        // 21819
  }                                                                                                                    // 21820
                                                                                                                       // 21821
  for (var k in spec) {                                                                                                // 21822
    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {                                                // 21823
      nextValue[k] = update(value[k], spec[k]);                                                                        // 21824
    }                                                                                                                  // 21825
  }                                                                                                                    // 21826
                                                                                                                       // 21827
  return nextValue;                                                                                                    // 21828
}                                                                                                                      // 21829
                                                                                                                       // 21830
module.exports = update;                                                                                               // 21831
                                                                                                                       // 21832
}).call(this,require('_process'))                                                                                      // 21833
                                                                                                                       // 21834
},{"./Object.assign":"react/lib/Object.assign","./invariant":"react/lib/invariant","./keyOf":"react/lib/keyOf","_process":1}],"react/lib/warning":[function(require,module,exports){
(function (process){                                                                                                   // 21836
/**                                                                                                                    // 21837
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 21838
 * All rights reserved.                                                                                                // 21839
 *                                                                                                                     // 21840
 * This source code is licensed under the BSD-style license found in the                                               // 21841
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 21842
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 21843
 *                                                                                                                     // 21844
 * @providesModule warning                                                                                             // 21845
 */                                                                                                                    // 21846
                                                                                                                       // 21847
"use strict";                                                                                                          // 21848
                                                                                                                       // 21849
var emptyFunction = require("./emptyFunction");                                                                        // 21850
                                                                                                                       // 21851
/**                                                                                                                    // 21852
 * Similar to invariant but only logs a warning if the condition is not met.                                           // 21853
 * This can be used to log issues in development environments in critical                                              // 21854
 * paths. Removing the logging code for production environments will keep the                                          // 21855
 * same logic and follow the same code paths.                                                                          // 21856
 */                                                                                                                    // 21857
                                                                                                                       // 21858
var warning = emptyFunction;                                                                                           // 21859
                                                                                                                       // 21860
if ("production" !== process.env.NODE_ENV) {                                                                           // 21861
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {                                                                                        // 21863
      throw new Error(                                                                                                 // 21864
        '`warning(condition, format, ...args)` requires a warning ' +                                                  // 21865
        'message argument'                                                                                             // 21866
      );                                                                                                               // 21867
    }                                                                                                                  // 21868
                                                                                                                       // 21869
    if (format.length < 10 || /^[s\W]*$/.test(format)) {                                                               // 21870
      throw new Error(                                                                                                 // 21871
        'The warning format should be able to uniquely identify this ' +                                               // 21872
        'warning. Please, use a more descriptive format than: ' + format                                               // 21873
      );                                                                                                               // 21874
    }                                                                                                                  // 21875
                                                                                                                       // 21876
    if (format.indexOf('Failed Composite propType: ') === 0) {                                                         // 21877
      return; // Ignore CompositeComponent proptype check.                                                             // 21878
    }                                                                                                                  // 21879
                                                                                                                       // 21880
    if (!condition) {                                                                                                  // 21881
      var argIndex = 0;                                                                                                // 21882
      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});                       // 21883
      console.warn(message);                                                                                           // 21884
      try {                                                                                                            // 21885
        // --- Welcome to debugging React ---                                                                          // 21886
        // This error was thrown as a convenience so that you can use this stack                                       // 21887
        // to find the callsite that caused this warning to fire.                                                      // 21888
        throw new Error(message);                                                                                      // 21889
      } catch(x) {}                                                                                                    // 21890
    }                                                                                                                  // 21891
  };                                                                                                                   // 21892
}                                                                                                                      // 21893
                                                                                                                       // 21894
module.exports = warning;                                                                                              // 21895
                                                                                                                       // 21896
}).call(this,require('_process'))                                                                                      // 21897
                                                                                                                       // 21898
},{"./emptyFunction":"react/lib/emptyFunction","_process":1}],"react":[function(require,module,exports){               // 21899
module.exports = require('./lib/React');                                                                               // 21900
                                                                                                                       // 21901
},{"./lib/React":"react/lib/React"}]},{},[2])                                                                          // 21902
//# sourceMappingURL=react-runtime-dev/react.browserify.js                                                             // 21903
                                                                                                                       // 21904
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/react-runtime-dev/attach-require.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
React.require = require;                                                                                               // 1
ReactDev = React;                                                                                                      // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['react-runtime-dev'] = {
  ReactDev: ReactDev
};

})();
