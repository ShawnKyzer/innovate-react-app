[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar Object_create, Object_freeze, require, React, ReactDev;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/react-runtime-dev/detect-shims.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// React contains this code, but it doesn't run it soon enough to be helpful.                                          // 1\n// Also, this way we get to print a meteor-specific error message, though                                              // 2\n// in addition we modify React's error message with a search-and-replace in                                            // 3\n// the Browserify options.                                                                                             // 4\n                                                                                                                       // 5\nvar expectedFeatures = [                                                                                               // 6\n  Array.isArray,                                                                                                       // 7\n  Array.prototype.every,                                                                                               // 8\n  Array.prototype.forEach,                                                                                             // 9\n  Array.prototype.indexOf,                                                                                             // 10\n  Array.prototype.map,                                                                                                 // 11\n  Date.now,                                                                                                            // 12\n  Function.prototype.bind,                                                                                             // 13\n  Object.keys,                                                                                                         // 14\n  String.prototype.split,                                                                                              // 15\n  String.prototype.trim                                                                                                // 16\n];                                                                                                                     // 17\n                                                                                                                       // 18\nfor (var i = 0; i < expectedFeatures.length; i++) {                                                                    // 19\n  if (!expectedFeatures[i]) {                                                                                          // 20\n    console.error(                                                                                                     // 21\n      'One or more ES5 shims expected by React are not available: ' +                                                  // 22\n        'Add the es5-shim package with `meteor add es5-shim`'                                                          // 23\n    );                                                                                                                 // 24\n    break;                                                                                                             // 25\n  }                                                                                                                    // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/react-runtime-dev/shams.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This file is duplicated between react-runtime-prod and react-runtime-dev,                                           // 1\n// so be sure to keep them in sync.                                                                                    // 2\n//                                                                                                                     // 3\n// These private helpers that approximate Object.create and Object.freeze,                                             // 4\n// in conjunction with a browserify transform that does a search-and-replace                                           // 5\n// on the React code, remove React's dependence on es5-sham.  See also                                                 // 6\n// https://github.com/facebook/react/issues/4189.                                                                      // 7\n                                                                                                                       // 8\nObject_create = (Object.create || function (proto, props) {                                                            // 9\n  if (proto === null) {                                                                                                // 10\n    throw new Error(\"This sham does not support Object.create(null)\");                                                 // 11\n  } else if (props) {                                                                                                  // 12\n    throw new Error(\"This sham does not support Object.create(..., props)\");                                           // 13\n  }                                                                                                                    // 14\n                                                                                                                       // 15\n  var Type = function Type() {}; // An empty constructor.                                                              // 16\n  Type.prototype = proto;                                                                                              // 17\n  return new Type();                                                                                                   // 18\n});                                                                                                                    // 19\n                                                                                                                       // 20\nObject_freeze = (Object.freeze || function (obj) { return obj; });                                                     // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/react-runtime-dev/react.browserify.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// shim for using process in browser                                                                                   // 2\n                                                                                                                       // 3\nvar process = module.exports = {};                                                                                     // 4\nvar queue = [];                                                                                                        // 5\nvar draining = false;                                                                                                  // 6\n                                                                                                                       // 7\nfunction drainQueue() {                                                                                                // 8\n    if (draining) {                                                                                                    // 9\n        return;                                                                                                        // 10\n    }                                                                                                                  // 11\n    draining = true;                                                                                                   // 12\n    var currentQueue;                                                                                                  // 13\n    var len = queue.length;                                                                                            // 14\n    while(len) {                                                                                                       // 15\n        currentQueue = queue;                                                                                          // 16\n        queue = [];                                                                                                    // 17\n        var i = -1;                                                                                                    // 18\n        while (++i < len) {                                                                                            // 19\n            currentQueue[i]();                                                                                         // 20\n        }                                                                                                              // 21\n        len = queue.length;                                                                                            // 22\n    }                                                                                                                  // 23\n    draining = false;                                                                                                  // 24\n}                                                                                                                      // 25\nprocess.nextTick = function (fun) {                                                                                    // 26\n    queue.push(fun);                                                                                                   // 27\n    if (!draining) {                                                                                                   // 28\n        setTimeout(drainQueue, 0);                                                                                     // 29\n    }                                                                                                                  // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\nprocess.title = 'browser';                                                                                             // 33\nprocess.browser = true;                                                                                                // 34\nprocess.env = {};                                                                                                      // 35\nprocess.argv = [];                                                                                                     // 36\nprocess.version = ''; // empty string to avoid regexp issues                                                           // 37\nprocess.versions = {};                                                                                                 // 38\n                                                                                                                       // 39\nfunction noop() {}                                                                                                     // 40\n                                                                                                                       // 41\nprocess.on = noop;                                                                                                     // 42\nprocess.addListener = noop;                                                                                            // 43\nprocess.once = noop;                                                                                                   // 44\nprocess.off = noop;                                                                                                    // 45\nprocess.removeListener = noop;                                                                                         // 46\nprocess.removeAllListeners = noop;                                                                                     // 47\nprocess.emit = noop;                                                                                                   // 48\n                                                                                                                       // 49\nprocess.binding = function (name) {                                                                                    // 50\n    throw new Error('process.binding is not supported');                                                               // 51\n};                                                                                                                     // 52\n                                                                                                                       // 53\n// TODO(shtylman)                                                                                                      // 54\nprocess.cwd = function () { return '/' };                                                                              // 55\nprocess.chdir = function (dir) {                                                                                       // 56\n    throw new Error('process.chdir is not supported');                                                                 // 57\n};                                                                                                                     // 58\nprocess.umask = function() { return 0; };                                                                              // 59\n                                                                                                                       // 60\n},{}],2:[function(require,module,exports){                                                                             // 61\nReact = require(\"react/addons\");                                                                                       // 62\n                                                                                                                       // 63\n},{\"react/addons\":\"react/addons\"}],\"react/addons\":[function(require,module,exports){                                   // 64\nmodule.exports = require('./lib/ReactWithAddons');                                                                     // 65\n                                                                                                                       // 66\n},{\"./lib/ReactWithAddons\":\"react/lib/ReactWithAddons\"}],\"react/lib/AutoFocusMixin\":[function(require,module,exports){\n/**                                                                                                                    // 68\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 69\n * All rights reserved.                                                                                                // 70\n *                                                                                                                     // 71\n * This source code is licensed under the BSD-style license found in the                                               // 72\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 73\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 74\n *                                                                                                                     // 75\n * @providesModule AutoFocusMixin                                                                                      // 76\n * @typechecks static-only                                                                                             // 77\n */                                                                                                                    // 78\n                                                                                                                       // 79\n'use strict';                                                                                                          // 80\n                                                                                                                       // 81\nvar focusNode = require(\"./focusNode\");                                                                                // 82\n                                                                                                                       // 83\nvar AutoFocusMixin = {                                                                                                 // 84\n  componentDidMount: function() {                                                                                      // 85\n    if (this.props.autoFocus) {                                                                                        // 86\n      focusNode(this.getDOMNode());                                                                                    // 87\n    }                                                                                                                  // 88\n  }                                                                                                                    // 89\n};                                                                                                                     // 90\n                                                                                                                       // 91\nmodule.exports = AutoFocusMixin;                                                                                       // 92\n                                                                                                                       // 93\n},{\"./focusNode\":\"react/lib/focusNode\"}],\"react/lib/BeforeInputEventPlugin\":[function(require,module,exports){         // 94\n/**                                                                                                                    // 95\n * Copyright 2013-2015 Facebook, Inc.                                                                                  // 96\n * All rights reserved.                                                                                                // 97\n *                                                                                                                     // 98\n * This source code is licensed under the BSD-style license found in the                                               // 99\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 100\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 101\n *                                                                                                                     // 102\n * @providesModule BeforeInputEventPlugin                                                                              // 103\n * @typechecks static-only                                                                                             // 104\n */                                                                                                                    // 105\n                                                                                                                       // 106\n'use strict';                                                                                                          // 107\n                                                                                                                       // 108\nvar EventConstants = require(\"./EventConstants\");                                                                      // 109\nvar EventPropagators = require(\"./EventPropagators\");                                                                  // 110\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 111\nvar FallbackCompositionState = require(\"./FallbackCompositionState\");                                                  // 112\nvar SyntheticCompositionEvent = require(\"./SyntheticCompositionEvent\");                                                // 113\nvar SyntheticInputEvent = require(\"./SyntheticInputEvent\");                                                            // 114\n                                                                                                                       // 115\nvar keyOf = require(\"./keyOf\");                                                                                        // 116\n                                                                                                                       // 117\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space                                                         // 118\nvar START_KEYCODE = 229;                                                                                               // 119\n                                                                                                                       // 120\nvar canUseCompositionEvent = (                                                                                         // 121\n  ExecutionEnvironment.canUseDOM &&                                                                                    // 122\n  'CompositionEvent' in window                                                                                         // 123\n);                                                                                                                     // 124\n                                                                                                                       // 125\nvar documentMode = null;                                                                                               // 126\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {                                                    // 127\n  documentMode = document.documentMode;                                                                                // 128\n}                                                                                                                      // 129\n                                                                                                                       // 130\n// Webkit offers a very useful `textInput` event that can be used to                                                   // 131\n// directly represent `beforeInput`. The IE `textinput` event is not as                                                // 132\n// useful, so we don't use it.                                                                                         // 133\nvar canUseTextInputEvent = (                                                                                           // 134\n  ExecutionEnvironment.canUseDOM &&                                                                                    // 135\n  'TextEvent' in window &&                                                                                             // 136\n  !documentMode &&                                                                                                     // 137\n  !isPresto()                                                                                                          // 138\n);                                                                                                                     // 139\n                                                                                                                       // 140\n// In IE9+, we have access to composition events, but the data supplied                                                // 141\n// by the native compositionend event may be incorrect. Japanese ideographic                                           // 142\n// spaces, for instance (\\u3000) are not recorded correctly.                                                           // 143\nvar useFallbackCompositionData = (                                                                                     // 144\n  ExecutionEnvironment.canUseDOM &&                                                                                    // 145\n  (                                                                                                                    // 146\n    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)                                // 147\n  )                                                                                                                    // 148\n);                                                                                                                     // 149\n                                                                                                                       // 150\n/**                                                                                                                    // 151\n * Opera <= 12 includes TextEvent in window, but does not fire                                                         // 152\n * text input events. Rely on keypress instead.                                                                        // 153\n */                                                                                                                    // 154\nfunction isPresto() {                                                                                                  // 155\n  var opera = window.opera;                                                                                            // 156\n  return (                                                                                                             // 157\n    typeof opera === 'object' &&                                                                                       // 158\n    typeof opera.version === 'function' &&                                                                             // 159\n    parseInt(opera.version(), 10) <= 12                                                                                // 160\n  );                                                                                                                   // 161\n}                                                                                                                      // 162\n                                                                                                                       // 163\nvar SPACEBAR_CODE = 32;                                                                                                // 164\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);                                                                // 165\n                                                                                                                       // 166\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 167\n                                                                                                                       // 168\n// Events and their corresponding property names.                                                                      // 169\nvar eventTypes = {                                                                                                     // 170\n  beforeInput: {                                                                                                       // 171\n    phasedRegistrationNames: {                                                                                         // 172\n      bubbled: keyOf({onBeforeInput: null}),                                                                           // 173\n      captured: keyOf({onBeforeInputCapture: null})                                                                    // 174\n    },                                                                                                                 // 175\n    dependencies: [                                                                                                    // 176\n      topLevelTypes.topCompositionEnd,                                                                                 // 177\n      topLevelTypes.topKeyPress,                                                                                       // 178\n      topLevelTypes.topTextInput,                                                                                      // 179\n      topLevelTypes.topPaste                                                                                           // 180\n    ]                                                                                                                  // 181\n  },                                                                                                                   // 182\n  compositionEnd: {                                                                                                    // 183\n    phasedRegistrationNames: {                                                                                         // 184\n      bubbled: keyOf({onCompositionEnd: null}),                                                                        // 185\n      captured: keyOf({onCompositionEndCapture: null})                                                                 // 186\n    },                                                                                                                 // 187\n    dependencies: [                                                                                                    // 188\n      topLevelTypes.topBlur,                                                                                           // 189\n      topLevelTypes.topCompositionEnd,                                                                                 // 190\n      topLevelTypes.topKeyDown,                                                                                        // 191\n      topLevelTypes.topKeyPress,                                                                                       // 192\n      topLevelTypes.topKeyUp,                                                                                          // 193\n      topLevelTypes.topMouseDown                                                                                       // 194\n    ]                                                                                                                  // 195\n  },                                                                                                                   // 196\n  compositionStart: {                                                                                                  // 197\n    phasedRegistrationNames: {                                                                                         // 198\n      bubbled: keyOf({onCompositionStart: null}),                                                                      // 199\n      captured: keyOf({onCompositionStartCapture: null})                                                               // 200\n    },                                                                                                                 // 201\n    dependencies: [                                                                                                    // 202\n      topLevelTypes.topBlur,                                                                                           // 203\n      topLevelTypes.topCompositionStart,                                                                               // 204\n      topLevelTypes.topKeyDown,                                                                                        // 205\n      topLevelTypes.topKeyPress,                                                                                       // 206\n      topLevelTypes.topKeyUp,                                                                                          // 207\n      topLevelTypes.topMouseDown                                                                                       // 208\n    ]                                                                                                                  // 209\n  },                                                                                                                   // 210\n  compositionUpdate: {                                                                                                 // 211\n    phasedRegistrationNames: {                                                                                         // 212\n      bubbled: keyOf({onCompositionUpdate: null}),                                                                     // 213\n      captured: keyOf({onCompositionUpdateCapture: null})                                                              // 214\n    },                                                                                                                 // 215\n    dependencies: [                                                                                                    // 216\n      topLevelTypes.topBlur,                                                                                           // 217\n      topLevelTypes.topCompositionUpdate,                                                                              // 218\n      topLevelTypes.topKeyDown,                                                                                        // 219\n      topLevelTypes.topKeyPress,                                                                                       // 220\n      topLevelTypes.topKeyUp,                                                                                          // 221\n      topLevelTypes.topMouseDown                                                                                       // 222\n    ]                                                                                                                  // 223\n  }                                                                                                                    // 224\n};                                                                                                                     // 225\n                                                                                                                       // 226\n// Track whether we've ever handled a keypress on the space key.                                                       // 227\nvar hasSpaceKeypress = false;                                                                                          // 228\n                                                                                                                       // 229\n/**                                                                                                                    // 230\n * Return whether a native keypress event is assumed to be a command.                                                  // 231\n * This is required because Firefox fires `keypress` events for key commands                                           // 232\n * (cut, copy, select-all, etc.) even though no character is inserted.                                                 // 233\n */                                                                                                                    // 234\nfunction isKeypressCommand(nativeEvent) {                                                                              // 235\n  return (                                                                                                             // 236\n    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&                                              // 237\n    // ctrlKey && altKey is equivalent to AltGr, and is not a command.                                                 // 238\n    !(nativeEvent.ctrlKey && nativeEvent.altKey)                                                                       // 239\n  );                                                                                                                   // 240\n}                                                                                                                      // 241\n                                                                                                                       // 242\n                                                                                                                       // 243\n/**                                                                                                                    // 244\n * Translate native top level events into event types.                                                                 // 245\n *                                                                                                                     // 246\n * @param {string} topLevelType                                                                                        // 247\n * @return {object}                                                                                                    // 248\n */                                                                                                                    // 249\nfunction getCompositionEventType(topLevelType) {                                                                       // 250\n  switch (topLevelType) {                                                                                              // 251\n    case topLevelTypes.topCompositionStart:                                                                            // 252\n      return eventTypes.compositionStart;                                                                              // 253\n    case topLevelTypes.topCompositionEnd:                                                                              // 254\n      return eventTypes.compositionEnd;                                                                                // 255\n    case topLevelTypes.topCompositionUpdate:                                                                           // 256\n      return eventTypes.compositionUpdate;                                                                             // 257\n  }                                                                                                                    // 258\n}                                                                                                                      // 259\n                                                                                                                       // 260\n/**                                                                                                                    // 261\n * Does our fallback best-guess model think this event signifies that                                                  // 262\n * composition has begun?                                                                                              // 263\n *                                                                                                                     // 264\n * @param {string} topLevelType                                                                                        // 265\n * @param {object} nativeEvent                                                                                         // 266\n * @return {boolean}                                                                                                   // 267\n */                                                                                                                    // 268\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {                                                       // 269\n  return (                                                                                                             // 270\n    topLevelType === topLevelTypes.topKeyDown &&                                                                       // 271\n    nativeEvent.keyCode === START_KEYCODE                                                                              // 272\n  );                                                                                                                   // 273\n}                                                                                                                      // 274\n                                                                                                                       // 275\n/**                                                                                                                    // 276\n * Does our fallback mode think that this event is the end of composition?                                             // 277\n *                                                                                                                     // 278\n * @param {string} topLevelType                                                                                        // 279\n * @param {object} nativeEvent                                                                                         // 280\n * @return {boolean}                                                                                                   // 281\n */                                                                                                                    // 282\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {                                                         // 283\n  switch (topLevelType) {                                                                                              // 284\n    case topLevelTypes.topKeyUp:                                                                                       // 285\n      // Command keys insert or clear IME input.                                                                       // 286\n      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);                                                       // 287\n    case topLevelTypes.topKeyDown:                                                                                     // 288\n      // Expect IME keyCode on each keydown. If we get any other                                                       // 289\n      // code we must have exited earlier.                                                                             // 290\n      return (nativeEvent.keyCode !== START_KEYCODE);                                                                  // 291\n    case topLevelTypes.topKeyPress:                                                                                    // 292\n    case topLevelTypes.topMouseDown:                                                                                   // 293\n    case topLevelTypes.topBlur:                                                                                        // 294\n      // Events are not possible without cancelling IME.                                                               // 295\n      return true;                                                                                                     // 296\n    default:                                                                                                           // 297\n      return false;                                                                                                    // 298\n  }                                                                                                                    // 299\n}                                                                                                                      // 300\n                                                                                                                       // 301\n/**                                                                                                                    // 302\n * Google Input Tools provides composition data via a CustomEvent,                                                     // 303\n * with the `data` property populated in the `detail` object. If this                                                  // 304\n * is available on the event object, use it. If not, this is a plain                                                   // 305\n * composition event and we have nothing special to extract.                                                           // 306\n *                                                                                                                     // 307\n * @param {object} nativeEvent                                                                                         // 308\n * @return {?string}                                                                                                   // 309\n */                                                                                                                    // 310\nfunction getDataFromCustomEvent(nativeEvent) {                                                                         // 311\n  var detail = nativeEvent.detail;                                                                                     // 312\n  if (typeof detail === 'object' && 'data' in detail) {                                                                // 313\n    return detail.data;                                                                                                // 314\n  }                                                                                                                    // 315\n  return null;                                                                                                         // 316\n}                                                                                                                      // 317\n                                                                                                                       // 318\n// Track the current IME composition fallback object, if any.                                                          // 319\nvar currentComposition = null;                                                                                         // 320\n                                                                                                                       // 321\n/**                                                                                                                    // 322\n * @param {string} topLevelType Record from `EventConstants`.                                                          // 323\n * @param {DOMEventTarget} topLevelTarget The listening component root node.                                           // 324\n * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                            // 325\n * @param {object} nativeEvent Native browser event.                                                                   // 326\n * @return {?object} A SyntheticCompositionEvent.                                                                      // 327\n */                                                                                                                    // 328\nfunction extractCompositionEvent(                                                                                      // 329\n  topLevelType,                                                                                                        // 330\n  topLevelTarget,                                                                                                      // 331\n  topLevelTargetID,                                                                                                    // 332\n  nativeEvent                                                                                                          // 333\n) {                                                                                                                    // 334\n  var eventType;                                                                                                       // 335\n  var fallbackData;                                                                                                    // 336\n                                                                                                                       // 337\n  if (canUseCompositionEvent) {                                                                                        // 338\n    eventType = getCompositionEventType(topLevelType);                                                                 // 339\n  } else if (!currentComposition) {                                                                                    // 340\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {                                                       // 341\n      eventType = eventTypes.compositionStart;                                                                         // 342\n    }                                                                                                                  // 343\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {                                                    // 344\n    eventType = eventTypes.compositionEnd;                                                                             // 345\n  }                                                                                                                    // 346\n                                                                                                                       // 347\n  if (!eventType) {                                                                                                    // 348\n    return null;                                                                                                       // 349\n  }                                                                                                                    // 350\n                                                                                                                       // 351\n  if (useFallbackCompositionData) {                                                                                    // 352\n    // The current composition is stored statically and must not be                                                    // 353\n    // overwritten while composition continues.                                                                        // 354\n    if (!currentComposition && eventType === eventTypes.compositionStart) {                                            // 355\n      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);                                         // 356\n    } else if (eventType === eventTypes.compositionEnd) {                                                              // 357\n      if (currentComposition) {                                                                                        // 358\n        fallbackData = currentComposition.getData();                                                                   // 359\n      }                                                                                                                // 360\n    }                                                                                                                  // 361\n  }                                                                                                                    // 362\n                                                                                                                       // 363\n  var event = SyntheticCompositionEvent.getPooled(                                                                     // 364\n    eventType,                                                                                                         // 365\n    topLevelTargetID,                                                                                                  // 366\n    nativeEvent                                                                                                        // 367\n  );                                                                                                                   // 368\n                                                                                                                       // 369\n  if (fallbackData) {                                                                                                  // 370\n    // Inject data generated from fallback path into the synthetic event.                                              // 371\n    // This matches the property of native CompositionEventInterface.                                                  // 372\n    event.data = fallbackData;                                                                                         // 373\n  } else {                                                                                                             // 374\n    var customData = getDataFromCustomEvent(nativeEvent);                                                              // 375\n    if (customData !== null) {                                                                                         // 376\n      event.data = customData;                                                                                         // 377\n    }                                                                                                                  // 378\n  }                                                                                                                    // 379\n                                                                                                                       // 380\n  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 381\n  return event;                                                                                                        // 382\n}                                                                                                                      // 383\n                                                                                                                       // 384\n/**                                                                                                                    // 385\n * @param {string} topLevelType Record from `EventConstants`.                                                          // 386\n * @param {object} nativeEvent Native browser event.                                                                   // 387\n * @return {?string} The string corresponding to this `beforeInput` event.                                             // 388\n */                                                                                                                    // 389\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {                                                        // 390\n  switch (topLevelType) {                                                                                              // 391\n    case topLevelTypes.topCompositionEnd:                                                                              // 392\n      return getDataFromCustomEvent(nativeEvent);                                                                      // 393\n    case topLevelTypes.topKeyPress:                                                                                    // 394\n      /**                                                                                                              // 395\n       * If native `textInput` events are available, our goal is to make                                               // 396\n       * use of them. However, there is a special case: the spacebar key.                                              // 397\n       * In Webkit, preventing default on a spacebar `textInput` event                                                 // 398\n       * cancels character insertion, but it *also* causes the browser                                                 // 399\n       * to fall back to its default spacebar behavior of scrolling the                                                // 400\n       * page.                                                                                                         // 401\n       *                                                                                                               // 402\n       * Tracking at:                                                                                                  // 403\n       * https://code.google.com/p/chromium/issues/detail?id=355103                                                    // 404\n       *                                                                                                               // 405\n       * To avoid this issue, use the keypress event as if no `textInput`                                              // 406\n       * event is available.                                                                                           // 407\n       */                                                                                                              // 408\n      var which = nativeEvent.which;                                                                                   // 409\n      if (which !== SPACEBAR_CODE) {                                                                                   // 410\n        return null;                                                                                                   // 411\n      }                                                                                                                // 412\n                                                                                                                       // 413\n      hasSpaceKeypress = true;                                                                                         // 414\n      return SPACEBAR_CHAR;                                                                                            // 415\n                                                                                                                       // 416\n    case topLevelTypes.topTextInput:                                                                                   // 417\n      // Record the characters to be added to the DOM.                                                                 // 418\n      var chars = nativeEvent.data;                                                                                    // 419\n                                                                                                                       // 420\n      // If it's a spacebar character, assume that we have already handled                                             // 421\n      // it at the keypress level and bail immediately. Android Chrome                                                 // 422\n      // doesn't give us keycodes, so we need to blacklist it.                                                         // 423\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {                                                               // 424\n        return null;                                                                                                   // 425\n      }                                                                                                                // 426\n                                                                                                                       // 427\n      return chars;                                                                                                    // 428\n                                                                                                                       // 429\n    default:                                                                                                           // 430\n      // For other native event types, do nothing.                                                                     // 431\n      return null;                                                                                                     // 432\n  }                                                                                                                    // 433\n}                                                                                                                      // 434\n                                                                                                                       // 435\n/**                                                                                                                    // 436\n * For browsers that do not provide the `textInput` event, extract the                                                 // 437\n * appropriate string to use for SyntheticInputEvent.                                                                  // 438\n *                                                                                                                     // 439\n * @param {string} topLevelType Record from `EventConstants`.                                                          // 440\n * @param {object} nativeEvent Native browser event.                                                                   // 441\n * @return {?string} The fallback string for this `beforeInput` event.                                                 // 442\n */                                                                                                                    // 443\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {                                                      // 444\n  // If we are currently composing (IME) and using a fallback to do so,                                                // 445\n  // try to extract the composed characters from the fallback object.                                                  // 446\n  if (currentComposition) {                                                                                            // 447\n    if (                                                                                                               // 448\n      topLevelType === topLevelTypes.topCompositionEnd ||                                                              // 449\n      isFallbackCompositionEnd(topLevelType, nativeEvent)                                                              // 450\n    ) {                                                                                                                // 451\n      var chars = currentComposition.getData();                                                                        // 452\n      FallbackCompositionState.release(currentComposition);                                                            // 453\n      currentComposition = null;                                                                                       // 454\n      return chars;                                                                                                    // 455\n    }                                                                                                                  // 456\n    return null;                                                                                                       // 457\n  }                                                                                                                    // 458\n                                                                                                                       // 459\n  switch (topLevelType) {                                                                                              // 460\n    case topLevelTypes.topPaste:                                                                                       // 461\n      // If a paste event occurs after a keypress, throw out the input                                                 // 462\n      // chars. Paste events should not lead to BeforeInput events.                                                    // 463\n      return null;                                                                                                     // 464\n    case topLevelTypes.topKeyPress:                                                                                    // 465\n      /**                                                                                                              // 466\n       * As of v27, Firefox may fire keypress events even when no character                                            // 467\n       * will be inserted. A few possibilities:                                                                        // 468\n       *                                                                                                               // 469\n       * - `which` is `0`. Arrow keys, Esc key, etc.                                                                   // 470\n       *                                                                                                               // 471\n       * - `which` is the pressed key code, but no char is available.                                                  // 472\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for                                               // 473\n       *   this key combination and no character is inserted into the                                                  // 474\n       *   document, but FF fires the keypress for char code `100` anyway.                                             // 475\n       *   No `input` event will occur.                                                                                // 476\n       *                                                                                                               // 477\n       * - `which` is the pressed key code, but a command combination is                                               // 478\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no                                                   // 479\n       *   `input` event will occur.                                                                                   // 480\n       */                                                                                                              // 481\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {                                                      // 482\n        return String.fromCharCode(nativeEvent.which);                                                                 // 483\n      }                                                                                                                // 484\n      return null;                                                                                                     // 485\n    case topLevelTypes.topCompositionEnd:                                                                              // 486\n      return useFallbackCompositionData ? null : nativeEvent.data;                                                     // 487\n    default:                                                                                                           // 488\n      return null;                                                                                                     // 489\n  }                                                                                                                    // 490\n}                                                                                                                      // 491\n                                                                                                                       // 492\n/**                                                                                                                    // 493\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native                                             // 494\n * `textInput` or fallback behavior.                                                                                   // 495\n *                                                                                                                     // 496\n * @param {string} topLevelType Record from `EventConstants`.                                                          // 497\n * @param {DOMEventTarget} topLevelTarget The listening component root node.                                           // 498\n * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                            // 499\n * @param {object} nativeEvent Native browser event.                                                                   // 500\n * @return {?object} A SyntheticInputEvent.                                                                            // 501\n */                                                                                                                    // 502\nfunction extractBeforeInputEvent(                                                                                      // 503\n  topLevelType,                                                                                                        // 504\n  topLevelTarget,                                                                                                      // 505\n  topLevelTargetID,                                                                                                    // 506\n  nativeEvent                                                                                                          // 507\n) {                                                                                                                    // 508\n  var chars;                                                                                                           // 509\n                                                                                                                       // 510\n  if (canUseTextInputEvent) {                                                                                          // 511\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);                                                      // 512\n  } else {                                                                                                             // 513\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);                                                    // 514\n  }                                                                                                                    // 515\n                                                                                                                       // 516\n  // If no characters are being inserted, no BeforeInput event should                                                  // 517\n  // be fired.                                                                                                         // 518\n  if (!chars) {                                                                                                        // 519\n    return null;                                                                                                       // 520\n  }                                                                                                                    // 521\n                                                                                                                       // 522\n  var event = SyntheticInputEvent.getPooled(                                                                           // 523\n    eventTypes.beforeInput,                                                                                            // 524\n    topLevelTargetID,                                                                                                  // 525\n    nativeEvent                                                                                                        // 526\n  );                                                                                                                   // 527\n                                                                                                                       // 528\n  event.data = chars;                                                                                                  // 529\n  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 530\n  return event;                                                                                                        // 531\n}                                                                                                                      // 532\n                                                                                                                       // 533\n/**                                                                                                                    // 534\n * Create an `onBeforeInput` event to match                                                                            // 535\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.                                       // 536\n *                                                                                                                     // 537\n * This event plugin is based on the native `textInput` event                                                          // 538\n * available in Chrome, Safari, Opera, and IE. This event fires after                                                  // 539\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.                                                          // 540\n *                                                                                                                     // 541\n * `beforeInput` is spec'd but not implemented in any browsers, and                                                    // 542\n * the `input` event does not provide any useful information about what has                                            // 543\n * actually been added, contrary to the spec. Thus, `textInput` is the best                                            // 544\n * available event to identify the characters that have actually been inserted                                         // 545\n * into the target node.                                                                                               // 546\n *                                                                                                                     // 547\n * This plugin is also responsible for emitting `composition` events, thus                                             // 548\n * allowing us to share composition fallback code for both `beforeInput` and                                           // 549\n * `composition` event types.                                                                                          // 550\n */                                                                                                                    // 551\nvar BeforeInputEventPlugin = {                                                                                         // 552\n                                                                                                                       // 553\n  eventTypes: eventTypes,                                                                                              // 554\n                                                                                                                       // 555\n  /**                                                                                                                  // 556\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 557\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 558\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 559\n   * @param {object} nativeEvent Native browser event.                                                                 // 560\n   * @return {*} An accumulation of synthetic events.                                                                  // 561\n   * @see {EventPluginHub.extractEvents}                                                                               // 562\n   */                                                                                                                  // 563\n  extractEvents: function(                                                                                             // 564\n    topLevelType,                                                                                                      // 565\n    topLevelTarget,                                                                                                    // 566\n    topLevelTargetID,                                                                                                  // 567\n    nativeEvent                                                                                                        // 568\n  ) {                                                                                                                  // 569\n    return [                                                                                                           // 570\n      extractCompositionEvent(                                                                                         // 571\n        topLevelType,                                                                                                  // 572\n        topLevelTarget,                                                                                                // 573\n        topLevelTargetID,                                                                                              // 574\n        nativeEvent                                                                                                    // 575\n      ),                                                                                                               // 576\n      extractBeforeInputEvent(                                                                                         // 577\n        topLevelType,                                                                                                  // 578\n        topLevelTarget,                                                                                                // 579\n        topLevelTargetID,                                                                                              // 580\n        nativeEvent                                                                                                    // 581\n      )                                                                                                                // 582\n    ];                                                                                                                 // 583\n  }                                                                                                                    // 584\n};                                                                                                                     // 585\n                                                                                                                       // 586\nmodule.exports = BeforeInputEventPlugin;                                                                               // 587\n                                                                                                                       // 588\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPropagators\":\"react/lib/EventPropagators\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./FallbackCompositionState\":\"react/lib/FallbackCompositionState\",\"./SyntheticCompositionEvent\":\"react/lib/SyntheticCompositionEvent\",\"./SyntheticInputEvent\":\"react/lib/SyntheticInputEvent\",\"./keyOf\":\"react/lib/keyOf\"}],\"react/lib/CSSCore\":[function(require,module,exports){\n(function (process){                                                                                                   // 590\n/**                                                                                                                    // 591\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 592\n * All rights reserved.                                                                                                // 593\n *                                                                                                                     // 594\n * This source code is licensed under the BSD-style license found in the                                               // 595\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 596\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 597\n *                                                                                                                     // 598\n * @providesModule CSSCore                                                                                             // 599\n * @typechecks                                                                                                         // 600\n */                                                                                                                    // 601\n                                                                                                                       // 602\nvar invariant = require(\"./invariant\");                                                                                // 603\n                                                                                                                       // 604\n/**                                                                                                                    // 605\n * The CSSCore module specifies the API (and implements most of the methods)                                           // 606\n * that should be used when dealing with the display of elements (via their                                            // 607\n * CSS classes and visibility on screen. It is an API focused on mutating the                                          // 608\n * display and not reading it as no logical state should be encoded in the                                             // 609\n * display of elements.                                                                                                // 610\n */                                                                                                                    // 611\n                                                                                                                       // 612\nvar CSSCore = {                                                                                                        // 613\n                                                                                                                       // 614\n  /**                                                                                                                  // 615\n   * Adds the class passed in to the element if it doesn't already have it.                                            // 616\n   *                                                                                                                   // 617\n   * @param {DOMElement} element the element to set the class on                                                       // 618\n   * @param {string} className the CSS className                                                                       // 619\n   * @return {DOMElement} the element passed in                                                                        // 620\n   */                                                                                                                  // 621\n  addClass: function(element, className) {                                                                             // 622\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 623\n      !/\\s/.test(className),                                                                                           // 624\n      'CSSCore.addClass takes only a single class name. \"%s\" contains ' +                                              // 625\n      'multiple classes.', className                                                                                   // 626\n    ) : invariant(!/\\s/.test(className)));                                                                             // 627\n                                                                                                                       // 628\n    if (className) {                                                                                                   // 629\n      if (element.classList) {                                                                                         // 630\n        element.classList.add(className);                                                                              // 631\n      } else if (!CSSCore.hasClass(element, className)) {                                                              // 632\n        element.className = element.className + ' ' + className;                                                       // 633\n      }                                                                                                                // 634\n    }                                                                                                                  // 635\n    return element;                                                                                                    // 636\n  },                                                                                                                   // 637\n                                                                                                                       // 638\n  /**                                                                                                                  // 639\n   * Removes the class passed in from the element                                                                      // 640\n   *                                                                                                                   // 641\n   * @param {DOMElement} element the element to set the class on                                                       // 642\n   * @param {string} className the CSS className                                                                       // 643\n   * @return {DOMElement} the element passed in                                                                        // 644\n   */                                                                                                                  // 645\n  removeClass: function(element, className) {                                                                          // 646\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 647\n      !/\\s/.test(className),                                                                                           // 648\n      'CSSCore.removeClass takes only a single class name. \"%s\" contains ' +                                           // 649\n      'multiple classes.', className                                                                                   // 650\n    ) : invariant(!/\\s/.test(className)));                                                                             // 651\n                                                                                                                       // 652\n    if (className) {                                                                                                   // 653\n      if (element.classList) {                                                                                         // 654\n        element.classList.remove(className);                                                                           // 655\n      } else if (CSSCore.hasClass(element, className)) {                                                               // 656\n        element.className = element.className                                                                          // 657\n          .replace(new RegExp('(^|\\\\s)' + className + '(?:\\\\s|$)', 'g'), '$1')                                         // 658\n          .replace(/\\s+/g, ' ') // multiple spaces to one                                                              // 659\n          .replace(/^\\s*|\\s*$/g, ''); // trim the ends                                                                 // 660\n      }                                                                                                                // 661\n    }                                                                                                                  // 662\n    return element;                                                                                                    // 663\n  },                                                                                                                   // 664\n                                                                                                                       // 665\n  /**                                                                                                                  // 666\n   * Helper to add or remove a class from an element based on a condition.                                             // 667\n   *                                                                                                                   // 668\n   * @param {DOMElement} element the element to set the class on                                                       // 669\n   * @param {string} className the CSS className                                                                       // 670\n   * @param {*} bool condition to whether to add or remove the class                                                   // 671\n   * @return {DOMElement} the element passed in                                                                        // 672\n   */                                                                                                                  // 673\n  conditionClass: function(element, className, bool) {                                                                 // 674\n    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);                                        // 675\n  },                                                                                                                   // 676\n                                                                                                                       // 677\n  /**                                                                                                                  // 678\n   * Tests whether the element has the class specified.                                                                // 679\n   *                                                                                                                   // 680\n   * @param {DOMNode|DOMWindow} element the element to set the class on                                                // 681\n   * @param {string} className the CSS className                                                                       // 682\n   * @return {boolean} true if the element has the class, false if not                                                 // 683\n   */                                                                                                                  // 684\n  hasClass: function(element, className) {                                                                             // 685\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 686\n      !/\\s/.test(className),                                                                                           // 687\n      'CSS.hasClass takes only a single class name.'                                                                   // 688\n    ) : invariant(!/\\s/.test(className)));                                                                             // 689\n    if (element.classList) {                                                                                           // 690\n      return !!className && element.classList.contains(className);                                                     // 691\n    }                                                                                                                  // 692\n    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;                                        // 693\n  }                                                                                                                    // 694\n                                                                                                                       // 695\n};                                                                                                                     // 696\n                                                                                                                       // 697\nmodule.exports = CSSCore;                                                                                              // 698\n                                                                                                                       // 699\n}).call(this,require('_process'))                                                                                      // 700\n                                                                                                                       // 701\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/CSSPropertyOperations\":[function(require,module,exports){\n(function (process){                                                                                                   // 703\n/**                                                                                                                    // 704\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 705\n * All rights reserved.                                                                                                // 706\n *                                                                                                                     // 707\n * This source code is licensed under the BSD-style license found in the                                               // 708\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 709\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 710\n *                                                                                                                     // 711\n * @providesModule CSSPropertyOperations                                                                               // 712\n * @typechecks static-only                                                                                             // 713\n */                                                                                                                    // 714\n                                                                                                                       // 715\n'use strict';                                                                                                          // 716\n                                                                                                                       // 717\nvar CSSProperty = require(\"./CSSProperty\");                                                                            // 718\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 719\n                                                                                                                       // 720\nvar camelizeStyleName = require(\"./camelizeStyleName\");                                                                // 721\nvar dangerousStyleValue = require(\"./dangerousStyleValue\");                                                            // 722\nvar hyphenateStyleName = require(\"./hyphenateStyleName\");                                                              // 723\nvar memoizeStringOnly = require(\"./memoizeStringOnly\");                                                                // 724\nvar warning = require(\"./warning\");                                                                                    // 725\n                                                                                                                       // 726\nvar processStyleName = memoizeStringOnly(function(styleName) {                                                         // 727\n  return hyphenateStyleName(styleName);                                                                                // 728\n});                                                                                                                    // 729\n                                                                                                                       // 730\nvar styleFloatAccessor = 'cssFloat';                                                                                   // 731\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 732\n  // IE8 only supports accessing cssFloat (standard) as styleFloat                                                     // 733\n  if (document.documentElement.style.cssFloat === undefined) {                                                         // 734\n    styleFloatAccessor = 'styleFloat';                                                                                 // 735\n  }                                                                                                                    // 736\n}                                                                                                                      // 737\n                                                                                                                       // 738\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 739\n  // 'msTransform' is correct, but the other prefixes should be capitalized                                            // 740\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;                                                          // 741\n                                                                                                                       // 742\n  // style values shouldn't contain a semicolon                                                                        // 743\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;                                                                     // 744\n                                                                                                                       // 745\n  var warnedStyleNames = {};                                                                                           // 746\n  var warnedStyleValues = {};                                                                                          // 747\n                                                                                                                       // 748\n  var warnHyphenatedStyleName = function(name) {                                                                       // 749\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {                                             // 750\n      return;                                                                                                          // 751\n    }                                                                                                                  // 752\n                                                                                                                       // 753\n    warnedStyleNames[name] = true;                                                                                     // 754\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 755\n      false,                                                                                                           // 756\n      'Unsupported style property %s. Did you mean %s?',                                                               // 757\n      name,                                                                                                            // 758\n      camelizeStyleName(name)                                                                                          // 759\n    ) : null);                                                                                                         // 760\n  };                                                                                                                   // 761\n                                                                                                                       // 762\n  var warnBadVendoredStyleName = function(name) {                                                                      // 763\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {                                             // 764\n      return;                                                                                                          // 765\n    }                                                                                                                  // 766\n                                                                                                                       // 767\n    warnedStyleNames[name] = true;                                                                                     // 768\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 769\n      false,                                                                                                           // 770\n      'Unsupported vendor-prefixed style property %s. Did you mean %s?',                                               // 771\n      name,                                                                                                            // 772\n      name.charAt(0).toUpperCase() + name.slice(1)                                                                     // 773\n    ) : null);                                                                                                         // 774\n  };                                                                                                                   // 775\n                                                                                                                       // 776\n  var warnStyleValueWithSemicolon = function(name, value) {                                                            // 777\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {                                         // 778\n      return;                                                                                                          // 779\n    }                                                                                                                  // 780\n                                                                                                                       // 781\n    warnedStyleValues[value] = true;                                                                                   // 782\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 783\n      false,                                                                                                           // 784\n      'Style property values shouldn\\'t contain a semicolon. ' +                                                       // 785\n      'Try \"%s: %s\" instead.',                                                                                         // 786\n      name,                                                                                                            // 787\n      value.replace(badStyleValueWithSemicolonPattern, '')                                                             // 788\n    ) : null);                                                                                                         // 789\n  };                                                                                                                   // 790\n                                                                                                                       // 791\n  /**                                                                                                                  // 792\n   * @param {string} name                                                                                              // 793\n   * @param {*} value                                                                                                  // 794\n   */                                                                                                                  // 795\n  var warnValidStyle = function(name, value) {                                                                         // 796\n    if (name.indexOf('-') > -1) {                                                                                      // 797\n      warnHyphenatedStyleName(name);                                                                                   // 798\n    } else if (badVendoredStyleNamePattern.test(name)) {                                                               // 799\n      warnBadVendoredStyleName(name);                                                                                  // 800\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {                                                        // 801\n      warnStyleValueWithSemicolon(name, value);                                                                        // 802\n    }                                                                                                                  // 803\n  };                                                                                                                   // 804\n}                                                                                                                      // 805\n                                                                                                                       // 806\n/**                                                                                                                    // 807\n * Operations for dealing with CSS properties.                                                                         // 808\n */                                                                                                                    // 809\nvar CSSPropertyOperations = {                                                                                          // 810\n                                                                                                                       // 811\n  /**                                                                                                                  // 812\n   * Serializes a mapping of style properties for use as inline styles:                                                // 813\n   *                                                                                                                   // 814\n   *   > createMarkupForStyles({width: '200px', height: 0})                                                            // 815\n   *   \"width:200px;height:0;\"                                                                                         // 816\n   *                                                                                                                   // 817\n   * Undefined values are ignored so that declarative programming is easier.                                           // 818\n   * The result should be HTML-escaped before insertion into the DOM.                                                  // 819\n   *                                                                                                                   // 820\n   * @param {object} styles                                                                                            // 821\n   * @return {?string}                                                                                                 // 822\n   */                                                                                                                  // 823\n  createMarkupForStyles: function(styles) {                                                                            // 824\n    var serialized = '';                                                                                               // 825\n    for (var styleName in styles) {                                                                                    // 826\n      if (!styles.hasOwnProperty(styleName)) {                                                                         // 827\n        continue;                                                                                                      // 828\n      }                                                                                                                // 829\n      var styleValue = styles[styleName];                                                                              // 830\n      if (\"production\" !== process.env.NODE_ENV) {                                                                     // 831\n        warnValidStyle(styleName, styleValue);                                                                         // 832\n      }                                                                                                                // 833\n      if (styleValue != null) {                                                                                        // 834\n        serialized += processStyleName(styleName) + ':';                                                               // 835\n        serialized += dangerousStyleValue(styleName, styleValue) + ';';                                                // 836\n      }                                                                                                                // 837\n    }                                                                                                                  // 838\n    return serialized || null;                                                                                         // 839\n  },                                                                                                                   // 840\n                                                                                                                       // 841\n  /**                                                                                                                  // 842\n   * Sets the value for multiple styles on a node.  If a value is specified as                                         // 843\n   * '' (empty string), the corresponding style property will be unset.                                                // 844\n   *                                                                                                                   // 845\n   * @param {DOMElement} node                                                                                          // 846\n   * @param {object} styles                                                                                            // 847\n   */                                                                                                                  // 848\n  setValueForStyles: function(node, styles) {                                                                          // 849\n    var style = node.style;                                                                                            // 850\n    for (var styleName in styles) {                                                                                    // 851\n      if (!styles.hasOwnProperty(styleName)) {                                                                         // 852\n        continue;                                                                                                      // 853\n      }                                                                                                                // 854\n      if (\"production\" !== process.env.NODE_ENV) {                                                                     // 855\n        warnValidStyle(styleName, styles[styleName]);                                                                  // 856\n      }                                                                                                                // 857\n      var styleValue = dangerousStyleValue(styleName, styles[styleName]);                                              // 858\n      if (styleName === 'float') {                                                                                     // 859\n        styleName = styleFloatAccessor;                                                                                // 860\n      }                                                                                                                // 861\n      if (styleValue) {                                                                                                // 862\n        style[styleName] = styleValue;                                                                                 // 863\n      } else {                                                                                                         // 864\n        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];                                            // 865\n        if (expansion) {                                                                                               // 866\n          // Shorthand property that IE8 won't like unsetting, so unset each                                           // 867\n          // component to placate it                                                                                   // 868\n          for (var individualStyleName in expansion) {                                                                 // 869\n            style[individualStyleName] = '';                                                                           // 870\n          }                                                                                                            // 871\n        } else {                                                                                                       // 872\n          style[styleName] = '';                                                                                       // 873\n        }                                                                                                              // 874\n      }                                                                                                                // 875\n    }                                                                                                                  // 876\n  }                                                                                                                    // 877\n                                                                                                                       // 878\n};                                                                                                                     // 879\n                                                                                                                       // 880\nmodule.exports = CSSPropertyOperations;                                                                                // 881\n                                                                                                                       // 882\n}).call(this,require('_process'))                                                                                      // 883\n                                                                                                                       // 884\n},{\"./CSSProperty\":\"react/lib/CSSProperty\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./camelizeStyleName\":\"react/lib/camelizeStyleName\",\"./dangerousStyleValue\":\"react/lib/dangerousStyleValue\",\"./hyphenateStyleName\":\"react/lib/hyphenateStyleName\",\"./memoizeStringOnly\":\"react/lib/memoizeStringOnly\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/CSSProperty\":[function(require,module,exports){\n/**                                                                                                                    // 886\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 887\n * All rights reserved.                                                                                                // 888\n *                                                                                                                     // 889\n * This source code is licensed under the BSD-style license found in the                                               // 890\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 891\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 892\n *                                                                                                                     // 893\n * @providesModule CSSProperty                                                                                         // 894\n */                                                                                                                    // 895\n                                                                                                                       // 896\n'use strict';                                                                                                          // 897\n                                                                                                                       // 898\n/**                                                                                                                    // 899\n * CSS properties which accept numbers but are not in units of \"px\".                                                   // 900\n */                                                                                                                    // 901\nvar isUnitlessNumber = {                                                                                               // 902\n  boxFlex: true,                                                                                                       // 903\n  boxFlexGroup: true,                                                                                                  // 904\n  columnCount: true,                                                                                                   // 905\n  flex: true,                                                                                                          // 906\n  flexGrow: true,                                                                                                      // 907\n  flexPositive: true,                                                                                                  // 908\n  flexShrink: true,                                                                                                    // 909\n  flexNegative: true,                                                                                                  // 910\n  fontWeight: true,                                                                                                    // 911\n  lineClamp: true,                                                                                                     // 912\n  lineHeight: true,                                                                                                    // 913\n  opacity: true,                                                                                                       // 914\n  order: true,                                                                                                         // 915\n  orphans: true,                                                                                                       // 916\n  widows: true,                                                                                                        // 917\n  zIndex: true,                                                                                                        // 918\n  zoom: true,                                                                                                          // 919\n                                                                                                                       // 920\n  // SVG-related properties                                                                                            // 921\n  fillOpacity: true,                                                                                                   // 922\n  strokeDashoffset: true,                                                                                              // 923\n  strokeOpacity: true,                                                                                                 // 924\n  strokeWidth: true                                                                                                    // 925\n};                                                                                                                     // 926\n                                                                                                                       // 927\n/**                                                                                                                    // 928\n * @param {string} prefix vendor-specific prefix, eg: Webkit                                                           // 929\n * @param {string} key style name, eg: transitionDuration                                                              // 930\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:                                        // 931\n * WebkitTransitionDuration                                                                                            // 932\n */                                                                                                                    // 933\nfunction prefixKey(prefix, key) {                                                                                      // 934\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);                                                      // 935\n}                                                                                                                      // 936\n                                                                                                                       // 937\n/**                                                                                                                    // 938\n * Support style names that may come passed in prefixed by adding permutations                                         // 939\n * of vendor prefixes.                                                                                                 // 940\n */                                                                                                                    // 941\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];                                                                           // 942\n                                                                                                                       // 943\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an                                        // 944\n// infinite loop, because it iterates over the newly added props too.                                                  // 945\nObject.keys(isUnitlessNumber).forEach(function(prop) {                                                                 // 946\n  prefixes.forEach(function(prefix) {                                                                                  // 947\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];                                                // 948\n  });                                                                                                                  // 949\n});                                                                                                                    // 950\n                                                                                                                       // 951\n/**                                                                                                                    // 952\n * Most style properties can be unset by doing .style[prop] = '' but IE8                                               // 953\n * doesn't like doing that with shorthand properties so for the properties that                                        // 954\n * IE8 breaks on, which are listed here, we instead unset each of the                                                  // 955\n * individual properties. See http://bugs.jquery.com/ticket/12385.                                                     // 956\n * The 4-value 'clock' properties like margin, padding, border-width seem to                                           // 957\n * behave without any problems. Curiously, list-style works too without any                                            // 958\n * special prodding.                                                                                                   // 959\n */                                                                                                                    // 960\nvar shorthandPropertyExpansions = {                                                                                    // 961\n  background: {                                                                                                        // 962\n    backgroundImage: true,                                                                                             // 963\n    backgroundPosition: true,                                                                                          // 964\n    backgroundRepeat: true,                                                                                            // 965\n    backgroundColor: true                                                                                              // 966\n  },                                                                                                                   // 967\n  border: {                                                                                                            // 968\n    borderWidth: true,                                                                                                 // 969\n    borderStyle: true,                                                                                                 // 970\n    borderColor: true                                                                                                  // 971\n  },                                                                                                                   // 972\n  borderBottom: {                                                                                                      // 973\n    borderBottomWidth: true,                                                                                           // 974\n    borderBottomStyle: true,                                                                                           // 975\n    borderBottomColor: true                                                                                            // 976\n  },                                                                                                                   // 977\n  borderLeft: {                                                                                                        // 978\n    borderLeftWidth: true,                                                                                             // 979\n    borderLeftStyle: true,                                                                                             // 980\n    borderLeftColor: true                                                                                              // 981\n  },                                                                                                                   // 982\n  borderRight: {                                                                                                       // 983\n    borderRightWidth: true,                                                                                            // 984\n    borderRightStyle: true,                                                                                            // 985\n    borderRightColor: true                                                                                             // 986\n  },                                                                                                                   // 987\n  borderTop: {                                                                                                         // 988\n    borderTopWidth: true,                                                                                              // 989\n    borderTopStyle: true,                                                                                              // 990\n    borderTopColor: true                                                                                               // 991\n  },                                                                                                                   // 992\n  font: {                                                                                                              // 993\n    fontStyle: true,                                                                                                   // 994\n    fontVariant: true,                                                                                                 // 995\n    fontWeight: true,                                                                                                  // 996\n    fontSize: true,                                                                                                    // 997\n    lineHeight: true,                                                                                                  // 998\n    fontFamily: true                                                                                                   // 999\n  }                                                                                                                    // 1000\n};                                                                                                                     // 1001\n                                                                                                                       // 1002\nvar CSSProperty = {                                                                                                    // 1003\n  isUnitlessNumber: isUnitlessNumber,                                                                                  // 1004\n  shorthandPropertyExpansions: shorthandPropertyExpansions                                                             // 1005\n};                                                                                                                     // 1006\n                                                                                                                       // 1007\nmodule.exports = CSSProperty;                                                                                          // 1008\n                                                                                                                       // 1009\n},{}],\"react/lib/CallbackQueue\":[function(require,module,exports){                                                     // 1010\n(function (process){                                                                                                   // 1011\n/**                                                                                                                    // 1012\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 1013\n * All rights reserved.                                                                                                // 1014\n *                                                                                                                     // 1015\n * This source code is licensed under the BSD-style license found in the                                               // 1016\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 1017\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 1018\n *                                                                                                                     // 1019\n * @providesModule CallbackQueue                                                                                       // 1020\n */                                                                                                                    // 1021\n                                                                                                                       // 1022\n'use strict';                                                                                                          // 1023\n                                                                                                                       // 1024\nvar PooledClass = require(\"./PooledClass\");                                                                            // 1025\n                                                                                                                       // 1026\nvar assign = require(\"./Object.assign\");                                                                               // 1027\nvar invariant = require(\"./invariant\");                                                                                // 1028\n                                                                                                                       // 1029\n/**                                                                                                                    // 1030\n * A specialized pseudo-event module to help keep track of components waiting to                                       // 1031\n * be notified when their DOM representations are available for use.                                                   // 1032\n *                                                                                                                     // 1033\n * This implements `PooledClass`, so you should never need to instantiate this.                                        // 1034\n * Instead, use `CallbackQueue.getPooled()`.                                                                           // 1035\n *                                                                                                                     // 1036\n * @class ReactMountReady                                                                                              // 1037\n * @implements PooledClass                                                                                             // 1038\n * @internal                                                                                                           // 1039\n */                                                                                                                    // 1040\nfunction CallbackQueue() {                                                                                             // 1041\n  this._callbacks = null;                                                                                              // 1042\n  this._contexts = null;                                                                                               // 1043\n}                                                                                                                      // 1044\n                                                                                                                       // 1045\nassign(CallbackQueue.prototype, {                                                                                      // 1046\n                                                                                                                       // 1047\n  /**                                                                                                                  // 1048\n   * Enqueues a callback to be invoked when `notifyAll` is invoked.                                                    // 1049\n   *                                                                                                                   // 1050\n   * @param {function} callback Invoked when `notifyAll` is invoked.                                                   // 1051\n   * @param {?object} context Context to call `callback` with.                                                         // 1052\n   * @internal                                                                                                         // 1053\n   */                                                                                                                  // 1054\n  enqueue: function(callback, context) {                                                                               // 1055\n    this._callbacks = this._callbacks || [];                                                                           // 1056\n    this._contexts = this._contexts || [];                                                                             // 1057\n    this._callbacks.push(callback);                                                                                    // 1058\n    this._contexts.push(context);                                                                                      // 1059\n  },                                                                                                                   // 1060\n                                                                                                                       // 1061\n  /**                                                                                                                  // 1062\n   * Invokes all enqueued callbacks and clears the queue. This is invoked after                                        // 1063\n   * the DOM representation of a component has been created or updated.                                                // 1064\n   *                                                                                                                   // 1065\n   * @internal                                                                                                         // 1066\n   */                                                                                                                  // 1067\n  notifyAll: function() {                                                                                              // 1068\n    var callbacks = this._callbacks;                                                                                   // 1069\n    var contexts = this._contexts;                                                                                     // 1070\n    if (callbacks) {                                                                                                   // 1071\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 1072\n        callbacks.length === contexts.length,                                                                          // 1073\n        'Mismatched list of contexts in callback queue'                                                                // 1074\n      ) : invariant(callbacks.length === contexts.length));                                                            // 1075\n      this._callbacks = null;                                                                                          // 1076\n      this._contexts = null;                                                                                           // 1077\n      for (var i = 0, l = callbacks.length; i < l; i++) {                                                              // 1078\n        callbacks[i].call(contexts[i]);                                                                                // 1079\n      }                                                                                                                // 1080\n      callbacks.length = 0;                                                                                            // 1081\n      contexts.length = 0;                                                                                             // 1082\n    }                                                                                                                  // 1083\n  },                                                                                                                   // 1084\n                                                                                                                       // 1085\n  /**                                                                                                                  // 1086\n   * Resets the internal queue.                                                                                        // 1087\n   *                                                                                                                   // 1088\n   * @internal                                                                                                         // 1089\n   */                                                                                                                  // 1090\n  reset: function() {                                                                                                  // 1091\n    this._callbacks = null;                                                                                            // 1092\n    this._contexts = null;                                                                                             // 1093\n  },                                                                                                                   // 1094\n                                                                                                                       // 1095\n  /**                                                                                                                  // 1096\n   * `PooledClass` looks for this.                                                                                     // 1097\n   */                                                                                                                  // 1098\n  destructor: function() {                                                                                             // 1099\n    this.reset();                                                                                                      // 1100\n  }                                                                                                                    // 1101\n                                                                                                                       // 1102\n});                                                                                                                    // 1103\n                                                                                                                       // 1104\nPooledClass.addPoolingTo(CallbackQueue);                                                                               // 1105\n                                                                                                                       // 1106\nmodule.exports = CallbackQueue;                                                                                        // 1107\n                                                                                                                       // 1108\n}).call(this,require('_process'))                                                                                      // 1109\n                                                                                                                       // 1110\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ChangeEventPlugin\":[function(require,module,exports){\n/**                                                                                                                    // 1112\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 1113\n * All rights reserved.                                                                                                // 1114\n *                                                                                                                     // 1115\n * This source code is licensed under the BSD-style license found in the                                               // 1116\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 1117\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 1118\n *                                                                                                                     // 1119\n * @providesModule ChangeEventPlugin                                                                                   // 1120\n */                                                                                                                    // 1121\n                                                                                                                       // 1122\n'use strict';                                                                                                          // 1123\n                                                                                                                       // 1124\nvar EventConstants = require(\"./EventConstants\");                                                                      // 1125\nvar EventPluginHub = require(\"./EventPluginHub\");                                                                      // 1126\nvar EventPropagators = require(\"./EventPropagators\");                                                                  // 1127\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 1128\nvar ReactUpdates = require(\"./ReactUpdates\");                                                                          // 1129\nvar SyntheticEvent = require(\"./SyntheticEvent\");                                                                      // 1130\n                                                                                                                       // 1131\nvar isEventSupported = require(\"./isEventSupported\");                                                                  // 1132\nvar isTextInputElement = require(\"./isTextInputElement\");                                                              // 1133\nvar keyOf = require(\"./keyOf\");                                                                                        // 1134\n                                                                                                                       // 1135\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 1136\n                                                                                                                       // 1137\nvar eventTypes = {                                                                                                     // 1138\n  change: {                                                                                                            // 1139\n    phasedRegistrationNames: {                                                                                         // 1140\n      bubbled: keyOf({onChange: null}),                                                                                // 1141\n      captured: keyOf({onChangeCapture: null})                                                                         // 1142\n    },                                                                                                                 // 1143\n    dependencies: [                                                                                                    // 1144\n      topLevelTypes.topBlur,                                                                                           // 1145\n      topLevelTypes.topChange,                                                                                         // 1146\n      topLevelTypes.topClick,                                                                                          // 1147\n      topLevelTypes.topFocus,                                                                                          // 1148\n      topLevelTypes.topInput,                                                                                          // 1149\n      topLevelTypes.topKeyDown,                                                                                        // 1150\n      topLevelTypes.topKeyUp,                                                                                          // 1151\n      topLevelTypes.topSelectionChange                                                                                 // 1152\n    ]                                                                                                                  // 1153\n  }                                                                                                                    // 1154\n};                                                                                                                     // 1155\n                                                                                                                       // 1156\n/**                                                                                                                    // 1157\n * For IE shims                                                                                                        // 1158\n */                                                                                                                    // 1159\nvar activeElement = null;                                                                                              // 1160\nvar activeElementID = null;                                                                                            // 1161\nvar activeElementValue = null;                                                                                         // 1162\nvar activeElementValueProp = null;                                                                                     // 1163\n                                                                                                                       // 1164\n/**                                                                                                                    // 1165\n * SECTION: handle `change` event                                                                                      // 1166\n */                                                                                                                    // 1167\nfunction shouldUseChangeEvent(elem) {                                                                                  // 1168\n  return (                                                                                                             // 1169\n    elem.nodeName === 'SELECT' ||                                                                                      // 1170\n    (elem.nodeName === 'INPUT' && elem.type === 'file')                                                                // 1171\n  );                                                                                                                   // 1172\n}                                                                                                                      // 1173\n                                                                                                                       // 1174\nvar doesChangeEventBubble = false;                                                                                     // 1175\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 1176\n  // See `handleChange` comment below                                                                                  // 1177\n  doesChangeEventBubble = isEventSupported('change') && (                                                              // 1178\n    (!('documentMode' in document) || document.documentMode > 8)                                                       // 1179\n  );                                                                                                                   // 1180\n}                                                                                                                      // 1181\n                                                                                                                       // 1182\nfunction manualDispatchChangeEvent(nativeEvent) {                                                                      // 1183\n  var event = SyntheticEvent.getPooled(                                                                                // 1184\n    eventTypes.change,                                                                                                 // 1185\n    activeElementID,                                                                                                   // 1186\n    nativeEvent                                                                                                        // 1187\n  );                                                                                                                   // 1188\n  EventPropagators.accumulateTwoPhaseDispatches(event);                                                                // 1189\n                                                                                                                       // 1190\n  // If change and propertychange bubbled, we'd just bind to it like all the                                           // 1191\n  // other events and have it go through ReactBrowserEventEmitter. Since it                                            // 1192\n  // doesn't, we manually listen for the events and so we have to enqueue and                                          // 1193\n  // process the abstract event manually.                                                                              // 1194\n  //                                                                                                                   // 1195\n  // Batching is necessary here in order to ensure that all event handlers run                                         // 1196\n  // before the next rerender (including event handlers attached to ancestor                                           // 1197\n  // elements instead of directly on the input). Without this, controlled                                              // 1198\n  // components don't work properly in conjunction with event bubbling because                                         // 1199\n  // the component is rerendered and the value reverted before all the event                                           // 1200\n  // handlers can run. See https://github.com/facebook/react/issues/708.                                               // 1201\n  ReactUpdates.batchedUpdates(runEventInBatch, event);                                                                 // 1202\n}                                                                                                                      // 1203\n                                                                                                                       // 1204\nfunction runEventInBatch(event) {                                                                                      // 1205\n  EventPluginHub.enqueueEvents(event);                                                                                 // 1206\n  EventPluginHub.processEventQueue();                                                                                  // 1207\n}                                                                                                                      // 1208\n                                                                                                                       // 1209\nfunction startWatchingForChangeEventIE8(target, targetID) {                                                            // 1210\n  activeElement = target;                                                                                              // 1211\n  activeElementID = targetID;                                                                                          // 1212\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);                                                    // 1213\n}                                                                                                                      // 1214\n                                                                                                                       // 1215\nfunction stopWatchingForChangeEventIE8() {                                                                             // 1216\n  if (!activeElement) {                                                                                                // 1217\n    return;                                                                                                            // 1218\n  }                                                                                                                    // 1219\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);                                                    // 1220\n  activeElement = null;                                                                                                // 1221\n  activeElementID = null;                                                                                              // 1222\n}                                                                                                                      // 1223\n                                                                                                                       // 1224\nfunction getTargetIDForChangeEvent(                                                                                    // 1225\n    topLevelType,                                                                                                      // 1226\n    topLevelTarget,                                                                                                    // 1227\n    topLevelTargetID) {                                                                                                // 1228\n  if (topLevelType === topLevelTypes.topChange) {                                                                      // 1229\n    return topLevelTargetID;                                                                                           // 1230\n  }                                                                                                                    // 1231\n}                                                                                                                      // 1232\nfunction handleEventsForChangeEventIE8(                                                                                // 1233\n    topLevelType,                                                                                                      // 1234\n    topLevelTarget,                                                                                                    // 1235\n    topLevelTargetID) {                                                                                                // 1236\n  if (topLevelType === topLevelTypes.topFocus) {                                                                       // 1237\n    // stopWatching() should be a noop here but we call it just in case we                                             // 1238\n    // missed a blur event somehow.                                                                                    // 1239\n    stopWatchingForChangeEventIE8();                                                                                   // 1240\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);                                                  // 1241\n  } else if (topLevelType === topLevelTypes.topBlur) {                                                                 // 1242\n    stopWatchingForChangeEventIE8();                                                                                   // 1243\n  }                                                                                                                    // 1244\n}                                                                                                                      // 1245\n                                                                                                                       // 1246\n                                                                                                                       // 1247\n/**                                                                                                                    // 1248\n * SECTION: handle `input` event                                                                                       // 1249\n */                                                                                                                    // 1250\nvar isInputEventSupported = false;                                                                                     // 1251\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 1252\n  // IE9 claims to support the input event but fails to trigger it when                                                // 1253\n  // deleting text, so we ignore its input events                                                                      // 1254\n  isInputEventSupported = isEventSupported('input') && (                                                               // 1255\n    (!('documentMode' in document) || document.documentMode > 9)                                                       // 1256\n  );                                                                                                                   // 1257\n}                                                                                                                      // 1258\n                                                                                                                       // 1259\n/**                                                                                                                    // 1260\n * (For old IE.) Replacement getter/setter for the `value` property that gets                                          // 1261\n * set on the active element.                                                                                          // 1262\n */                                                                                                                    // 1263\nvar newValueProp =  {                                                                                                  // 1264\n  get: function() {                                                                                                    // 1265\n    return activeElementValueProp.get.call(this);                                                                      // 1266\n  },                                                                                                                   // 1267\n  set: function(val) {                                                                                                 // 1268\n    // Cast to a string so we can do equality checks.                                                                  // 1269\n    activeElementValue = '' + val;                                                                                     // 1270\n    activeElementValueProp.set.call(this, val);                                                                        // 1271\n  }                                                                                                                    // 1272\n};                                                                                                                     // 1273\n                                                                                                                       // 1274\n/**                                                                                                                    // 1275\n * (For old IE.) Starts tracking propertychange events on the passed-in element                                        // 1276\n * and override the value property so that we can distinguish user events from                                         // 1277\n * value changes in JS.                                                                                                // 1278\n */                                                                                                                    // 1279\nfunction startWatchingForValueChange(target, targetID) {                                                               // 1280\n  activeElement = target;                                                                                              // 1281\n  activeElementID = targetID;                                                                                          // 1282\n  activeElementValue = target.value;                                                                                   // 1283\n  activeElementValueProp = Object.getOwnPropertyDescriptor(                                                            // 1284\n    target.constructor.prototype,                                                                                      // 1285\n    'value'                                                                                                            // 1286\n  );                                                                                                                   // 1287\n                                                                                                                       // 1288\n  Object.defineProperty(activeElement, 'value', newValueProp);                                                         // 1289\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);                                                 // 1290\n}                                                                                                                      // 1291\n                                                                                                                       // 1292\n/**                                                                                                                    // 1293\n * (For old IE.) Removes the event listeners from the currently-tracked element,                                       // 1294\n * if any exists.                                                                                                      // 1295\n */                                                                                                                    // 1296\nfunction stopWatchingForValueChange() {                                                                                // 1297\n  if (!activeElement) {                                                                                                // 1298\n    return;                                                                                                            // 1299\n  }                                                                                                                    // 1300\n                                                                                                                       // 1301\n  // delete restores the original property definition                                                                  // 1302\n  delete activeElement.value;                                                                                          // 1303\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);                                                 // 1304\n                                                                                                                       // 1305\n  activeElement = null;                                                                                                // 1306\n  activeElementID = null;                                                                                              // 1307\n  activeElementValue = null;                                                                                           // 1308\n  activeElementValueProp = null;                                                                                       // 1309\n}                                                                                                                      // 1310\n                                                                                                                       // 1311\n/**                                                                                                                    // 1312\n * (For old IE.) Handles a propertychange event, sending a `change` event if                                           // 1313\n * the value of the active element has changed.                                                                        // 1314\n */                                                                                                                    // 1315\nfunction handlePropertyChange(nativeEvent) {                                                                           // 1316\n  if (nativeEvent.propertyName !== 'value') {                                                                          // 1317\n    return;                                                                                                            // 1318\n  }                                                                                                                    // 1319\n  var value = nativeEvent.srcElement.value;                                                                            // 1320\n  if (value === activeElementValue) {                                                                                  // 1321\n    return;                                                                                                            // 1322\n  }                                                                                                                    // 1323\n  activeElementValue = value;                                                                                          // 1324\n                                                                                                                       // 1325\n  manualDispatchChangeEvent(nativeEvent);                                                                              // 1326\n}                                                                                                                      // 1327\n                                                                                                                       // 1328\n/**                                                                                                                    // 1329\n * If a `change` event should be fired, returns the target's ID.                                                       // 1330\n */                                                                                                                    // 1331\nfunction getTargetIDForInputEvent(                                                                                     // 1332\n    topLevelType,                                                                                                      // 1333\n    topLevelTarget,                                                                                                    // 1334\n    topLevelTargetID) {                                                                                                // 1335\n  if (topLevelType === topLevelTypes.topInput) {                                                                       // 1336\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly                                           // 1337\n    // what we want so fall through here and trigger an abstract event                                                 // 1338\n    return topLevelTargetID;                                                                                           // 1339\n  }                                                                                                                    // 1340\n}                                                                                                                      // 1341\n                                                                                                                       // 1342\n// For IE8 and IE9.                                                                                                    // 1343\nfunction handleEventsForInputEventIE(                                                                                  // 1344\n    topLevelType,                                                                                                      // 1345\n    topLevelTarget,                                                                                                    // 1346\n    topLevelTargetID) {                                                                                                // 1347\n  if (topLevelType === topLevelTypes.topFocus) {                                                                       // 1348\n    // In IE8, we can capture almost all .value changes by adding a                                                    // 1349\n    // propertychange handler and looking for events with propertyName                                                 // 1350\n    // equal to 'value'                                                                                                // 1351\n    // In IE9, propertychange fires for most input events but is buggy and                                             // 1352\n    // doesn't fire when text is deleted, but conveniently, selectionchange                                            // 1353\n    // appears to fire in all of the remaining cases so we catch those and                                             // 1354\n    // forward the event if the value has changed                                                                      // 1355\n    // In either case, we don't want to call the event handler if the value                                            // 1356\n    // is changed from JS so we redefine a setter for `.value` that updates                                            // 1357\n    // our activeElementValue variable, allowing us to ignore those changes                                            // 1358\n    //                                                                                                                 // 1359\n    // stopWatching() should be a noop here but we call it just in case we                                             // 1360\n    // missed a blur event somehow.                                                                                    // 1361\n    stopWatchingForValueChange();                                                                                      // 1362\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);                                                     // 1363\n  } else if (topLevelType === topLevelTypes.topBlur) {                                                                 // 1364\n    stopWatchingForValueChange();                                                                                      // 1365\n  }                                                                                                                    // 1366\n}                                                                                                                      // 1367\n                                                                                                                       // 1368\n// For IE8 and IE9.                                                                                                    // 1369\nfunction getTargetIDForInputEventIE(                                                                                   // 1370\n    topLevelType,                                                                                                      // 1371\n    topLevelTarget,                                                                                                    // 1372\n    topLevelTargetID) {                                                                                                // 1373\n  if (topLevelType === topLevelTypes.topSelectionChange ||                                                             // 1374\n      topLevelType === topLevelTypes.topKeyUp ||                                                                       // 1375\n      topLevelType === topLevelTypes.topKeyDown) {                                                                     // 1376\n    // On the selectionchange event, the target is just document which isn't                                           // 1377\n    // helpful for us so just check activeElement instead.                                                             // 1378\n    //                                                                                                                 // 1379\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire                                          // 1380\n    // propertychange on the first input event after setting `value` from a                                            // 1381\n    // script and fires only keydown, keypress, keyup. Catching keyup usually                                          // 1382\n    // gets it and catching keydown lets us fire an event for the first                                                // 1383\n    // keystroke if user does a key repeat (it'll be a little delayed: right                                           // 1384\n    // before the second keystroke). Other input methods (e.g., paste) seem to                                         // 1385\n    // fire selectionchange normally.                                                                                  // 1386\n    if (activeElement && activeElement.value !== activeElementValue) {                                                 // 1387\n      activeElementValue = activeElement.value;                                                                        // 1388\n      return activeElementID;                                                                                          // 1389\n    }                                                                                                                  // 1390\n  }                                                                                                                    // 1391\n}                                                                                                                      // 1392\n                                                                                                                       // 1393\n                                                                                                                       // 1394\n/**                                                                                                                    // 1395\n * SECTION: handle `click` event                                                                                       // 1396\n */                                                                                                                    // 1397\nfunction shouldUseClickEvent(elem) {                                                                                   // 1398\n  // Use the `click` event to detect changes to checkbox and radio inputs.                                             // 1399\n  // This approach works across all browsers, whereas `change` does not fire                                           // 1400\n  // until `blur` in IE8.                                                                                              // 1401\n  return (                                                                                                             // 1402\n    elem.nodeName === 'INPUT' &&                                                                                       // 1403\n    (elem.type === 'checkbox' || elem.type === 'radio')                                                                // 1404\n  );                                                                                                                   // 1405\n}                                                                                                                      // 1406\n                                                                                                                       // 1407\nfunction getTargetIDForClickEvent(                                                                                     // 1408\n    topLevelType,                                                                                                      // 1409\n    topLevelTarget,                                                                                                    // 1410\n    topLevelTargetID) {                                                                                                // 1411\n  if (topLevelType === topLevelTypes.topClick) {                                                                       // 1412\n    return topLevelTargetID;                                                                                           // 1413\n  }                                                                                                                    // 1414\n}                                                                                                                      // 1415\n                                                                                                                       // 1416\n/**                                                                                                                    // 1417\n * This plugin creates an `onChange` event that normalizes change events                                               // 1418\n * across form elements. This event fires at a time when it's possible to                                              // 1419\n * change the element's value without seeing a flicker.                                                                // 1420\n *                                                                                                                     // 1421\n * Supported elements are:                                                                                             // 1422\n * - input (see `isTextInputElement`)                                                                                  // 1423\n * - textarea                                                                                                          // 1424\n * - select                                                                                                            // 1425\n */                                                                                                                    // 1426\nvar ChangeEventPlugin = {                                                                                              // 1427\n                                                                                                                       // 1428\n  eventTypes: eventTypes,                                                                                              // 1429\n                                                                                                                       // 1430\n  /**                                                                                                                  // 1431\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 1432\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 1433\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 1434\n   * @param {object} nativeEvent Native browser event.                                                                 // 1435\n   * @return {*} An accumulation of synthetic events.                                                                  // 1436\n   * @see {EventPluginHub.extractEvents}                                                                               // 1437\n   */                                                                                                                  // 1438\n  extractEvents: function(                                                                                             // 1439\n      topLevelType,                                                                                                    // 1440\n      topLevelTarget,                                                                                                  // 1441\n      topLevelTargetID,                                                                                                // 1442\n      nativeEvent) {                                                                                                   // 1443\n                                                                                                                       // 1444\n    var getTargetIDFunc, handleEventFunc;                                                                              // 1445\n    if (shouldUseChangeEvent(topLevelTarget)) {                                                                        // 1446\n      if (doesChangeEventBubble) {                                                                                     // 1447\n        getTargetIDFunc = getTargetIDForChangeEvent;                                                                   // 1448\n      } else {                                                                                                         // 1449\n        handleEventFunc = handleEventsForChangeEventIE8;                                                               // 1450\n      }                                                                                                                // 1451\n    } else if (isTextInputElement(topLevelTarget)) {                                                                   // 1452\n      if (isInputEventSupported) {                                                                                     // 1453\n        getTargetIDFunc = getTargetIDForInputEvent;                                                                    // 1454\n      } else {                                                                                                         // 1455\n        getTargetIDFunc = getTargetIDForInputEventIE;                                                                  // 1456\n        handleEventFunc = handleEventsForInputEventIE;                                                                 // 1457\n      }                                                                                                                // 1458\n    } else if (shouldUseClickEvent(topLevelTarget)) {                                                                  // 1459\n      getTargetIDFunc = getTargetIDForClickEvent;                                                                      // 1460\n    }                                                                                                                  // 1461\n                                                                                                                       // 1462\n    if (getTargetIDFunc) {                                                                                             // 1463\n      var targetID = getTargetIDFunc(                                                                                  // 1464\n        topLevelType,                                                                                                  // 1465\n        topLevelTarget,                                                                                                // 1466\n        topLevelTargetID                                                                                               // 1467\n      );                                                                                                               // 1468\n      if (targetID) {                                                                                                  // 1469\n        var event = SyntheticEvent.getPooled(                                                                          // 1470\n          eventTypes.change,                                                                                           // 1471\n          targetID,                                                                                                    // 1472\n          nativeEvent                                                                                                  // 1473\n        );                                                                                                             // 1474\n        EventPropagators.accumulateTwoPhaseDispatches(event);                                                          // 1475\n        return event;                                                                                                  // 1476\n      }                                                                                                                // 1477\n    }                                                                                                                  // 1478\n                                                                                                                       // 1479\n    if (handleEventFunc) {                                                                                             // 1480\n      handleEventFunc(                                                                                                 // 1481\n        topLevelType,                                                                                                  // 1482\n        topLevelTarget,                                                                                                // 1483\n        topLevelTargetID                                                                                               // 1484\n      );                                                                                                               // 1485\n    }                                                                                                                  // 1486\n  }                                                                                                                    // 1487\n                                                                                                                       // 1488\n};                                                                                                                     // 1489\n                                                                                                                       // 1490\nmodule.exports = ChangeEventPlugin;                                                                                    // 1491\n                                                                                                                       // 1492\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPluginHub\":\"react/lib/EventPluginHub\",\"./EventPropagators\":\"react/lib/EventPropagators\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./SyntheticEvent\":\"react/lib/SyntheticEvent\",\"./isEventSupported\":\"react/lib/isEventSupported\",\"./isTextInputElement\":\"react/lib/isTextInputElement\",\"./keyOf\":\"react/lib/keyOf\"}],\"react/lib/ClientReactRootIndex\":[function(require,module,exports){\n/**                                                                                                                    // 1494\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 1495\n * All rights reserved.                                                                                                // 1496\n *                                                                                                                     // 1497\n * This source code is licensed under the BSD-style license found in the                                               // 1498\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 1499\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 1500\n *                                                                                                                     // 1501\n * @providesModule ClientReactRootIndex                                                                                // 1502\n * @typechecks                                                                                                         // 1503\n */                                                                                                                    // 1504\n                                                                                                                       // 1505\n'use strict';                                                                                                          // 1506\n                                                                                                                       // 1507\nvar nextReactRootIndex = 0;                                                                                            // 1508\n                                                                                                                       // 1509\nvar ClientReactRootIndex = {                                                                                           // 1510\n  createReactRootIndex: function() {                                                                                   // 1511\n    return nextReactRootIndex++;                                                                                       // 1512\n  }                                                                                                                    // 1513\n};                                                                                                                     // 1514\n                                                                                                                       // 1515\nmodule.exports = ClientReactRootIndex;                                                                                 // 1516\n                                                                                                                       // 1517\n},{}],\"react/lib/DOMChildrenOperations\":[function(require,module,exports){                                             // 1518\n(function (process){                                                                                                   // 1519\n/**                                                                                                                    // 1520\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 1521\n * All rights reserved.                                                                                                // 1522\n *                                                                                                                     // 1523\n * This source code is licensed under the BSD-style license found in the                                               // 1524\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 1525\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 1526\n *                                                                                                                     // 1527\n * @providesModule DOMChildrenOperations                                                                               // 1528\n * @typechecks static-only                                                                                             // 1529\n */                                                                                                                    // 1530\n                                                                                                                       // 1531\n'use strict';                                                                                                          // 1532\n                                                                                                                       // 1533\nvar Danger = require(\"./Danger\");                                                                                      // 1534\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");                                              // 1535\n                                                                                                                       // 1536\nvar setTextContent = require(\"./setTextContent\");                                                                      // 1537\nvar invariant = require(\"./invariant\");                                                                                // 1538\n                                                                                                                       // 1539\n/**                                                                                                                    // 1540\n * Inserts `childNode` as a child of `parentNode` at the `index`.                                                      // 1541\n *                                                                                                                     // 1542\n * @param {DOMElement} parentNode Parent node in which to insert.                                                      // 1543\n * @param {DOMElement} childNode Child node to insert.                                                                 // 1544\n * @param {number} index Index at which to insert the child.                                                           // 1545\n * @internal                                                                                                           // 1546\n */                                                                                                                    // 1547\nfunction insertChildAt(parentNode, childNode, index) {                                                                 // 1548\n  // By exploiting arrays returning `undefined` for an undefined index, we can                                         // 1549\n  // rely exclusively on `insertBefore(node, null)` instead of also using                                              // 1550\n  // `appendChild(node)`. However, using `undefined` is not allowed by all                                             // 1551\n  // browsers so we must replace it with `null`.                                                                       // 1552\n  parentNode.insertBefore(                                                                                             // 1553\n    childNode,                                                                                                         // 1554\n    parentNode.childNodes[index] || null                                                                               // 1555\n  );                                                                                                                   // 1556\n}                                                                                                                      // 1557\n                                                                                                                       // 1558\n/**                                                                                                                    // 1559\n * Operations for updating with DOM children.                                                                          // 1560\n */                                                                                                                    // 1561\nvar DOMChildrenOperations = {                                                                                          // 1562\n                                                                                                                       // 1563\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,                                           // 1564\n                                                                                                                       // 1565\n  updateTextContent: setTextContent,                                                                                   // 1566\n                                                                                                                       // 1567\n  /**                                                                                                                  // 1568\n   * Updates a component's children by processing a series of updates. The                                             // 1569\n   * update configurations are each expected to have a `parentNode` property.                                          // 1570\n   *                                                                                                                   // 1571\n   * @param {array<object>} updates List of update configurations.                                                     // 1572\n   * @param {array<string>} markupList List of markup strings.                                                         // 1573\n   * @internal                                                                                                         // 1574\n   */                                                                                                                  // 1575\n  processUpdates: function(updates, markupList) {                                                                      // 1576\n    var update;                                                                                                        // 1577\n    // Mapping from parent IDs to initial child orderings.                                                             // 1578\n    var initialChildren = null;                                                                                        // 1579\n    // List of children that will be moved or removed.                                                                 // 1580\n    var updatedChildren = null;                                                                                        // 1581\n                                                                                                                       // 1582\n    for (var i = 0; i < updates.length; i++) {                                                                         // 1583\n      update = updates[i];                                                                                             // 1584\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||                                                  // 1585\n          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {                                                    // 1586\n        var updatedIndex = update.fromIndex;                                                                           // 1587\n        var updatedChild = update.parentNode.childNodes[updatedIndex];                                                 // 1588\n        var parentID = update.parentID;                                                                                // 1589\n                                                                                                                       // 1590\n        (\"production\" !== process.env.NODE_ENV ? invariant(                                                            // 1591\n          updatedChild,                                                                                                // 1592\n          'processUpdates(): Unable to find child %s of element. This ' +                                              // 1593\n          'probably means the DOM was unexpectedly mutated (e.g., by the ' +                                           // 1594\n          'browser), usually due to forgetting a <tbody> when using tables, ' +                                        // 1595\n          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +                                        // 1596\n          'in an <svg> parent. Try inspecting the child nodes of the element ' +                                       // 1597\n          'with React ID `%s`.',                                                                                       // 1598\n          updatedIndex,                                                                                                // 1599\n          parentID                                                                                                     // 1600\n        ) : invariant(updatedChild));                                                                                  // 1601\n                                                                                                                       // 1602\n        initialChildren = initialChildren || {};                                                                       // 1603\n        initialChildren[parentID] = initialChildren[parentID] || [];                                                   // 1604\n        initialChildren[parentID][updatedIndex] = updatedChild;                                                        // 1605\n                                                                                                                       // 1606\n        updatedChildren = updatedChildren || [];                                                                       // 1607\n        updatedChildren.push(updatedChild);                                                                            // 1608\n      }                                                                                                                // 1609\n    }                                                                                                                  // 1610\n                                                                                                                       // 1611\n    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);                                                   // 1612\n                                                                                                                       // 1613\n    // Remove updated children first so that `toIndex` is consistent.                                                  // 1614\n    if (updatedChildren) {                                                                                             // 1615\n      for (var j = 0; j < updatedChildren.length; j++) {                                                               // 1616\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);                                                 // 1617\n      }                                                                                                                // 1618\n    }                                                                                                                  // 1619\n                                                                                                                       // 1620\n    for (var k = 0; k < updates.length; k++) {                                                                         // 1621\n      update = updates[k];                                                                                             // 1622\n      switch (update.type) {                                                                                           // 1623\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:                                                                 // 1624\n          insertChildAt(                                                                                               // 1625\n            update.parentNode,                                                                                         // 1626\n            renderedMarkup[update.markupIndex],                                                                        // 1627\n            update.toIndex                                                                                             // 1628\n          );                                                                                                           // 1629\n          break;                                                                                                       // 1630\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:                                                                 // 1631\n          insertChildAt(                                                                                               // 1632\n            update.parentNode,                                                                                         // 1633\n            initialChildren[update.parentID][update.fromIndex],                                                        // 1634\n            update.toIndex                                                                                             // 1635\n          );                                                                                                           // 1636\n          break;                                                                                                       // 1637\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:                                                                  // 1638\n          setTextContent(                                                                                              // 1639\n            update.parentNode,                                                                                         // 1640\n            update.textContent                                                                                         // 1641\n          );                                                                                                           // 1642\n          break;                                                                                                       // 1643\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:                                                                   // 1644\n          // Already removed by the for-loop above.                                                                    // 1645\n          break;                                                                                                       // 1646\n      }                                                                                                                // 1647\n    }                                                                                                                  // 1648\n  }                                                                                                                    // 1649\n                                                                                                                       // 1650\n};                                                                                                                     // 1651\n                                                                                                                       // 1652\nmodule.exports = DOMChildrenOperations;                                                                                // 1653\n                                                                                                                       // 1654\n}).call(this,require('_process'))                                                                                      // 1655\n                                                                                                                       // 1656\n},{\"./Danger\":\"react/lib/Danger\",\"./ReactMultiChildUpdateTypes\":\"react/lib/ReactMultiChildUpdateTypes\",\"./invariant\":\"react/lib/invariant\",\"./setTextContent\":\"react/lib/setTextContent\",\"_process\":1}],\"react/lib/DOMPropertyOperations\":[function(require,module,exports){\n(function (process){                                                                                                   // 1658\n/**                                                                                                                    // 1659\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 1660\n * All rights reserved.                                                                                                // 1661\n *                                                                                                                     // 1662\n * This source code is licensed under the BSD-style license found in the                                               // 1663\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 1664\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 1665\n *                                                                                                                     // 1666\n * @providesModule DOMPropertyOperations                                                                               // 1667\n * @typechecks static-only                                                                                             // 1668\n */                                                                                                                    // 1669\n                                                                                                                       // 1670\n'use strict';                                                                                                          // 1671\n                                                                                                                       // 1672\nvar DOMProperty = require(\"./DOMProperty\");                                                                            // 1673\n                                                                                                                       // 1674\nvar quoteAttributeValueForBrowser = require(\"./quoteAttributeValueForBrowser\");                                        // 1675\nvar warning = require(\"./warning\");                                                                                    // 1676\n                                                                                                                       // 1677\nfunction shouldIgnoreValue(name, value) {                                                                              // 1678\n  return value == null ||                                                                                              // 1679\n    (DOMProperty.hasBooleanValue[name] && !value) ||                                                                   // 1680\n    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||                                                             // 1681\n    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||                                                      // 1682\n    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);                                                  // 1683\n}                                                                                                                      // 1684\n                                                                                                                       // 1685\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 1686\n  var reactProps = {                                                                                                   // 1687\n    children: true,                                                                                                    // 1688\n    dangerouslySetInnerHTML: true,                                                                                     // 1689\n    key: true,                                                                                                         // 1690\n    ref: true                                                                                                          // 1691\n  };                                                                                                                   // 1692\n  var warnedProperties = {};                                                                                           // 1693\n                                                                                                                       // 1694\n  var warnUnknownProperty = function(name) {                                                                           // 1695\n    if (reactProps.hasOwnProperty(name) && reactProps[name] ||                                                         // 1696\n        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {                                             // 1697\n      return;                                                                                                          // 1698\n    }                                                                                                                  // 1699\n                                                                                                                       // 1700\n    warnedProperties[name] = true;                                                                                     // 1701\n    var lowerCasedName = name.toLowerCase();                                                                           // 1702\n                                                                                                                       // 1703\n    // data-* attributes should be lowercase; suggest the lowercase version                                            // 1704\n    var standardName = (                                                                                               // 1705\n      DOMProperty.isCustomAttribute(lowerCasedName) ?                                                                  // 1706\n        lowerCasedName :                                                                                               // 1707\n      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?                                             // 1708\n        DOMProperty.getPossibleStandardName[lowerCasedName] :                                                          // 1709\n        null                                                                                                           // 1710\n    );                                                                                                                 // 1711\n                                                                                                                       // 1712\n    // For now, only warn when we have a suggested correction. This prevents                                           // 1713\n    // logging too much when using transferPropsTo.                                                                    // 1714\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 1715\n      standardName == null,                                                                                            // 1716\n      'Unknown DOM property %s. Did you mean %s?',                                                                     // 1717\n      name,                                                                                                            // 1718\n      standardName                                                                                                     // 1719\n    ) : null);                                                                                                         // 1720\n                                                                                                                       // 1721\n  };                                                                                                                   // 1722\n}                                                                                                                      // 1723\n                                                                                                                       // 1724\n/**                                                                                                                    // 1725\n * Operations for dealing with DOM properties.                                                                         // 1726\n */                                                                                                                    // 1727\nvar DOMPropertyOperations = {                                                                                          // 1728\n                                                                                                                       // 1729\n  /**                                                                                                                  // 1730\n   * Creates markup for the ID property.                                                                               // 1731\n   *                                                                                                                   // 1732\n   * @param {string} id Unescaped ID.                                                                                  // 1733\n   * @return {string} Markup string.                                                                                   // 1734\n   */                                                                                                                  // 1735\n  createMarkupForID: function(id) {                                                                                    // 1736\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +                                                                       // 1737\n      quoteAttributeValueForBrowser(id);                                                                               // 1738\n  },                                                                                                                   // 1739\n                                                                                                                       // 1740\n  /**                                                                                                                  // 1741\n   * Creates markup for a property.                                                                                    // 1742\n   *                                                                                                                   // 1743\n   * @param {string} name                                                                                              // 1744\n   * @param {*} value                                                                                                  // 1745\n   * @return {?string} Markup string, or null if the property was invalid.                                             // 1746\n   */                                                                                                                  // 1747\n  createMarkupForProperty: function(name, value) {                                                                     // 1748\n    if (DOMProperty.isStandardName.hasOwnProperty(name) &&                                                             // 1749\n        DOMProperty.isStandardName[name]) {                                                                            // 1750\n      if (shouldIgnoreValue(name, value)) {                                                                            // 1751\n        return '';                                                                                                     // 1752\n      }                                                                                                                // 1753\n      var attributeName = DOMProperty.getAttributeName[name];                                                          // 1754\n      if (DOMProperty.hasBooleanValue[name] ||                                                                         // 1755\n          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {                                           // 1756\n        return attributeName;                                                                                          // 1757\n      }                                                                                                                // 1758\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);                                               // 1759\n    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 1760\n      if (value == null) {                                                                                             // 1761\n        return '';                                                                                                     // 1762\n      }                                                                                                                // 1763\n      return name + '=' + quoteAttributeValueForBrowser(value);                                                        // 1764\n    } else if (\"production\" !== process.env.NODE_ENV) {                                                                // 1765\n      warnUnknownProperty(name);                                                                                       // 1766\n    }                                                                                                                  // 1767\n    return null;                                                                                                       // 1768\n  },                                                                                                                   // 1769\n                                                                                                                       // 1770\n  /**                                                                                                                  // 1771\n   * Sets the value for a property on a node.                                                                          // 1772\n   *                                                                                                                   // 1773\n   * @param {DOMElement} node                                                                                          // 1774\n   * @param {string} name                                                                                              // 1775\n   * @param {*} value                                                                                                  // 1776\n   */                                                                                                                  // 1777\n  setValueForProperty: function(node, name, value) {                                                                   // 1778\n    if (DOMProperty.isStandardName.hasOwnProperty(name) &&                                                             // 1779\n        DOMProperty.isStandardName[name]) {                                                                            // 1780\n      var mutationMethod = DOMProperty.getMutationMethod[name];                                                        // 1781\n      if (mutationMethod) {                                                                                            // 1782\n        mutationMethod(node, value);                                                                                   // 1783\n      } else if (shouldIgnoreValue(name, value)) {                                                                     // 1784\n        this.deleteValueForProperty(node, name);                                                                       // 1785\n      } else if (DOMProperty.mustUseAttribute[name]) {                                                                 // 1786\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,                                               // 1787\n        // ('' + value) makes it output the correct toString()-value.                                                  // 1788\n        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);                                             // 1789\n      } else {                                                                                                         // 1790\n        var propName = DOMProperty.getPropertyName[name];                                                              // 1791\n        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the                                          // 1792\n        // property type before comparing; only `value` does and is string.                                            // 1793\n        if (!DOMProperty.hasSideEffects[name] ||                                                                       // 1794\n            ('' + node[propName]) !== ('' + value)) {                                                                  // 1795\n          // Contrary to `setAttribute`, object properties are properly                                                // 1796\n          // `toString`ed by IE8/9.                                                                                    // 1797\n          node[propName] = value;                                                                                      // 1798\n        }                                                                                                              // 1799\n      }                                                                                                                // 1800\n    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 1801\n      if (value == null) {                                                                                             // 1802\n        node.removeAttribute(name);                                                                                    // 1803\n      } else {                                                                                                         // 1804\n        node.setAttribute(name, '' + value);                                                                           // 1805\n      }                                                                                                                // 1806\n    } else if (\"production\" !== process.env.NODE_ENV) {                                                                // 1807\n      warnUnknownProperty(name);                                                                                       // 1808\n    }                                                                                                                  // 1809\n  },                                                                                                                   // 1810\n                                                                                                                       // 1811\n  /**                                                                                                                  // 1812\n   * Deletes the value for a property on a node.                                                                       // 1813\n   *                                                                                                                   // 1814\n   * @param {DOMElement} node                                                                                          // 1815\n   * @param {string} name                                                                                              // 1816\n   */                                                                                                                  // 1817\n  deleteValueForProperty: function(node, name) {                                                                       // 1818\n    if (DOMProperty.isStandardName.hasOwnProperty(name) &&                                                             // 1819\n        DOMProperty.isStandardName[name]) {                                                                            // 1820\n      var mutationMethod = DOMProperty.getMutationMethod[name];                                                        // 1821\n      if (mutationMethod) {                                                                                            // 1822\n        mutationMethod(node, undefined);                                                                               // 1823\n      } else if (DOMProperty.mustUseAttribute[name]) {                                                                 // 1824\n        node.removeAttribute(DOMProperty.getAttributeName[name]);                                                      // 1825\n      } else {                                                                                                         // 1826\n        var propName = DOMProperty.getPropertyName[name];                                                              // 1827\n        var defaultValue = DOMProperty.getDefaultValueForProperty(                                                     // 1828\n          node.nodeName,                                                                                               // 1829\n          propName                                                                                                     // 1830\n        );                                                                                                             // 1831\n        if (!DOMProperty.hasSideEffects[name] ||                                                                       // 1832\n            ('' + node[propName]) !== defaultValue) {                                                                  // 1833\n          node[propName] = defaultValue;                                                                               // 1834\n        }                                                                                                              // 1835\n      }                                                                                                                // 1836\n    } else if (DOMProperty.isCustomAttribute(name)) {                                                                  // 1837\n      node.removeAttribute(name);                                                                                      // 1838\n    } else if (\"production\" !== process.env.NODE_ENV) {                                                                // 1839\n      warnUnknownProperty(name);                                                                                       // 1840\n    }                                                                                                                  // 1841\n  }                                                                                                                    // 1842\n                                                                                                                       // 1843\n};                                                                                                                     // 1844\n                                                                                                                       // 1845\nmodule.exports = DOMPropertyOperations;                                                                                // 1846\n                                                                                                                       // 1847\n}).call(this,require('_process'))                                                                                      // 1848\n                                                                                                                       // 1849\n},{\"./DOMProperty\":\"react/lib/DOMProperty\",\"./quoteAttributeValueForBrowser\":\"react/lib/quoteAttributeValueForBrowser\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/DOMProperty\":[function(require,module,exports){\n(function (process){                                                                                                   // 1851\n/**                                                                                                                    // 1852\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 1853\n * All rights reserved.                                                                                                // 1854\n *                                                                                                                     // 1855\n * This source code is licensed under the BSD-style license found in the                                               // 1856\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 1857\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 1858\n *                                                                                                                     // 1859\n * @providesModule DOMProperty                                                                                         // 1860\n * @typechecks static-only                                                                                             // 1861\n */                                                                                                                    // 1862\n                                                                                                                       // 1863\n/*jslint bitwise: true */                                                                                              // 1864\n                                                                                                                       // 1865\n'use strict';                                                                                                          // 1866\n                                                                                                                       // 1867\nvar invariant = require(\"./invariant\");                                                                                // 1868\n                                                                                                                       // 1869\nfunction checkMask(value, bitmask) {                                                                                   // 1870\n  return (value & bitmask) === bitmask;                                                                                // 1871\n}                                                                                                                      // 1872\n                                                                                                                       // 1873\nvar DOMPropertyInjection = {                                                                                           // 1874\n  /**                                                                                                                  // 1875\n   * Mapping from normalized, camelcased property names to a configuration that                                        // 1876\n   * specifies how the associated DOM property should be accessed or rendered.                                         // 1877\n   */                                                                                                                  // 1878\n  MUST_USE_ATTRIBUTE: 0x1,                                                                                             // 1879\n  MUST_USE_PROPERTY: 0x2,                                                                                              // 1880\n  HAS_SIDE_EFFECTS: 0x4,                                                                                               // 1881\n  HAS_BOOLEAN_VALUE: 0x8,                                                                                              // 1882\n  HAS_NUMERIC_VALUE: 0x10,                                                                                             // 1883\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,                                                                             // 1884\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,                                                                                  // 1885\n                                                                                                                       // 1886\n  /**                                                                                                                  // 1887\n   * Inject some specialized knowledge about the DOM. This takes a config object                                       // 1888\n   * with the following properties:                                                                                    // 1889\n   *                                                                                                                   // 1890\n   * isCustomAttribute: function that given an attribute name will return true                                         // 1891\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*                                          // 1892\n   * attributes where it's impossible to enumerate all of the possible                                                 // 1893\n   * attribute names,                                                                                                  // 1894\n   *                                                                                                                   // 1895\n   * Properties: object mapping DOM property name to one of the                                                        // 1896\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,                                          // 1897\n   * it won't get written to the DOM.                                                                                  // 1898\n   *                                                                                                                   // 1899\n   * DOMAttributeNames: object mapping React attribute name to the DOM                                                 // 1900\n   * attribute name. Attribute names not specified use the **lowercase**                                               // 1901\n   * normalized name.                                                                                                  // 1902\n   *                                                                                                                   // 1903\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.                                            // 1904\n   * Property names not specified use the normalized name.                                                             // 1905\n   *                                                                                                                   // 1906\n   * DOMMutationMethods: Properties that require special mutation methods. If                                          // 1907\n   * `value` is undefined, the mutation method should unset the property.                                              // 1908\n   *                                                                                                                   // 1909\n   * @param {object} domPropertyConfig the config as described above.                                                  // 1910\n   */                                                                                                                  // 1911\n  injectDOMPropertyConfig: function(domPropertyConfig) {                                                               // 1912\n    var Properties = domPropertyConfig.Properties || {};                                                               // 1913\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};                                                 // 1914\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};                                                   // 1915\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};                                               // 1916\n                                                                                                                       // 1917\n    if (domPropertyConfig.isCustomAttribute) {                                                                         // 1918\n      DOMProperty._isCustomAttributeFunctions.push(                                                                    // 1919\n        domPropertyConfig.isCustomAttribute                                                                            // 1920\n      );                                                                                                               // 1921\n    }                                                                                                                  // 1922\n                                                                                                                       // 1923\n    for (var propName in Properties) {                                                                                 // 1924\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 1925\n        !DOMProperty.isStandardName.hasOwnProperty(propName),                                                          // 1926\n        'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' +                                       // 1927\n        '\\'%s\\' which has already been injected. You may be accidentally ' +                                           // 1928\n        'injecting the same DOM property config twice, or you may be ' +                                               // 1929\n        'injecting two configs that have conflicting property names.',                                                 // 1930\n        propName                                                                                                       // 1931\n      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));                                            // 1932\n                                                                                                                       // 1933\n      DOMProperty.isStandardName[propName] = true;                                                                     // 1934\n                                                                                                                       // 1935\n      var lowerCased = propName.toLowerCase();                                                                         // 1936\n      DOMProperty.getPossibleStandardName[lowerCased] = propName;                                                      // 1937\n                                                                                                                       // 1938\n      if (DOMAttributeNames.hasOwnProperty(propName)) {                                                                // 1939\n        var attributeName = DOMAttributeNames[propName];                                                               // 1940\n        DOMProperty.getPossibleStandardName[attributeName] = propName;                                                 // 1941\n        DOMProperty.getAttributeName[propName] = attributeName;                                                        // 1942\n      } else {                                                                                                         // 1943\n        DOMProperty.getAttributeName[propName] = lowerCased;                                                           // 1944\n      }                                                                                                                // 1945\n                                                                                                                       // 1946\n      DOMProperty.getPropertyName[propName] =                                                                          // 1947\n        DOMPropertyNames.hasOwnProperty(propName) ?                                                                    // 1948\n          DOMPropertyNames[propName] :                                                                                 // 1949\n          propName;                                                                                                    // 1950\n                                                                                                                       // 1951\n      if (DOMMutationMethods.hasOwnProperty(propName)) {                                                               // 1952\n        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];                                        // 1953\n      } else {                                                                                                         // 1954\n        DOMProperty.getMutationMethod[propName] = null;                                                                // 1955\n      }                                                                                                                // 1956\n                                                                                                                       // 1957\n      var propConfig = Properties[propName];                                                                           // 1958\n      DOMProperty.mustUseAttribute[propName] =                                                                         // 1959\n        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);                                                // 1960\n      DOMProperty.mustUseProperty[propName] =                                                                          // 1961\n        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);                                                 // 1962\n      DOMProperty.hasSideEffects[propName] =                                                                           // 1963\n        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);                                                  // 1964\n      DOMProperty.hasBooleanValue[propName] =                                                                          // 1965\n        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);                                                 // 1966\n      DOMProperty.hasNumericValue[propName] =                                                                          // 1967\n        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);                                                 // 1968\n      DOMProperty.hasPositiveNumericValue[propName] =                                                                  // 1969\n        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);                                        // 1970\n      DOMProperty.hasOverloadedBooleanValue[propName] =                                                                // 1971\n        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);                                      // 1972\n                                                                                                                       // 1973\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 1974\n        !DOMProperty.mustUseAttribute[propName] ||                                                                     // 1975\n          !DOMProperty.mustUseProperty[propName],                                                                      // 1976\n        'DOMProperty: Cannot require using both attribute and property: %s',                                           // 1977\n        propName                                                                                                       // 1978\n      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||                                                         // 1979\n        !DOMProperty.mustUseProperty[propName]));                                                                      // 1980\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 1981\n        DOMProperty.mustUseProperty[propName] ||                                                                       // 1982\n          !DOMProperty.hasSideEffects[propName],                                                                       // 1983\n        'DOMProperty: Properties that have side effects must use property: %s',                                        // 1984\n        propName                                                                                                       // 1985\n      ) : invariant(DOMProperty.mustUseProperty[propName] ||                                                           // 1986\n        !DOMProperty.hasSideEffects[propName]));                                                                       // 1987\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 1988\n        !!DOMProperty.hasBooleanValue[propName] +                                                                      // 1989\n          !!DOMProperty.hasNumericValue[propName] +                                                                    // 1990\n          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,                                                      // 1991\n        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +                                          // 1992\n        'numeric value, but not a combination: %s',                                                                    // 1993\n        propName                                                                                                       // 1994\n      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +                                                          // 1995\n        !!DOMProperty.hasNumericValue[propName] +                                                                      // 1996\n        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));                                                      // 1997\n    }                                                                                                                  // 1998\n  }                                                                                                                    // 1999\n};                                                                                                                     // 2000\nvar defaultValueCache = {};                                                                                            // 2001\n                                                                                                                       // 2002\n/**                                                                                                                    // 2003\n * DOMProperty exports lookup objects that can be used like functions:                                                 // 2004\n *                                                                                                                     // 2005\n *   > DOMProperty.isValid['id']                                                                                       // 2006\n *   true                                                                                                              // 2007\n *   > DOMProperty.isValid['foobar']                                                                                   // 2008\n *   undefined                                                                                                         // 2009\n *                                                                                                                     // 2010\n * Although this may be confusing, it performs better in general.                                                      // 2011\n *                                                                                                                     // 2012\n * @see http://jsperf.com/key-exists                                                                                   // 2013\n * @see http://jsperf.com/key-missing                                                                                  // 2014\n */                                                                                                                    // 2015\nvar DOMProperty = {                                                                                                    // 2016\n                                                                                                                       // 2017\n  ID_ATTRIBUTE_NAME: 'data-reactid',                                                                                   // 2018\n                                                                                                                       // 2019\n  /**                                                                                                                  // 2020\n   * Checks whether a property name is a standard property.                                                            // 2021\n   * @type {Object}                                                                                                    // 2022\n   */                                                                                                                  // 2023\n  isStandardName: {},                                                                                                  // 2024\n                                                                                                                       // 2025\n  /**                                                                                                                  // 2026\n   * Mapping from lowercase property names to the properly cased version, used                                         // 2027\n   * to warn in the case of missing properties.                                                                        // 2028\n   * @type {Object}                                                                                                    // 2029\n   */                                                                                                                  // 2030\n  getPossibleStandardName: {},                                                                                         // 2031\n                                                                                                                       // 2032\n  /**                                                                                                                  // 2033\n   * Mapping from normalized names to attribute names that differ. Attribute                                           // 2034\n   * names are used when rendering markup or with `*Attribute()`.                                                      // 2035\n   * @type {Object}                                                                                                    // 2036\n   */                                                                                                                  // 2037\n  getAttributeName: {},                                                                                                // 2038\n                                                                                                                       // 2039\n  /**                                                                                                                  // 2040\n   * Mapping from normalized names to properties on DOM node instances.                                                // 2041\n   * (This includes properties that mutate due to external factors.)                                                   // 2042\n   * @type {Object}                                                                                                    // 2043\n   */                                                                                                                  // 2044\n  getPropertyName: {},                                                                                                 // 2045\n                                                                                                                       // 2046\n  /**                                                                                                                  // 2047\n   * Mapping from normalized names to mutation methods. This will only exist if                                        // 2048\n   * mutation cannot be set simply by the property or `setAttribute()`.                                                // 2049\n   * @type {Object}                                                                                                    // 2050\n   */                                                                                                                  // 2051\n  getMutationMethod: {},                                                                                               // 2052\n                                                                                                                       // 2053\n  /**                                                                                                                  // 2054\n   * Whether the property must be accessed and mutated as an object property.                                          // 2055\n   * @type {Object}                                                                                                    // 2056\n   */                                                                                                                  // 2057\n  mustUseAttribute: {},                                                                                                // 2058\n                                                                                                                       // 2059\n  /**                                                                                                                  // 2060\n   * Whether the property must be accessed and mutated using `*Attribute()`.                                           // 2061\n   * (This includes anything that fails `<propName> in <element>`.)                                                    // 2062\n   * @type {Object}                                                                                                    // 2063\n   */                                                                                                                  // 2064\n  mustUseProperty: {},                                                                                                 // 2065\n                                                                                                                       // 2066\n  /**                                                                                                                  // 2067\n   * Whether or not setting a value causes side effects such as triggering                                             // 2068\n   * resources to be loaded or text selection changes. We must ensure that                                             // 2069\n   * the value is only set if it has changed.                                                                          // 2070\n   * @type {Object}                                                                                                    // 2071\n   */                                                                                                                  // 2072\n  hasSideEffects: {},                                                                                                  // 2073\n                                                                                                                       // 2074\n  /**                                                                                                                  // 2075\n   * Whether the property should be removed when set to a falsey value.                                                // 2076\n   * @type {Object}                                                                                                    // 2077\n   */                                                                                                                  // 2078\n  hasBooleanValue: {},                                                                                                 // 2079\n                                                                                                                       // 2080\n  /**                                                                                                                  // 2081\n   * Whether the property must be numeric or parse as a                                                                // 2082\n   * numeric and should be removed when set to a falsey value.                                                         // 2083\n   * @type {Object}                                                                                                    // 2084\n   */                                                                                                                  // 2085\n  hasNumericValue: {},                                                                                                 // 2086\n                                                                                                                       // 2087\n  /**                                                                                                                  // 2088\n   * Whether the property must be positive numeric or parse as a positive                                              // 2089\n   * numeric and should be removed when set to a falsey value.                                                         // 2090\n   * @type {Object}                                                                                                    // 2091\n   */                                                                                                                  // 2092\n  hasPositiveNumericValue: {},                                                                                         // 2093\n                                                                                                                       // 2094\n  /**                                                                                                                  // 2095\n   * Whether the property can be used as a flag as well as with a value. Removed                                       // 2096\n   * when strictly equal to false; present without a value when strictly equal                                         // 2097\n   * to true; present with a value otherwise.                                                                          // 2098\n   * @type {Object}                                                                                                    // 2099\n   */                                                                                                                  // 2100\n  hasOverloadedBooleanValue: {},                                                                                       // 2101\n                                                                                                                       // 2102\n  /**                                                                                                                  // 2103\n   * All of the isCustomAttribute() functions that have been injected.                                                 // 2104\n   */                                                                                                                  // 2105\n  _isCustomAttributeFunctions: [],                                                                                     // 2106\n                                                                                                                       // 2107\n  /**                                                                                                                  // 2108\n   * Checks whether a property name is a custom attribute.                                                             // 2109\n   * @method                                                                                                           // 2110\n   */                                                                                                                  // 2111\n  isCustomAttribute: function(attributeName) {                                                                         // 2112\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {                                         // 2113\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];                                            // 2114\n      if (isCustomAttributeFn(attributeName)) {                                                                        // 2115\n        return true;                                                                                                   // 2116\n      }                                                                                                                // 2117\n    }                                                                                                                  // 2118\n    return false;                                                                                                      // 2119\n  },                                                                                                                   // 2120\n                                                                                                                       // 2121\n  /**                                                                                                                  // 2122\n   * Returns the default property value for a DOM property (i.e., not an                                               // 2123\n   * attribute). Most default values are '' or false, but not all. Worse yet,                                          // 2124\n   * some (in particular, `type`) vary depending on the type of element.                                               // 2125\n   *                                                                                                                   // 2126\n   * TODO: Is it better to grab all the possible properties when creating an                                           // 2127\n   * element to avoid having to create the same element twice?                                                         // 2128\n   */                                                                                                                  // 2129\n  getDefaultValueForProperty: function(nodeName, prop) {                                                               // 2130\n    var nodeDefaults = defaultValueCache[nodeName];                                                                    // 2131\n    var testElement;                                                                                                   // 2132\n    if (!nodeDefaults) {                                                                                               // 2133\n      defaultValueCache[nodeName] = nodeDefaults = {};                                                                 // 2134\n    }                                                                                                                  // 2135\n    if (!(prop in nodeDefaults)) {                                                                                     // 2136\n      testElement = document.createElement(nodeName);                                                                  // 2137\n      nodeDefaults[prop] = testElement[prop];                                                                          // 2138\n    }                                                                                                                  // 2139\n    return nodeDefaults[prop];                                                                                         // 2140\n  },                                                                                                                   // 2141\n                                                                                                                       // 2142\n  injection: DOMPropertyInjection                                                                                      // 2143\n};                                                                                                                     // 2144\n                                                                                                                       // 2145\nmodule.exports = DOMProperty;                                                                                          // 2146\n                                                                                                                       // 2147\n}).call(this,require('_process'))                                                                                      // 2148\n                                                                                                                       // 2149\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/Danger\":[function(require,module,exports){            // 2150\n(function (process){                                                                                                   // 2151\n/**                                                                                                                    // 2152\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2153\n * All rights reserved.                                                                                                // 2154\n *                                                                                                                     // 2155\n * This source code is licensed under the BSD-style license found in the                                               // 2156\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 2157\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 2158\n *                                                                                                                     // 2159\n * @providesModule Danger                                                                                              // 2160\n * @typechecks static-only                                                                                             // 2161\n */                                                                                                                    // 2162\n                                                                                                                       // 2163\n/*jslint evil: true, sub: true */                                                                                      // 2164\n                                                                                                                       // 2165\n'use strict';                                                                                                          // 2166\n                                                                                                                       // 2167\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 2168\n                                                                                                                       // 2169\nvar createNodesFromMarkup = require(\"./createNodesFromMarkup\");                                                        // 2170\nvar emptyFunction = require(\"./emptyFunction\");                                                                        // 2171\nvar getMarkupWrap = require(\"./getMarkupWrap\");                                                                        // 2172\nvar invariant = require(\"./invariant\");                                                                                // 2173\n                                                                                                                       // 2174\nvar OPEN_TAG_NAME_EXP = /^(<[^ \\/>]+)/;                                                                                // 2175\nvar RESULT_INDEX_ATTR = 'data-danger-index';                                                                           // 2176\n                                                                                                                       // 2177\n/**                                                                                                                    // 2178\n * Extracts the `nodeName` from a string of markup.                                                                    // 2179\n *                                                                                                                     // 2180\n * NOTE: Extracting the `nodeName` does not require a regular expression match                                         // 2181\n * because we make assumptions about React-generated markup (i.e. there are no                                         // 2182\n * spaces surrounding the opening tag and there is at least one attribute).                                            // 2183\n *                                                                                                                     // 2184\n * @param {string} markup String of markup.                                                                            // 2185\n * @return {string} Node name of the supplied markup.                                                                  // 2186\n * @see http://jsperf.com/extract-nodename                                                                             // 2187\n */                                                                                                                    // 2188\nfunction getNodeName(markup) {                                                                                         // 2189\n  return markup.substring(1, markup.indexOf(' '));                                                                     // 2190\n}                                                                                                                      // 2191\n                                                                                                                       // 2192\nvar Danger = {                                                                                                         // 2193\n                                                                                                                       // 2194\n  /**                                                                                                                  // 2195\n   * Renders markup into an array of nodes. The markup is expected to render                                           // 2196\n   * into a list of root nodes. Also, the length of `resultList` and                                                   // 2197\n   * `markupList` should be the same.                                                                                  // 2198\n   *                                                                                                                   // 2199\n   * @param {array<string>} markupList List of markup strings to render.                                               // 2200\n   * @return {array<DOMElement>} List of rendered nodes.                                                               // 2201\n   * @internal                                                                                                         // 2202\n   */                                                                                                                  // 2203\n  dangerouslyRenderMarkup: function(markupList) {                                                                      // 2204\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 2205\n      ExecutionEnvironment.canUseDOM,                                                                                  // 2206\n      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +                                              // 2207\n      'thread. Make sure `window` and `document` are available globally ' +                                            // 2208\n      'before requiring React when unit testing or use ' +                                                             // 2209\n      'React.renderToString for server rendering.'                                                                     // 2210\n    ) : invariant(ExecutionEnvironment.canUseDOM));                                                                    // 2211\n    var nodeName;                                                                                                      // 2212\n    var markupByNodeName = {};                                                                                         // 2213\n    // Group markup by `nodeName` if a wrap is necessary, else by '*'.                                                 // 2214\n    for (var i = 0; i < markupList.length; i++) {                                                                      // 2215\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 2216\n        markupList[i],                                                                                                 // 2217\n        'dangerouslyRenderMarkup(...): Missing markup.'                                                                // 2218\n      ) : invariant(markupList[i]));                                                                                   // 2219\n      nodeName = getNodeName(markupList[i]);                                                                           // 2220\n      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';                                                             // 2221\n      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];                                                   // 2222\n      markupByNodeName[nodeName][i] = markupList[i];                                                                   // 2223\n    }                                                                                                                  // 2224\n    var resultList = [];                                                                                               // 2225\n    var resultListAssignmentCount = 0;                                                                                 // 2226\n    for (nodeName in markupByNodeName) {                                                                               // 2227\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {                                                                // 2228\n        continue;                                                                                                      // 2229\n      }                                                                                                                // 2230\n      var markupListByNodeName = markupByNodeName[nodeName];                                                           // 2231\n                                                                                                                       // 2232\n      // This for-in loop skips the holes of the sparse array. The order of                                            // 2233\n      // iteration should follow the order of assignment, which happens to match                                       // 2234\n      // numerical index order, but we don't rely on that.                                                             // 2235\n      var resultIndex;                                                                                                 // 2236\n      for (resultIndex in markupListByNodeName) {                                                                      // 2237\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {                                                        // 2238\n          var markup = markupListByNodeName[resultIndex];                                                              // 2239\n                                                                                                                       // 2240\n          // Push the requested markup with an additional RESULT_INDEX_ATTR                                            // 2241\n          // attribute.  If the markup does not start with a < character, it                                           // 2242\n          // will be discarded below (with an appropriate console.error).                                              // 2243\n          markupListByNodeName[resultIndex] = markup.replace(                                                          // 2244\n            OPEN_TAG_NAME_EXP,                                                                                         // 2245\n            // This index will be parsed back out below.                                                               // 2246\n            '$1 ' + RESULT_INDEX_ATTR + '=\"' + resultIndex + '\" '                                                      // 2247\n          );                                                                                                           // 2248\n        }                                                                                                              // 2249\n      }                                                                                                                // 2250\n                                                                                                                       // 2251\n      // Render each group of markup with similar wrapping `nodeName`.                                                 // 2252\n      var renderNodes = createNodesFromMarkup(                                                                         // 2253\n        markupListByNodeName.join(''),                                                                                 // 2254\n        emptyFunction // Do nothing special with <script> tags.                                                        // 2255\n      );                                                                                                               // 2256\n                                                                                                                       // 2257\n      for (var j = 0; j < renderNodes.length; ++j) {                                                                   // 2258\n        var renderNode = renderNodes[j];                                                                               // 2259\n        if (renderNode.hasAttribute &&                                                                                 // 2260\n            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {                                                              // 2261\n                                                                                                                       // 2262\n          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);                                                   // 2263\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);                                                               // 2264\n                                                                                                                       // 2265\n          (\"production\" !== process.env.NODE_ENV ? invariant(                                                          // 2266\n            !resultList.hasOwnProperty(resultIndex),                                                                   // 2267\n            'Danger: Assigning to an already-occupied result index.'                                                   // 2268\n          ) : invariant(!resultList.hasOwnProperty(resultIndex)));                                                     // 2269\n                                                                                                                       // 2270\n          resultList[resultIndex] = renderNode;                                                                        // 2271\n                                                                                                                       // 2272\n          // This should match resultList.length and markupList.length when                                            // 2273\n          // we're done.                                                                                               // 2274\n          resultListAssignmentCount += 1;                                                                              // 2275\n                                                                                                                       // 2276\n        } else if (\"production\" !== process.env.NODE_ENV) {                                                            // 2277\n          console.error(                                                                                               // 2278\n            'Danger: Discarding unexpected node:',                                                                     // 2279\n            renderNode                                                                                                 // 2280\n          );                                                                                                           // 2281\n        }                                                                                                              // 2282\n      }                                                                                                                // 2283\n    }                                                                                                                  // 2284\n                                                                                                                       // 2285\n    // Although resultList was populated out of order, it should now be a dense                                        // 2286\n    // array.                                                                                                          // 2287\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 2288\n      resultListAssignmentCount === resultList.length,                                                                 // 2289\n      'Danger: Did not assign to every index of resultList.'                                                           // 2290\n    ) : invariant(resultListAssignmentCount === resultList.length));                                                   // 2291\n                                                                                                                       // 2292\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 2293\n      resultList.length === markupList.length,                                                                         // 2294\n      'Danger: Expected markup to render %s nodes, but rendered %s.',                                                  // 2295\n      markupList.length,                                                                                               // 2296\n      resultList.length                                                                                                // 2297\n    ) : invariant(resultList.length === markupList.length));                                                           // 2298\n                                                                                                                       // 2299\n    return resultList;                                                                                                 // 2300\n  },                                                                                                                   // 2301\n                                                                                                                       // 2302\n  /**                                                                                                                  // 2303\n   * Replaces a node with a string of markup at its current position within its                                        // 2304\n   * parent. The markup must render into a single root node.                                                           // 2305\n   *                                                                                                                   // 2306\n   * @param {DOMElement} oldChild Child node to replace.                                                               // 2307\n   * @param {string} markup Markup to render in place of the child node.                                               // 2308\n   * @internal                                                                                                         // 2309\n   */                                                                                                                  // 2310\n  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {                                                       // 2311\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 2312\n      ExecutionEnvironment.canUseDOM,                                                                                  // 2313\n      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +                                            // 2314\n      'worker thread. Make sure `window` and `document` are available ' +                                              // 2315\n      'globally before requiring React when unit testing or use ' +                                                    // 2316\n      'React.renderToString for server rendering.'                                                                     // 2317\n    ) : invariant(ExecutionEnvironment.canUseDOM));                                                                    // 2318\n    (\"production\" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 2320\n      oldChild.tagName.toLowerCase() !== 'html',                                                                       // 2321\n      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +                                         // 2322\n      '<html> node. This is because browser quirks make this unreliable ' +                                            // 2323\n      'and/or slow. If you want to render to the root you must use ' +                                                 // 2324\n      'server rendering. See React.renderToString().'                                                                  // 2325\n    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));                                                         // 2326\n                                                                                                                       // 2327\n    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];                                                    // 2328\n    oldChild.parentNode.replaceChild(newChild, oldChild);                                                              // 2329\n  }                                                                                                                    // 2330\n                                                                                                                       // 2331\n};                                                                                                                     // 2332\n                                                                                                                       // 2333\nmodule.exports = Danger;                                                                                               // 2334\n                                                                                                                       // 2335\n}).call(this,require('_process'))                                                                                      // 2336\n                                                                                                                       // 2337\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./createNodesFromMarkup\":\"react/lib/createNodesFromMarkup\",\"./emptyFunction\":\"react/lib/emptyFunction\",\"./getMarkupWrap\":\"react/lib/getMarkupWrap\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/DefaultEventPluginOrder\":[function(require,module,exports){\n/**                                                                                                                    // 2339\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2340\n * All rights reserved.                                                                                                // 2341\n *                                                                                                                     // 2342\n * This source code is licensed under the BSD-style license found in the                                               // 2343\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 2344\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 2345\n *                                                                                                                     // 2346\n * @providesModule DefaultEventPluginOrder                                                                             // 2347\n */                                                                                                                    // 2348\n                                                                                                                       // 2349\n'use strict';                                                                                                          // 2350\n                                                                                                                       // 2351\nvar keyOf = require(\"./keyOf\");                                                                                        // 2352\n                                                                                                                       // 2353\n/**                                                                                                                    // 2354\n * Module that is injectable into `EventPluginHub`, that specifies a                                                   // 2355\n * deterministic ordering of `EventPlugin`s. A convenient way to reason about                                          // 2356\n * plugins, without having to package every one of them. This is better than                                           // 2357\n * having plugins be ordered in the same order that they are injected because                                          // 2358\n * that ordering would be influenced by the packaging order.                                                           // 2359\n * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that                                                // 2360\n * preventing default on events is convenient in `SimpleEventPlugin` handlers.                                         // 2361\n */                                                                                                                    // 2362\nvar DefaultEventPluginOrder = [                                                                                        // 2363\n  keyOf({ResponderEventPlugin: null}),                                                                                 // 2364\n  keyOf({SimpleEventPlugin: null}),                                                                                    // 2365\n  keyOf({TapEventPlugin: null}),                                                                                       // 2366\n  keyOf({EnterLeaveEventPlugin: null}),                                                                                // 2367\n  keyOf({ChangeEventPlugin: null}),                                                                                    // 2368\n  keyOf({SelectEventPlugin: null}),                                                                                    // 2369\n  keyOf({BeforeInputEventPlugin: null}),                                                                               // 2370\n  keyOf({AnalyticsEventPlugin: null}),                                                                                 // 2371\n  keyOf({MobileSafariClickEventPlugin: null})                                                                          // 2372\n];                                                                                                                     // 2373\n                                                                                                                       // 2374\nmodule.exports = DefaultEventPluginOrder;                                                                              // 2375\n                                                                                                                       // 2376\n},{\"./keyOf\":\"react/lib/keyOf\"}],\"react/lib/EnterLeaveEventPlugin\":[function(require,module,exports){                  // 2377\n/**                                                                                                                    // 2378\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2379\n * All rights reserved.                                                                                                // 2380\n *                                                                                                                     // 2381\n * This source code is licensed under the BSD-style license found in the                                               // 2382\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 2383\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 2384\n *                                                                                                                     // 2385\n * @providesModule EnterLeaveEventPlugin                                                                               // 2386\n * @typechecks static-only                                                                                             // 2387\n */                                                                                                                    // 2388\n                                                                                                                       // 2389\n'use strict';                                                                                                          // 2390\n                                                                                                                       // 2391\nvar EventConstants = require(\"./EventConstants\");                                                                      // 2392\nvar EventPropagators = require(\"./EventPropagators\");                                                                  // 2393\nvar SyntheticMouseEvent = require(\"./SyntheticMouseEvent\");                                                            // 2394\n                                                                                                                       // 2395\nvar ReactMount = require(\"./ReactMount\");                                                                              // 2396\nvar keyOf = require(\"./keyOf\");                                                                                        // 2397\n                                                                                                                       // 2398\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 2399\nvar getFirstReactDOM = ReactMount.getFirstReactDOM;                                                                    // 2400\n                                                                                                                       // 2401\nvar eventTypes = {                                                                                                     // 2402\n  mouseEnter: {                                                                                                        // 2403\n    registrationName: keyOf({onMouseEnter: null}),                                                                     // 2404\n    dependencies: [                                                                                                    // 2405\n      topLevelTypes.topMouseOut,                                                                                       // 2406\n      topLevelTypes.topMouseOver                                                                                       // 2407\n    ]                                                                                                                  // 2408\n  },                                                                                                                   // 2409\n  mouseLeave: {                                                                                                        // 2410\n    registrationName: keyOf({onMouseLeave: null}),                                                                     // 2411\n    dependencies: [                                                                                                    // 2412\n      topLevelTypes.topMouseOut,                                                                                       // 2413\n      topLevelTypes.topMouseOver                                                                                       // 2414\n    ]                                                                                                                  // 2415\n  }                                                                                                                    // 2416\n};                                                                                                                     // 2417\n                                                                                                                       // 2418\nvar extractedEvents = [null, null];                                                                                    // 2419\n                                                                                                                       // 2420\nvar EnterLeaveEventPlugin = {                                                                                          // 2421\n                                                                                                                       // 2422\n  eventTypes: eventTypes,                                                                                              // 2423\n                                                                                                                       // 2424\n  /**                                                                                                                  // 2425\n   * For almost every interaction we care about, there will be both a top-level                                        // 2426\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that                                         // 2427\n   * we do not extract duplicate events. However, moving the mouse into the                                            // 2428\n   * browser from outside will not fire a `mouseout` event. In this case, we use                                       // 2429\n   * the `mouseover` top-level event.                                                                                  // 2430\n   *                                                                                                                   // 2431\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 2432\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 2433\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 2434\n   * @param {object} nativeEvent Native browser event.                                                                 // 2435\n   * @return {*} An accumulation of synthetic events.                                                                  // 2436\n   * @see {EventPluginHub.extractEvents}                                                                               // 2437\n   */                                                                                                                  // 2438\n  extractEvents: function(                                                                                             // 2439\n      topLevelType,                                                                                                    // 2440\n      topLevelTarget,                                                                                                  // 2441\n      topLevelTargetID,                                                                                                // 2442\n      nativeEvent) {                                                                                                   // 2443\n    if (topLevelType === topLevelTypes.topMouseOver &&                                                                 // 2444\n        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {                                                      // 2445\n      return null;                                                                                                     // 2446\n    }                                                                                                                  // 2447\n    if (topLevelType !== topLevelTypes.topMouseOut &&                                                                  // 2448\n        topLevelType !== topLevelTypes.topMouseOver) {                                                                 // 2449\n      // Must not be a mouse in or mouse out - ignoring.                                                               // 2450\n      return null;                                                                                                     // 2451\n    }                                                                                                                  // 2452\n                                                                                                                       // 2453\n    var win;                                                                                                           // 2454\n    if (topLevelTarget.window === topLevelTarget) {                                                                    // 2455\n      // `topLevelTarget` is probably a window object.                                                                 // 2456\n      win = topLevelTarget;                                                                                            // 2457\n    } else {                                                                                                           // 2458\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                           // 2459\n      var doc = topLevelTarget.ownerDocument;                                                                          // 2460\n      if (doc) {                                                                                                       // 2461\n        win = doc.defaultView || doc.parentWindow;                                                                     // 2462\n      } else {                                                                                                         // 2463\n        win = window;                                                                                                  // 2464\n      }                                                                                                                // 2465\n    }                                                                                                                  // 2466\n                                                                                                                       // 2467\n    var from, to;                                                                                                      // 2468\n    if (topLevelType === topLevelTypes.topMouseOut) {                                                                  // 2469\n      from = topLevelTarget;                                                                                           // 2470\n      to =                                                                                                             // 2471\n        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||                                        // 2472\n        win;                                                                                                           // 2473\n    } else {                                                                                                           // 2474\n      from = win;                                                                                                      // 2475\n      to = topLevelTarget;                                                                                             // 2476\n    }                                                                                                                  // 2477\n                                                                                                                       // 2478\n    if (from === to) {                                                                                                 // 2479\n      // Nothing pertains to our managed components.                                                                   // 2480\n      return null;                                                                                                     // 2481\n    }                                                                                                                  // 2482\n                                                                                                                       // 2483\n    var fromID = from ? ReactMount.getID(from) : '';                                                                   // 2484\n    var toID = to ? ReactMount.getID(to) : '';                                                                         // 2485\n                                                                                                                       // 2486\n    var leave = SyntheticMouseEvent.getPooled(                                                                         // 2487\n      eventTypes.mouseLeave,                                                                                           // 2488\n      fromID,                                                                                                          // 2489\n      nativeEvent                                                                                                      // 2490\n    );                                                                                                                 // 2491\n    leave.type = 'mouseleave';                                                                                         // 2492\n    leave.target = from;                                                                                               // 2493\n    leave.relatedTarget = to;                                                                                          // 2494\n                                                                                                                       // 2495\n    var enter = SyntheticMouseEvent.getPooled(                                                                         // 2496\n      eventTypes.mouseEnter,                                                                                           // 2497\n      toID,                                                                                                            // 2498\n      nativeEvent                                                                                                      // 2499\n    );                                                                                                                 // 2500\n    enter.type = 'mouseenter';                                                                                         // 2501\n    enter.target = to;                                                                                                 // 2502\n    enter.relatedTarget = from;                                                                                        // 2503\n                                                                                                                       // 2504\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);                                       // 2505\n                                                                                                                       // 2506\n    extractedEvents[0] = leave;                                                                                        // 2507\n    extractedEvents[1] = enter;                                                                                        // 2508\n                                                                                                                       // 2509\n    return extractedEvents;                                                                                            // 2510\n  }                                                                                                                    // 2511\n                                                                                                                       // 2512\n};                                                                                                                     // 2513\n                                                                                                                       // 2514\nmodule.exports = EnterLeaveEventPlugin;                                                                                // 2515\n                                                                                                                       // 2516\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPropagators\":\"react/lib/EventPropagators\",\"./ReactMount\":\"react/lib/ReactMount\",\"./SyntheticMouseEvent\":\"react/lib/SyntheticMouseEvent\",\"./keyOf\":\"react/lib/keyOf\"}],\"react/lib/EventConstants\":[function(require,module,exports){\n/**                                                                                                                    // 2518\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2519\n * All rights reserved.                                                                                                // 2520\n *                                                                                                                     // 2521\n * This source code is licensed under the BSD-style license found in the                                               // 2522\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 2523\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 2524\n *                                                                                                                     // 2525\n * @providesModule EventConstants                                                                                      // 2526\n */                                                                                                                    // 2527\n                                                                                                                       // 2528\n'use strict';                                                                                                          // 2529\n                                                                                                                       // 2530\nvar keyMirror = require(\"./keyMirror\");                                                                                // 2531\n                                                                                                                       // 2532\nvar PropagationPhases = keyMirror({bubbled: null, captured: null});                                                    // 2533\n                                                                                                                       // 2534\n/**                                                                                                                    // 2535\n * Types of raw signals from the browser caught at the top level.                                                      // 2536\n */                                                                                                                    // 2537\nvar topLevelTypes = keyMirror({                                                                                        // 2538\n  topBlur: null,                                                                                                       // 2539\n  topChange: null,                                                                                                     // 2540\n  topClick: null,                                                                                                      // 2541\n  topCompositionEnd: null,                                                                                             // 2542\n  topCompositionStart: null,                                                                                           // 2543\n  topCompositionUpdate: null,                                                                                          // 2544\n  topContextMenu: null,                                                                                                // 2545\n  topCopy: null,                                                                                                       // 2546\n  topCut: null,                                                                                                        // 2547\n  topDoubleClick: null,                                                                                                // 2548\n  topDrag: null,                                                                                                       // 2549\n  topDragEnd: null,                                                                                                    // 2550\n  topDragEnter: null,                                                                                                  // 2551\n  topDragExit: null,                                                                                                   // 2552\n  topDragLeave: null,                                                                                                  // 2553\n  topDragOver: null,                                                                                                   // 2554\n  topDragStart: null,                                                                                                  // 2555\n  topDrop: null,                                                                                                       // 2556\n  topError: null,                                                                                                      // 2557\n  topFocus: null,                                                                                                      // 2558\n  topInput: null,                                                                                                      // 2559\n  topKeyDown: null,                                                                                                    // 2560\n  topKeyPress: null,                                                                                                   // 2561\n  topKeyUp: null,                                                                                                      // 2562\n  topLoad: null,                                                                                                       // 2563\n  topMouseDown: null,                                                                                                  // 2564\n  topMouseMove: null,                                                                                                  // 2565\n  topMouseOut: null,                                                                                                   // 2566\n  topMouseOver: null,                                                                                                  // 2567\n  topMouseUp: null,                                                                                                    // 2568\n  topPaste: null,                                                                                                      // 2569\n  topReset: null,                                                                                                      // 2570\n  topScroll: null,                                                                                                     // 2571\n  topSelectionChange: null,                                                                                            // 2572\n  topSubmit: null,                                                                                                     // 2573\n  topTextInput: null,                                                                                                  // 2574\n  topTouchCancel: null,                                                                                                // 2575\n  topTouchEnd: null,                                                                                                   // 2576\n  topTouchMove: null,                                                                                                  // 2577\n  topTouchStart: null,                                                                                                 // 2578\n  topWheel: null                                                                                                       // 2579\n});                                                                                                                    // 2580\n                                                                                                                       // 2581\nvar EventConstants = {                                                                                                 // 2582\n  topLevelTypes: topLevelTypes,                                                                                        // 2583\n  PropagationPhases: PropagationPhases                                                                                 // 2584\n};                                                                                                                     // 2585\n                                                                                                                       // 2586\nmodule.exports = EventConstants;                                                                                       // 2587\n                                                                                                                       // 2588\n},{\"./keyMirror\":\"react/lib/keyMirror\"}],\"react/lib/EventListener\":[function(require,module,exports){                  // 2589\n(function (process){                                                                                                   // 2590\n/**                                                                                                                    // 2591\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2592\n *                                                                                                                     // 2593\n * Licensed under the Apache License, Version 2.0 (the \"License\");                                                     // 2594\n * you may not use this file except in compliance with the License.                                                    // 2595\n * You may obtain a copy of the License at                                                                             // 2596\n *                                                                                                                     // 2597\n * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 2598\n *                                                                                                                     // 2599\n * Unless required by applicable law or agreed to in writing, software                                                 // 2600\n * distributed under the License is distributed on an \"AS IS\" BASIS,                                                   // 2601\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 2602\n * See the License for the specific language governing permissions and                                                 // 2603\n * limitations under the License.                                                                                      // 2604\n *                                                                                                                     // 2605\n * @providesModule EventListener                                                                                       // 2606\n * @typechecks                                                                                                         // 2607\n */                                                                                                                    // 2608\n                                                                                                                       // 2609\nvar emptyFunction = require(\"./emptyFunction\");                                                                        // 2610\n                                                                                                                       // 2611\n/**                                                                                                                    // 2612\n * Upstream version of event listener. Does not take into account specific                                             // 2613\n * nature of platform.                                                                                                 // 2614\n */                                                                                                                    // 2615\nvar EventListener = {                                                                                                  // 2616\n  /**                                                                                                                  // 2617\n   * Listen to DOM events during the bubble phase.                                                                     // 2618\n   *                                                                                                                   // 2619\n   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 2620\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 2621\n   * @param {function} callback Callback function.                                                                     // 2622\n   * @return {object} Object with a `remove` method.                                                                   // 2623\n   */                                                                                                                  // 2624\n  listen: function(target, eventType, callback) {                                                                      // 2625\n    if (target.addEventListener) {                                                                                     // 2626\n      target.addEventListener(eventType, callback, false);                                                             // 2627\n      return {                                                                                                         // 2628\n        remove: function() {                                                                                           // 2629\n          target.removeEventListener(eventType, callback, false);                                                      // 2630\n        }                                                                                                              // 2631\n      };                                                                                                               // 2632\n    } else if (target.attachEvent) {                                                                                   // 2633\n      target.attachEvent('on' + eventType, callback);                                                                  // 2634\n      return {                                                                                                         // 2635\n        remove: function() {                                                                                           // 2636\n          target.detachEvent('on' + eventType, callback);                                                              // 2637\n        }                                                                                                              // 2638\n      };                                                                                                               // 2639\n    }                                                                                                                  // 2640\n  },                                                                                                                   // 2641\n                                                                                                                       // 2642\n  /**                                                                                                                  // 2643\n   * Listen to DOM events during the capture phase.                                                                    // 2644\n   *                                                                                                                   // 2645\n   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 2646\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 2647\n   * @param {function} callback Callback function.                                                                     // 2648\n   * @return {object} Object with a `remove` method.                                                                   // 2649\n   */                                                                                                                  // 2650\n  capture: function(target, eventType, callback) {                                                                     // 2651\n    if (!target.addEventListener) {                                                                                    // 2652\n      if (\"production\" !== process.env.NODE_ENV) {                                                                     // 2653\n        console.error(                                                                                                 // 2654\n          'Attempted to listen to events during the capture phase on a ' +                                             // 2655\n          'browser that does not support the capture phase. Your application ' +                                       // 2656\n          'will not receive some events.'                                                                              // 2657\n        );                                                                                                             // 2658\n      }                                                                                                                // 2659\n      return {                                                                                                         // 2660\n        remove: emptyFunction                                                                                          // 2661\n      };                                                                                                               // 2662\n    } else {                                                                                                           // 2663\n      target.addEventListener(eventType, callback, true);                                                              // 2664\n      return {                                                                                                         // 2665\n        remove: function() {                                                                                           // 2666\n          target.removeEventListener(eventType, callback, true);                                                       // 2667\n        }                                                                                                              // 2668\n      };                                                                                                               // 2669\n    }                                                                                                                  // 2670\n  },                                                                                                                   // 2671\n                                                                                                                       // 2672\n  registerDefault: function() {}                                                                                       // 2673\n};                                                                                                                     // 2674\n                                                                                                                       // 2675\nmodule.exports = EventListener;                                                                                        // 2676\n                                                                                                                       // 2677\n}).call(this,require('_process'))                                                                                      // 2678\n                                                                                                                       // 2679\n},{\"./emptyFunction\":\"react/lib/emptyFunction\",\"_process\":1}],\"react/lib/EventPluginHub\":[function(require,module,exports){\n(function (process){                                                                                                   // 2681\n/**                                                                                                                    // 2682\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2683\n * All rights reserved.                                                                                                // 2684\n *                                                                                                                     // 2685\n * This source code is licensed under the BSD-style license found in the                                               // 2686\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 2687\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 2688\n *                                                                                                                     // 2689\n * @providesModule EventPluginHub                                                                                      // 2690\n */                                                                                                                    // 2691\n                                                                                                                       // 2692\n'use strict';                                                                                                          // 2693\n                                                                                                                       // 2694\nvar EventPluginRegistry = require(\"./EventPluginRegistry\");                                                            // 2695\nvar EventPluginUtils = require(\"./EventPluginUtils\");                                                                  // 2696\n                                                                                                                       // 2697\nvar accumulateInto = require(\"./accumulateInto\");                                                                      // 2698\nvar forEachAccumulated = require(\"./forEachAccumulated\");                                                              // 2699\nvar invariant = require(\"./invariant\");                                                                                // 2700\n                                                                                                                       // 2701\n/**                                                                                                                    // 2702\n * Internal store for event listeners                                                                                  // 2703\n */                                                                                                                    // 2704\nvar listenerBank = {};                                                                                                 // 2705\n                                                                                                                       // 2706\n/**                                                                                                                    // 2707\n * Internal queue of events that have accumulated their dispatches and are                                             // 2708\n * waiting to have their dispatches executed.                                                                          // 2709\n */                                                                                                                    // 2710\nvar eventQueue = null;                                                                                                 // 2711\n                                                                                                                       // 2712\n/**                                                                                                                    // 2713\n * Dispatches an event and releases it back into the pool, unless persistent.                                          // 2714\n *                                                                                                                     // 2715\n * @param {?object} event Synthetic event to be dispatched.                                                            // 2716\n * @private                                                                                                            // 2717\n */                                                                                                                    // 2718\nvar executeDispatchesAndRelease = function(event) {                                                                    // 2719\n  if (event) {                                                                                                         // 2720\n    var executeDispatch = EventPluginUtils.executeDispatch;                                                            // 2721\n    // Plugins can provide custom behavior when dispatching events.                                                    // 2722\n    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);                                             // 2723\n    if (PluginModule && PluginModule.executeDispatch) {                                                                // 2724\n      executeDispatch = PluginModule.executeDispatch;                                                                  // 2725\n    }                                                                                                                  // 2726\n    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);                                                 // 2727\n                                                                                                                       // 2728\n    if (!event.isPersistent()) {                                                                                       // 2729\n      event.constructor.release(event);                                                                                // 2730\n    }                                                                                                                  // 2731\n  }                                                                                                                    // 2732\n};                                                                                                                     // 2733\n                                                                                                                       // 2734\n/**                                                                                                                    // 2735\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM                                       // 2736\n *   hierarchy given ids of the logical DOM elements involved.                                                         // 2737\n */                                                                                                                    // 2738\nvar InstanceHandle = null;                                                                                             // 2739\n                                                                                                                       // 2740\nfunction validateInstanceHandle() {                                                                                    // 2741\n  var valid =                                                                                                          // 2742\n    InstanceHandle &&                                                                                                  // 2743\n    InstanceHandle.traverseTwoPhase &&                                                                                 // 2744\n    InstanceHandle.traverseEnterLeave;                                                                                 // 2745\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 2746\n    valid,                                                                                                             // 2747\n    'InstanceHandle not injected before use!'                                                                          // 2748\n  ) : invariant(valid));                                                                                               // 2749\n}                                                                                                                      // 2750\n                                                                                                                       // 2751\n/**                                                                                                                    // 2752\n * This is a unified interface for event plugins to be installed and configured.                                       // 2753\n *                                                                                                                     // 2754\n * Event plugins can implement the following properties:                                                               // 2755\n *                                                                                                                     // 2756\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}                                             // 2757\n *     Required. When a top-level event is fired, this method is expected to                                           // 2758\n *     extract synthetic events that will in turn be queued and dispatched.                                            // 2759\n *                                                                                                                     // 2760\n *   `eventTypes` {object}                                                                                             // 2761\n *     Optional, plugins that fire events must publish a mapping of registration                                       // 2762\n *     names that are used to register listeners. Values of this mapping must                                          // 2763\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.                                        // 2764\n *                                                                                                                     // 2765\n *   `executeDispatch` {function(object, function, string)}                                                            // 2766\n *     Optional, allows plugins to override how an event gets dispatched. By                                           // 2767\n *     default, the listener is simply invoked.                                                                        // 2768\n *                                                                                                                     // 2769\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.                                        // 2770\n *                                                                                                                     // 2771\n * @public                                                                                                             // 2772\n */                                                                                                                    // 2773\nvar EventPluginHub = {                                                                                                 // 2774\n                                                                                                                       // 2775\n  /**                                                                                                                  // 2776\n   * Methods for injecting dependencies.                                                                               // 2777\n   */                                                                                                                  // 2778\n  injection: {                                                                                                         // 2779\n                                                                                                                       // 2780\n    /**                                                                                                                // 2781\n     * @param {object} InjectedMount                                                                                   // 2782\n     * @public                                                                                                         // 2783\n     */                                                                                                                // 2784\n    injectMount: EventPluginUtils.injection.injectMount,                                                               // 2785\n                                                                                                                       // 2786\n    /**                                                                                                                // 2787\n     * @param {object} InjectedInstanceHandle                                                                          // 2788\n     * @public                                                                                                         // 2789\n     */                                                                                                                // 2790\n    injectInstanceHandle: function(InjectedInstanceHandle) {                                                           // 2791\n      InstanceHandle = InjectedInstanceHandle;                                                                         // 2792\n      if (\"production\" !== process.env.NODE_ENV) {                                                                     // 2793\n        validateInstanceHandle();                                                                                      // 2794\n      }                                                                                                                // 2795\n    },                                                                                                                 // 2796\n                                                                                                                       // 2797\n    getInstanceHandle: function() {                                                                                    // 2798\n      if (\"production\" !== process.env.NODE_ENV) {                                                                     // 2799\n        validateInstanceHandle();                                                                                      // 2800\n      }                                                                                                                // 2801\n      return InstanceHandle;                                                                                           // 2802\n    },                                                                                                                 // 2803\n                                                                                                                       // 2804\n    /**                                                                                                                // 2805\n     * @param {array} InjectedEventPluginOrder                                                                         // 2806\n     * @public                                                                                                         // 2807\n     */                                                                                                                // 2808\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,                                                // 2809\n                                                                                                                       // 2810\n    /**                                                                                                                // 2811\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                        // 2812\n     */                                                                                                                // 2813\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName                                             // 2814\n                                                                                                                       // 2815\n  },                                                                                                                   // 2816\n                                                                                                                       // 2817\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,                                              // 2818\n                                                                                                                       // 2819\n  registrationNameModules: EventPluginRegistry.registrationNameModules,                                                // 2820\n                                                                                                                       // 2821\n  /**                                                                                                                  // 2822\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.                                         // 2823\n   *                                                                                                                   // 2824\n   * @param {string} id ID of the DOM element.                                                                         // 2825\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 2826\n   * @param {?function} listener The callback to store.                                                                // 2827\n   */                                                                                                                  // 2828\n  putListener: function(id, registrationName, listener) {                                                              // 2829\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 2830\n      !listener || typeof listener === 'function',                                                                     // 2831\n      'Expected %s listener to be a function, instead got type %s',                                                    // 2832\n      registrationName, typeof listener                                                                                // 2833\n    ) : invariant(!listener || typeof listener === 'function'));                                                       // 2834\n                                                                                                                       // 2835\n    var bankForRegistrationName =                                                                                      // 2836\n      listenerBank[registrationName] || (listenerBank[registrationName] = {});                                         // 2837\n    bankForRegistrationName[id] = listener;                                                                            // 2838\n  },                                                                                                                   // 2839\n                                                                                                                       // 2840\n  /**                                                                                                                  // 2841\n   * @param {string} id ID of the DOM element.                                                                         // 2842\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 2843\n   * @return {?function} The stored callback.                                                                          // 2844\n   */                                                                                                                  // 2845\n  getListener: function(id, registrationName) {                                                                        // 2846\n    var bankForRegistrationName = listenerBank[registrationName];                                                      // 2847\n    return bankForRegistrationName && bankForRegistrationName[id];                                                     // 2848\n  },                                                                                                                   // 2849\n                                                                                                                       // 2850\n  /**                                                                                                                  // 2851\n   * Deletes a listener from the registration bank.                                                                    // 2852\n   *                                                                                                                   // 2853\n   * @param {string} id ID of the DOM element.                                                                         // 2854\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 2855\n   */                                                                                                                  // 2856\n  deleteListener: function(id, registrationName) {                                                                     // 2857\n    var bankForRegistrationName = listenerBank[registrationName];                                                      // 2858\n    if (bankForRegistrationName) {                                                                                     // 2859\n      delete bankForRegistrationName[id];                                                                              // 2860\n    }                                                                                                                  // 2861\n  },                                                                                                                   // 2862\n                                                                                                                       // 2863\n  /**                                                                                                                  // 2864\n   * Deletes all listeners for the DOM element with the supplied ID.                                                   // 2865\n   *                                                                                                                   // 2866\n   * @param {string} id ID of the DOM element.                                                                         // 2867\n   */                                                                                                                  // 2868\n  deleteAllListeners: function(id) {                                                                                   // 2869\n    for (var registrationName in listenerBank) {                                                                       // 2870\n      delete listenerBank[registrationName][id];                                                                       // 2871\n    }                                                                                                                  // 2872\n  },                                                                                                                   // 2873\n                                                                                                                       // 2874\n  /**                                                                                                                  // 2875\n   * Allows registered plugins an opportunity to extract events from top-level                                         // 2876\n   * native browser events.                                                                                            // 2877\n   *                                                                                                                   // 2878\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 2879\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 2880\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 2881\n   * @param {object} nativeEvent Native browser event.                                                                 // 2882\n   * @return {*} An accumulation of synthetic events.                                                                  // 2883\n   * @internal                                                                                                         // 2884\n   */                                                                                                                  // 2885\n  extractEvents: function(                                                                                             // 2886\n      topLevelType,                                                                                                    // 2887\n      topLevelTarget,                                                                                                  // 2888\n      topLevelTargetID,                                                                                                // 2889\n      nativeEvent) {                                                                                                   // 2890\n    var events;                                                                                                        // 2891\n    var plugins = EventPluginRegistry.plugins;                                                                         // 2892\n    for (var i = 0, l = plugins.length; i < l; i++) {                                                                  // 2893\n      // Not every plugin in the ordering may be loaded at runtime.                                                    // 2894\n      var possiblePlugin = plugins[i];                                                                                 // 2895\n      if (possiblePlugin) {                                                                                            // 2896\n        var extractedEvents = possiblePlugin.extractEvents(                                                            // 2897\n          topLevelType,                                                                                                // 2898\n          topLevelTarget,                                                                                              // 2899\n          topLevelTargetID,                                                                                            // 2900\n          nativeEvent                                                                                                  // 2901\n        );                                                                                                             // 2902\n        if (extractedEvents) {                                                                                         // 2903\n          events = accumulateInto(events, extractedEvents);                                                            // 2904\n        }                                                                                                              // 2905\n      }                                                                                                                // 2906\n    }                                                                                                                  // 2907\n    return events;                                                                                                     // 2908\n  },                                                                                                                   // 2909\n                                                                                                                       // 2910\n  /**                                                                                                                  // 2911\n   * Enqueues a synthetic event that should be dispatched when                                                         // 2912\n   * `processEventQueue` is invoked.                                                                                   // 2913\n   *                                                                                                                   // 2914\n   * @param {*} events An accumulation of synthetic events.                                                            // 2915\n   * @internal                                                                                                         // 2916\n   */                                                                                                                  // 2917\n  enqueueEvents: function(events) {                                                                                    // 2918\n    if (events) {                                                                                                      // 2919\n      eventQueue = accumulateInto(eventQueue, events);                                                                 // 2920\n    }                                                                                                                  // 2921\n  },                                                                                                                   // 2922\n                                                                                                                       // 2923\n  /**                                                                                                                  // 2924\n   * Dispatches all synthetic events on the event queue.                                                               // 2925\n   *                                                                                                                   // 2926\n   * @internal                                                                                                         // 2927\n   */                                                                                                                  // 2928\n  processEventQueue: function() {                                                                                      // 2929\n    // Set `eventQueue` to null before processing it so that we can tell if more                                       // 2930\n    // events get enqueued while processing.                                                                           // 2931\n    var processingEventQueue = eventQueue;                                                                             // 2932\n    eventQueue = null;                                                                                                 // 2933\n    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);                                             // 2934\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 2935\n      !eventQueue,                                                                                                     // 2936\n      'processEventQueue(): Additional events were enqueued while processing ' +                                       // 2937\n      'an event queue. Support for this has not yet been implemented.'                                                 // 2938\n    ) : invariant(!eventQueue));                                                                                       // 2939\n  },                                                                                                                   // 2940\n                                                                                                                       // 2941\n  /**                                                                                                                  // 2942\n   * These are needed for tests only. Do not use!                                                                      // 2943\n   */                                                                                                                  // 2944\n  __purge: function() {                                                                                                // 2945\n    listenerBank = {};                                                                                                 // 2946\n  },                                                                                                                   // 2947\n                                                                                                                       // 2948\n  __getListenerBank: function() {                                                                                      // 2949\n    return listenerBank;                                                                                               // 2950\n  }                                                                                                                    // 2951\n                                                                                                                       // 2952\n};                                                                                                                     // 2953\n                                                                                                                       // 2954\nmodule.exports = EventPluginHub;                                                                                       // 2955\n                                                                                                                       // 2956\n}).call(this,require('_process'))                                                                                      // 2957\n                                                                                                                       // 2958\n},{\"./EventPluginRegistry\":\"react/lib/EventPluginRegistry\",\"./EventPluginUtils\":\"react/lib/EventPluginUtils\",\"./accumulateInto\":\"react/lib/accumulateInto\",\"./forEachAccumulated\":\"react/lib/forEachAccumulated\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/EventPluginRegistry\":[function(require,module,exports){\n(function (process){                                                                                                   // 2960\n/**                                                                                                                    // 2961\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2962\n * All rights reserved.                                                                                                // 2963\n *                                                                                                                     // 2964\n * This source code is licensed under the BSD-style license found in the                                               // 2965\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 2966\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 2967\n *                                                                                                                     // 2968\n * @providesModule EventPluginRegistry                                                                                 // 2969\n * @typechecks static-only                                                                                             // 2970\n */                                                                                                                    // 2971\n                                                                                                                       // 2972\n'use strict';                                                                                                          // 2973\n                                                                                                                       // 2974\nvar invariant = require(\"./invariant\");                                                                                // 2975\n                                                                                                                       // 2976\n/**                                                                                                                    // 2977\n * Injectable ordering of event plugins.                                                                               // 2978\n */                                                                                                                    // 2979\nvar EventPluginOrder = null;                                                                                           // 2980\n                                                                                                                       // 2981\n/**                                                                                                                    // 2982\n * Injectable mapping from names to event plugin modules.                                                              // 2983\n */                                                                                                                    // 2984\nvar namesToPlugins = {};                                                                                               // 2985\n                                                                                                                       // 2986\n/**                                                                                                                    // 2987\n * Recomputes the plugin list using the injected plugins and plugin ordering.                                          // 2988\n *                                                                                                                     // 2989\n * @private                                                                                                            // 2990\n */                                                                                                                    // 2991\nfunction recomputePluginOrdering() {                                                                                   // 2992\n  if (!EventPluginOrder) {                                                                                             // 2993\n    // Wait until an `EventPluginOrder` is injected.                                                                   // 2994\n    return;                                                                                                            // 2995\n  }                                                                                                                    // 2996\n  for (var pluginName in namesToPlugins) {                                                                             // 2997\n    var PluginModule = namesToPlugins[pluginName];                                                                     // 2998\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);                                                            // 2999\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 3000\n      pluginIndex > -1,                                                                                                // 3001\n      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +                                       // 3002\n      'the plugin ordering, `%s`.',                                                                                    // 3003\n      pluginName                                                                                                       // 3004\n    ) : invariant(pluginIndex > -1));                                                                                  // 3005\n    if (EventPluginRegistry.plugins[pluginIndex]) {                                                                    // 3006\n      continue;                                                                                                        // 3007\n    }                                                                                                                  // 3008\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 3009\n      PluginModule.extractEvents,                                                                                      // 3010\n      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +                                        // 3011\n      'method, but `%s` does not.',                                                                                    // 3012\n      pluginName                                                                                                       // 3013\n    ) : invariant(PluginModule.extractEvents));                                                                        // 3014\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;                                                           // 3015\n    var publishedEvents = PluginModule.eventTypes;                                                                     // 3016\n    for (var eventName in publishedEvents) {                                                                           // 3017\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 3018\n        publishEventForPlugin(                                                                                         // 3019\n          publishedEvents[eventName],                                                                                  // 3020\n          PluginModule,                                                                                                // 3021\n          eventName                                                                                                    // 3022\n        ),                                                                                                             // 3023\n        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',                                          // 3024\n        eventName,                                                                                                     // 3025\n        pluginName                                                                                                     // 3026\n      ) : invariant(publishEventForPlugin(                                                                             // 3027\n        publishedEvents[eventName],                                                                                    // 3028\n        PluginModule,                                                                                                  // 3029\n        eventName                                                                                                      // 3030\n      )));                                                                                                             // 3031\n    }                                                                                                                  // 3032\n  }                                                                                                                    // 3033\n}                                                                                                                      // 3034\n                                                                                                                       // 3035\n/**                                                                                                                    // 3036\n * Publishes an event so that it can be dispatched by the supplied plugin.                                             // 3037\n *                                                                                                                     // 3038\n * @param {object} dispatchConfig Dispatch configuration for the event.                                                // 3039\n * @param {object} PluginModule Plugin publishing the event.                                                           // 3040\n * @return {boolean} True if the event was successfully published.                                                     // 3041\n * @private                                                                                                            // 3042\n */                                                                                                                    // 3043\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {                                              // 3044\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 3045\n    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),                                           // 3046\n    'EventPluginHub: More than one plugin attempted to publish the same ' +                                            // 3047\n    'event name, `%s`.',                                                                                               // 3048\n    eventName                                                                                                          // 3049\n  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));                             // 3050\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;                                            // 3051\n                                                                                                                       // 3052\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;                                                // 3053\n  if (phasedRegistrationNames) {                                                                                       // 3054\n    for (var phaseName in phasedRegistrationNames) {                                                                   // 3055\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {                                                         // 3056\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];                                               // 3057\n        publishRegistrationName(                                                                                       // 3058\n          phasedRegistrationName,                                                                                      // 3059\n          PluginModule,                                                                                                // 3060\n          eventName                                                                                                    // 3061\n        );                                                                                                             // 3062\n      }                                                                                                                // 3063\n    }                                                                                                                  // 3064\n    return true;                                                                                                       // 3065\n  } else if (dispatchConfig.registrationName) {                                                                        // 3066\n    publishRegistrationName(                                                                                           // 3067\n      dispatchConfig.registrationName,                                                                                 // 3068\n      PluginModule,                                                                                                    // 3069\n      eventName                                                                                                        // 3070\n    );                                                                                                                 // 3071\n    return true;                                                                                                       // 3072\n  }                                                                                                                    // 3073\n  return false;                                                                                                        // 3074\n}                                                                                                                      // 3075\n                                                                                                                       // 3076\n/**                                                                                                                    // 3077\n * Publishes a registration name that is used to identify dispatched events and                                        // 3078\n * can be used with `EventPluginHub.putListener` to register listeners.                                                // 3079\n *                                                                                                                     // 3080\n * @param {string} registrationName Registration name to add.                                                          // 3081\n * @param {object} PluginModule Plugin publishing the event.                                                           // 3082\n * @private                                                                                                            // 3083\n */                                                                                                                    // 3084\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {                                          // 3085\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 3086\n    !EventPluginRegistry.registrationNameModules[registrationName],                                                    // 3087\n    'EventPluginHub: More than one plugin attempted to publish the same ' +                                            // 3088\n    'registration name, `%s`.',                                                                                        // 3089\n    registrationName                                                                                                   // 3090\n  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));                                      // 3091\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;                                        // 3092\n  EventPluginRegistry.registrationNameDependencies[registrationName] =                                                 // 3093\n    PluginModule.eventTypes[eventName].dependencies;                                                                   // 3094\n}                                                                                                                      // 3095\n                                                                                                                       // 3096\n/**                                                                                                                    // 3097\n * Registers plugins so that they can extract and dispatch events.                                                     // 3098\n *                                                                                                                     // 3099\n * @see {EventPluginHub}                                                                                               // 3100\n */                                                                                                                    // 3101\nvar EventPluginRegistry = {                                                                                            // 3102\n                                                                                                                       // 3103\n  /**                                                                                                                  // 3104\n   * Ordered list of injected plugins.                                                                                 // 3105\n   */                                                                                                                  // 3106\n  plugins: [],                                                                                                         // 3107\n                                                                                                                       // 3108\n  /**                                                                                                                  // 3109\n   * Mapping from event name to dispatch config                                                                        // 3110\n   */                                                                                                                  // 3111\n  eventNameDispatchConfigs: {},                                                                                        // 3112\n                                                                                                                       // 3113\n  /**                                                                                                                  // 3114\n   * Mapping from registration name to plugin module                                                                   // 3115\n   */                                                                                                                  // 3116\n  registrationNameModules: {},                                                                                         // 3117\n                                                                                                                       // 3118\n  /**                                                                                                                  // 3119\n   * Mapping from registration name to event name                                                                      // 3120\n   */                                                                                                                  // 3121\n  registrationNameDependencies: {},                                                                                    // 3122\n                                                                                                                       // 3123\n  /**                                                                                                                  // 3124\n   * Injects an ordering of plugins (by plugin name). This allows the ordering                                         // 3125\n   * to be decoupled from injection of the actual plugins so that ordering is                                          // 3126\n   * always deterministic regardless of packaging, on-the-fly injection, etc.                                          // 3127\n   *                                                                                                                   // 3128\n   * @param {array} InjectedEventPluginOrder                                                                           // 3129\n   * @internal                                                                                                         // 3130\n   * @see {EventPluginHub.injection.injectEventPluginOrder}                                                            // 3131\n   */                                                                                                                  // 3132\n  injectEventPluginOrder: function(InjectedEventPluginOrder) {                                                         // 3133\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 3134\n      !EventPluginOrder,                                                                                               // 3135\n      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +                                          // 3136\n      'once. You are likely trying to load more than one copy of React.'                                               // 3137\n    ) : invariant(!EventPluginOrder));                                                                                 // 3138\n    // Clone the ordering so it cannot be dynamically mutated.                                                         // 3139\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);                                           // 3140\n    recomputePluginOrdering();                                                                                         // 3141\n  },                                                                                                                   // 3142\n                                                                                                                       // 3143\n  /**                                                                                                                  // 3144\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be                                          // 3145\n   * in the ordering injected by `injectEventPluginOrder`.                                                             // 3146\n   *                                                                                                                   // 3147\n   * Plugins can be injected as part of page initialization or on-the-fly.                                             // 3148\n   *                                                                                                                   // 3149\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.                                          // 3150\n   * @internal                                                                                                         // 3151\n   * @see {EventPluginHub.injection.injectEventPluginsByName}                                                          // 3152\n   */                                                                                                                  // 3153\n  injectEventPluginsByName: function(injectedNamesToPlugins) {                                                         // 3154\n    var isOrderingDirty = false;                                                                                       // 3155\n    for (var pluginName in injectedNamesToPlugins) {                                                                   // 3156\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {                                                        // 3157\n        continue;                                                                                                      // 3158\n      }                                                                                                                // 3159\n      var PluginModule = injectedNamesToPlugins[pluginName];                                                           // 3160\n      if (!namesToPlugins.hasOwnProperty(pluginName) ||                                                                // 3161\n          namesToPlugins[pluginName] !== PluginModule) {                                                               // 3162\n        (\"production\" !== process.env.NODE_ENV ? invariant(                                                            // 3163\n          !namesToPlugins[pluginName],                                                                                 // 3164\n          'EventPluginRegistry: Cannot inject two different event plugins ' +                                          // 3165\n          'using the same name, `%s`.',                                                                                // 3166\n          pluginName                                                                                                   // 3167\n        ) : invariant(!namesToPlugins[pluginName]));                                                                   // 3168\n        namesToPlugins[pluginName] = PluginModule;                                                                     // 3169\n        isOrderingDirty = true;                                                                                        // 3170\n      }                                                                                                                // 3171\n    }                                                                                                                  // 3172\n    if (isOrderingDirty) {                                                                                             // 3173\n      recomputePluginOrdering();                                                                                       // 3174\n    }                                                                                                                  // 3175\n  },                                                                                                                   // 3176\n                                                                                                                       // 3177\n  /**                                                                                                                  // 3178\n   * Looks up the plugin for the supplied event.                                                                       // 3179\n   *                                                                                                                   // 3180\n   * @param {object} event A synthetic event.                                                                          // 3181\n   * @return {?object} The plugin that created the supplied event.                                                     // 3182\n   * @internal                                                                                                         // 3183\n   */                                                                                                                  // 3184\n  getPluginModuleForEvent: function(event) {                                                                           // 3185\n    var dispatchConfig = event.dispatchConfig;                                                                         // 3186\n    if (dispatchConfig.registrationName) {                                                                             // 3187\n      return EventPluginRegistry.registrationNameModules[                                                              // 3188\n        dispatchConfig.registrationName                                                                                // 3189\n      ] || null;                                                                                                       // 3190\n    }                                                                                                                  // 3191\n    for (var phase in dispatchConfig.phasedRegistrationNames) {                                                        // 3192\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {                                             // 3193\n        continue;                                                                                                      // 3194\n      }                                                                                                                // 3195\n      var PluginModule = EventPluginRegistry.registrationNameModules[                                                  // 3196\n        dispatchConfig.phasedRegistrationNames[phase]                                                                  // 3197\n      ];                                                                                                               // 3198\n      if (PluginModule) {                                                                                              // 3199\n        return PluginModule;                                                                                           // 3200\n      }                                                                                                                // 3201\n    }                                                                                                                  // 3202\n    return null;                                                                                                       // 3203\n  },                                                                                                                   // 3204\n                                                                                                                       // 3205\n  /**                                                                                                                  // 3206\n   * Exposed for unit testing.                                                                                         // 3207\n   * @private                                                                                                          // 3208\n   */                                                                                                                  // 3209\n  _resetEventPlugins: function() {                                                                                     // 3210\n    EventPluginOrder = null;                                                                                           // 3211\n    for (var pluginName in namesToPlugins) {                                                                           // 3212\n      if (namesToPlugins.hasOwnProperty(pluginName)) {                                                                 // 3213\n        delete namesToPlugins[pluginName];                                                                             // 3214\n      }                                                                                                                // 3215\n    }                                                                                                                  // 3216\n    EventPluginRegistry.plugins.length = 0;                                                                            // 3217\n                                                                                                                       // 3218\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;                                       // 3219\n    for (var eventName in eventNameDispatchConfigs) {                                                                  // 3220\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {                                                        // 3221\n        delete eventNameDispatchConfigs[eventName];                                                                    // 3222\n      }                                                                                                                // 3223\n    }                                                                                                                  // 3224\n                                                                                                                       // 3225\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;                                         // 3226\n    for (var registrationName in registrationNameModules) {                                                            // 3227\n      if (registrationNameModules.hasOwnProperty(registrationName)) {                                                  // 3228\n        delete registrationNameModules[registrationName];                                                              // 3229\n      }                                                                                                                // 3230\n    }                                                                                                                  // 3231\n  }                                                                                                                    // 3232\n                                                                                                                       // 3233\n};                                                                                                                     // 3234\n                                                                                                                       // 3235\nmodule.exports = EventPluginRegistry;                                                                                  // 3236\n                                                                                                                       // 3237\n}).call(this,require('_process'))                                                                                      // 3238\n                                                                                                                       // 3239\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/EventPluginUtils\":[function(require,module,exports){  // 3240\n(function (process){                                                                                                   // 3241\n/**                                                                                                                    // 3242\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3243\n * All rights reserved.                                                                                                // 3244\n *                                                                                                                     // 3245\n * This source code is licensed under the BSD-style license found in the                                               // 3246\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 3247\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 3248\n *                                                                                                                     // 3249\n * @providesModule EventPluginUtils                                                                                    // 3250\n */                                                                                                                    // 3251\n                                                                                                                       // 3252\n'use strict';                                                                                                          // 3253\n                                                                                                                       // 3254\nvar EventConstants = require(\"./EventConstants\");                                                                      // 3255\n                                                                                                                       // 3256\nvar invariant = require(\"./invariant\");                                                                                // 3257\n                                                                                                                       // 3258\n/**                                                                                                                    // 3259\n * Injected dependencies:                                                                                              // 3260\n */                                                                                                                    // 3261\n                                                                                                                       // 3262\n/**                                                                                                                    // 3263\n * - `Mount`: [required] Module that can convert between React dom IDs and                                             // 3264\n *   actual node references.                                                                                           // 3265\n */                                                                                                                    // 3266\nvar injection = {                                                                                                      // 3267\n  Mount: null,                                                                                                         // 3268\n  injectMount: function(InjectedMount) {                                                                               // 3269\n    injection.Mount = InjectedMount;                                                                                   // 3270\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 3271\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 3272\n        InjectedMount && InjectedMount.getNode,                                                                        // 3273\n        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +                                        // 3274\n        'is missing getNode.'                                                                                          // 3275\n      ) : invariant(InjectedMount && InjectedMount.getNode));                                                          // 3276\n    }                                                                                                                  // 3277\n  }                                                                                                                    // 3278\n};                                                                                                                     // 3279\n                                                                                                                       // 3280\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 3281\n                                                                                                                       // 3282\nfunction isEndish(topLevelType) {                                                                                      // 3283\n  return topLevelType === topLevelTypes.topMouseUp ||                                                                  // 3284\n         topLevelType === topLevelTypes.topTouchEnd ||                                                                 // 3285\n         topLevelType === topLevelTypes.topTouchCancel;                                                                // 3286\n}                                                                                                                      // 3287\n                                                                                                                       // 3288\nfunction isMoveish(topLevelType) {                                                                                     // 3289\n  return topLevelType === topLevelTypes.topMouseMove ||                                                                // 3290\n         topLevelType === topLevelTypes.topTouchMove;                                                                  // 3291\n}                                                                                                                      // 3292\nfunction isStartish(topLevelType) {                                                                                    // 3293\n  return topLevelType === topLevelTypes.topMouseDown ||                                                                // 3294\n         topLevelType === topLevelTypes.topTouchStart;                                                                 // 3295\n}                                                                                                                      // 3296\n                                                                                                                       // 3297\n                                                                                                                       // 3298\nvar validateEventDispatches;                                                                                           // 3299\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 3300\n  validateEventDispatches = function(event) {                                                                          // 3301\n    var dispatchListeners = event._dispatchListeners;                                                                  // 3302\n    var dispatchIDs = event._dispatchIDs;                                                                              // 3303\n                                                                                                                       // 3304\n    var listenersIsArr = Array.isArray(dispatchListeners);                                                             // 3305\n    var idsIsArr = Array.isArray(dispatchIDs);                                                                         // 3306\n    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;                                                  // 3307\n    var listenersLen = listenersIsArr ?                                                                                // 3308\n      dispatchListeners.length :                                                                                       // 3309\n      dispatchListeners ? 1 : 0;                                                                                       // 3310\n                                                                                                                       // 3311\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 3312\n      idsIsArr === listenersIsArr && IDsLen === listenersLen,                                                          // 3313\n      'EventPluginUtils: Invalid `event`.'                                                                             // 3314\n    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));                                            // 3315\n  };                                                                                                                   // 3316\n}                                                                                                                      // 3317\n                                                                                                                       // 3318\n/**                                                                                                                    // 3319\n * Invokes `cb(event, listener, id)`. Avoids using call if no scope is                                                 // 3320\n * provided. The `(listener,id)` pair effectively forms the \"dispatch\" but are                                         // 3321\n * kept separate to conserve memory.                                                                                   // 3322\n */                                                                                                                    // 3323\nfunction forEachEventDispatch(event, cb) {                                                                             // 3324\n  var dispatchListeners = event._dispatchListeners;                                                                    // 3325\n  var dispatchIDs = event._dispatchIDs;                                                                                // 3326\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 3327\n    validateEventDispatches(event);                                                                                    // 3328\n  }                                                                                                                    // 3329\n  if (Array.isArray(dispatchListeners)) {                                                                              // 3330\n    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 3331\n      if (event.isPropagationStopped()) {                                                                              // 3332\n        break;                                                                                                         // 3333\n      }                                                                                                                // 3334\n      // Listeners and IDs are two parallel arrays that are always in sync.                                            // 3335\n      cb(event, dispatchListeners[i], dispatchIDs[i]);                                                                 // 3336\n    }                                                                                                                  // 3337\n  } else if (dispatchListeners) {                                                                                      // 3338\n    cb(event, dispatchListeners, dispatchIDs);                                                                         // 3339\n  }                                                                                                                    // 3340\n}                                                                                                                      // 3341\n                                                                                                                       // 3342\n/**                                                                                                                    // 3343\n * Default implementation of PluginModule.executeDispatch().                                                           // 3344\n * @param {SyntheticEvent} SyntheticEvent to handle                                                                    // 3345\n * @param {function} Application-level callback                                                                        // 3346\n * @param {string} domID DOM id to pass to the callback.                                                               // 3347\n */                                                                                                                    // 3348\nfunction executeDispatch(event, listener, domID) {                                                                     // 3349\n  event.currentTarget = injection.Mount.getNode(domID);                                                                // 3350\n  var returnValue = listener(event, domID);                                                                            // 3351\n  event.currentTarget = null;                                                                                          // 3352\n  return returnValue;                                                                                                  // 3353\n}                                                                                                                      // 3354\n                                                                                                                       // 3355\n/**                                                                                                                    // 3356\n * Standard/simple iteration through an event's collected dispatches.                                                  // 3357\n */                                                                                                                    // 3358\nfunction executeDispatchesInOrder(event, cb) {                                                                         // 3359\n  forEachEventDispatch(event, cb);                                                                                     // 3360\n  event._dispatchListeners = null;                                                                                     // 3361\n  event._dispatchIDs = null;                                                                                           // 3362\n}                                                                                                                      // 3363\n                                                                                                                       // 3364\n/**                                                                                                                    // 3365\n * Standard/simple iteration through an event's collected dispatches, but stops                                        // 3366\n * at the first dispatch execution returning true, and returns that id.                                                // 3367\n *                                                                                                                     // 3368\n * @return id of the first dispatch execution who's listener returns true, or                                          // 3369\n * null if no listener returned true.                                                                                  // 3370\n */                                                                                                                    // 3371\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {                                                               // 3372\n  var dispatchListeners = event._dispatchListeners;                                                                    // 3373\n  var dispatchIDs = event._dispatchIDs;                                                                                // 3374\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 3375\n    validateEventDispatches(event);                                                                                    // 3376\n  }                                                                                                                    // 3377\n  if (Array.isArray(dispatchListeners)) {                                                                              // 3378\n    for (var i = 0; i < dispatchListeners.length; i++) {                                                               // 3379\n      if (event.isPropagationStopped()) {                                                                              // 3380\n        break;                                                                                                         // 3381\n      }                                                                                                                // 3382\n      // Listeners and IDs are two parallel arrays that are always in sync.                                            // 3383\n      if (dispatchListeners[i](event, dispatchIDs[i])) {                                                               // 3384\n        return dispatchIDs[i];                                                                                         // 3385\n      }                                                                                                                // 3386\n    }                                                                                                                  // 3387\n  } else if (dispatchListeners) {                                                                                      // 3388\n    if (dispatchListeners(event, dispatchIDs)) {                                                                       // 3389\n      return dispatchIDs;                                                                                              // 3390\n    }                                                                                                                  // 3391\n  }                                                                                                                    // 3392\n  return null;                                                                                                         // 3393\n}                                                                                                                      // 3394\n                                                                                                                       // 3395\n/**                                                                                                                    // 3396\n * @see executeDispatchesInOrderStopAtTrueImpl                                                                         // 3397\n */                                                                                                                    // 3398\nfunction executeDispatchesInOrderStopAtTrue(event) {                                                                   // 3399\n  var ret = executeDispatchesInOrderStopAtTrueImpl(event);                                                             // 3400\n  event._dispatchIDs = null;                                                                                           // 3401\n  event._dispatchListeners = null;                                                                                     // 3402\n  return ret;                                                                                                          // 3403\n}                                                                                                                      // 3404\n                                                                                                                       // 3405\n/**                                                                                                                    // 3406\n * Execution of a \"direct\" dispatch - there must be at most one dispatch                                               // 3407\n * accumulated on the event or it is considered an error. It doesn't really make                                       // 3408\n * sense for an event with multiple dispatches (bubbled) to keep track of the                                          // 3409\n * return values at each dispatch execution, but it does tend to make sense when                                       // 3410\n * dealing with \"direct\" dispatches.                                                                                   // 3411\n *                                                                                                                     // 3412\n * @return The return value of executing the single dispatch.                                                          // 3413\n */                                                                                                                    // 3414\nfunction executeDirectDispatch(event) {                                                                                // 3415\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 3416\n    validateEventDispatches(event);                                                                                    // 3417\n  }                                                                                                                    // 3418\n  var dispatchListener = event._dispatchListeners;                                                                     // 3419\n  var dispatchID = event._dispatchIDs;                                                                                 // 3420\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 3421\n    !Array.isArray(dispatchListener),                                                                                  // 3422\n    'executeDirectDispatch(...): Invalid `event`.'                                                                     // 3423\n  ) : invariant(!Array.isArray(dispatchListener)));                                                                    // 3424\n  var res = dispatchListener ?                                                                                         // 3425\n    dispatchListener(event, dispatchID) :                                                                              // 3426\n    null;                                                                                                              // 3427\n  event._dispatchListeners = null;                                                                                     // 3428\n  event._dispatchIDs = null;                                                                                           // 3429\n  return res;                                                                                                          // 3430\n}                                                                                                                      // 3431\n                                                                                                                       // 3432\n/**                                                                                                                    // 3433\n * @param {SyntheticEvent} event                                                                                       // 3434\n * @return {bool} True iff number of dispatches accumulated is greater than 0.                                         // 3435\n */                                                                                                                    // 3436\nfunction hasDispatches(event) {                                                                                        // 3437\n  return !!event._dispatchListeners;                                                                                   // 3438\n}                                                                                                                      // 3439\n                                                                                                                       // 3440\n/**                                                                                                                    // 3441\n * General utilities that are useful in creating custom Event Plugins.                                                 // 3442\n */                                                                                                                    // 3443\nvar EventPluginUtils = {                                                                                               // 3444\n  isEndish: isEndish,                                                                                                  // 3445\n  isMoveish: isMoveish,                                                                                                // 3446\n  isStartish: isStartish,                                                                                              // 3447\n                                                                                                                       // 3448\n  executeDirectDispatch: executeDirectDispatch,                                                                        // 3449\n  executeDispatch: executeDispatch,                                                                                    // 3450\n  executeDispatchesInOrder: executeDispatchesInOrder,                                                                  // 3451\n  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,                                              // 3452\n  hasDispatches: hasDispatches,                                                                                        // 3453\n  injection: injection,                                                                                                // 3454\n  useTouchEvents: false                                                                                                // 3455\n};                                                                                                                     // 3456\n                                                                                                                       // 3457\nmodule.exports = EventPluginUtils;                                                                                     // 3458\n                                                                                                                       // 3459\n}).call(this,require('_process'))                                                                                      // 3460\n                                                                                                                       // 3461\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/EventPropagators\":[function(require,module,exports){\n(function (process){                                                                                                   // 3463\n/**                                                                                                                    // 3464\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3465\n * All rights reserved.                                                                                                // 3466\n *                                                                                                                     // 3467\n * This source code is licensed under the BSD-style license found in the                                               // 3468\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 3469\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 3470\n *                                                                                                                     // 3471\n * @providesModule EventPropagators                                                                                    // 3472\n */                                                                                                                    // 3473\n                                                                                                                       // 3474\n'use strict';                                                                                                          // 3475\n                                                                                                                       // 3476\nvar EventConstants = require(\"./EventConstants\");                                                                      // 3477\nvar EventPluginHub = require(\"./EventPluginHub\");                                                                      // 3478\n                                                                                                                       // 3479\nvar accumulateInto = require(\"./accumulateInto\");                                                                      // 3480\nvar forEachAccumulated = require(\"./forEachAccumulated\");                                                              // 3481\n                                                                                                                       // 3482\nvar PropagationPhases = EventConstants.PropagationPhases;                                                              // 3483\nvar getListener = EventPluginHub.getListener;                                                                          // 3484\n                                                                                                                       // 3485\n/**                                                                                                                    // 3486\n * Some event types have a notion of different registration names for different                                        // 3487\n * \"phases\" of propagation. This finds listeners by a given phase.                                                     // 3488\n */                                                                                                                    // 3489\nfunction listenerAtPhase(id, event, propagationPhase) {                                                                // 3490\n  var registrationName =                                                                                               // 3491\n    event.dispatchConfig.phasedRegistrationNames[propagationPhase];                                                    // 3492\n  return getListener(id, registrationName);                                                                            // 3493\n}                                                                                                                      // 3494\n                                                                                                                       // 3495\n/**                                                                                                                    // 3496\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function                                           // 3497\n * here, allows us to not have to bind or create functions for each event.                                             // 3498\n * Mutating the event's members allows us to not have to create a wrapping                                             // 3499\n * \"dispatch\" object that pairs the event with the listener.                                                           // 3500\n */                                                                                                                    // 3501\nfunction accumulateDirectionalDispatches(domID, upwards, event) {                                                      // 3502\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 3503\n    if (!domID) {                                                                                                      // 3504\n      throw new Error('Dispatching id must not be null');                                                              // 3505\n    }                                                                                                                  // 3506\n  }                                                                                                                    // 3507\n  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;                                        // 3508\n  var listener = listenerAtPhase(domID, event, phase);                                                                 // 3509\n  if (listener) {                                                                                                      // 3510\n    event._dispatchListeners =                                                                                         // 3511\n      accumulateInto(event._dispatchListeners, listener);                                                              // 3512\n    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);                                                    // 3513\n  }                                                                                                                    // 3514\n}                                                                                                                      // 3515\n                                                                                                                       // 3516\n/**                                                                                                                    // 3517\n * Collect dispatches (must be entirely collected before dispatching - see unit                                        // 3518\n * tests). Lazily allocate the array to conserve memory.  We must loop through                                         // 3519\n * each event and perform the traversal for each one. We can not perform a                                             // 3520\n * single traversal for the entire collection of events because each event may                                         // 3521\n * have a different target.                                                                                            // 3522\n */                                                                                                                    // 3523\nfunction accumulateTwoPhaseDispatchesSingle(event) {                                                                   // 3524\n  if (event && event.dispatchConfig.phasedRegistrationNames) {                                                         // 3525\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(                                                     // 3526\n      event.dispatchMarker,                                                                                            // 3527\n      accumulateDirectionalDispatches,                                                                                 // 3528\n      event                                                                                                            // 3529\n    );                                                                                                                 // 3530\n  }                                                                                                                    // 3531\n}                                                                                                                      // 3532\n                                                                                                                       // 3533\n                                                                                                                       // 3534\n/**                                                                                                                    // 3535\n * Accumulates without regard to direction, does not look for phased                                                   // 3536\n * registration names. Same as `accumulateDirectDispatchesSingle` but without                                          // 3537\n * requiring that the `dispatchMarker` be the same as the dispatched ID.                                               // 3538\n */                                                                                                                    // 3539\nfunction accumulateDispatches(id, ignoredDirection, event) {                                                           // 3540\n  if (event && event.dispatchConfig.registrationName) {                                                                // 3541\n    var registrationName = event.dispatchConfig.registrationName;                                                      // 3542\n    var listener = getListener(id, registrationName);                                                                  // 3543\n    if (listener) {                                                                                                    // 3544\n      event._dispatchListeners =                                                                                       // 3545\n        accumulateInto(event._dispatchListeners, listener);                                                            // 3546\n      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);                                                     // 3547\n    }                                                                                                                  // 3548\n  }                                                                                                                    // 3549\n}                                                                                                                      // 3550\n                                                                                                                       // 3551\n/**                                                                                                                    // 3552\n * Accumulates dispatches on an `SyntheticEvent`, but only for the                                                     // 3553\n * `dispatchMarker`.                                                                                                   // 3554\n * @param {SyntheticEvent} event                                                                                       // 3555\n */                                                                                                                    // 3556\nfunction accumulateDirectDispatchesSingle(event) {                                                                     // 3557\n  if (event && event.dispatchConfig.registrationName) {                                                                // 3558\n    accumulateDispatches(event.dispatchMarker, null, event);                                                           // 3559\n  }                                                                                                                    // 3560\n}                                                                                                                      // 3561\n                                                                                                                       // 3562\nfunction accumulateTwoPhaseDispatches(events) {                                                                        // 3563\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);                                                      // 3564\n}                                                                                                                      // 3565\n                                                                                                                       // 3566\nfunction accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {                                                  // 3567\n  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(                                                     // 3568\n    fromID,                                                                                                            // 3569\n    toID,                                                                                                              // 3570\n    accumulateDispatches,                                                                                              // 3571\n    leave,                                                                                                             // 3572\n    enter                                                                                                              // 3573\n  );                                                                                                                   // 3574\n}                                                                                                                      // 3575\n                                                                                                                       // 3576\n                                                                                                                       // 3577\nfunction accumulateDirectDispatches(events) {                                                                          // 3578\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);                                                        // 3579\n}                                                                                                                      // 3580\n                                                                                                                       // 3581\n                                                                                                                       // 3582\n                                                                                                                       // 3583\n/**                                                                                                                    // 3584\n * A small set of propagation patterns, each of which will accept a small amount                                       // 3585\n * of information, and generate a set of \"dispatch ready event objects\" - which                                        // 3586\n * are sets of events that have already been annotated with a set of dispatched                                        // 3587\n * listener functions/ids. The API is designed this way to discourage these                                            // 3588\n * propagation strategies from actually executing the dispatches, since we                                             // 3589\n * always want to collect the entire set of dispatches before executing event a                                        // 3590\n * single one.                                                                                                         // 3591\n *                                                                                                                     // 3592\n * @constructor EventPropagators                                                                                       // 3593\n */                                                                                                                    // 3594\nvar EventPropagators = {                                                                                               // 3595\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,                                                          // 3596\n  accumulateDirectDispatches: accumulateDirectDispatches,                                                              // 3597\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches                                                       // 3598\n};                                                                                                                     // 3599\n                                                                                                                       // 3600\nmodule.exports = EventPropagators;                                                                                     // 3601\n                                                                                                                       // 3602\n}).call(this,require('_process'))                                                                                      // 3603\n                                                                                                                       // 3604\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPluginHub\":\"react/lib/EventPluginHub\",\"./accumulateInto\":\"react/lib/accumulateInto\",\"./forEachAccumulated\":\"react/lib/forEachAccumulated\",\"_process\":1}],\"react/lib/ExecutionEnvironment\":[function(require,module,exports){\n/**                                                                                                                    // 3606\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3607\n * All rights reserved.                                                                                                // 3608\n *                                                                                                                     // 3609\n * This source code is licensed under the BSD-style license found in the                                               // 3610\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 3611\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 3612\n *                                                                                                                     // 3613\n * @providesModule ExecutionEnvironment                                                                                // 3614\n */                                                                                                                    // 3615\n                                                                                                                       // 3616\n/*jslint evil: true */                                                                                                 // 3617\n                                                                                                                       // 3618\n\"use strict\";                                                                                                          // 3619\n                                                                                                                       // 3620\nvar canUseDOM = !!(                                                                                                    // 3621\n  (typeof window !== 'undefined' &&                                                                                    // 3622\n  window.document && window.document.createElement)                                                                    // 3623\n);                                                                                                                     // 3624\n                                                                                                                       // 3625\n/**                                                                                                                    // 3626\n * Simple, lightweight module assisting with the detection and context of                                              // 3627\n * Worker. Helps avoid circular dependencies and allows code to reason about                                           // 3628\n * whether or not they are in a Worker, even if they never include the main                                            // 3629\n * `ReactWorker` dependency.                                                                                           // 3630\n */                                                                                                                    // 3631\nvar ExecutionEnvironment = {                                                                                           // 3632\n                                                                                                                       // 3633\n  canUseDOM: canUseDOM,                                                                                                // 3634\n                                                                                                                       // 3635\n  canUseWorkers: typeof Worker !== 'undefined',                                                                        // 3636\n                                                                                                                       // 3637\n  canUseEventListeners:                                                                                                // 3638\n    canUseDOM && !!(window.addEventListener || window.attachEvent),                                                    // 3639\n                                                                                                                       // 3640\n  canUseViewport: canUseDOM && !!window.screen,                                                                        // 3641\n                                                                                                                       // 3642\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.                                        // 3643\n                                                                                                                       // 3644\n};                                                                                                                     // 3645\n                                                                                                                       // 3646\nmodule.exports = ExecutionEnvironment;                                                                                 // 3647\n                                                                                                                       // 3648\n},{}],\"react/lib/FallbackCompositionState\":[function(require,module,exports){                                          // 3649\n/**                                                                                                                    // 3650\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3651\n * All rights reserved.                                                                                                // 3652\n *                                                                                                                     // 3653\n * This source code is licensed under the BSD-style license found in the                                               // 3654\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 3655\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 3656\n *                                                                                                                     // 3657\n * @providesModule FallbackCompositionState                                                                            // 3658\n * @typechecks static-only                                                                                             // 3659\n */                                                                                                                    // 3660\n                                                                                                                       // 3661\n'use strict';                                                                                                          // 3662\n                                                                                                                       // 3663\nvar PooledClass = require(\"./PooledClass\");                                                                            // 3664\n                                                                                                                       // 3665\nvar assign = require(\"./Object.assign\");                                                                               // 3666\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");                                                      // 3667\n                                                                                                                       // 3668\n/**                                                                                                                    // 3669\n * This helper class stores information about text content of a target node,                                           // 3670\n * allowing comparison of content before and after a given event.                                                      // 3671\n *                                                                                                                     // 3672\n * Identify the node where selection currently begins, then observe                                                    // 3673\n * both its text content and its current position in the DOM. Since the                                                // 3674\n * browser may natively replace the target node during composition, we can                                             // 3675\n * use its position to find its replacement.                                                                           // 3676\n *                                                                                                                     // 3677\n * @param {DOMEventTarget} root                                                                                        // 3678\n */                                                                                                                    // 3679\nfunction FallbackCompositionState(root) {                                                                              // 3680\n  this._root = root;                                                                                                   // 3681\n  this._startText = this.getText();                                                                                    // 3682\n  this._fallbackText = null;                                                                                           // 3683\n}                                                                                                                      // 3684\n                                                                                                                       // 3685\nassign(FallbackCompositionState.prototype, {                                                                           // 3686\n  /**                                                                                                                  // 3687\n   * Get current text of input.                                                                                        // 3688\n   *                                                                                                                   // 3689\n   * @return {string}                                                                                                  // 3690\n   */                                                                                                                  // 3691\n  getText: function() {                                                                                                // 3692\n    if ('value' in this._root) {                                                                                       // 3693\n      return this._root.value;                                                                                         // 3694\n    }                                                                                                                  // 3695\n    return this._root[getTextContentAccessor()];                                                                       // 3696\n  },                                                                                                                   // 3697\n                                                                                                                       // 3698\n  /**                                                                                                                  // 3699\n   * Determine the differing substring between the initially stored                                                    // 3700\n   * text content and the current content.                                                                             // 3701\n   *                                                                                                                   // 3702\n   * @return {string}                                                                                                  // 3703\n   */                                                                                                                  // 3704\n  getData: function() {                                                                                                // 3705\n    if (this._fallbackText) {                                                                                          // 3706\n      return this._fallbackText;                                                                                       // 3707\n    }                                                                                                                  // 3708\n                                                                                                                       // 3709\n    var start;                                                                                                         // 3710\n    var startValue = this._startText;                                                                                  // 3711\n    var startLength = startValue.length;                                                                               // 3712\n    var end;                                                                                                           // 3713\n    var endValue = this.getText();                                                                                     // 3714\n    var endLength = endValue.length;                                                                                   // 3715\n                                                                                                                       // 3716\n    for (start = 0; start < startLength; start++) {                                                                    // 3717\n      if (startValue[start] !== endValue[start]) {                                                                     // 3718\n        break;                                                                                                         // 3719\n      }                                                                                                                // 3720\n    }                                                                                                                  // 3721\n                                                                                                                       // 3722\n    var minEnd = startLength - start;                                                                                  // 3723\n    for (end = 1; end <= minEnd; end++) {                                                                              // 3724\n      if (startValue[startLength - end] !== endValue[endLength - end]) {                                               // 3725\n        break;                                                                                                         // 3726\n      }                                                                                                                // 3727\n    }                                                                                                                  // 3728\n                                                                                                                       // 3729\n    var sliceTail = end > 1 ? 1 - end : undefined;                                                                     // 3730\n    this._fallbackText = endValue.slice(start, sliceTail);                                                             // 3731\n    return this._fallbackText;                                                                                         // 3732\n  }                                                                                                                    // 3733\n});                                                                                                                    // 3734\n                                                                                                                       // 3735\nPooledClass.addPoolingTo(FallbackCompositionState);                                                                    // 3736\n                                                                                                                       // 3737\nmodule.exports = FallbackCompositionState;                                                                             // 3738\n                                                                                                                       // 3739\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./getTextContentAccessor\":\"react/lib/getTextContentAccessor\"}],\"react/lib/HTMLDOMPropertyConfig\":[function(require,module,exports){\n/**                                                                                                                    // 3741\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3742\n * All rights reserved.                                                                                                // 3743\n *                                                                                                                     // 3744\n * This source code is licensed under the BSD-style license found in the                                               // 3745\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 3746\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 3747\n *                                                                                                                     // 3748\n * @providesModule HTMLDOMPropertyConfig                                                                               // 3749\n */                                                                                                                    // 3750\n                                                                                                                       // 3751\n/*jslint bitwise: true*/                                                                                               // 3752\n                                                                                                                       // 3753\n'use strict';                                                                                                          // 3754\n                                                                                                                       // 3755\nvar DOMProperty = require(\"./DOMProperty\");                                                                            // 3756\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 3757\n                                                                                                                       // 3758\nvar MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;                                                     // 3759\nvar MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;                                                       // 3760\nvar HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;                                                       // 3761\nvar HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;                                                         // 3762\nvar HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;                                                       // 3763\nvar HAS_POSITIVE_NUMERIC_VALUE =                                                                                       // 3764\n  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;                                                                    // 3765\nvar HAS_OVERLOADED_BOOLEAN_VALUE =                                                                                     // 3766\n  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;                                                                  // 3767\n                                                                                                                       // 3768\nvar hasSVG;                                                                                                            // 3769\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 3770\n  var implementation = document.implementation;                                                                        // 3771\n  hasSVG = (                                                                                                           // 3772\n    implementation &&                                                                                                  // 3773\n    implementation.hasFeature &&                                                                                       // 3774\n    implementation.hasFeature(                                                                                         // 3775\n      'http://www.w3.org/TR/SVG11/feature#BasicStructure',                                                             // 3776\n      '1.1'                                                                                                            // 3777\n    )                                                                                                                  // 3778\n  );                                                                                                                   // 3779\n}                                                                                                                      // 3780\n                                                                                                                       // 3781\n                                                                                                                       // 3782\nvar HTMLDOMPropertyConfig = {                                                                                          // 3783\n  isCustomAttribute: RegExp.prototype.test.bind(                                                                       // 3784\n    /^(data|aria)-[a-z_][a-z\\d_.\\-]*$/                                                                                 // 3785\n  ),                                                                                                                   // 3786\n  Properties: {                                                                                                        // 3787\n    /**                                                                                                                // 3788\n     * Standard Properties                                                                                             // 3789\n     */                                                                                                                // 3790\n    accept: null,                                                                                                      // 3791\n    acceptCharset: null,                                                                                               // 3792\n    accessKey: null,                                                                                                   // 3793\n    action: null,                                                                                                      // 3794\n    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                           // 3795\n    allowTransparency: MUST_USE_ATTRIBUTE,                                                                             // 3796\n    alt: null,                                                                                                         // 3797\n    async: HAS_BOOLEAN_VALUE,                                                                                          // 3798\n    autoComplete: null,                                                                                                // 3799\n    // autoFocus is polyfilled/normalized by AutoFocusMixin                                                            // 3800\n    // autoFocus: HAS_BOOLEAN_VALUE,                                                                                   // 3801\n    autoPlay: HAS_BOOLEAN_VALUE,                                                                                       // 3802\n    cellPadding: null,                                                                                                 // 3803\n    cellSpacing: null,                                                                                                 // 3804\n    charSet: MUST_USE_ATTRIBUTE,                                                                                       // 3805\n    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                    // 3806\n    classID: MUST_USE_ATTRIBUTE,                                                                                       // 3807\n    // To set className on SVG elements, it's necessary to use .setAttribute;                                          // 3808\n    // this works on HTML elements too in all browsers except IE8. Conveniently,                                       // 3809\n    // IE8 doesn't support SVG and so we can simply use the attribute in                                               // 3810\n    // browsers that support SVG and the property in browsers that don't,                                              // 3811\n    // regardless of whether the element is HTML or SVG.                                                               // 3812\n    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,                                                        // 3813\n    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 3814\n    colSpan: null,                                                                                                     // 3815\n    content: null,                                                                                                     // 3816\n    contentEditable: null,                                                                                             // 3817\n    contextMenu: MUST_USE_ATTRIBUTE,                                                                                   // 3818\n    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 3819\n    coords: null,                                                                                                      // 3820\n    crossOrigin: null,                                                                                                 // 3821\n    data: null, // For `<object />` acts as `src`.                                                                     // 3822\n    dateTime: MUST_USE_ATTRIBUTE,                                                                                      // 3823\n    defer: HAS_BOOLEAN_VALUE,                                                                                          // 3824\n    dir: null,                                                                                                         // 3825\n    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                  // 3826\n    download: HAS_OVERLOADED_BOOLEAN_VALUE,                                                                            // 3827\n    draggable: null,                                                                                                   // 3828\n    encType: null,                                                                                                     // 3829\n    form: MUST_USE_ATTRIBUTE,                                                                                          // 3830\n    formAction: MUST_USE_ATTRIBUTE,                                                                                    // 3831\n    formEncType: MUST_USE_ATTRIBUTE,                                                                                   // 3832\n    formMethod: MUST_USE_ATTRIBUTE,                                                                                    // 3833\n    formNoValidate: HAS_BOOLEAN_VALUE,                                                                                 // 3834\n    formTarget: MUST_USE_ATTRIBUTE,                                                                                    // 3835\n    frameBorder: MUST_USE_ATTRIBUTE,                                                                                   // 3836\n    headers: null,                                                                                                     // 3837\n    height: MUST_USE_ATTRIBUTE,                                                                                        // 3838\n    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                    // 3839\n    high: null,                                                                                                        // 3840\n    href: null,                                                                                                        // 3841\n    hrefLang: null,                                                                                                    // 3842\n    htmlFor: null,                                                                                                     // 3843\n    httpEquiv: null,                                                                                                   // 3844\n    icon: null,                                                                                                        // 3845\n    id: MUST_USE_PROPERTY,                                                                                             // 3846\n    label: null,                                                                                                       // 3847\n    lang: null,                                                                                                        // 3848\n    list: MUST_USE_ATTRIBUTE,                                                                                          // 3849\n    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                       // 3850\n    low: null,                                                                                                         // 3851\n    manifest: MUST_USE_ATTRIBUTE,                                                                                      // 3852\n    marginHeight: null,                                                                                                // 3853\n    marginWidth: null,                                                                                                 // 3854\n    max: null,                                                                                                         // 3855\n    maxLength: MUST_USE_ATTRIBUTE,                                                                                     // 3856\n    media: MUST_USE_ATTRIBUTE,                                                                                         // 3857\n    mediaGroup: null,                                                                                                  // 3858\n    method: null,                                                                                                      // 3859\n    min: null,                                                                                                         // 3860\n    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 3861\n    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                      // 3862\n    name: null,                                                                                                        // 3863\n    noValidate: HAS_BOOLEAN_VALUE,                                                                                     // 3864\n    open: HAS_BOOLEAN_VALUE,                                                                                           // 3865\n    optimum: null,                                                                                                     // 3866\n    pattern: null,                                                                                                     // 3867\n    placeholder: null,                                                                                                 // 3868\n    poster: null,                                                                                                      // 3869\n    preload: null,                                                                                                     // 3870\n    radioGroup: null,                                                                                                  // 3871\n    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 3872\n    rel: null,                                                                                                         // 3873\n    required: HAS_BOOLEAN_VALUE,                                                                                       // 3874\n    role: MUST_USE_ATTRIBUTE,                                                                                          // 3875\n    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 3876\n    rowSpan: null,                                                                                                     // 3877\n    sandbox: null,                                                                                                     // 3878\n    scope: null,                                                                                                       // 3879\n    scoped: HAS_BOOLEAN_VALUE,                                                                                         // 3880\n    scrolling: null,                                                                                                   // 3881\n    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                  // 3882\n    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,                                                                   // 3883\n    shape: null,                                                                                                       // 3884\n    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,                                                             // 3885\n    sizes: MUST_USE_ATTRIBUTE,                                                                                         // 3886\n    span: HAS_POSITIVE_NUMERIC_VALUE,                                                                                  // 3887\n    spellCheck: null,                                                                                                  // 3888\n    src: null,                                                                                                         // 3889\n    srcDoc: MUST_USE_PROPERTY,                                                                                         // 3890\n    srcSet: MUST_USE_ATTRIBUTE,                                                                                        // 3891\n    start: HAS_NUMERIC_VALUE,                                                                                          // 3892\n    step: null,                                                                                                        // 3893\n    style: null,                                                                                                       // 3894\n    tabIndex: null,                                                                                                    // 3895\n    target: null,                                                                                                      // 3896\n    title: null,                                                                                                       // 3897\n    type: null,                                                                                                        // 3898\n    useMap: null,                                                                                                      // 3899\n    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,                                                                       // 3900\n    width: MUST_USE_ATTRIBUTE,                                                                                         // 3901\n    wmode: MUST_USE_ATTRIBUTE,                                                                                         // 3902\n                                                                                                                       // 3903\n    /**                                                                                                                // 3904\n     * Non-standard Properties                                                                                         // 3905\n     */                                                                                                                // 3906\n    // autoCapitalize and autoCorrect are supported in Mobile Safari for                                               // 3907\n    // keyboard hints.                                                                                                 // 3908\n    autoCapitalize: null,                                                                                              // 3909\n    autoCorrect: null,                                                                                                 // 3910\n    // itemProp, itemScope, itemType are for                                                                           // 3911\n    // Microdata support. See http://schema.org/docs/gs.html                                                           // 3912\n    itemProp: MUST_USE_ATTRIBUTE,                                                                                      // 3913\n    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,                                                                 // 3914\n    itemType: MUST_USE_ATTRIBUTE,                                                                                      // 3915\n    // itemID and itemRef are for Microdata support as well but                                                        // 3916\n    // only specified in the the WHATWG spec document. See                                                             // 3917\n    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api                                         // 3918\n    itemID: MUST_USE_ATTRIBUTE,                                                                                        // 3919\n    itemRef: MUST_USE_ATTRIBUTE,                                                                                       // 3920\n    // property is supported for OpenGraph in meta tags.                                                               // 3921\n    property: null,                                                                                                    // 3922\n    // IE-only attribute that controls focus behavior                                                                  // 3923\n    unselectable: MUST_USE_ATTRIBUTE                                                                                   // 3924\n  },                                                                                                                   // 3925\n  DOMAttributeNames: {                                                                                                 // 3926\n    acceptCharset: 'accept-charset',                                                                                   // 3927\n    className: 'class',                                                                                                // 3928\n    htmlFor: 'for',                                                                                                    // 3929\n    httpEquiv: 'http-equiv'                                                                                            // 3930\n  },                                                                                                                   // 3931\n  DOMPropertyNames: {                                                                                                  // 3932\n    autoCapitalize: 'autocapitalize',                                                                                  // 3933\n    autoComplete: 'autocomplete',                                                                                      // 3934\n    autoCorrect: 'autocorrect',                                                                                        // 3935\n    autoFocus: 'autofocus',                                                                                            // 3936\n    autoPlay: 'autoplay',                                                                                              // 3937\n    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.                                           // 3938\n    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding                                                           // 3939\n    encType: 'encoding',                                                                                               // 3940\n    hrefLang: 'hreflang',                                                                                              // 3941\n    radioGroup: 'radiogroup',                                                                                          // 3942\n    spellCheck: 'spellcheck',                                                                                          // 3943\n    srcDoc: 'srcdoc',                                                                                                  // 3944\n    srcSet: 'srcset'                                                                                                   // 3945\n  }                                                                                                                    // 3946\n};                                                                                                                     // 3947\n                                                                                                                       // 3948\nmodule.exports = HTMLDOMPropertyConfig;                                                                                // 3949\n                                                                                                                       // 3950\n},{\"./DOMProperty\":\"react/lib/DOMProperty\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\"}],\"react/lib/LinkedStateMixin\":[function(require,module,exports){\n/**                                                                                                                    // 3952\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3953\n * All rights reserved.                                                                                                // 3954\n *                                                                                                                     // 3955\n * This source code is licensed under the BSD-style license found in the                                               // 3956\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 3957\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 3958\n *                                                                                                                     // 3959\n * @providesModule LinkedStateMixin                                                                                    // 3960\n * @typechecks static-only                                                                                             // 3961\n */                                                                                                                    // 3962\n                                                                                                                       // 3963\n'use strict';                                                                                                          // 3964\n                                                                                                                       // 3965\nvar ReactLink = require(\"./ReactLink\");                                                                                // 3966\nvar ReactStateSetters = require(\"./ReactStateSetters\");                                                                // 3967\n                                                                                                                       // 3968\n/**                                                                                                                    // 3969\n * A simple mixin around ReactLink.forState().                                                                         // 3970\n */                                                                                                                    // 3971\nvar LinkedStateMixin = {                                                                                               // 3972\n  /**                                                                                                                  // 3973\n   * Create a ReactLink that's linked to part of this component's state. The                                           // 3974\n   * ReactLink will have the current value of this.state[key] and will call                                            // 3975\n   * setState() when a change is requested.                                                                            // 3976\n   *                                                                                                                   // 3977\n   * @param {string} key state key to update. Note: you may want to use keyOf()                                        // 3978\n   * if you're using Google Closure Compiler advanced mode.                                                            // 3979\n   * @return {ReactLink} ReactLink instance linking to the state.                                                      // 3980\n   */                                                                                                                  // 3981\n  linkState: function(key) {                                                                                           // 3982\n    return new ReactLink(                                                                                              // 3983\n      this.state[key],                                                                                                 // 3984\n      ReactStateSetters.createStateKeySetter(this, key)                                                                // 3985\n    );                                                                                                                 // 3986\n  }                                                                                                                    // 3987\n};                                                                                                                     // 3988\n                                                                                                                       // 3989\nmodule.exports = LinkedStateMixin;                                                                                     // 3990\n                                                                                                                       // 3991\n},{\"./ReactLink\":\"react/lib/ReactLink\",\"./ReactStateSetters\":\"react/lib/ReactStateSetters\"}],\"react/lib/LinkedValueUtils\":[function(require,module,exports){\n(function (process){                                                                                                   // 3993\n/**                                                                                                                    // 3994\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 3995\n * All rights reserved.                                                                                                // 3996\n *                                                                                                                     // 3997\n * This source code is licensed under the BSD-style license found in the                                               // 3998\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 3999\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 4000\n *                                                                                                                     // 4001\n * @providesModule LinkedValueUtils                                                                                    // 4002\n * @typechecks static-only                                                                                             // 4003\n */                                                                                                                    // 4004\n                                                                                                                       // 4005\n'use strict';                                                                                                          // 4006\n                                                                                                                       // 4007\nvar ReactPropTypes = require(\"./ReactPropTypes\");                                                                      // 4008\n                                                                                                                       // 4009\nvar invariant = require(\"./invariant\");                                                                                // 4010\n                                                                                                                       // 4011\nvar hasReadOnlyValue = {                                                                                               // 4012\n  'button': true,                                                                                                      // 4013\n  'checkbox': true,                                                                                                    // 4014\n  'image': true,                                                                                                       // 4015\n  'hidden': true,                                                                                                      // 4016\n  'radio': true,                                                                                                       // 4017\n  'reset': true,                                                                                                       // 4018\n  'submit': true                                                                                                       // 4019\n};                                                                                                                     // 4020\n                                                                                                                       // 4021\nfunction _assertSingleLink(input) {                                                                                    // 4022\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 4023\n    input.props.checkedLink == null || input.props.valueLink == null,                                                  // 4024\n    'Cannot provide a checkedLink and a valueLink. If you want to use ' +                                              // 4025\n    'checkedLink, you probably don\\'t want to use valueLink and vice versa.'                                           // 4026\n  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));                                    // 4027\n}                                                                                                                      // 4028\nfunction _assertValueLink(input) {                                                                                     // 4029\n  _assertSingleLink(input);                                                                                            // 4030\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 4031\n    input.props.value == null && input.props.onChange == null,                                                         // 4032\n    'Cannot provide a valueLink and a value or onChange event. If you want ' +                                         // 4033\n    'to use value or onChange, you probably don\\'t want to use valueLink.'                                             // 4034\n  ) : invariant(input.props.value == null && input.props.onChange == null));                                           // 4035\n}                                                                                                                      // 4036\n                                                                                                                       // 4037\nfunction _assertCheckedLink(input) {                                                                                   // 4038\n  _assertSingleLink(input);                                                                                            // 4039\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 4040\n    input.props.checked == null && input.props.onChange == null,                                                       // 4041\n    'Cannot provide a checkedLink and a checked property or onChange event. ' +                                        // 4042\n    'If you want to use checked or onChange, you probably don\\'t want to ' +                                           // 4043\n    'use checkedLink'                                                                                                  // 4044\n  ) : invariant(input.props.checked == null && input.props.onChange == null));                                         // 4045\n}                                                                                                                      // 4046\n                                                                                                                       // 4047\n/**                                                                                                                    // 4048\n * @param {SyntheticEvent} e change event to handle                                                                    // 4049\n */                                                                                                                    // 4050\nfunction _handleLinkedValueChange(e) {                                                                                 // 4051\n  /*jshint validthis:true */                                                                                           // 4052\n  this.props.valueLink.requestChange(e.target.value);                                                                  // 4053\n}                                                                                                                      // 4054\n                                                                                                                       // 4055\n/**                                                                                                                    // 4056\n  * @param {SyntheticEvent} e change event to handle                                                                   // 4057\n  */                                                                                                                   // 4058\nfunction _handleLinkedCheckChange(e) {                                                                                 // 4059\n  /*jshint validthis:true */                                                                                           // 4060\n  this.props.checkedLink.requestChange(e.target.checked);                                                              // 4061\n}                                                                                                                      // 4062\n                                                                                                                       // 4063\n/**                                                                                                                    // 4064\n * Provide a linked `value` attribute for controlled forms. You should not use                                         // 4065\n * this outside of the ReactDOM controlled form components.                                                            // 4066\n */                                                                                                                    // 4067\nvar LinkedValueUtils = {                                                                                               // 4068\n  Mixin: {                                                                                                             // 4069\n    propTypes: {                                                                                                       // 4070\n      value: function(props, propName, componentName) {                                                                // 4071\n        if (!props[propName] ||                                                                                        // 4072\n            hasReadOnlyValue[props.type] ||                                                                            // 4073\n            props.onChange ||                                                                                          // 4074\n            props.readOnly ||                                                                                          // 4075\n            props.disabled) {                                                                                          // 4076\n          return null;                                                                                                 // 4077\n        }                                                                                                              // 4078\n        return new Error(                                                                                              // 4079\n          'You provided a `value` prop to a form field without an ' +                                                  // 4080\n          '`onChange` handler. This will render a read-only field. If ' +                                              // 4081\n          'the field should be mutable use `defaultValue`. Otherwise, ' +                                              // 4082\n          'set either `onChange` or `readOnly`.'                                                                       // 4083\n        );                                                                                                             // 4084\n      },                                                                                                               // 4085\n      checked: function(props, propName, componentName) {                                                              // 4086\n        if (!props[propName] ||                                                                                        // 4087\n            props.onChange ||                                                                                          // 4088\n            props.readOnly ||                                                                                          // 4089\n            props.disabled) {                                                                                          // 4090\n          return null;                                                                                                 // 4091\n        }                                                                                                              // 4092\n        return new Error(                                                                                              // 4093\n          'You provided a `checked` prop to a form field without an ' +                                                // 4094\n          '`onChange` handler. This will render a read-only field. If ' +                                              // 4095\n          'the field should be mutable use `defaultChecked`. Otherwise, ' +                                            // 4096\n          'set either `onChange` or `readOnly`.'                                                                       // 4097\n        );                                                                                                             // 4098\n      },                                                                                                               // 4099\n      onChange: ReactPropTypes.func                                                                                    // 4100\n    }                                                                                                                  // 4101\n  },                                                                                                                   // 4102\n                                                                                                                       // 4103\n  /**                                                                                                                  // 4104\n   * @param {ReactComponent} input Form component                                                                      // 4105\n   * @return {*} current value of the input either from value prop or link.                                            // 4106\n   */                                                                                                                  // 4107\n  getValue: function(input) {                                                                                          // 4108\n    if (input.props.valueLink) {                                                                                       // 4109\n      _assertValueLink(input);                                                                                         // 4110\n      return input.props.valueLink.value;                                                                              // 4111\n    }                                                                                                                  // 4112\n    return input.props.value;                                                                                          // 4113\n  },                                                                                                                   // 4114\n                                                                                                                       // 4115\n  /**                                                                                                                  // 4116\n   * @param {ReactComponent} input Form component                                                                      // 4117\n   * @return {*} current checked status of the input either from checked prop                                          // 4118\n   *             or link.                                                                                              // 4119\n   */                                                                                                                  // 4120\n  getChecked: function(input) {                                                                                        // 4121\n    if (input.props.checkedLink) {                                                                                     // 4122\n      _assertCheckedLink(input);                                                                                       // 4123\n      return input.props.checkedLink.value;                                                                            // 4124\n    }                                                                                                                  // 4125\n    return input.props.checked;                                                                                        // 4126\n  },                                                                                                                   // 4127\n                                                                                                                       // 4128\n  /**                                                                                                                  // 4129\n   * @param {ReactComponent} input Form component                                                                      // 4130\n   * @return {function} change callback either from onChange prop or link.                                             // 4131\n   */                                                                                                                  // 4132\n  getOnChange: function(input) {                                                                                       // 4133\n    if (input.props.valueLink) {                                                                                       // 4134\n      _assertValueLink(input);                                                                                         // 4135\n      return _handleLinkedValueChange;                                                                                 // 4136\n    } else if (input.props.checkedLink) {                                                                              // 4137\n      _assertCheckedLink(input);                                                                                       // 4138\n      return _handleLinkedCheckChange;                                                                                 // 4139\n    }                                                                                                                  // 4140\n    return input.props.onChange;                                                                                       // 4141\n  }                                                                                                                    // 4142\n};                                                                                                                     // 4143\n                                                                                                                       // 4144\nmodule.exports = LinkedValueUtils;                                                                                     // 4145\n                                                                                                                       // 4146\n}).call(this,require('_process'))                                                                                      // 4147\n                                                                                                                       // 4148\n},{\"./ReactPropTypes\":\"react/lib/ReactPropTypes\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/LocalEventTrapMixin\":[function(require,module,exports){\n(function (process){                                                                                                   // 4150\n/**                                                                                                                    // 4151\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 4152\n * All rights reserved.                                                                                                // 4153\n *                                                                                                                     // 4154\n * This source code is licensed under the BSD-style license found in the                                               // 4155\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 4156\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 4157\n *                                                                                                                     // 4158\n * @providesModule LocalEventTrapMixin                                                                                 // 4159\n */                                                                                                                    // 4160\n                                                                                                                       // 4161\n'use strict';                                                                                                          // 4162\n                                                                                                                       // 4163\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");                                                  // 4164\n                                                                                                                       // 4165\nvar accumulateInto = require(\"./accumulateInto\");                                                                      // 4166\nvar forEachAccumulated = require(\"./forEachAccumulated\");                                                              // 4167\nvar invariant = require(\"./invariant\");                                                                                // 4168\n                                                                                                                       // 4169\nfunction remove(event) {                                                                                               // 4170\n  event.remove();                                                                                                      // 4171\n}                                                                                                                      // 4172\n                                                                                                                       // 4173\nvar LocalEventTrapMixin = {                                                                                            // 4174\n  trapBubbledEvent:function(topLevelType, handlerBaseName) {                                                           // 4175\n    (\"production\" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));\n    // If a component renders to null or if another component fatals and causes                                        // 4177\n    // the state of the tree to be corrupted, `node` here can be null.                                                 // 4178\n    var node = this.getDOMNode();                                                                                      // 4179\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 4180\n      node,                                                                                                            // 4181\n      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'                                       // 4182\n    ) : invariant(node));                                                                                              // 4183\n    var listener = ReactBrowserEventEmitter.trapBubbledEvent(                                                          // 4184\n      topLevelType,                                                                                                    // 4185\n      handlerBaseName,                                                                                                 // 4186\n      node                                                                                                             // 4187\n    );                                                                                                                 // 4188\n    this._localEventListeners =                                                                                        // 4189\n      accumulateInto(this._localEventListeners, listener);                                                             // 4190\n  },                                                                                                                   // 4191\n                                                                                                                       // 4192\n  // trapCapturedEvent would look nearly identical. We don't implement that                                            // 4193\n  // method because it isn't currently needed.                                                                         // 4194\n                                                                                                                       // 4195\n  componentWillUnmount:function() {                                                                                    // 4196\n    if (this._localEventListeners) {                                                                                   // 4197\n      forEachAccumulated(this._localEventListeners, remove);                                                           // 4198\n    }                                                                                                                  // 4199\n  }                                                                                                                    // 4200\n};                                                                                                                     // 4201\n                                                                                                                       // 4202\nmodule.exports = LocalEventTrapMixin;                                                                                  // 4203\n                                                                                                                       // 4204\n}).call(this,require('_process'))                                                                                      // 4205\n                                                                                                                       // 4206\n},{\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\",\"./accumulateInto\":\"react/lib/accumulateInto\",\"./forEachAccumulated\":\"react/lib/forEachAccumulated\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/MobileSafariClickEventPlugin\":[function(require,module,exports){\n/**                                                                                                                    // 4208\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 4209\n * All rights reserved.                                                                                                // 4210\n *                                                                                                                     // 4211\n * This source code is licensed under the BSD-style license found in the                                               // 4212\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 4213\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 4214\n *                                                                                                                     // 4215\n * @providesModule MobileSafariClickEventPlugin                                                                        // 4216\n * @typechecks static-only                                                                                             // 4217\n */                                                                                                                    // 4218\n                                                                                                                       // 4219\n'use strict';                                                                                                          // 4220\n                                                                                                                       // 4221\nvar EventConstants = require(\"./EventConstants\");                                                                      // 4222\n                                                                                                                       // 4223\nvar emptyFunction = require(\"./emptyFunction\");                                                                        // 4224\n                                                                                                                       // 4225\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 4226\n                                                                                                                       // 4227\n/**                                                                                                                    // 4228\n * Mobile Safari does not fire properly bubble click events on non-interactive                                         // 4229\n * elements, which means delegated click listeners do not fire. The workaround                                         // 4230\n * for this bug involves attaching an empty click listener on the target node.                                         // 4231\n *                                                                                                                     // 4232\n * This particular plugin works around the bug by attaching an empty click                                             // 4233\n * listener on `touchstart` (which does fire on every element).                                                        // 4234\n */                                                                                                                    // 4235\nvar MobileSafariClickEventPlugin = {                                                                                   // 4236\n                                                                                                                       // 4237\n  eventTypes: null,                                                                                                    // 4238\n                                                                                                                       // 4239\n  /**                                                                                                                  // 4240\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 4241\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 4242\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 4243\n   * @param {object} nativeEvent Native browser event.                                                                 // 4244\n   * @return {*} An accumulation of synthetic events.                                                                  // 4245\n   * @see {EventPluginHub.extractEvents}                                                                               // 4246\n   */                                                                                                                  // 4247\n  extractEvents: function(                                                                                             // 4248\n      topLevelType,                                                                                                    // 4249\n      topLevelTarget,                                                                                                  // 4250\n      topLevelTargetID,                                                                                                // 4251\n      nativeEvent) {                                                                                                   // 4252\n    if (topLevelType === topLevelTypes.topTouchStart) {                                                                // 4253\n      var target = nativeEvent.target;                                                                                 // 4254\n      if (target && !target.onclick) {                                                                                 // 4255\n        target.onclick = emptyFunction;                                                                                // 4256\n      }                                                                                                                // 4257\n    }                                                                                                                  // 4258\n  }                                                                                                                    // 4259\n                                                                                                                       // 4260\n};                                                                                                                     // 4261\n                                                                                                                       // 4262\nmodule.exports = MobileSafariClickEventPlugin;                                                                         // 4263\n                                                                                                                       // 4264\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./emptyFunction\":\"react/lib/emptyFunction\"}],\"react/lib/Object.assign\":[function(require,module,exports){\n/**                                                                                                                    // 4266\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 4267\n * All rights reserved.                                                                                                // 4268\n *                                                                                                                     // 4269\n * This source code is licensed under the BSD-style license found in the                                               // 4270\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 4271\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 4272\n *                                                                                                                     // 4273\n * @providesModule Object.assign                                                                                       // 4274\n */                                                                                                                    // 4275\n                                                                                                                       // 4276\n// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign                                             // 4277\n                                                                                                                       // 4278\n'use strict';                                                                                                          // 4279\n                                                                                                                       // 4280\nfunction assign(target, sources) {                                                                                     // 4281\n  if (target == null) {                                                                                                // 4282\n    throw new TypeError('Object.assign target cannot be null or undefined');                                           // 4283\n  }                                                                                                                    // 4284\n                                                                                                                       // 4285\n  var to = Object(target);                                                                                             // 4286\n  var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                // 4287\n                                                                                                                       // 4288\n  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {                                                 // 4289\n    var nextSource = arguments[nextIndex];                                                                             // 4290\n    if (nextSource == null) {                                                                                          // 4291\n      continue;                                                                                                        // 4292\n    }                                                                                                                  // 4293\n                                                                                                                       // 4294\n    var from = Object(nextSource);                                                                                     // 4295\n                                                                                                                       // 4296\n    // We don't currently support accessors nor proxies. Therefore this                                                // 4297\n    // copy cannot throw. If we ever supported this then we must handle                                                // 4298\n    // exceptions and side-effects. We don't support symbols so they won't                                             // 4299\n    // be transferred.                                                                                                 // 4300\n                                                                                                                       // 4301\n    for (var key in from) {                                                                                            // 4302\n      if (hasOwnProperty.call(from, key)) {                                                                            // 4303\n        to[key] = from[key];                                                                                           // 4304\n      }                                                                                                                // 4305\n    }                                                                                                                  // 4306\n  }                                                                                                                    // 4307\n                                                                                                                       // 4308\n  return to;                                                                                                           // 4309\n}                                                                                                                      // 4310\n                                                                                                                       // 4311\nmodule.exports = assign;                                                                                               // 4312\n                                                                                                                       // 4313\n},{}],\"react/lib/PooledClass\":[function(require,module,exports){                                                       // 4314\n(function (process){                                                                                                   // 4315\n/**                                                                                                                    // 4316\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 4317\n * All rights reserved.                                                                                                // 4318\n *                                                                                                                     // 4319\n * This source code is licensed under the BSD-style license found in the                                               // 4320\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 4321\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 4322\n *                                                                                                                     // 4323\n * @providesModule PooledClass                                                                                         // 4324\n */                                                                                                                    // 4325\n                                                                                                                       // 4326\n'use strict';                                                                                                          // 4327\n                                                                                                                       // 4328\nvar invariant = require(\"./invariant\");                                                                                // 4329\n                                                                                                                       // 4330\n/**                                                                                                                    // 4331\n * Static poolers. Several custom versions for each potential number of                                                // 4332\n * arguments. A completely generic pooler is easy to implement, but would                                              // 4333\n * require accessing the `arguments` object. In each of these, `this` refers to                                        // 4334\n * the Class itself, not an instance. If any others are needed, simply add them                                        // 4335\n * here, or in their own files.                                                                                        // 4336\n */                                                                                                                    // 4337\nvar oneArgumentPooler = function(copyFieldsFrom) {                                                                     // 4338\n  var Klass = this;                                                                                                    // 4339\n  if (Klass.instancePool.length) {                                                                                     // 4340\n    var instance = Klass.instancePool.pop();                                                                           // 4341\n    Klass.call(instance, copyFieldsFrom);                                                                              // 4342\n    return instance;                                                                                                   // 4343\n  } else {                                                                                                             // 4344\n    return new Klass(copyFieldsFrom);                                                                                  // 4345\n  }                                                                                                                    // 4346\n};                                                                                                                     // 4347\n                                                                                                                       // 4348\nvar twoArgumentPooler = function(a1, a2) {                                                                             // 4349\n  var Klass = this;                                                                                                    // 4350\n  if (Klass.instancePool.length) {                                                                                     // 4351\n    var instance = Klass.instancePool.pop();                                                                           // 4352\n    Klass.call(instance, a1, a2);                                                                                      // 4353\n    return instance;                                                                                                   // 4354\n  } else {                                                                                                             // 4355\n    return new Klass(a1, a2);                                                                                          // 4356\n  }                                                                                                                    // 4357\n};                                                                                                                     // 4358\n                                                                                                                       // 4359\nvar threeArgumentPooler = function(a1, a2, a3) {                                                                       // 4360\n  var Klass = this;                                                                                                    // 4361\n  if (Klass.instancePool.length) {                                                                                     // 4362\n    var instance = Klass.instancePool.pop();                                                                           // 4363\n    Klass.call(instance, a1, a2, a3);                                                                                  // 4364\n    return instance;                                                                                                   // 4365\n  } else {                                                                                                             // 4366\n    return new Klass(a1, a2, a3);                                                                                      // 4367\n  }                                                                                                                    // 4368\n};                                                                                                                     // 4369\n                                                                                                                       // 4370\nvar fiveArgumentPooler = function(a1, a2, a3, a4, a5) {                                                                // 4371\n  var Klass = this;                                                                                                    // 4372\n  if (Klass.instancePool.length) {                                                                                     // 4373\n    var instance = Klass.instancePool.pop();                                                                           // 4374\n    Klass.call(instance, a1, a2, a3, a4, a5);                                                                          // 4375\n    return instance;                                                                                                   // 4376\n  } else {                                                                                                             // 4377\n    return new Klass(a1, a2, a3, a4, a5);                                                                              // 4378\n  }                                                                                                                    // 4379\n};                                                                                                                     // 4380\n                                                                                                                       // 4381\nvar standardReleaser = function(instance) {                                                                            // 4382\n  var Klass = this;                                                                                                    // 4383\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 4384\n    instance instanceof Klass,                                                                                         // 4385\n    'Trying to release an instance into a pool of a different type.'                                                   // 4386\n  ) : invariant(instance instanceof Klass));                                                                           // 4387\n  if (instance.destructor) {                                                                                           // 4388\n    instance.destructor();                                                                                             // 4389\n  }                                                                                                                    // 4390\n  if (Klass.instancePool.length < Klass.poolSize) {                                                                    // 4391\n    Klass.instancePool.push(instance);                                                                                 // 4392\n  }                                                                                                                    // 4393\n};                                                                                                                     // 4394\n                                                                                                                       // 4395\nvar DEFAULT_POOL_SIZE = 10;                                                                                            // 4396\nvar DEFAULT_POOLER = oneArgumentPooler;                                                                                // 4397\n                                                                                                                       // 4398\n/**                                                                                                                    // 4399\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class                                        // 4400\n * itself (statically) not adding any prototypical fields. Any CopyConstructor                                         // 4401\n * you give this may have a `poolSize` property, and will look for a                                                   // 4402\n * prototypical `destructor` on instances (optional).                                                                  // 4403\n *                                                                                                                     // 4404\n * @param {Function} CopyConstructor Constructor that can be used to reset.                                            // 4405\n * @param {Function} pooler Customizable pooler.                                                                       // 4406\n */                                                                                                                    // 4407\nvar addPoolingTo = function(CopyConstructor, pooler) {                                                                 // 4408\n  var NewKlass = CopyConstructor;                                                                                      // 4409\n  NewKlass.instancePool = [];                                                                                          // 4410\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;                                                                       // 4411\n  if (!NewKlass.poolSize) {                                                                                            // 4412\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;                                                                             // 4413\n  }                                                                                                                    // 4414\n  NewKlass.release = standardReleaser;                                                                                 // 4415\n  return NewKlass;                                                                                                     // 4416\n};                                                                                                                     // 4417\n                                                                                                                       // 4418\nvar PooledClass = {                                                                                                    // 4419\n  addPoolingTo: addPoolingTo,                                                                                          // 4420\n  oneArgumentPooler: oneArgumentPooler,                                                                                // 4421\n  twoArgumentPooler: twoArgumentPooler,                                                                                // 4422\n  threeArgumentPooler: threeArgumentPooler,                                                                            // 4423\n  fiveArgumentPooler: fiveArgumentPooler                                                                               // 4424\n};                                                                                                                     // 4425\n                                                                                                                       // 4426\nmodule.exports = PooledClass;                                                                                          // 4427\n                                                                                                                       // 4428\n}).call(this,require('_process'))                                                                                      // 4429\n                                                                                                                       // 4430\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactBrowserComponentMixin\":[function(require,module,exports){\n/**                                                                                                                    // 4432\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 4433\n * All rights reserved.                                                                                                // 4434\n *                                                                                                                     // 4435\n * This source code is licensed under the BSD-style license found in the                                               // 4436\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 4437\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 4438\n *                                                                                                                     // 4439\n * @providesModule ReactBrowserComponentMixin                                                                          // 4440\n */                                                                                                                    // 4441\n                                                                                                                       // 4442\n'use strict';                                                                                                          // 4443\n                                                                                                                       // 4444\nvar findDOMNode = require(\"./findDOMNode\");                                                                            // 4445\n                                                                                                                       // 4446\nvar ReactBrowserComponentMixin = {                                                                                     // 4447\n  /**                                                                                                                  // 4448\n   * Returns the DOM node rendered by this component.                                                                  // 4449\n   *                                                                                                                   // 4450\n   * @return {DOMElement} The root node of this component.                                                             // 4451\n   * @final                                                                                                            // 4452\n   * @protected                                                                                                        // 4453\n   */                                                                                                                  // 4454\n  getDOMNode: function() {                                                                                             // 4455\n    return findDOMNode(this);                                                                                          // 4456\n  }                                                                                                                    // 4457\n};                                                                                                                     // 4458\n                                                                                                                       // 4459\nmodule.exports = ReactBrowserComponentMixin;                                                                           // 4460\n                                                                                                                       // 4461\n},{\"./findDOMNode\":\"react/lib/findDOMNode\"}],\"react/lib/ReactBrowserEventEmitter\":[function(require,module,exports){   // 4462\n/**                                                                                                                    // 4463\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 4464\n * All rights reserved.                                                                                                // 4465\n *                                                                                                                     // 4466\n * This source code is licensed under the BSD-style license found in the                                               // 4467\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 4468\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 4469\n *                                                                                                                     // 4470\n * @providesModule ReactBrowserEventEmitter                                                                            // 4471\n * @typechecks static-only                                                                                             // 4472\n */                                                                                                                    // 4473\n                                                                                                                       // 4474\n'use strict';                                                                                                          // 4475\n                                                                                                                       // 4476\nvar EventConstants = require(\"./EventConstants\");                                                                      // 4477\nvar EventPluginHub = require(\"./EventPluginHub\");                                                                      // 4478\nvar EventPluginRegistry = require(\"./EventPluginRegistry\");                                                            // 4479\nvar ReactEventEmitterMixin = require(\"./ReactEventEmitterMixin\");                                                      // 4480\nvar ViewportMetrics = require(\"./ViewportMetrics\");                                                                    // 4481\n                                                                                                                       // 4482\nvar assign = require(\"./Object.assign\");                                                                               // 4483\nvar isEventSupported = require(\"./isEventSupported\");                                                                  // 4484\n                                                                                                                       // 4485\n/**                                                                                                                    // 4486\n * Summary of `ReactBrowserEventEmitter` event handling:                                                               // 4487\n *                                                                                                                     // 4488\n *  - Top-level delegation is used to trap most native browser events. This                                            // 4489\n *    may only occur in the main thread and is the responsibility of                                                   // 4490\n *    ReactEventListener, which is injected and can therefore support pluggable                                        // 4491\n *    event sources. This is the only work that occurs in the main thread.                                             // 4492\n *                                                                                                                     // 4493\n *  - We normalize and de-duplicate events to account for browser quirks. This                                         // 4494\n *    may be done in the worker thread.                                                                                // 4495\n *                                                                                                                     // 4496\n *  - Forward these native events (with the associated top-level type used to                                          // 4497\n *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want                                        // 4498\n *    to extract any synthetic events.                                                                                 // 4499\n *                                                                                                                     // 4500\n *  - The `EventPluginHub` will then process each event by annotating them with                                        // 4501\n *    \"dispatches\", a sequence of listeners and IDs that care about that event.                                        // 4502\n *                                                                                                                     // 4503\n *  - The `EventPluginHub` then dispatches the events.                                                                 // 4504\n *                                                                                                                     // 4505\n * Overview of React and the event system:                                                                             // 4506\n *                                                                                                                     // 4507\n * +------------+    .                                                                                                 // 4508\n * |    DOM     |    .                                                                                                 // 4509\n * +------------+    .                                                                                                 // 4510\n *       |           .                                                                                                 // 4511\n *       v           .                                                                                                 // 4512\n * +------------+    .                                                                                                 // 4513\n * | ReactEvent |    .                                                                                                 // 4514\n * |  Listener  |    .                                                                                                 // 4515\n * +------------+    .                         +-----------+                                                           // 4516\n *       |           .               +--------+|SimpleEvent|                                                           // 4517\n *       |           .               |         |Plugin     |                                                           // 4518\n * +-----|------+    .               v         +-----------+                                                           // 4519\n * |     |      |    .    +--------------+                    +------------+                                           // 4520\n * |     +-----------.--->|EventPluginHub|                    |    Event   |                                           // 4521\n * |            |    .    |              |     +-----------+  | Propagators|                                           // 4522\n * | ReactEvent |    .    |              |     |TapEvent   |  |------------|                                           // 4523\n * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|                                           // 4524\n * |            |    .    |              |     +-----------+  |  utilities |                                           // 4525\n * |     +-----------.--->|              |                    +------------+                                           // 4526\n * |     |      |    .    +--------------+                                                                             // 4527\n * +-----|------+    .                ^        +-----------+                                                           // 4528\n *       |           .                |        |Enter/Leave|                                                           // 4529\n *       +           .                +-------+|Plugin     |                                                           // 4530\n * +-------------+   .                         +-----------+                                                           // 4531\n * | application |   .                                                                                                 // 4532\n * |-------------|   .                                                                                                 // 4533\n * |             |   .                                                                                                 // 4534\n * |             |   .                                                                                                 // 4535\n * +-------------+   .                                                                                                 // 4536\n *                   .                                                                                                 // 4537\n *    React Core     .  General Purpose Event Plugin System                                                            // 4538\n */                                                                                                                    // 4539\n                                                                                                                       // 4540\nvar alreadyListeningTo = {};                                                                                           // 4541\nvar isMonitoringScrollValue = false;                                                                                   // 4542\nvar reactTopListenersCounter = 0;                                                                                      // 4543\n                                                                                                                       // 4544\n// For events like 'submit' which don't consistently bubble (which we trap at a                                        // 4545\n// lower node than `document`), binding at `document` would cause duplicate                                            // 4546\n// events so we don't include them here                                                                                // 4547\nvar topEventMapping = {                                                                                                // 4548\n  topBlur: 'blur',                                                                                                     // 4549\n  topChange: 'change',                                                                                                 // 4550\n  topClick: 'click',                                                                                                   // 4551\n  topCompositionEnd: 'compositionend',                                                                                 // 4552\n  topCompositionStart: 'compositionstart',                                                                             // 4553\n  topCompositionUpdate: 'compositionupdate',                                                                           // 4554\n  topContextMenu: 'contextmenu',                                                                                       // 4555\n  topCopy: 'copy',                                                                                                     // 4556\n  topCut: 'cut',                                                                                                       // 4557\n  topDoubleClick: 'dblclick',                                                                                          // 4558\n  topDrag: 'drag',                                                                                                     // 4559\n  topDragEnd: 'dragend',                                                                                               // 4560\n  topDragEnter: 'dragenter',                                                                                           // 4561\n  topDragExit: 'dragexit',                                                                                             // 4562\n  topDragLeave: 'dragleave',                                                                                           // 4563\n  topDragOver: 'dragover',                                                                                             // 4564\n  topDragStart: 'dragstart',                                                                                           // 4565\n  topDrop: 'drop',                                                                                                     // 4566\n  topFocus: 'focus',                                                                                                   // 4567\n  topInput: 'input',                                                                                                   // 4568\n  topKeyDown: 'keydown',                                                                                               // 4569\n  topKeyPress: 'keypress',                                                                                             // 4570\n  topKeyUp: 'keyup',                                                                                                   // 4571\n  topMouseDown: 'mousedown',                                                                                           // 4572\n  topMouseMove: 'mousemove',                                                                                           // 4573\n  topMouseOut: 'mouseout',                                                                                             // 4574\n  topMouseOver: 'mouseover',                                                                                           // 4575\n  topMouseUp: 'mouseup',                                                                                               // 4576\n  topPaste: 'paste',                                                                                                   // 4577\n  topScroll: 'scroll',                                                                                                 // 4578\n  topSelectionChange: 'selectionchange',                                                                               // 4579\n  topTextInput: 'textInput',                                                                                           // 4580\n  topTouchCancel: 'touchcancel',                                                                                       // 4581\n  topTouchEnd: 'touchend',                                                                                             // 4582\n  topTouchMove: 'touchmove',                                                                                           // 4583\n  topTouchStart: 'touchstart',                                                                                         // 4584\n  topWheel: 'wheel'                                                                                                    // 4585\n};                                                                                                                     // 4586\n                                                                                                                       // 4587\n/**                                                                                                                    // 4588\n * To ensure no conflicts with other potential React instances on the page                                             // 4589\n */                                                                                                                    // 4590\nvar topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);                                          // 4591\n                                                                                                                       // 4592\nfunction getListeningForDocument(mountAt) {                                                                            // 4593\n  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`                                              // 4594\n  // directly.                                                                                                         // 4595\n  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {                                             // 4596\n    mountAt[topListenersIDKey] = reactTopListenersCounter++;                                                           // 4597\n    alreadyListeningTo[mountAt[topListenersIDKey]] = {};                                                               // 4598\n  }                                                                                                                    // 4599\n  return alreadyListeningTo[mountAt[topListenersIDKey]];                                                               // 4600\n}                                                                                                                      // 4601\n                                                                                                                       // 4602\n/**                                                                                                                    // 4603\n * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For                                         // 4604\n * example:                                                                                                            // 4605\n *                                                                                                                     // 4606\n *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);                                              // 4607\n *                                                                                                                     // 4608\n * This would allocate a \"registration\" of `('onClick', myFunction)` on 'myID'.                                        // 4609\n *                                                                                                                     // 4610\n * @internal                                                                                                           // 4611\n */                                                                                                                    // 4612\nvar ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {                                                    // 4613\n                                                                                                                       // 4614\n  /**                                                                                                                  // 4615\n   * Injectable event backend                                                                                          // 4616\n   */                                                                                                                  // 4617\n  ReactEventListener: null,                                                                                            // 4618\n                                                                                                                       // 4619\n  injection: {                                                                                                         // 4620\n    /**                                                                                                                // 4621\n     * @param {object} ReactEventListener                                                                              // 4622\n     */                                                                                                                // 4623\n    injectReactEventListener: function(ReactEventListener) {                                                           // 4624\n      ReactEventListener.setHandleTopLevel(                                                                            // 4625\n        ReactBrowserEventEmitter.handleTopLevel                                                                        // 4626\n      );                                                                                                               // 4627\n      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;                                                // 4628\n    }                                                                                                                  // 4629\n  },                                                                                                                   // 4630\n                                                                                                                       // 4631\n  /**                                                                                                                  // 4632\n   * Sets whether or not any created callbacks should be enabled.                                                      // 4633\n   *                                                                                                                   // 4634\n   * @param {boolean} enabled True if callbacks should be enabled.                                                     // 4635\n   */                                                                                                                  // 4636\n  setEnabled: function(enabled) {                                                                                      // 4637\n    if (ReactBrowserEventEmitter.ReactEventListener) {                                                                 // 4638\n      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);                                                 // 4639\n    }                                                                                                                  // 4640\n  },                                                                                                                   // 4641\n                                                                                                                       // 4642\n  /**                                                                                                                  // 4643\n   * @return {boolean} True if callbacks are enabled.                                                                  // 4644\n   */                                                                                                                  // 4645\n  isEnabled: function() {                                                                                              // 4646\n    return !!(                                                                                                         // 4647\n      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())         // 4648\n    );                                                                                                                 // 4649\n  },                                                                                                                   // 4650\n                                                                                                                       // 4651\n  /**                                                                                                                  // 4652\n   * We listen for bubbled touch events on the document object.                                                        // 4653\n   *                                                                                                                   // 4654\n   * Firefox v8.01 (and possibly others) exhibited strange behavior when                                               // 4655\n   * mounting `onmousemove` events at some node that was not the document                                              // 4656\n   * element. The symptoms were that if your mouse is not moving over something                                        // 4657\n   * contained within that mount point (for example on the background) the                                             // 4658\n   * top-level listeners for `onmousemove` won't be called. However, if you                                            // 4659\n   * register the `mousemove` on the document object, then it will of course                                           // 4660\n   * catch all `mousemove`s. This along with iOS quirks, justifies restricting                                         // 4661\n   * top-level listeners to the document object only, at least for these                                               // 4662\n   * movement types of events and possibly all events.                                                                 // 4663\n   *                                                                                                                   // 4664\n   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html                                         // 4665\n   *                                                                                                                   // 4666\n   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but                                         // 4667\n   * they bubble to document.                                                                                          // 4668\n   *                                                                                                                   // 4669\n   * @param {string} registrationName Name of listener (e.g. `onClick`).                                               // 4670\n   * @param {object} contentDocumentHandle Document which owns the container                                           // 4671\n   */                                                                                                                  // 4672\n  listenTo: function(registrationName, contentDocumentHandle) {                                                        // 4673\n    var mountAt = contentDocumentHandle;                                                                               // 4674\n    var isListening = getListeningForDocument(mountAt);                                                                // 4675\n    var dependencies = EventPluginRegistry.                                                                            // 4676\n      registrationNameDependencies[registrationName];                                                                  // 4677\n                                                                                                                       // 4678\n    var topLevelTypes = EventConstants.topLevelTypes;                                                                  // 4679\n    for (var i = 0, l = dependencies.length; i < l; i++) {                                                             // 4680\n      var dependency = dependencies[i];                                                                                // 4681\n      if (!(                                                                                                           // 4682\n            (isListening.hasOwnProperty(dependency) && isListening[dependency])                                        // 4683\n          )) {                                                                                                         // 4684\n        if (dependency === topLevelTypes.topWheel) {                                                                   // 4685\n          if (isEventSupported('wheel')) {                                                                             // 4686\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                              // 4687\n              topLevelTypes.topWheel,                                                                                  // 4688\n              'wheel',                                                                                                 // 4689\n              mountAt                                                                                                  // 4690\n            );                                                                                                         // 4691\n          } else if (isEventSupported('mousewheel')) {                                                                 // 4692\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                              // 4693\n              topLevelTypes.topWheel,                                                                                  // 4694\n              'mousewheel',                                                                                            // 4695\n              mountAt                                                                                                  // 4696\n            );                                                                                                         // 4697\n          } else {                                                                                                     // 4698\n            // Firefox needs to capture a different mouse scroll event.                                                // 4699\n            // @see http://www.quirksmode.org/dom/events/tests/scroll.html                                             // 4700\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                              // 4701\n              topLevelTypes.topWheel,                                                                                  // 4702\n              'DOMMouseScroll',                                                                                        // 4703\n              mountAt                                                                                                  // 4704\n            );                                                                                                         // 4705\n          }                                                                                                            // 4706\n        } else if (dependency === topLevelTypes.topScroll) {                                                           // 4707\n                                                                                                                       // 4708\n          if (isEventSupported('scroll', true)) {                                                                      // 4709\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(                                             // 4710\n              topLevelTypes.topScroll,                                                                                 // 4711\n              'scroll',                                                                                                // 4712\n              mountAt                                                                                                  // 4713\n            );                                                                                                         // 4714\n          } else {                                                                                                     // 4715\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                              // 4716\n              topLevelTypes.topScroll,                                                                                 // 4717\n              'scroll',                                                                                                // 4718\n              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE                                                // 4719\n            );                                                                                                         // 4720\n          }                                                                                                            // 4721\n        } else if (dependency === topLevelTypes.topFocus ||                                                            // 4722\n            dependency === topLevelTypes.topBlur) {                                                                    // 4723\n                                                                                                                       // 4724\n          if (isEventSupported('focus', true)) {                                                                       // 4725\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(                                             // 4726\n              topLevelTypes.topFocus,                                                                                  // 4727\n              'focus',                                                                                                 // 4728\n              mountAt                                                                                                  // 4729\n            );                                                                                                         // 4730\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(                                             // 4731\n              topLevelTypes.topBlur,                                                                                   // 4732\n              'blur',                                                                                                  // 4733\n              mountAt                                                                                                  // 4734\n            );                                                                                                         // 4735\n          } else if (isEventSupported('focusin')) {                                                                    // 4736\n            // IE has `focusin` and `focusout` events which bubble.                                                    // 4737\n            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html                                // 4738\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                              // 4739\n              topLevelTypes.topFocus,                                                                                  // 4740\n              'focusin',                                                                                               // 4741\n              mountAt                                                                                                  // 4742\n            );                                                                                                         // 4743\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                              // 4744\n              topLevelTypes.topBlur,                                                                                   // 4745\n              'focusout',                                                                                              // 4746\n              mountAt                                                                                                  // 4747\n            );                                                                                                         // 4748\n          }                                                                                                            // 4749\n                                                                                                                       // 4750\n          // to make sure blur and focus event listeners are only attached once                                        // 4751\n          isListening[topLevelTypes.topBlur] = true;                                                                   // 4752\n          isListening[topLevelTypes.topFocus] = true;                                                                  // 4753\n        } else if (topEventMapping.hasOwnProperty(dependency)) {                                                       // 4754\n          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                                // 4755\n            dependency,                                                                                                // 4756\n            topEventMapping[dependency],                                                                               // 4757\n            mountAt                                                                                                    // 4758\n          );                                                                                                           // 4759\n        }                                                                                                              // 4760\n                                                                                                                       // 4761\n        isListening[dependency] = true;                                                                                // 4762\n      }                                                                                                                // 4763\n    }                                                                                                                  // 4764\n  },                                                                                                                   // 4765\n                                                                                                                       // 4766\n  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {                                                  // 4767\n    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(                                               // 4768\n      topLevelType,                                                                                                    // 4769\n      handlerBaseName,                                                                                                 // 4770\n      handle                                                                                                           // 4771\n    );                                                                                                                 // 4772\n  },                                                                                                                   // 4773\n                                                                                                                       // 4774\n  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {                                                 // 4775\n    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(                                              // 4776\n      topLevelType,                                                                                                    // 4777\n      handlerBaseName,                                                                                                 // 4778\n      handle                                                                                                           // 4779\n    );                                                                                                                 // 4780\n  },                                                                                                                   // 4781\n                                                                                                                       // 4782\n  /**                                                                                                                  // 4783\n   * Listens to window scroll and resize events. We cache scroll values so that                                        // 4784\n   * application code can access them without triggering reflows.                                                      // 4785\n   *                                                                                                                   // 4786\n   * NOTE: Scroll events do not bubble.                                                                                // 4787\n   *                                                                                                                   // 4788\n   * @see http://www.quirksmode.org/dom/events/scroll.html                                                             // 4789\n   */                                                                                                                  // 4790\n  ensureScrollValueMonitoring: function() {                                                                            // 4791\n    if (!isMonitoringScrollValue) {                                                                                    // 4792\n      var refresh = ViewportMetrics.refreshScrollValues;                                                               // 4793\n      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);                                         // 4794\n      isMonitoringScrollValue = true;                                                                                  // 4795\n    }                                                                                                                  // 4796\n  },                                                                                                                   // 4797\n                                                                                                                       // 4798\n  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,                                                   // 4799\n                                                                                                                       // 4800\n  registrationNameModules: EventPluginHub.registrationNameModules,                                                     // 4801\n                                                                                                                       // 4802\n  putListener: EventPluginHub.putListener,                                                                             // 4803\n                                                                                                                       // 4804\n  getListener: EventPluginHub.getListener,                                                                             // 4805\n                                                                                                                       // 4806\n  deleteListener: EventPluginHub.deleteListener,                                                                       // 4807\n                                                                                                                       // 4808\n  deleteAllListeners: EventPluginHub.deleteAllListeners                                                                // 4809\n                                                                                                                       // 4810\n});                                                                                                                    // 4811\n                                                                                                                       // 4812\nmodule.exports = ReactBrowserEventEmitter;                                                                             // 4813\n                                                                                                                       // 4814\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPluginHub\":\"react/lib/EventPluginHub\",\"./EventPluginRegistry\":\"react/lib/EventPluginRegistry\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactEventEmitterMixin\":\"react/lib/ReactEventEmitterMixin\",\"./ViewportMetrics\":\"react/lib/ViewportMetrics\",\"./isEventSupported\":\"react/lib/isEventSupported\"}],\"react/lib/ReactCSSTransitionGroupChild\":[function(require,module,exports){\n(function (process){                                                                                                   // 4816\n/**                                                                                                                    // 4817\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 4818\n * All rights reserved.                                                                                                // 4819\n *                                                                                                                     // 4820\n * This source code is licensed under the BSD-style license found in the                                               // 4821\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 4822\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 4823\n *                                                                                                                     // 4824\n * @typechecks                                                                                                         // 4825\n * @providesModule ReactCSSTransitionGroupChild                                                                        // 4826\n */                                                                                                                    // 4827\n                                                                                                                       // 4828\n'use strict';                                                                                                          // 4829\n                                                                                                                       // 4830\nvar React = require(\"./React\");                                                                                        // 4831\n                                                                                                                       // 4832\nvar CSSCore = require(\"./CSSCore\");                                                                                    // 4833\nvar ReactTransitionEvents = require(\"./ReactTransitionEvents\");                                                        // 4834\n                                                                                                                       // 4835\nvar onlyChild = require(\"./onlyChild\");                                                                                // 4836\nvar warning = require(\"./warning\");                                                                                    // 4837\n                                                                                                                       // 4838\n// We don't remove the element from the DOM until we receive an animationend or                                        // 4839\n// transitionend event. If the user screws up and forgets to add an animation                                          // 4840\n// their node will be stuck in the DOM forever, so we detect if an animation                                           // 4841\n// does not start and if it doesn't, we just call the end listener immediately.                                        // 4842\nvar TICK = 17;                                                                                                         // 4843\nvar NO_EVENT_TIMEOUT = 5000;                                                                                           // 4844\n                                                                                                                       // 4845\nvar noEventListener = null;                                                                                            // 4846\n                                                                                                                       // 4847\n                                                                                                                       // 4848\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 4849\n  noEventListener = function() {                                                                                       // 4850\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 4851\n      false,                                                                                                           // 4852\n      'transition(): tried to perform an animation without ' +                                                         // 4853\n      'an animationend or transitionend event after timeout (' +                                                       // 4854\n      '%sms). You should either disable this ' +                                                                       // 4855\n      'transition in JS or add a CSS animation/transition.',                                                           // 4856\n      NO_EVENT_TIMEOUT                                                                                                 // 4857\n    ) : null);                                                                                                         // 4858\n  };                                                                                                                   // 4859\n}                                                                                                                      // 4860\n                                                                                                                       // 4861\nvar ReactCSSTransitionGroupChild = React.createClass({                                                                 // 4862\n  displayName: 'ReactCSSTransitionGroupChild',                                                                         // 4863\n                                                                                                                       // 4864\n  transition: function(animationType, finishCallback) {                                                                // 4865\n    var node = this.getDOMNode();                                                                                      // 4866\n    var className = this.props.name + '-' + animationType;                                                             // 4867\n    var activeClassName = className + '-active';                                                                       // 4868\n    var noEventTimeout = null;                                                                                         // 4869\n                                                                                                                       // 4870\n    var endListener = function(e) {                                                                                    // 4871\n      if (e && e.target !== node) {                                                                                    // 4872\n        return;                                                                                                        // 4873\n      }                                                                                                                // 4874\n      if (\"production\" !== process.env.NODE_ENV) {                                                                     // 4875\n        clearTimeout(noEventTimeout);                                                                                  // 4876\n      }                                                                                                                // 4877\n                                                                                                                       // 4878\n      CSSCore.removeClass(node, className);                                                                            // 4879\n      CSSCore.removeClass(node, activeClassName);                                                                      // 4880\n                                                                                                                       // 4881\n      ReactTransitionEvents.removeEndEventListener(node, endListener);                                                 // 4882\n                                                                                                                       // 4883\n      // Usually this optional callback is used for informing an owner of                                              // 4884\n      // a leave animation and telling it to remove the child.                                                         // 4885\n      if (finishCallback) {                                                                                            // 4886\n        finishCallback();                                                                                              // 4887\n      }                                                                                                                // 4888\n    };                                                                                                                 // 4889\n                                                                                                                       // 4890\n    ReactTransitionEvents.addEndEventListener(node, endListener);                                                      // 4891\n                                                                                                                       // 4892\n    CSSCore.addClass(node, className);                                                                                 // 4893\n                                                                                                                       // 4894\n    // Need to do this to actually trigger a transition.                                                               // 4895\n    this.queueClass(activeClassName);                                                                                  // 4896\n                                                                                                                       // 4897\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 4898\n      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);                                                  // 4899\n    }                                                                                                                  // 4900\n  },                                                                                                                   // 4901\n                                                                                                                       // 4902\n  queueClass: function(className) {                                                                                    // 4903\n    this.classNameQueue.push(className);                                                                               // 4904\n                                                                                                                       // 4905\n    if (!this.timeout) {                                                                                               // 4906\n      this.timeout = setTimeout(this.flushClassNameQueue, TICK);                                                       // 4907\n    }                                                                                                                  // 4908\n  },                                                                                                                   // 4909\n                                                                                                                       // 4910\n  flushClassNameQueue: function() {                                                                                    // 4911\n    if (this.isMounted()) {                                                                                            // 4912\n      this.classNameQueue.forEach(                                                                                     // 4913\n        CSSCore.addClass.bind(CSSCore, this.getDOMNode())                                                              // 4914\n      );                                                                                                               // 4915\n    }                                                                                                                  // 4916\n    this.classNameQueue.length = 0;                                                                                    // 4917\n    this.timeout = null;                                                                                               // 4918\n  },                                                                                                                   // 4919\n                                                                                                                       // 4920\n  componentWillMount: function() {                                                                                     // 4921\n    this.classNameQueue = [];                                                                                          // 4922\n  },                                                                                                                   // 4923\n                                                                                                                       // 4924\n  componentWillUnmount: function() {                                                                                   // 4925\n    if (this.timeout) {                                                                                                // 4926\n      clearTimeout(this.timeout);                                                                                      // 4927\n    }                                                                                                                  // 4928\n  },                                                                                                                   // 4929\n                                                                                                                       // 4930\n  componentWillAppear: function(done) {                                                                                // 4931\n    if (this.props.appear) {                                                                                           // 4932\n      this.transition('appear', done);                                                                                 // 4933\n    } else {                                                                                                           // 4934\n      done();                                                                                                          // 4935\n    }                                                                                                                  // 4936\n  },                                                                                                                   // 4937\n                                                                                                                       // 4938\n  componentWillEnter: function(done) {                                                                                 // 4939\n    if (this.props.enter) {                                                                                            // 4940\n      this.transition('enter', done);                                                                                  // 4941\n    } else {                                                                                                           // 4942\n      done();                                                                                                          // 4943\n    }                                                                                                                  // 4944\n  },                                                                                                                   // 4945\n                                                                                                                       // 4946\n  componentWillLeave: function(done) {                                                                                 // 4947\n    if (this.props.leave) {                                                                                            // 4948\n      this.transition('leave', done);                                                                                  // 4949\n    } else {                                                                                                           // 4950\n      done();                                                                                                          // 4951\n    }                                                                                                                  // 4952\n  },                                                                                                                   // 4953\n                                                                                                                       // 4954\n  render: function() {                                                                                                 // 4955\n    return onlyChild(this.props.children);                                                                             // 4956\n  }                                                                                                                    // 4957\n});                                                                                                                    // 4958\n                                                                                                                       // 4959\nmodule.exports = ReactCSSTransitionGroupChild;                                                                         // 4960\n                                                                                                                       // 4961\n}).call(this,require('_process'))                                                                                      // 4962\n                                                                                                                       // 4963\n},{\"./CSSCore\":\"react/lib/CSSCore\",\"./React\":\"react/lib/React\",\"./ReactTransitionEvents\":\"react/lib/ReactTransitionEvents\",\"./onlyChild\":\"react/lib/onlyChild\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactCSSTransitionGroup\":[function(require,module,exports){\n/**                                                                                                                    // 4965\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 4966\n * All rights reserved.                                                                                                // 4967\n *                                                                                                                     // 4968\n * This source code is licensed under the BSD-style license found in the                                               // 4969\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 4970\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 4971\n *                                                                                                                     // 4972\n * @typechecks                                                                                                         // 4973\n * @providesModule ReactCSSTransitionGroup                                                                             // 4974\n */                                                                                                                    // 4975\n                                                                                                                       // 4976\n'use strict';                                                                                                          // 4977\n                                                                                                                       // 4978\nvar React = require(\"./React\");                                                                                        // 4979\n                                                                                                                       // 4980\nvar assign = require(\"./Object.assign\");                                                                               // 4981\n                                                                                                                       // 4982\nvar ReactTransitionGroup = React.createFactory(                                                                        // 4983\n  require(\"./ReactTransitionGroup\")                                                                                    // 4984\n);                                                                                                                     // 4985\nvar ReactCSSTransitionGroupChild = React.createFactory(                                                                // 4986\n  require(\"./ReactCSSTransitionGroupChild\")                                                                            // 4987\n);                                                                                                                     // 4988\n                                                                                                                       // 4989\nvar ReactCSSTransitionGroup = React.createClass({                                                                      // 4990\n  displayName: 'ReactCSSTransitionGroup',                                                                              // 4991\n                                                                                                                       // 4992\n  propTypes: {                                                                                                         // 4993\n    transitionName: React.PropTypes.string.isRequired,                                                                 // 4994\n    transitionAppear: React.PropTypes.bool,                                                                            // 4995\n    transitionEnter: React.PropTypes.bool,                                                                             // 4996\n    transitionLeave: React.PropTypes.bool                                                                              // 4997\n  },                                                                                                                   // 4998\n                                                                                                                       // 4999\n  getDefaultProps: function() {                                                                                        // 5000\n    return {                                                                                                           // 5001\n      transitionAppear: false,                                                                                         // 5002\n      transitionEnter: true,                                                                                           // 5003\n      transitionLeave: true                                                                                            // 5004\n    };                                                                                                                 // 5005\n  },                                                                                                                   // 5006\n                                                                                                                       // 5007\n  _wrapChild: function(child) {                                                                                        // 5008\n    // We need to provide this childFactory so that                                                                    // 5009\n    // ReactCSSTransitionGroupChild can receive updates to name, enter, and                                            // 5010\n    // leave while it is leaving.                                                                                      // 5011\n    return ReactCSSTransitionGroupChild(                                                                               // 5012\n      {                                                                                                                // 5013\n        name: this.props.transitionName,                                                                               // 5014\n        appear: this.props.transitionAppear,                                                                           // 5015\n        enter: this.props.transitionEnter,                                                                             // 5016\n        leave: this.props.transitionLeave                                                                              // 5017\n      },                                                                                                               // 5018\n      child                                                                                                            // 5019\n    );                                                                                                                 // 5020\n  },                                                                                                                   // 5021\n                                                                                                                       // 5022\n  render: function() {                                                                                                 // 5023\n    return (                                                                                                           // 5024\n      ReactTransitionGroup(                                                                                            // 5025\n        assign({}, this.props, {childFactory: this._wrapChild})                                                        // 5026\n      )                                                                                                                // 5027\n    );                                                                                                                 // 5028\n  }                                                                                                                    // 5029\n});                                                                                                                    // 5030\n                                                                                                                       // 5031\nmodule.exports = ReactCSSTransitionGroup;                                                                              // 5032\n                                                                                                                       // 5033\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./React\":\"react/lib/React\",\"./ReactCSSTransitionGroupChild\":\"react/lib/ReactCSSTransitionGroupChild\",\"./ReactTransitionGroup\":\"react/lib/ReactTransitionGroup\"}],\"react/lib/ReactChildReconciler\":[function(require,module,exports){\n/**                                                                                                                    // 5035\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 5036\n * All rights reserved.                                                                                                // 5037\n *                                                                                                                     // 5038\n * This source code is licensed under the BSD-style license found in the                                               // 5039\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 5040\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 5041\n *                                                                                                                     // 5042\n * @providesModule ReactChildReconciler                                                                                // 5043\n * @typechecks static-only                                                                                             // 5044\n */                                                                                                                    // 5045\n                                                                                                                       // 5046\n'use strict';                                                                                                          // 5047\n                                                                                                                       // 5048\nvar ReactReconciler = require(\"./ReactReconciler\");                                                                    // 5049\n                                                                                                                       // 5050\nvar flattenChildren = require(\"./flattenChildren\");                                                                    // 5051\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");                                                // 5052\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");                                              // 5053\n                                                                                                                       // 5054\n/**                                                                                                                    // 5055\n * ReactChildReconciler provides helpers for initializing or updating a set of                                         // 5056\n * children. Its output is suitable for passing it onto ReactMultiChild which                                          // 5057\n * does diffed reordering and insertion.                                                                               // 5058\n */                                                                                                                    // 5059\nvar ReactChildReconciler = {                                                                                           // 5060\n                                                                                                                       // 5061\n  /**                                                                                                                  // 5062\n   * Generates a \"mount image\" for each of the supplied children. In the case                                          // 5063\n   * of `ReactDOMComponent`, a mount image is a string of markup.                                                      // 5064\n   *                                                                                                                   // 5065\n   * @param {?object} nestedChildNodes Nested child maps.                                                              // 5066\n   * @return {?object} A set of child instances.                                                                       // 5067\n   * @internal                                                                                                         // 5068\n   */                                                                                                                  // 5069\n  instantiateChildren: function(nestedChildNodes, transaction, context) {                                              // 5070\n    var children = flattenChildren(nestedChildNodes);                                                                  // 5071\n    for (var name in children) {                                                                                       // 5072\n      if (children.hasOwnProperty(name)) {                                                                             // 5073\n        var child = children[name];                                                                                    // 5074\n        // The rendered children must be turned into instances as they're                                              // 5075\n        // mounted.                                                                                                    // 5076\n        var childInstance = instantiateReactComponent(child, null);                                                    // 5077\n        children[name] = childInstance;                                                                                // 5078\n      }                                                                                                                // 5079\n    }                                                                                                                  // 5080\n    return children;                                                                                                   // 5081\n  },                                                                                                                   // 5082\n                                                                                                                       // 5083\n  /**                                                                                                                  // 5084\n   * Updates the rendered children and returns a new set of children.                                                  // 5085\n   *                                                                                                                   // 5086\n   * @param {?object} prevChildren Previously initialized set of children.                                             // 5087\n   * @param {?object} nextNestedChildNodes Nested child maps.                                                          // 5088\n   * @param {ReactReconcileTransaction} transaction                                                                    // 5089\n   * @param {object} context                                                                                           // 5090\n   * @return {?object} A new set of child instances.                                                                   // 5091\n   * @internal                                                                                                         // 5092\n   */                                                                                                                  // 5093\n  updateChildren: function(                                                                                            // 5094\n    prevChildren,                                                                                                      // 5095\n    nextNestedChildNodes,                                                                                              // 5096\n    transaction,                                                                                                       // 5097\n    context) {                                                                                                         // 5098\n    // We currently don't have a way to track moves here but if we use iterators                                       // 5099\n    // instead of for..in we can zip the iterators and check if an item has                                            // 5100\n    // moved.                                                                                                          // 5101\n    // TODO: If nothing has changed, return the prevChildren object so that we                                         // 5102\n    // can quickly bailout if nothing has changed.                                                                     // 5103\n    var nextChildren = flattenChildren(nextNestedChildNodes);                                                          // 5104\n    if (!nextChildren && !prevChildren) {                                                                              // 5105\n      return null;                                                                                                     // 5106\n    }                                                                                                                  // 5107\n    var name;                                                                                                          // 5108\n    for (name in nextChildren) {                                                                                       // 5109\n      if (!nextChildren.hasOwnProperty(name)) {                                                                        // 5110\n        continue;                                                                                                      // 5111\n      }                                                                                                                // 5112\n      var prevChild = prevChildren && prevChildren[name];                                                              // 5113\n      var prevElement = prevChild && prevChild._currentElement;                                                        // 5114\n      var nextElement = nextChildren[name];                                                                            // 5115\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {                                                      // 5116\n        ReactReconciler.receiveComponent(                                                                              // 5117\n          prevChild, nextElement, transaction, context                                                                 // 5118\n        );                                                                                                             // 5119\n        nextChildren[name] = prevChild;                                                                                // 5120\n      } else {                                                                                                         // 5121\n        if (prevChild) {                                                                                               // 5122\n          ReactReconciler.unmountComponent(prevChild, name);                                                           // 5123\n        }                                                                                                              // 5124\n        // The child must be instantiated before it's mounted.                                                         // 5125\n        var nextChildInstance = instantiateReactComponent(                                                             // 5126\n          nextElement,                                                                                                 // 5127\n          null                                                                                                         // 5128\n        );                                                                                                             // 5129\n        nextChildren[name] = nextChildInstance;                                                                        // 5130\n      }                                                                                                                // 5131\n    }                                                                                                                  // 5132\n    // Unmount children that are no longer present.                                                                    // 5133\n    for (name in prevChildren) {                                                                                       // 5134\n      if (prevChildren.hasOwnProperty(name) &&                                                                         // 5135\n          !(nextChildren && nextChildren.hasOwnProperty(name))) {                                                      // 5136\n        ReactReconciler.unmountComponent(prevChildren[name]);                                                          // 5137\n      }                                                                                                                // 5138\n    }                                                                                                                  // 5139\n    return nextChildren;                                                                                               // 5140\n  },                                                                                                                   // 5141\n                                                                                                                       // 5142\n  /**                                                                                                                  // 5143\n   * Unmounts all rendered children. This should be used to clean up children                                          // 5144\n   * when this component is unmounted.                                                                                 // 5145\n   *                                                                                                                   // 5146\n   * @param {?object} renderedChildren Previously initialized set of children.                                         // 5147\n   * @internal                                                                                                         // 5148\n   */                                                                                                                  // 5149\n  unmountChildren: function(renderedChildren) {                                                                        // 5150\n    for (var name in renderedChildren) {                                                                               // 5151\n      var renderedChild = renderedChildren[name];                                                                      // 5152\n      ReactReconciler.unmountComponent(renderedChild);                                                                 // 5153\n    }                                                                                                                  // 5154\n  }                                                                                                                    // 5155\n                                                                                                                       // 5156\n};                                                                                                                     // 5157\n                                                                                                                       // 5158\nmodule.exports = ReactChildReconciler;                                                                                 // 5159\n                                                                                                                       // 5160\n},{\"./ReactReconciler\":\"react/lib/ReactReconciler\",\"./flattenChildren\":\"react/lib/flattenChildren\",\"./instantiateReactComponent\":\"react/lib/instantiateReactComponent\",\"./shouldUpdateReactComponent\":\"react/lib/shouldUpdateReactComponent\"}],\"react/lib/ReactChildren\":[function(require,module,exports){\n(function (process){                                                                                                   // 5162\n/**                                                                                                                    // 5163\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 5164\n * All rights reserved.                                                                                                // 5165\n *                                                                                                                     // 5166\n * This source code is licensed under the BSD-style license found in the                                               // 5167\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 5168\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 5169\n *                                                                                                                     // 5170\n * @providesModule ReactChildren                                                                                       // 5171\n */                                                                                                                    // 5172\n                                                                                                                       // 5173\n'use strict';                                                                                                          // 5174\n                                                                                                                       // 5175\nvar PooledClass = require(\"./PooledClass\");                                                                            // 5176\nvar ReactFragment = require(\"./ReactFragment\");                                                                        // 5177\n                                                                                                                       // 5178\nvar traverseAllChildren = require(\"./traverseAllChildren\");                                                            // 5179\nvar warning = require(\"./warning\");                                                                                    // 5180\n                                                                                                                       // 5181\nvar twoArgumentPooler = PooledClass.twoArgumentPooler;                                                                 // 5182\nvar threeArgumentPooler = PooledClass.threeArgumentPooler;                                                             // 5183\n                                                                                                                       // 5184\n/**                                                                                                                    // 5185\n * PooledClass representing the bookkeeping associated with performing a child                                         // 5186\n * traversal. Allows avoiding binding callbacks.                                                                       // 5187\n *                                                                                                                     // 5188\n * @constructor ForEachBookKeeping                                                                                     // 5189\n * @param {!function} forEachFunction Function to perform traversal with.                                              // 5190\n * @param {?*} forEachContext Context to perform context with.                                                         // 5191\n */                                                                                                                    // 5192\nfunction ForEachBookKeeping(forEachFunction, forEachContext) {                                                         // 5193\n  this.forEachFunction = forEachFunction;                                                                              // 5194\n  this.forEachContext = forEachContext;                                                                                // 5195\n}                                                                                                                      // 5196\nPooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);                                                       // 5197\n                                                                                                                       // 5198\nfunction forEachSingleChild(traverseContext, child, name, i) {                                                         // 5199\n  var forEachBookKeeping = traverseContext;                                                                            // 5200\n  forEachBookKeeping.forEachFunction.call(                                                                             // 5201\n    forEachBookKeeping.forEachContext, child, i);                                                                      // 5202\n}                                                                                                                      // 5203\n                                                                                                                       // 5204\n/**                                                                                                                    // 5205\n * Iterates through children that are typically specified as `props.children`.                                         // 5206\n *                                                                                                                     // 5207\n * The provided forEachFunc(child, index) will be called for each                                                      // 5208\n * leaf child.                                                                                                         // 5209\n *                                                                                                                     // 5210\n * @param {?*} children Children tree container.                                                                       // 5211\n * @param {function(*, int)} forEachFunc.                                                                              // 5212\n * @param {*} forEachContext Context for forEachContext.                                                               // 5213\n */                                                                                                                    // 5214\nfunction forEachChildren(children, forEachFunc, forEachContext) {                                                      // 5215\n  if (children == null) {                                                                                              // 5216\n    return children;                                                                                                   // 5217\n  }                                                                                                                    // 5218\n                                                                                                                       // 5219\n  var traverseContext =                                                                                                // 5220\n    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);                                                         // 5221\n  traverseAllChildren(children, forEachSingleChild, traverseContext);                                                  // 5222\n  ForEachBookKeeping.release(traverseContext);                                                                         // 5223\n}                                                                                                                      // 5224\n                                                                                                                       // 5225\n/**                                                                                                                    // 5226\n * PooledClass representing the bookkeeping associated with performing a child                                         // 5227\n * mapping. Allows avoiding binding callbacks.                                                                         // 5228\n *                                                                                                                     // 5229\n * @constructor MapBookKeeping                                                                                         // 5230\n * @param {!*} mapResult Object containing the ordered map of results.                                                 // 5231\n * @param {!function} mapFunction Function to perform mapping with.                                                    // 5232\n * @param {?*} mapContext Context to perform mapping with.                                                             // 5233\n */                                                                                                                    // 5234\nfunction MapBookKeeping(mapResult, mapFunction, mapContext) {                                                          // 5235\n  this.mapResult = mapResult;                                                                                          // 5236\n  this.mapFunction = mapFunction;                                                                                      // 5237\n  this.mapContext = mapContext;                                                                                        // 5238\n}                                                                                                                      // 5239\nPooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);                                                         // 5240\n                                                                                                                       // 5241\nfunction mapSingleChildIntoContext(traverseContext, child, name, i) {                                                  // 5242\n  var mapBookKeeping = traverseContext;                                                                                // 5243\n  var mapResult = mapBookKeeping.mapResult;                                                                            // 5244\n                                                                                                                       // 5245\n  var keyUnique = !mapResult.hasOwnProperty(name);                                                                     // 5246\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 5247\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 5248\n      keyUnique,                                                                                                       // 5249\n      'ReactChildren.map(...): Encountered two children with the same key, ' +                                         // 5250\n      '`%s`. Child keys must be unique; when two children share a key, only ' +                                        // 5251\n      'the first child will be used.',                                                                                 // 5252\n      name                                                                                                             // 5253\n    ) : null);                                                                                                         // 5254\n  }                                                                                                                    // 5255\n                                                                                                                       // 5256\n  if (keyUnique) {                                                                                                     // 5257\n    var mappedChild =                                                                                                  // 5258\n      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);                                            // 5259\n    mapResult[name] = mappedChild;                                                                                     // 5260\n  }                                                                                                                    // 5261\n}                                                                                                                      // 5262\n                                                                                                                       // 5263\n/**                                                                                                                    // 5264\n * Maps children that are typically specified as `props.children`.                                                     // 5265\n *                                                                                                                     // 5266\n * The provided mapFunction(child, key, index) will be called for each                                                 // 5267\n * leaf child.                                                                                                         // 5268\n *                                                                                                                     // 5269\n * TODO: This may likely break any calls to `ReactChildren.map` that were                                              // 5270\n * previously relying on the fact that we guarded against null children.                                               // 5271\n *                                                                                                                     // 5272\n * @param {?*} children Children tree container.                                                                       // 5273\n * @param {function(*, int)} mapFunction.                                                                              // 5274\n * @param {*} mapContext Context for mapFunction.                                                                      // 5275\n * @return {object} Object containing the ordered map of results.                                                      // 5276\n */                                                                                                                    // 5277\nfunction mapChildren(children, func, context) {                                                                        // 5278\n  if (children == null) {                                                                                              // 5279\n    return children;                                                                                                   // 5280\n  }                                                                                                                    // 5281\n                                                                                                                       // 5282\n  var mapResult = {};                                                                                                  // 5283\n  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);                                            // 5284\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);                                           // 5285\n  MapBookKeeping.release(traverseContext);                                                                             // 5286\n  return ReactFragment.create(mapResult);                                                                              // 5287\n}                                                                                                                      // 5288\n                                                                                                                       // 5289\nfunction forEachSingleChildDummy(traverseContext, child, name, i) {                                                    // 5290\n  return null;                                                                                                         // 5291\n}                                                                                                                      // 5292\n                                                                                                                       // 5293\n/**                                                                                                                    // 5294\n * Count the number of children that are typically specified as                                                        // 5295\n * `props.children`.                                                                                                   // 5296\n *                                                                                                                     // 5297\n * @param {?*} children Children tree container.                                                                       // 5298\n * @return {number} The number of children.                                                                            // 5299\n */                                                                                                                    // 5300\nfunction countChildren(children, context) {                                                                            // 5301\n  return traverseAllChildren(children, forEachSingleChildDummy, null);                                                 // 5302\n}                                                                                                                      // 5303\n                                                                                                                       // 5304\nvar ReactChildren = {                                                                                                  // 5305\n  forEach: forEachChildren,                                                                                            // 5306\n  map: mapChildren,                                                                                                    // 5307\n  count: countChildren                                                                                                 // 5308\n};                                                                                                                     // 5309\n                                                                                                                       // 5310\nmodule.exports = ReactChildren;                                                                                        // 5311\n                                                                                                                       // 5312\n}).call(this,require('_process'))                                                                                      // 5313\n                                                                                                                       // 5314\n},{\"./PooledClass\":\"react/lib/PooledClass\",\"./ReactFragment\":\"react/lib/ReactFragment\",\"./traverseAllChildren\":\"react/lib/traverseAllChildren\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactClass\":[function(require,module,exports){\n(function (process){                                                                                                   // 5316\n/**                                                                                                                    // 5317\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 5318\n * All rights reserved.                                                                                                // 5319\n *                                                                                                                     // 5320\n * This source code is licensed under the BSD-style license found in the                                               // 5321\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 5322\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 5323\n *                                                                                                                     // 5324\n * @providesModule ReactClass                                                                                          // 5325\n */                                                                                                                    // 5326\n                                                                                                                       // 5327\n'use strict';                                                                                                          // 5328\n                                                                                                                       // 5329\nvar ReactComponent = require(\"./ReactComponent\");                                                                      // 5330\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");                                                                // 5331\nvar ReactElement = require(\"./ReactElement\");                                                                          // 5332\nvar ReactErrorUtils = require(\"./ReactErrorUtils\");                                                                    // 5333\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");                                                                  // 5334\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");                                                                      // 5335\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");                                                      // 5336\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");                                              // 5337\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");                                                                  // 5338\n                                                                                                                       // 5339\nvar assign = require(\"./Object.assign\");                                                                               // 5340\nvar invariant = require(\"./invariant\");                                                                                // 5341\nvar keyMirror = require(\"./keyMirror\");                                                                                // 5342\nvar keyOf = require(\"./keyOf\");                                                                                        // 5343\nvar warning = require(\"./warning\");                                                                                    // 5344\n                                                                                                                       // 5345\nvar MIXINS_KEY = keyOf({mixins: null});                                                                                // 5346\n                                                                                                                       // 5347\n/**                                                                                                                    // 5348\n * Policies that describe methods in `ReactClassInterface`.                                                            // 5349\n */                                                                                                                    // 5350\nvar SpecPolicy = keyMirror({                                                                                           // 5351\n  /**                                                                                                                  // 5352\n   * These methods may be defined only once by the class specification or mixin.                                       // 5353\n   */                                                                                                                  // 5354\n  DEFINE_ONCE: null,                                                                                                   // 5355\n  /**                                                                                                                  // 5356\n   * These methods may be defined by both the class specification and mixins.                                          // 5357\n   * Subsequent definitions will be chained. These methods must return void.                                           // 5358\n   */                                                                                                                  // 5359\n  DEFINE_MANY: null,                                                                                                   // 5360\n  /**                                                                                                                  // 5361\n   * These methods are overriding the base class.                                                                      // 5362\n   */                                                                                                                  // 5363\n  OVERRIDE_BASE: null,                                                                                                 // 5364\n  /**                                                                                                                  // 5365\n   * These methods are similar to DEFINE_MANY, except we assume they return                                            // 5366\n   * objects. We try to merge the keys of the return values of all the mixed in                                        // 5367\n   * functions. If there is a key conflict we throw.                                                                   // 5368\n   */                                                                                                                  // 5369\n  DEFINE_MANY_MERGED: null                                                                                             // 5370\n});                                                                                                                    // 5371\n                                                                                                                       // 5372\n                                                                                                                       // 5373\nvar injectedMixins = [];                                                                                               // 5374\n                                                                                                                       // 5375\n/**                                                                                                                    // 5376\n * Composite components are higher-level components that compose other composite                                       // 5377\n * or native components.                                                                                               // 5378\n *                                                                                                                     // 5379\n * To create a new type of `ReactClass`, pass a specification of                                                       // 5380\n * your new class to `React.createClass`. The only requirement of your class                                           // 5381\n * specification is that you implement a `render` method.                                                              // 5382\n *                                                                                                                     // 5383\n *   var MyComponent = React.createClass({                                                                             // 5384\n *     render: function() {                                                                                            // 5385\n *       return <div>Hello World</div>;                                                                                // 5386\n *     }                                                                                                               // 5387\n *   });                                                                                                               // 5388\n *                                                                                                                     // 5389\n * The class specification supports a specific protocol of methods that have                                           // 5390\n * special meaning (e.g. `render`). See `ReactClassInterface` for                                                      // 5391\n * more the comprehensive protocol. Any other properties and methods in the                                            // 5392\n * class specification will available on the prototype.                                                                // 5393\n *                                                                                                                     // 5394\n * @interface ReactClassInterface                                                                                      // 5395\n * @internal                                                                                                           // 5396\n */                                                                                                                    // 5397\nvar ReactClassInterface = {                                                                                            // 5398\n                                                                                                                       // 5399\n  /**                                                                                                                  // 5400\n   * An array of Mixin objects to include when defining your component.                                                // 5401\n   *                                                                                                                   // 5402\n   * @type {array}                                                                                                     // 5403\n   * @optional                                                                                                         // 5404\n   */                                                                                                                  // 5405\n  mixins: SpecPolicy.DEFINE_MANY,                                                                                      // 5406\n                                                                                                                       // 5407\n  /**                                                                                                                  // 5408\n   * An object containing properties and methods that should be defined on                                             // 5409\n   * the component's constructor instead of its prototype (static methods).                                            // 5410\n   *                                                                                                                   // 5411\n   * @type {object}                                                                                                    // 5412\n   * @optional                                                                                                         // 5413\n   */                                                                                                                  // 5414\n  statics: SpecPolicy.DEFINE_MANY,                                                                                     // 5415\n                                                                                                                       // 5416\n  /**                                                                                                                  // 5417\n   * Definition of prop types for this component.                                                                      // 5418\n   *                                                                                                                   // 5419\n   * @type {object}                                                                                                    // 5420\n   * @optional                                                                                                         // 5421\n   */                                                                                                                  // 5422\n  propTypes: SpecPolicy.DEFINE_MANY,                                                                                   // 5423\n                                                                                                                       // 5424\n  /**                                                                                                                  // 5425\n   * Definition of context types for this component.                                                                   // 5426\n   *                                                                                                                   // 5427\n   * @type {object}                                                                                                    // 5428\n   * @optional                                                                                                         // 5429\n   */                                                                                                                  // 5430\n  contextTypes: SpecPolicy.DEFINE_MANY,                                                                                // 5431\n                                                                                                                       // 5432\n  /**                                                                                                                  // 5433\n   * Definition of context types this component sets for its children.                                                 // 5434\n   *                                                                                                                   // 5435\n   * @type {object}                                                                                                    // 5436\n   * @optional                                                                                                         // 5437\n   */                                                                                                                  // 5438\n  childContextTypes: SpecPolicy.DEFINE_MANY,                                                                           // 5439\n                                                                                                                       // 5440\n  // ==== Definition methods ====                                                                                      // 5441\n                                                                                                                       // 5442\n  /**                                                                                                                  // 5443\n   * Invoked when the component is mounted. Values in the mapping will be set on                                       // 5444\n   * `this.props` if that prop is not specified (i.e. using an `in` check).                                            // 5445\n   *                                                                                                                   // 5446\n   * This method is invoked before `getInitialState` and therefore cannot rely                                         // 5447\n   * on `this.state` or use `this.setState`.                                                                           // 5448\n   *                                                                                                                   // 5449\n   * @return {object}                                                                                                  // 5450\n   * @optional                                                                                                         // 5451\n   */                                                                                                                  // 5452\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 5453\n                                                                                                                       // 5454\n  /**                                                                                                                  // 5455\n   * Invoked once before the component is mounted. The return value will be used                                       // 5456\n   * as the initial value of `this.state`.                                                                             // 5457\n   *                                                                                                                   // 5458\n   *   getInitialState: function() {                                                                                   // 5459\n   *     return {                                                                                                      // 5460\n   *       isOn: false,                                                                                                // 5461\n   *       fooBaz: new BazFoo()                                                                                        // 5462\n   *     }                                                                                                             // 5463\n   *   }                                                                                                               // 5464\n   *                                                                                                                   // 5465\n   * @return {object}                                                                                                  // 5466\n   * @optional                                                                                                         // 5467\n   */                                                                                                                  // 5468\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 5469\n                                                                                                                       // 5470\n  /**                                                                                                                  // 5471\n   * @return {object}                                                                                                  // 5472\n   * @optional                                                                                                         // 5473\n   */                                                                                                                  // 5474\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,                                                                      // 5475\n                                                                                                                       // 5476\n  /**                                                                                                                  // 5477\n   * Uses props from `this.props` and state from `this.state` to render the                                            // 5478\n   * structure of the component.                                                                                       // 5479\n   *                                                                                                                   // 5480\n   * No guarantees are made about when or how often this method is invoked, so                                         // 5481\n   * it must not have side effects.                                                                                    // 5482\n   *                                                                                                                   // 5483\n   *   render: function() {                                                                                            // 5484\n   *     var name = this.props.name;                                                                                   // 5485\n   *     return <div>Hello, {name}!</div>;                                                                             // 5486\n   *   }                                                                                                               // 5487\n   *                                                                                                                   // 5488\n   * @return {ReactComponent}                                                                                          // 5489\n   * @nosideeffects                                                                                                    // 5490\n   * @required                                                                                                         // 5491\n   */                                                                                                                  // 5492\n  render: SpecPolicy.DEFINE_ONCE,                                                                                      // 5493\n                                                                                                                       // 5494\n                                                                                                                       // 5495\n                                                                                                                       // 5496\n  // ==== Delegate methods ====                                                                                        // 5497\n                                                                                                                       // 5498\n  /**                                                                                                                  // 5499\n   * Invoked when the component is initially created and about to be mounted.                                          // 5500\n   * This may have side effects, but any external subscriptions or data created                                        // 5501\n   * by this method must be cleaned up in `componentWillUnmount`.                                                      // 5502\n   *                                                                                                                   // 5503\n   * @optional                                                                                                         // 5504\n   */                                                                                                                  // 5505\n  componentWillMount: SpecPolicy.DEFINE_MANY,                                                                          // 5506\n                                                                                                                       // 5507\n  /**                                                                                                                  // 5508\n   * Invoked when the component has been mounted and has a DOM representation.                                         // 5509\n   * However, there is no guarantee that the DOM node is in the document.                                              // 5510\n   *                                                                                                                   // 5511\n   * Use this as an opportunity to operate on the DOM when the component has                                           // 5512\n   * been mounted (initialized and rendered) for the first time.                                                       // 5513\n   *                                                                                                                   // 5514\n   * @param {DOMElement} rootNode DOM element representing the component.                                              // 5515\n   * @optional                                                                                                         // 5516\n   */                                                                                                                  // 5517\n  componentDidMount: SpecPolicy.DEFINE_MANY,                                                                           // 5518\n                                                                                                                       // 5519\n  /**                                                                                                                  // 5520\n   * Invoked before the component receives new props.                                                                  // 5521\n   *                                                                                                                   // 5522\n   * Use this as an opportunity to react to a prop transition by updating the                                          // 5523\n   * state using `this.setState`. Current props are accessed via `this.props`.                                         // 5524\n   *                                                                                                                   // 5525\n   *   componentWillReceiveProps: function(nextProps, nextContext) {                                                   // 5526\n   *     this.setState({                                                                                               // 5527\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount                                                 // 5528\n   *     });                                                                                                           // 5529\n   *   }                                                                                                               // 5530\n   *                                                                                                                   // 5531\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop                                        // 5532\n   * transition may cause a state change, but the opposite is not true. If you                                         // 5533\n   * need it, you are probably looking for `componentWillUpdate`.                                                      // 5534\n   *                                                                                                                   // 5535\n   * @param {object} nextProps                                                                                         // 5536\n   * @optional                                                                                                         // 5537\n   */                                                                                                                  // 5538\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,                                                                   // 5539\n                                                                                                                       // 5540\n  /**                                                                                                                  // 5541\n   * Invoked while deciding if the component should be updated as a result of                                          // 5542\n   * receiving new props, state and/or context.                                                                        // 5543\n   *                                                                                                                   // 5544\n   * Use this as an opportunity to `return false` when you're certain that the                                         // 5545\n   * transition to the new props/state/context will not require a component                                            // 5546\n   * update.                                                                                                           // 5547\n   *                                                                                                                   // 5548\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {                                            // 5549\n   *     return !equal(nextProps, this.props) ||                                                                       // 5550\n   *       !equal(nextState, this.state) ||                                                                            // 5551\n   *       !equal(nextContext, this.context);                                                                          // 5552\n   *   }                                                                                                               // 5553\n   *                                                                                                                   // 5554\n   * @param {object} nextProps                                                                                         // 5555\n   * @param {?object} nextState                                                                                        // 5556\n   * @param {?object} nextContext                                                                                      // 5557\n   * @return {boolean} True if the component should update.                                                            // 5558\n   * @optional                                                                                                         // 5559\n   */                                                                                                                  // 5560\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,                                                                       // 5561\n                                                                                                                       // 5562\n  /**                                                                                                                  // 5563\n   * Invoked when the component is about to update due to a transition from                                            // 5564\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`                                         // 5565\n   * and `nextContext`.                                                                                                // 5566\n   *                                                                                                                   // 5567\n   * Use this as an opportunity to perform preparation before an update occurs.                                        // 5568\n   *                                                                                                                   // 5569\n   * NOTE: You **cannot** use `this.setState()` in this method.                                                        // 5570\n   *                                                                                                                   // 5571\n   * @param {object} nextProps                                                                                         // 5572\n   * @param {?object} nextState                                                                                        // 5573\n   * @param {?object} nextContext                                                                                      // 5574\n   * @param {ReactReconcileTransaction} transaction                                                                    // 5575\n   * @optional                                                                                                         // 5576\n   */                                                                                                                  // 5577\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,                                                                         // 5578\n                                                                                                                       // 5579\n  /**                                                                                                                  // 5580\n   * Invoked when the component's DOM representation has been updated.                                                 // 5581\n   *                                                                                                                   // 5582\n   * Use this as an opportunity to operate on the DOM when the component has                                           // 5583\n   * been updated.                                                                                                     // 5584\n   *                                                                                                                   // 5585\n   * @param {object} prevProps                                                                                         // 5586\n   * @param {?object} prevState                                                                                        // 5587\n   * @param {?object} prevContext                                                                                      // 5588\n   * @param {DOMElement} rootNode DOM element representing the component.                                              // 5589\n   * @optional                                                                                                         // 5590\n   */                                                                                                                  // 5591\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,                                                                          // 5592\n                                                                                                                       // 5593\n  /**                                                                                                                  // 5594\n   * Invoked when the component is about to be removed from its parent and have                                        // 5595\n   * its DOM representation destroyed.                                                                                 // 5596\n   *                                                                                                                   // 5597\n   * Use this as an opportunity to deallocate any external resources.                                                  // 5598\n   *                                                                                                                   // 5599\n   * NOTE: There is no `componentDidUnmount` since your component will have been                                       // 5600\n   * destroyed by that point.                                                                                          // 5601\n   *                                                                                                                   // 5602\n   * @optional                                                                                                         // 5603\n   */                                                                                                                  // 5604\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,                                                                        // 5605\n                                                                                                                       // 5606\n                                                                                                                       // 5607\n                                                                                                                       // 5608\n  // ==== Advanced methods ====                                                                                        // 5609\n                                                                                                                       // 5610\n  /**                                                                                                                  // 5611\n   * Updates the component's currently mounted DOM representation.                                                     // 5612\n   *                                                                                                                   // 5613\n   * By default, this implements React's rendering and reconciliation algorithm.                                       // 5614\n   * Sophisticated clients may wish to override this.                                                                  // 5615\n   *                                                                                                                   // 5616\n   * @param {ReactReconcileTransaction} transaction                                                                    // 5617\n   * @internal                                                                                                         // 5618\n   * @overridable                                                                                                      // 5619\n   */                                                                                                                  // 5620\n  updateComponent: SpecPolicy.OVERRIDE_BASE                                                                            // 5621\n                                                                                                                       // 5622\n};                                                                                                                     // 5623\n                                                                                                                       // 5624\n/**                                                                                                                    // 5625\n * Mapping from class specification keys to special processing functions.                                              // 5626\n *                                                                                                                     // 5627\n * Although these are declared like instance properties in the specification                                           // 5628\n * when defining classes using `React.createClass`, they are actually static                                           // 5629\n * and are accessible on the constructor instead of the prototype. Despite                                             // 5630\n * being static, they must be defined outside of the \"statics\" key under                                               // 5631\n * which all other static methods are defined.                                                                         // 5632\n */                                                                                                                    // 5633\nvar RESERVED_SPEC_KEYS = {                                                                                             // 5634\n  displayName: function(Constructor, displayName) {                                                                    // 5635\n    Constructor.displayName = displayName;                                                                             // 5636\n  },                                                                                                                   // 5637\n  mixins: function(Constructor, mixins) {                                                                              // 5638\n    if (mixins) {                                                                                                      // 5639\n      for (var i = 0; i < mixins.length; i++) {                                                                        // 5640\n        mixSpecIntoComponent(Constructor, mixins[i]);                                                                  // 5641\n      }                                                                                                                // 5642\n    }                                                                                                                  // 5643\n  },                                                                                                                   // 5644\n  childContextTypes: function(Constructor, childContextTypes) {                                                        // 5645\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 5646\n      validateTypeDef(                                                                                                 // 5647\n        Constructor,                                                                                                   // 5648\n        childContextTypes,                                                                                             // 5649\n        ReactPropTypeLocations.childContext                                                                            // 5650\n      );                                                                                                               // 5651\n    }                                                                                                                  // 5652\n    Constructor.childContextTypes = assign(                                                                            // 5653\n      {},                                                                                                              // 5654\n      Constructor.childContextTypes,                                                                                   // 5655\n      childContextTypes                                                                                                // 5656\n    );                                                                                                                 // 5657\n  },                                                                                                                   // 5658\n  contextTypes: function(Constructor, contextTypes) {                                                                  // 5659\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 5660\n      validateTypeDef(                                                                                                 // 5661\n        Constructor,                                                                                                   // 5662\n        contextTypes,                                                                                                  // 5663\n        ReactPropTypeLocations.context                                                                                 // 5664\n      );                                                                                                               // 5665\n    }                                                                                                                  // 5666\n    Constructor.contextTypes = assign(                                                                                 // 5667\n      {},                                                                                                              // 5668\n      Constructor.contextTypes,                                                                                        // 5669\n      contextTypes                                                                                                     // 5670\n    );                                                                                                                 // 5671\n  },                                                                                                                   // 5672\n  /**                                                                                                                  // 5673\n   * Special case getDefaultProps which should move into statics but requires                                          // 5674\n   * automatic merging.                                                                                                // 5675\n   */                                                                                                                  // 5676\n  getDefaultProps: function(Constructor, getDefaultProps) {                                                            // 5677\n    if (Constructor.getDefaultProps) {                                                                                 // 5678\n      Constructor.getDefaultProps = createMergedResultFunction(                                                        // 5679\n        Constructor.getDefaultProps,                                                                                   // 5680\n        getDefaultProps                                                                                                // 5681\n      );                                                                                                               // 5682\n    } else {                                                                                                           // 5683\n      Constructor.getDefaultProps = getDefaultProps;                                                                   // 5684\n    }                                                                                                                  // 5685\n  },                                                                                                                   // 5686\n  propTypes: function(Constructor, propTypes) {                                                                        // 5687\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 5688\n      validateTypeDef(                                                                                                 // 5689\n        Constructor,                                                                                                   // 5690\n        propTypes,                                                                                                     // 5691\n        ReactPropTypeLocations.prop                                                                                    // 5692\n      );                                                                                                               // 5693\n    }                                                                                                                  // 5694\n    Constructor.propTypes = assign(                                                                                    // 5695\n      {},                                                                                                              // 5696\n      Constructor.propTypes,                                                                                           // 5697\n      propTypes                                                                                                        // 5698\n    );                                                                                                                 // 5699\n  },                                                                                                                   // 5700\n  statics: function(Constructor, statics) {                                                                            // 5701\n    mixStaticSpecIntoComponent(Constructor, statics);                                                                  // 5702\n  }                                                                                                                    // 5703\n};                                                                                                                     // 5704\n                                                                                                                       // 5705\nfunction validateTypeDef(Constructor, typeDef, location) {                                                             // 5706\n  for (var propName in typeDef) {                                                                                      // 5707\n    if (typeDef.hasOwnProperty(propName)) {                                                                            // 5708\n      // use a warning instead of an invariant so components                                                           // 5709\n      // don't show up in prod but not in __DEV__                                                                      // 5710\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 5711\n        typeof typeDef[propName] === 'function',                                                                       // 5712\n        '%s: %s type `%s` is invalid; it must be a function, usually from ' +                                          // 5713\n        'React.PropTypes.',                                                                                            // 5714\n        Constructor.displayName || 'ReactClass',                                                                       // 5715\n        ReactPropTypeLocationNames[location],                                                                          // 5716\n        propName                                                                                                       // 5717\n      ) : null);                                                                                                       // 5718\n    }                                                                                                                  // 5719\n  }                                                                                                                    // 5720\n}                                                                                                                      // 5721\n                                                                                                                       // 5722\nfunction validateMethodOverride(proto, name) {                                                                         // 5723\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?                                                          // 5724\n    ReactClassInterface[name] :                                                                                        // 5725\n    null;                                                                                                              // 5726\n                                                                                                                       // 5727\n  // Disallow overriding of base class methods unless explicitly allowed.                                              // 5728\n  if (ReactClassMixin.hasOwnProperty(name)) {                                                                          // 5729\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 5730\n      specPolicy === SpecPolicy.OVERRIDE_BASE,                                                                         // 5731\n      'ReactClassInterface: You are attempting to override ' +                                                         // 5732\n      '`%s` from your class specification. Ensure that your method names ' +                                           // 5733\n      'do not overlap with React methods.',                                                                            // 5734\n      name                                                                                                             // 5735\n    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));                                                           // 5736\n  }                                                                                                                    // 5737\n                                                                                                                       // 5738\n  // Disallow defining methods more than once unless explicitly allowed.                                               // 5739\n  if (proto.hasOwnProperty(name)) {                                                                                    // 5740\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 5741\n      specPolicy === SpecPolicy.DEFINE_MANY ||                                                                         // 5742\n      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,                                                                    // 5743\n      'ReactClassInterface: You are attempting to define ' +                                                           // 5744\n      '`%s` on your component more than once. This conflict may be due ' +                                             // 5745\n      'to a mixin.',                                                                                                   // 5746\n      name                                                                                                             // 5747\n    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||                                                             // 5748\n    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));                                                                    // 5749\n  }                                                                                                                    // 5750\n}                                                                                                                      // 5751\n                                                                                                                       // 5752\n/**                                                                                                                    // 5753\n * Mixin helper which handles policy validation and reserved                                                           // 5754\n * specification keys when building React classses.                                                                    // 5755\n */                                                                                                                    // 5756\nfunction mixSpecIntoComponent(Constructor, spec) {                                                                     // 5757\n  if (!spec) {                                                                                                         // 5758\n    return;                                                                                                            // 5759\n  }                                                                                                                    // 5760\n                                                                                                                       // 5761\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 5762\n    typeof spec !== 'function',                                                                                        // 5763\n    'ReactClass: You\\'re attempting to ' +                                                                             // 5764\n    'use a component class as a mixin. Instead, just use a regular object.'                                            // 5765\n  ) : invariant(typeof spec !== 'function'));                                                                          // 5766\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 5767\n    !ReactElement.isValidElement(spec),                                                                                // 5768\n    'ReactClass: You\\'re attempting to ' +                                                                             // 5769\n    'use a component as a mixin. Instead, just use a regular object.'                                                  // 5770\n  ) : invariant(!ReactElement.isValidElement(spec)));                                                                  // 5771\n                                                                                                                       // 5772\n  var proto = Constructor.prototype;                                                                                   // 5773\n                                                                                                                       // 5774\n  // By handling mixins before any other properties, we ensure the same                                                // 5775\n  // chaining order is applied to methods with DEFINE_MANY policy, whether                                             // 5776\n  // mixins are listed before or after these methods in the spec.                                                      // 5777\n  if (spec.hasOwnProperty(MIXINS_KEY)) {                                                                               // 5778\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);                                                               // 5779\n  }                                                                                                                    // 5780\n                                                                                                                       // 5781\n  for (var name in spec) {                                                                                             // 5782\n    if (!spec.hasOwnProperty(name)) {                                                                                  // 5783\n      continue;                                                                                                        // 5784\n    }                                                                                                                  // 5785\n                                                                                                                       // 5786\n    if (name === MIXINS_KEY) {                                                                                         // 5787\n      // We have already handled mixins in a special case above                                                        // 5788\n      continue;                                                                                                        // 5789\n    }                                                                                                                  // 5790\n                                                                                                                       // 5791\n    var property = spec[name];                                                                                         // 5792\n    validateMethodOverride(proto, name);                                                                               // 5793\n                                                                                                                       // 5794\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {                                                                     // 5795\n      RESERVED_SPEC_KEYS[name](Constructor, property);                                                                 // 5796\n    } else {                                                                                                           // 5797\n      // Setup methods on prototype:                                                                                   // 5798\n      // The following member methods should not be automatically bound:                                               // 5799\n      // 1. Expected ReactClass methods (in the \"interface\").                                                          // 5800\n      // 2. Overridden methods (that were mixed in).                                                                   // 5801\n      var isReactClassMethod =                                                                                         // 5802\n        ReactClassInterface.hasOwnProperty(name);                                                                      // 5803\n      var isAlreadyDefined = proto.hasOwnProperty(name);                                                               // 5804\n      var markedDontBind = property && property.__reactDontBind;                                                       // 5805\n      var isFunction = typeof property === 'function';                                                                 // 5806\n      var shouldAutoBind =                                                                                             // 5807\n        isFunction &&                                                                                                  // 5808\n        !isReactClassMethod &&                                                                                         // 5809\n        !isAlreadyDefined &&                                                                                           // 5810\n        !markedDontBind;                                                                                               // 5811\n                                                                                                                       // 5812\n      if (shouldAutoBind) {                                                                                            // 5813\n        if (!proto.__reactAutoBindMap) {                                                                               // 5814\n          proto.__reactAutoBindMap = {};                                                                               // 5815\n        }                                                                                                              // 5816\n        proto.__reactAutoBindMap[name] = property;                                                                     // 5817\n        proto[name] = property;                                                                                        // 5818\n      } else {                                                                                                         // 5819\n        if (isAlreadyDefined) {                                                                                        // 5820\n          var specPolicy = ReactClassInterface[name];                                                                  // 5821\n                                                                                                                       // 5822\n          // These cases should already be caught by validateMethodOverride                                            // 5823\n          (\"production\" !== process.env.NODE_ENV ? invariant(                                                          // 5824\n            isReactClassMethod && (                                                                                    // 5825\n              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)                  // 5826\n            ),                                                                                                         // 5827\n            'ReactClass: Unexpected spec policy %s for key %s ' +                                                      // 5828\n            'when mixing in component specs.',                                                                         // 5829\n            specPolicy,                                                                                                // 5830\n            name                                                                                                       // 5831\n          ) : invariant(isReactClassMethod && (                                                                        // 5832\n            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)                    // 5833\n          )));                                                                                                         // 5834\n                                                                                                                       // 5835\n          // For methods which are defined more than once, call the existing                                           // 5836\n          // methods before calling the new property, merging if appropriate.                                          // 5837\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {                                                          // 5838\n            proto[name] = createMergedResultFunction(proto[name], property);                                           // 5839\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {                                                          // 5840\n            proto[name] = createChainedFunction(proto[name], property);                                                // 5841\n          }                                                                                                            // 5842\n        } else {                                                                                                       // 5843\n          proto[name] = property;                                                                                      // 5844\n          if (\"production\" !== process.env.NODE_ENV) {                                                                 // 5845\n            // Add verbose displayName to the function, which helps when looking                                       // 5846\n            // at profiling tools.                                                                                     // 5847\n            if (typeof property === 'function' && spec.displayName) {                                                  // 5848\n              proto[name].displayName = spec.displayName + '_' + name;                                                 // 5849\n            }                                                                                                          // 5850\n          }                                                                                                            // 5851\n        }                                                                                                              // 5852\n      }                                                                                                                // 5853\n    }                                                                                                                  // 5854\n  }                                                                                                                    // 5855\n}                                                                                                                      // 5856\n                                                                                                                       // 5857\nfunction mixStaticSpecIntoComponent(Constructor, statics) {                                                            // 5858\n  if (!statics) {                                                                                                      // 5859\n    return;                                                                                                            // 5860\n  }                                                                                                                    // 5861\n  for (var name in statics) {                                                                                          // 5862\n    var property = statics[name];                                                                                      // 5863\n    if (!statics.hasOwnProperty(name)) {                                                                               // 5864\n      continue;                                                                                                        // 5865\n    }                                                                                                                  // 5866\n                                                                                                                       // 5867\n    var isReserved = name in RESERVED_SPEC_KEYS;                                                                       // 5868\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 5869\n      !isReserved,                                                                                                     // 5870\n      'ReactClass: You are attempting to define a reserved ' +                                                         // 5871\n      'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +                                          // 5872\n      'as an instance property instead; it will still be accessible on the ' +                                         // 5873\n      'constructor.',                                                                                                  // 5874\n      name                                                                                                             // 5875\n    ) : invariant(!isReserved));                                                                                       // 5876\n                                                                                                                       // 5877\n    var isInherited = name in Constructor;                                                                             // 5878\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 5879\n      !isInherited,                                                                                                    // 5880\n      'ReactClass: You are attempting to define ' +                                                                    // 5881\n      '`%s` on your component more than once. This conflict may be ' +                                                 // 5882\n      'due to a mixin.',                                                                                               // 5883\n      name                                                                                                             // 5884\n    ) : invariant(!isInherited));                                                                                      // 5885\n    Constructor[name] = property;                                                                                      // 5886\n  }                                                                                                                    // 5887\n}                                                                                                                      // 5888\n                                                                                                                       // 5889\n/**                                                                                                                    // 5890\n * Merge two objects, but throw if both contain the same key.                                                          // 5891\n *                                                                                                                     // 5892\n * @param {object} one The first object, which is mutated.                                                             // 5893\n * @param {object} two The second object                                                                               // 5894\n * @return {object} one after it has been mutated to contain everything in two.                                        // 5895\n */                                                                                                                    // 5896\nfunction mergeIntoWithNoDuplicateKeys(one, two) {                                                                      // 5897\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 5898\n    one && two && typeof one === 'object' && typeof two === 'object',                                                  // 5899\n    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'                                                        // 5900\n  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));                                    // 5901\n                                                                                                                       // 5902\n  for (var key in two) {                                                                                               // 5903\n    if (two.hasOwnProperty(key)) {                                                                                     // 5904\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 5905\n        one[key] === undefined,                                                                                        // 5906\n        'mergeIntoWithNoDuplicateKeys(): ' +                                                                           // 5907\n        'Tried to merge two objects with the same key: `%s`. This conflict ' +                                         // 5908\n        'may be due to a mixin; in particular, this may be caused by two ' +                                           // 5909\n        'getInitialState() or getDefaultProps() methods returning objects ' +                                          // 5910\n        'with clashing keys.',                                                                                         // 5911\n        key                                                                                                            // 5912\n      ) : invariant(one[key] === undefined));                                                                          // 5913\n      one[key] = two[key];                                                                                             // 5914\n    }                                                                                                                  // 5915\n  }                                                                                                                    // 5916\n  return one;                                                                                                          // 5917\n}                                                                                                                      // 5918\n                                                                                                                       // 5919\n/**                                                                                                                    // 5920\n * Creates a function that invokes two functions and merges their return values.                                       // 5921\n *                                                                                                                     // 5922\n * @param {function} one Function to invoke first.                                                                     // 5923\n * @param {function} two Function to invoke second.                                                                    // 5924\n * @return {function} Function that invokes the two argument functions.                                                // 5925\n * @private                                                                                                            // 5926\n */                                                                                                                    // 5927\nfunction createMergedResultFunction(one, two) {                                                                        // 5928\n  return function mergedResult() {                                                                                     // 5929\n    var a = one.apply(this, arguments);                                                                                // 5930\n    var b = two.apply(this, arguments);                                                                                // 5931\n    if (a == null) {                                                                                                   // 5932\n      return b;                                                                                                        // 5933\n    } else if (b == null) {                                                                                            // 5934\n      return a;                                                                                                        // 5935\n    }                                                                                                                  // 5936\n    var c = {};                                                                                                        // 5937\n    mergeIntoWithNoDuplicateKeys(c, a);                                                                                // 5938\n    mergeIntoWithNoDuplicateKeys(c, b);                                                                                // 5939\n    return c;                                                                                                          // 5940\n  };                                                                                                                   // 5941\n}                                                                                                                      // 5942\n                                                                                                                       // 5943\n/**                                                                                                                    // 5944\n * Creates a function that invokes two functions and ignores their return vales.                                       // 5945\n *                                                                                                                     // 5946\n * @param {function} one Function to invoke first.                                                                     // 5947\n * @param {function} two Function to invoke second.                                                                    // 5948\n * @return {function} Function that invokes the two argument functions.                                                // 5949\n * @private                                                                                                            // 5950\n */                                                                                                                    // 5951\nfunction createChainedFunction(one, two) {                                                                             // 5952\n  return function chainedFunction() {                                                                                  // 5953\n    one.apply(this, arguments);                                                                                        // 5954\n    two.apply(this, arguments);                                                                                        // 5955\n  };                                                                                                                   // 5956\n}                                                                                                                      // 5957\n                                                                                                                       // 5958\n/**                                                                                                                    // 5959\n * Binds a method to the component.                                                                                    // 5960\n *                                                                                                                     // 5961\n * @param {object} component Component whose method is going to be bound.                                              // 5962\n * @param {function} method Method to be bound.                                                                        // 5963\n * @return {function} The bound method.                                                                                // 5964\n */                                                                                                                    // 5965\nfunction bindAutoBindMethod(component, method) {                                                                       // 5966\n  var boundMethod = method.bind(component);                                                                            // 5967\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 5968\n    boundMethod.__reactBoundContext = component;                                                                       // 5969\n    boundMethod.__reactBoundMethod = method;                                                                           // 5970\n    boundMethod.__reactBoundArguments = null;                                                                          // 5971\n    var componentName = component.constructor.displayName;                                                             // 5972\n    var _bind = boundMethod.bind;                                                                                      // 5973\n    /* eslint-disable block-scoped-var, no-undef */                                                                    // 5974\n    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n      // User is trying to bind() an autobound method; we effectively will                                             // 5976\n      // ignore the value of \"this\" that the user is trying to use, so                                                 // 5977\n      // let's warn.                                                                                                   // 5978\n      if (newThis !== component && newThis !== null) {                                                                 // 5979\n        (\"production\" !== process.env.NODE_ENV ? warning(                                                              // 5980\n          false,                                                                                                       // 5981\n          'bind(): React component methods may only be bound to the ' +                                                // 5982\n          'component instance. See %s',                                                                                // 5983\n          componentName                                                                                                // 5984\n        ) : null);                                                                                                     // 5985\n      } else if (!args.length) {                                                                                       // 5986\n        (\"production\" !== process.env.NODE_ENV ? warning(                                                              // 5987\n          false,                                                                                                       // 5988\n          'bind(): You are binding a component method to the component. ' +                                            // 5989\n          'React does this for you automatically in a high-performance ' +                                             // 5990\n          'way, so you can safely remove this call. See %s',                                                           // 5991\n          componentName                                                                                                // 5992\n        ) : null);                                                                                                     // 5993\n        return boundMethod;                                                                                            // 5994\n      }                                                                                                                // 5995\n      var reboundMethod = _bind.apply(boundMethod, arguments);                                                         // 5996\n      reboundMethod.__reactBoundContext = component;                                                                   // 5997\n      reboundMethod.__reactBoundMethod = method;                                                                       // 5998\n      reboundMethod.__reactBoundArguments = args;                                                                      // 5999\n      return reboundMethod;                                                                                            // 6000\n      /* eslint-enable */                                                                                              // 6001\n    };                                                                                                                 // 6002\n  }                                                                                                                    // 6003\n  return boundMethod;                                                                                                  // 6004\n}                                                                                                                      // 6005\n                                                                                                                       // 6006\n/**                                                                                                                    // 6007\n * Binds all auto-bound methods in a component.                                                                        // 6008\n *                                                                                                                     // 6009\n * @param {object} component Component whose method is going to be bound.                                              // 6010\n */                                                                                                                    // 6011\nfunction bindAutoBindMethods(component) {                                                                              // 6012\n  for (var autoBindKey in component.__reactAutoBindMap) {                                                              // 6013\n    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {                                                    // 6014\n      var method = component.__reactAutoBindMap[autoBindKey];                                                          // 6015\n      component[autoBindKey] = bindAutoBindMethod(                                                                     // 6016\n        component,                                                                                                     // 6017\n        ReactErrorUtils.guard(                                                                                         // 6018\n          method,                                                                                                      // 6019\n          component.constructor.displayName + '.' + autoBindKey                                                        // 6020\n        )                                                                                                              // 6021\n      );                                                                                                               // 6022\n    }                                                                                                                  // 6023\n  }                                                                                                                    // 6024\n}                                                                                                                      // 6025\n                                                                                                                       // 6026\nvar typeDeprecationDescriptor = {                                                                                      // 6027\n  enumerable: false,                                                                                                   // 6028\n  get: function() {                                                                                                    // 6029\n    var displayName = this.displayName || this.name || 'Component';                                                    // 6030\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 6031\n      false,                                                                                                           // 6032\n      '%s.type is deprecated. Use %s directly to access the class.',                                                   // 6033\n      displayName,                                                                                                     // 6034\n      displayName                                                                                                      // 6035\n    ) : null);                                                                                                         // 6036\n    Object.defineProperty(this, 'type', {                                                                              // 6037\n      value: this                                                                                                      // 6038\n    });                                                                                                                // 6039\n    return this;                                                                                                       // 6040\n  }                                                                                                                    // 6041\n};                                                                                                                     // 6042\n                                                                                                                       // 6043\n/**                                                                                                                    // 6044\n * Add more to the ReactClass base class. These are all legacy features and                                            // 6045\n * therefore not already part of the modern ReactComponent.                                                            // 6046\n */                                                                                                                    // 6047\nvar ReactClassMixin = {                                                                                                // 6048\n                                                                                                                       // 6049\n  /**                                                                                                                  // 6050\n   * TODO: This will be deprecated because state should always keep a consistent                                       // 6051\n   * type signature and the only use case for this, is to avoid that.                                                  // 6052\n   */                                                                                                                  // 6053\n  replaceState: function(newState, callback) {                                                                         // 6054\n    ReactUpdateQueue.enqueueReplaceState(this, newState);                                                              // 6055\n    if (callback) {                                                                                                    // 6056\n      ReactUpdateQueue.enqueueCallback(this, callback);                                                                // 6057\n    }                                                                                                                  // 6058\n  },                                                                                                                   // 6059\n                                                                                                                       // 6060\n  /**                                                                                                                  // 6061\n   * Checks whether or not this composite component is mounted.                                                        // 6062\n   * @return {boolean} True if mounted, false otherwise.                                                               // 6063\n   * @protected                                                                                                        // 6064\n   * @final                                                                                                            // 6065\n   */                                                                                                                  // 6066\n  isMounted: function() {                                                                                              // 6067\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 6068\n      var owner = ReactCurrentOwner.current;                                                                           // 6069\n      if (owner !== null) {                                                                                            // 6070\n        (\"production\" !== process.env.NODE_ENV ? warning(                                                              // 6071\n          owner._warnedAboutRefsInRender,                                                                              // 6072\n          '%s is accessing isMounted inside its render() function. ' +                                                 // 6073\n          'render() should be a pure function of props and state. It should ' +                                        // 6074\n          'never access something that requires stale data from the previous ' +                                       // 6075\n          'render, such as refs. Move this logic to componentDidMount and ' +                                          // 6076\n          'componentDidUpdate instead.',                                                                               // 6077\n          owner.getName() || 'A component'                                                                             // 6078\n        ) : null);                                                                                                     // 6079\n        owner._warnedAboutRefsInRender = true;                                                                         // 6080\n      }                                                                                                                // 6081\n    }                                                                                                                  // 6082\n    var internalInstance = ReactInstanceMap.get(this);                                                                 // 6083\n    return (                                                                                                           // 6084\n      internalInstance &&                                                                                              // 6085\n      internalInstance !== ReactLifeCycle.currentlyMountingInstance                                                    // 6086\n    );                                                                                                                 // 6087\n  },                                                                                                                   // 6088\n                                                                                                                       // 6089\n  /**                                                                                                                  // 6090\n   * Sets a subset of the props.                                                                                       // 6091\n   *                                                                                                                   // 6092\n   * @param {object} partialProps Subset of the next props.                                                            // 6093\n   * @param {?function} callback Called after props are updated.                                                       // 6094\n   * @final                                                                                                            // 6095\n   * @public                                                                                                           // 6096\n   * @deprecated                                                                                                       // 6097\n   */                                                                                                                  // 6098\n  setProps: function(partialProps, callback) {                                                                         // 6099\n    ReactUpdateQueue.enqueueSetProps(this, partialProps);                                                              // 6100\n    if (callback) {                                                                                                    // 6101\n      ReactUpdateQueue.enqueueCallback(this, callback);                                                                // 6102\n    }                                                                                                                  // 6103\n  },                                                                                                                   // 6104\n                                                                                                                       // 6105\n  /**                                                                                                                  // 6106\n   * Replace all the props.                                                                                            // 6107\n   *                                                                                                                   // 6108\n   * @param {object} newProps Subset of the next props.                                                                // 6109\n   * @param {?function} callback Called after props are updated.                                                       // 6110\n   * @final                                                                                                            // 6111\n   * @public                                                                                                           // 6112\n   * @deprecated                                                                                                       // 6113\n   */                                                                                                                  // 6114\n  replaceProps: function(newProps, callback) {                                                                         // 6115\n    ReactUpdateQueue.enqueueReplaceProps(this, newProps);                                                              // 6116\n    if (callback) {                                                                                                    // 6117\n      ReactUpdateQueue.enqueueCallback(this, callback);                                                                // 6118\n    }                                                                                                                  // 6119\n  }                                                                                                                    // 6120\n};                                                                                                                     // 6121\n                                                                                                                       // 6122\nvar ReactClassComponent = function() {};                                                                               // 6123\nassign(                                                                                                                // 6124\n  ReactClassComponent.prototype,                                                                                       // 6125\n  ReactComponent.prototype,                                                                                            // 6126\n  ReactClassMixin                                                                                                      // 6127\n);                                                                                                                     // 6128\n                                                                                                                       // 6129\n/**                                                                                                                    // 6130\n * Module for creating composite components.                                                                           // 6131\n *                                                                                                                     // 6132\n * @class ReactClass                                                                                                   // 6133\n */                                                                                                                    // 6134\nvar ReactClass = {                                                                                                     // 6135\n                                                                                                                       // 6136\n  /**                                                                                                                  // 6137\n   * Creates a composite component class given a class specification.                                                  // 6138\n   *                                                                                                                   // 6139\n   * @param {object} spec Class specification (which must define `render`).                                            // 6140\n   * @return {function} Component constructor function.                                                                // 6141\n   * @public                                                                                                           // 6142\n   */                                                                                                                  // 6143\n  createClass: function(spec) {                                                                                        // 6144\n    var Constructor = function(props, context) {                                                                       // 6145\n      // This constructor is overridden by mocks. The argument is used                                                 // 6146\n      // by mocks to assert on what gets mounted.                                                                      // 6147\n                                                                                                                       // 6148\n      if (\"production\" !== process.env.NODE_ENV) {                                                                     // 6149\n        (\"production\" !== process.env.NODE_ENV ? warning(                                                              // 6150\n          this instanceof Constructor,                                                                                 // 6151\n          'Something is calling a React component directly. Use a factory or ' +                                       // 6152\n          'JSX instead. See: https://fb.me/react-legacyfactory'                                                        // 6153\n        ) : null);                                                                                                     // 6154\n      }                                                                                                                // 6155\n                                                                                                                       // 6156\n      // Wire up auto-binding                                                                                          // 6157\n      if (this.__reactAutoBindMap) {                                                                                   // 6158\n        bindAutoBindMethods(this);                                                                                     // 6159\n      }                                                                                                                // 6160\n                                                                                                                       // 6161\n      this.props = props;                                                                                              // 6162\n      this.context = context;                                                                                          // 6163\n      this.state = null;                                                                                               // 6164\n                                                                                                                       // 6165\n      // ReactClasses doesn't have constructors. Instead, they use the                                                 // 6166\n      // getInitialState and componentWillMount methods for initialization.                                            // 6167\n                                                                                                                       // 6168\n      var initialState = this.getInitialState ? this.getInitialState() : null;                                         // 6169\n      if (\"production\" !== process.env.NODE_ENV) {                                                                     // 6170\n        // We allow auto-mocks to proceed as if they're returning null.                                                // 6171\n        if (typeof initialState === 'undefined' &&                                                                     // 6172\n            this.getInitialState._isMockFunction) {                                                                    // 6173\n          // This is probably bad practice. Consider warning here and                                                  // 6174\n          // deprecating this convenience.                                                                             // 6175\n          initialState = null;                                                                                         // 6176\n        }                                                                                                              // 6177\n      }                                                                                                                // 6178\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 6179\n        typeof initialState === 'object' && !Array.isArray(initialState),                                              // 6180\n        '%s.getInitialState(): must return an object or null',                                                         // 6181\n        Constructor.displayName || 'ReactCompositeComponent'                                                           // 6182\n      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));                                // 6183\n                                                                                                                       // 6184\n      this.state = initialState;                                                                                       // 6185\n    };                                                                                                                 // 6186\n    Constructor.prototype = new ReactClassComponent();                                                                 // 6187\n    Constructor.prototype.constructor = Constructor;                                                                   // 6188\n                                                                                                                       // 6189\n    injectedMixins.forEach(                                                                                            // 6190\n      mixSpecIntoComponent.bind(null, Constructor)                                                                     // 6191\n    );                                                                                                                 // 6192\n                                                                                                                       // 6193\n    mixSpecIntoComponent(Constructor, spec);                                                                           // 6194\n                                                                                                                       // 6195\n    // Initialize the defaultProps property after all mixins have been merged                                          // 6196\n    if (Constructor.getDefaultProps) {                                                                                 // 6197\n      Constructor.defaultProps = Constructor.getDefaultProps();                                                        // 6198\n    }                                                                                                                  // 6199\n                                                                                                                       // 6200\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 6201\n      // This is a tag to indicate that the use of these method names is ok,                                           // 6202\n      // since it's used with createClass. If it's not, then it's likely a                                             // 6203\n      // mistake so we'll warn you to use the static property, property                                                // 6204\n      // initializer or constructor respectively.                                                                      // 6205\n      if (Constructor.getDefaultProps) {                                                                               // 6206\n        Constructor.getDefaultProps.isReactClassApproved = {};                                                         // 6207\n      }                                                                                                                // 6208\n      if (Constructor.prototype.getInitialState) {                                                                     // 6209\n        Constructor.prototype.getInitialState.isReactClassApproved = {};                                               // 6210\n      }                                                                                                                // 6211\n    }                                                                                                                  // 6212\n                                                                                                                       // 6213\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 6214\n      Constructor.prototype.render,                                                                                    // 6215\n      'createClass(...): Class specification must implement a `render` method.'                                        // 6216\n    ) : invariant(Constructor.prototype.render));                                                                      // 6217\n                                                                                                                       // 6218\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 6219\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 6220\n        !Constructor.prototype.componentShouldUpdate,                                                                  // 6221\n        '%s has a method called ' +                                                                                    // 6222\n        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +                                            // 6223\n        'The name is phrased as a question because the function is ' +                                                 // 6224\n        'expected to return a value.',                                                                                 // 6225\n        spec.displayName || 'A component'                                                                              // 6226\n      ) : null);                                                                                                       // 6227\n    }                                                                                                                  // 6228\n                                                                                                                       // 6229\n    // Reduce time spent doing lookups by setting these on the prototype.                                              // 6230\n    for (var methodName in ReactClassInterface) {                                                                      // 6231\n      if (!Constructor.prototype[methodName]) {                                                                        // 6232\n        Constructor.prototype[methodName] = null;                                                                      // 6233\n      }                                                                                                                // 6234\n    }                                                                                                                  // 6235\n                                                                                                                       // 6236\n    // Legacy hook                                                                                                     // 6237\n    Constructor.type = Constructor;                                                                                    // 6238\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 6239\n      try {                                                                                                            // 6240\n        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);                                         // 6241\n      } catch (x) {                                                                                                    // 6242\n        // IE will fail on defineProperty (es5-shim/sham too)                                                          // 6243\n      }                                                                                                                // 6244\n    }                                                                                                                  // 6245\n                                                                                                                       // 6246\n    return Constructor;                                                                                                // 6247\n  },                                                                                                                   // 6248\n                                                                                                                       // 6249\n  injection: {                                                                                                         // 6250\n    injectMixin: function(mixin) {                                                                                     // 6251\n      injectedMixins.push(mixin);                                                                                      // 6252\n    }                                                                                                                  // 6253\n  }                                                                                                                    // 6254\n                                                                                                                       // 6255\n};                                                                                                                     // 6256\n                                                                                                                       // 6257\nmodule.exports = ReactClass;                                                                                           // 6258\n                                                                                                                       // 6259\n}).call(this,require('_process'))                                                                                      // 6260\n                                                                                                                       // 6261\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactComponent\":\"react/lib/ReactComponent\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactErrorUtils\":\"react/lib/ReactErrorUtils\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./ReactLifeCycle\":\"react/lib/ReactLifeCycle\",\"./ReactPropTypeLocationNames\":\"react/lib/ReactPropTypeLocationNames\",\"./ReactPropTypeLocations\":\"react/lib/ReactPropTypeLocations\",\"./ReactUpdateQueue\":\"react/lib/ReactUpdateQueue\",\"./invariant\":\"react/lib/invariant\",\"./keyMirror\":\"react/lib/keyMirror\",\"./keyOf\":\"react/lib/keyOf\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactComponentBrowserEnvironment\":[function(require,module,exports){\n/**                                                                                                                    // 6263\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 6264\n * All rights reserved.                                                                                                // 6265\n *                                                                                                                     // 6266\n * This source code is licensed under the BSD-style license found in the                                               // 6267\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6268\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 6269\n *                                                                                                                     // 6270\n * @providesModule ReactComponentBrowserEnvironment                                                                    // 6271\n */                                                                                                                    // 6272\n                                                                                                                       // 6273\n/*jslint evil: true */                                                                                                 // 6274\n                                                                                                                       // 6275\n'use strict';                                                                                                          // 6276\n                                                                                                                       // 6277\nvar ReactDOMIDOperations = require(\"./ReactDOMIDOperations\");                                                          // 6278\nvar ReactMount = require(\"./ReactMount\");                                                                              // 6279\n                                                                                                                       // 6280\n/**                                                                                                                    // 6281\n * Abstracts away all functionality of the reconciler that requires knowledge of                                       // 6282\n * the browser context. TODO: These callers should be refactored to avoid the                                          // 6283\n * need for this injection.                                                                                            // 6284\n */                                                                                                                    // 6285\nvar ReactComponentBrowserEnvironment = {                                                                               // 6286\n                                                                                                                       // 6287\n  processChildrenUpdates:                                                                                              // 6288\n    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,                                                            // 6289\n                                                                                                                       // 6290\n  replaceNodeWithMarkupByID:                                                                                           // 6291\n    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,                                                         // 6292\n                                                                                                                       // 6293\n  /**                                                                                                                  // 6294\n   * If a particular environment requires that some resources be cleaned up,                                           // 6295\n   * specify this in the injected Mixin. In the DOM, we would likely want to                                           // 6296\n   * purge any cached node ID lookups.                                                                                 // 6297\n   *                                                                                                                   // 6298\n   * @private                                                                                                          // 6299\n   */                                                                                                                  // 6300\n  unmountIDFromEnvironment: function(rootNodeID) {                                                                     // 6301\n    ReactMount.purgeID(rootNodeID);                                                                                    // 6302\n  }                                                                                                                    // 6303\n                                                                                                                       // 6304\n};                                                                                                                     // 6305\n                                                                                                                       // 6306\nmodule.exports = ReactComponentBrowserEnvironment;                                                                     // 6307\n                                                                                                                       // 6308\n},{\"./ReactDOMIDOperations\":\"react/lib/ReactDOMIDOperations\",\"./ReactMount\":\"react/lib/ReactMount\"}],\"react/lib/ReactComponentEnvironment\":[function(require,module,exports){\n(function (process){                                                                                                   // 6310\n/**                                                                                                                    // 6311\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 6312\n * All rights reserved.                                                                                                // 6313\n *                                                                                                                     // 6314\n * This source code is licensed under the BSD-style license found in the                                               // 6315\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6316\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 6317\n *                                                                                                                     // 6318\n * @providesModule ReactComponentEnvironment                                                                           // 6319\n */                                                                                                                    // 6320\n                                                                                                                       // 6321\n'use strict';                                                                                                          // 6322\n                                                                                                                       // 6323\nvar invariant = require(\"./invariant\");                                                                                // 6324\n                                                                                                                       // 6325\nvar injected = false;                                                                                                  // 6326\n                                                                                                                       // 6327\nvar ReactComponentEnvironment = {                                                                                      // 6328\n                                                                                                                       // 6329\n  /**                                                                                                                  // 6330\n   * Optionally injectable environment dependent cleanup hook. (server vs.                                             // 6331\n   * browser etc). Example: A browser system caches DOM nodes based on component                                       // 6332\n   * ID and must remove that cache entry when this instance is unmounted.                                              // 6333\n   */                                                                                                                  // 6334\n  unmountIDFromEnvironment: null,                                                                                      // 6335\n                                                                                                                       // 6336\n  /**                                                                                                                  // 6337\n   * Optionally injectable hook for swapping out mount images in the middle of                                         // 6338\n   * the tree.                                                                                                         // 6339\n   */                                                                                                                  // 6340\n  replaceNodeWithMarkupByID: null,                                                                                     // 6341\n                                                                                                                       // 6342\n  /**                                                                                                                  // 6343\n   * Optionally injectable hook for processing a queue of child updates. Will                                          // 6344\n   * later move into MultiChildComponents.                                                                             // 6345\n   */                                                                                                                  // 6346\n  processChildrenUpdates: null,                                                                                        // 6347\n                                                                                                                       // 6348\n  injection: {                                                                                                         // 6349\n    injectEnvironment: function(environment) {                                                                         // 6350\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 6351\n        !injected,                                                                                                     // 6352\n        'ReactCompositeComponent: injectEnvironment() can only be called once.'                                        // 6353\n      ) : invariant(!injected));                                                                                       // 6354\n      ReactComponentEnvironment.unmountIDFromEnvironment =                                                             // 6355\n        environment.unmountIDFromEnvironment;                                                                          // 6356\n      ReactComponentEnvironment.replaceNodeWithMarkupByID =                                                            // 6357\n        environment.replaceNodeWithMarkupByID;                                                                         // 6358\n      ReactComponentEnvironment.processChildrenUpdates =                                                               // 6359\n        environment.processChildrenUpdates;                                                                            // 6360\n      injected = true;                                                                                                 // 6361\n    }                                                                                                                  // 6362\n  }                                                                                                                    // 6363\n                                                                                                                       // 6364\n};                                                                                                                     // 6365\n                                                                                                                       // 6366\nmodule.exports = ReactComponentEnvironment;                                                                            // 6367\n                                                                                                                       // 6368\n}).call(this,require('_process'))                                                                                      // 6369\n                                                                                                                       // 6370\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactComponentWithPureRenderMixin\":[function(require,module,exports){\n/**                                                                                                                    // 6372\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 6373\n * All rights reserved.                                                                                                // 6374\n *                                                                                                                     // 6375\n * This source code is licensed under the BSD-style license found in the                                               // 6376\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6377\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 6378\n *                                                                                                                     // 6379\n* @providesModule ReactComponentWithPureRenderMixin                                                                    // 6380\n*/                                                                                                                     // 6381\n                                                                                                                       // 6382\n'use strict';                                                                                                          // 6383\n                                                                                                                       // 6384\nvar shallowEqual = require(\"./shallowEqual\");                                                                          // 6385\n                                                                                                                       // 6386\n/**                                                                                                                    // 6387\n * If your React component's render function is \"pure\", e.g. it will render the                                        // 6388\n * same result given the same props and state, provide this Mixin for a                                                // 6389\n * considerable performance boost.                                                                                     // 6390\n *                                                                                                                     // 6391\n * Most React components have pure render functions.                                                                   // 6392\n *                                                                                                                     // 6393\n * Example:                                                                                                            // 6394\n *                                                                                                                     // 6395\n *   var ReactComponentWithPureRenderMixin =                                                                           // 6396\n *     require('ReactComponentWithPureRenderMixin');                                                                   // 6397\n *   React.createClass({                                                                                               // 6398\n *     mixins: [ReactComponentWithPureRenderMixin],                                                                    // 6399\n *                                                                                                                     // 6400\n *     render: function() {                                                                                            // 6401\n *       return <div className={this.props.className}>foo</div>;                                                       // 6402\n *     }                                                                                                               // 6403\n *   });                                                                                                               // 6404\n *                                                                                                                     // 6405\n * Note: This only checks shallow equality for props and state. If these contain                                       // 6406\n * complex data structures this mixin may have false-negatives for deeper                                              // 6407\n * differences. Only mixin to components which have simple props and state, or                                         // 6408\n * use `forceUpdate()` when you know deep data structures have changed.                                                // 6409\n */                                                                                                                    // 6410\nvar ReactComponentWithPureRenderMixin = {                                                                              // 6411\n  shouldComponentUpdate: function(nextProps, nextState) {                                                              // 6412\n    return !shallowEqual(this.props, nextProps) ||                                                                     // 6413\n           !shallowEqual(this.state, nextState);                                                                       // 6414\n  }                                                                                                                    // 6415\n};                                                                                                                     // 6416\n                                                                                                                       // 6417\nmodule.exports = ReactComponentWithPureRenderMixin;                                                                    // 6418\n                                                                                                                       // 6419\n},{\"./shallowEqual\":\"react/lib/shallowEqual\"}],\"react/lib/ReactComponent\":[function(require,module,exports){           // 6420\n(function (process){                                                                                                   // 6421\n/**                                                                                                                    // 6422\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 6423\n * All rights reserved.                                                                                                // 6424\n *                                                                                                                     // 6425\n * This source code is licensed under the BSD-style license found in the                                               // 6426\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6427\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 6428\n *                                                                                                                     // 6429\n * @providesModule ReactComponent                                                                                      // 6430\n */                                                                                                                    // 6431\n                                                                                                                       // 6432\n'use strict';                                                                                                          // 6433\n                                                                                                                       // 6434\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");                                                                  // 6435\n                                                                                                                       // 6436\nvar invariant = require(\"./invariant\");                                                                                // 6437\nvar warning = require(\"./warning\");                                                                                    // 6438\n                                                                                                                       // 6439\n/**                                                                                                                    // 6440\n * Base class helpers for the updating state of a component.                                                           // 6441\n */                                                                                                                    // 6442\nfunction ReactComponent(props, context) {                                                                              // 6443\n  this.props = props;                                                                                                  // 6444\n  this.context = context;                                                                                              // 6445\n}                                                                                                                      // 6446\n                                                                                                                       // 6447\n/**                                                                                                                    // 6448\n * Sets a subset of the state. Always use this to mutate                                                               // 6449\n * state. You should treat `this.state` as immutable.                                                                  // 6450\n *                                                                                                                     // 6451\n * There is no guarantee that `this.state` will be immediately updated, so                                             // 6452\n * accessing `this.state` after calling this method may return the old value.                                          // 6453\n *                                                                                                                     // 6454\n * There is no guarantee that calls to `setState` will run synchronously,                                              // 6455\n * as they may eventually be batched together.  You can provide an optional                                            // 6456\n * callback that will be executed when the call to setState is actually                                                // 6457\n * completed.                                                                                                          // 6458\n *                                                                                                                     // 6459\n * When a function is provided to setState, it will be called at some point in                                         // 6460\n * the future (not synchronously). It will be called with the up to date                                               // 6461\n * component arguments (state, props, context). These values can be different                                          // 6462\n * from this.* because your function may be called after receiveProps but before                                       // 6463\n * shouldComponentUpdate, and this new state, props, and context will not yet be                                       // 6464\n * assigned to this.                                                                                                   // 6465\n *                                                                                                                     // 6466\n * @param {object|function} partialState Next partial state or function to                                             // 6467\n *        produce next partial state to be merged with current state.                                                  // 6468\n * @param {?function} callback Called after state is updated.                                                          // 6469\n * @final                                                                                                              // 6470\n * @protected                                                                                                          // 6471\n */                                                                                                                    // 6472\nReactComponent.prototype.setState = function(partialState, callback) {                                                 // 6473\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 6474\n    typeof partialState === 'object' ||                                                                                // 6475\n    typeof partialState === 'function' ||                                                                              // 6476\n    partialState == null,                                                                                              // 6477\n    'setState(...): takes an object of state variables to update or a ' +                                              // 6478\n    'function which returns an object of state variables.'                                                             // 6479\n  ) : invariant(typeof partialState === 'object' ||                                                                    // 6480\n  typeof partialState === 'function' ||                                                                                // 6481\n  partialState == null));                                                                                              // 6482\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 6483\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 6484\n      partialState != null,                                                                                            // 6485\n      'setState(...): You passed an undefined or null state object; ' +                                                // 6486\n      'instead, use forceUpdate().'                                                                                    // 6487\n    ) : null);                                                                                                         // 6488\n  }                                                                                                                    // 6489\n  ReactUpdateQueue.enqueueSetState(this, partialState);                                                                // 6490\n  if (callback) {                                                                                                      // 6491\n    ReactUpdateQueue.enqueueCallback(this, callback);                                                                  // 6492\n  }                                                                                                                    // 6493\n};                                                                                                                     // 6494\n                                                                                                                       // 6495\n/**                                                                                                                    // 6496\n * Forces an update. This should only be invoked when it is known with                                                 // 6497\n * certainty that we are **not** in a DOM transaction.                                                                 // 6498\n *                                                                                                                     // 6499\n * You may want to call this when you know that some deeper aspect of the                                              // 6500\n * component's state has changed but `setState` was not called.                                                        // 6501\n *                                                                                                                     // 6502\n * This will not invoke `shouldComponentUpdate`, but it will invoke                                                    // 6503\n * `componentWillUpdate` and `componentDidUpdate`.                                                                     // 6504\n *                                                                                                                     // 6505\n * @param {?function} callback Called after update is complete.                                                        // 6506\n * @final                                                                                                              // 6507\n * @protected                                                                                                          // 6508\n */                                                                                                                    // 6509\nReactComponent.prototype.forceUpdate = function(callback) {                                                            // 6510\n  ReactUpdateQueue.enqueueForceUpdate(this);                                                                           // 6511\n  if (callback) {                                                                                                      // 6512\n    ReactUpdateQueue.enqueueCallback(this, callback);                                                                  // 6513\n  }                                                                                                                    // 6514\n};                                                                                                                     // 6515\n                                                                                                                       // 6516\n/**                                                                                                                    // 6517\n * Deprecated APIs. These APIs used to exist on classic React classes but since                                        // 6518\n * we would like to deprecate them, we're not going to move them over to this                                          // 6519\n * modern base class. Instead, we define a getter that warns if it's accessed.                                         // 6520\n */                                                                                                                    // 6521\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 6522\n  var deprecatedAPIs = {                                                                                               // 6523\n    getDOMNode: [                                                                                                      // 6524\n      'getDOMNode',                                                                                                    // 6525\n      'Use React.findDOMNode(component) instead.'                                                                      // 6526\n    ],                                                                                                                 // 6527\n    isMounted: [                                                                                                       // 6528\n      'isMounted',                                                                                                     // 6529\n      'Instead, make sure to clean up subscriptions and pending requests in ' +                                        // 6530\n      'componentWillUnmount to prevent memory leaks.'                                                                  // 6531\n    ],                                                                                                                 // 6532\n    replaceProps: [                                                                                                    // 6533\n      'replaceProps',                                                                                                  // 6534\n      'Instead, call React.render again at the top level.'                                                             // 6535\n    ],                                                                                                                 // 6536\n    replaceState: [                                                                                                    // 6537\n      'replaceState',                                                                                                  // 6538\n      'Refactor your code to use setState instead (see ' +                                                             // 6539\n      'https://github.com/facebook/react/issues/3236).'                                                                // 6540\n    ],                                                                                                                 // 6541\n    setProps: [                                                                                                        // 6542\n      'setProps',                                                                                                      // 6543\n      'Instead, call React.render again at the top level.'                                                             // 6544\n    ]                                                                                                                  // 6545\n  };                                                                                                                   // 6546\n  var defineDeprecationWarning = function(methodName, info) {                                                          // 6547\n    try {                                                                                                              // 6548\n      Object.defineProperty(ReactComponent.prototype, methodName, {                                                    // 6549\n        get: function() {                                                                                              // 6550\n          (\"production\" !== process.env.NODE_ENV ? warning(                                                            // 6551\n            false,                                                                                                     // 6552\n            '%s(...) is deprecated in plain JavaScript React classes. %s',                                             // 6553\n            info[0],                                                                                                   // 6554\n            info[1]                                                                                                    // 6555\n          ) : null);                                                                                                   // 6556\n          return undefined;                                                                                            // 6557\n        }                                                                                                              // 6558\n      });                                                                                                              // 6559\n    } catch (x) {                                                                                                      // 6560\n      // IE will fail on defineProperty (es5-shim/sham too)                                                            // 6561\n    }                                                                                                                  // 6562\n  };                                                                                                                   // 6563\n  for (var fnName in deprecatedAPIs) {                                                                                 // 6564\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {                                                                       // 6565\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);                                                        // 6566\n    }                                                                                                                  // 6567\n  }                                                                                                                    // 6568\n}                                                                                                                      // 6569\n                                                                                                                       // 6570\nmodule.exports = ReactComponent;                                                                                       // 6571\n                                                                                                                       // 6572\n}).call(this,require('_process'))                                                                                      // 6573\n                                                                                                                       // 6574\n},{\"./ReactUpdateQueue\":\"react/lib/ReactUpdateQueue\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactCompositeComponent\":[function(require,module,exports){\n(function (process){                                                                                                   // 6576\n/**                                                                                                                    // 6577\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 6578\n * All rights reserved.                                                                                                // 6579\n *                                                                                                                     // 6580\n * This source code is licensed under the BSD-style license found in the                                               // 6581\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 6582\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 6583\n *                                                                                                                     // 6584\n * @providesModule ReactCompositeComponent                                                                             // 6585\n */                                                                                                                    // 6586\n                                                                                                                       // 6587\n'use strict';                                                                                                          // 6588\n                                                                                                                       // 6589\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");                                                // 6590\nvar ReactContext = require(\"./ReactContext\");                                                                          // 6591\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");                                                                // 6592\nvar ReactElement = require(\"./ReactElement\");                                                                          // 6593\nvar ReactElementValidator = require(\"./ReactElementValidator\");                                                        // 6594\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");                                                                  // 6595\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");                                                                      // 6596\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");                                                          // 6597\nvar ReactPerf = require(\"./ReactPerf\");                                                                                // 6598\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");                                                      // 6599\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");                                              // 6600\nvar ReactReconciler = require(\"./ReactReconciler\");                                                                    // 6601\nvar ReactUpdates = require(\"./ReactUpdates\");                                                                          // 6602\n                                                                                                                       // 6603\nvar assign = require(\"./Object.assign\");                                                                               // 6604\nvar emptyObject = require(\"./emptyObject\");                                                                            // 6605\nvar invariant = require(\"./invariant\");                                                                                // 6606\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");                                              // 6607\nvar warning = require(\"./warning\");                                                                                    // 6608\n                                                                                                                       // 6609\nfunction getDeclarationErrorAddendum(component) {                                                                      // 6610\n  var owner = component._currentElement._owner || null;                                                                // 6611\n  if (owner) {                                                                                                         // 6612\n    var name = owner.getName();                                                                                        // 6613\n    if (name) {                                                                                                        // 6614\n      return ' Check the render method of `' + name + '`.';                                                            // 6615\n    }                                                                                                                  // 6616\n  }                                                                                                                    // 6617\n  return '';                                                                                                           // 6618\n}                                                                                                                      // 6619\n                                                                                                                       // 6620\n/**                                                                                                                    // 6621\n * ------------------ The Life-Cycle of a Composite Component ------------------                                       // 6622\n *                                                                                                                     // 6623\n * - constructor: Initialization of state. The instance is now retained.                                               // 6624\n *   - componentWillMount                                                                                              // 6625\n *   - render                                                                                                          // 6626\n *   - [children's constructors]                                                                                       // 6627\n *     - [children's componentWillMount and render]                                                                    // 6628\n *     - [children's componentDidMount]                                                                                // 6629\n *     - componentDidMount                                                                                             // 6630\n *                                                                                                                     // 6631\n *       Update Phases:                                                                                                // 6632\n *       - componentWillReceiveProps (only called if parent updated)                                                   // 6633\n *       - shouldComponentUpdate                                                                                       // 6634\n *         - componentWillUpdate                                                                                       // 6635\n *           - render                                                                                                  // 6636\n *           - [children's constructors or receive props phases]                                                       // 6637\n *         - componentDidUpdate                                                                                        // 6638\n *                                                                                                                     // 6639\n *     - componentWillUnmount                                                                                          // 6640\n *     - [children's componentWillUnmount]                                                                             // 6641\n *   - [children destroyed]                                                                                            // 6642\n * - (destroyed): The instance is now blank, released by React and ready for GC.                                       // 6643\n *                                                                                                                     // 6644\n * -----------------------------------------------------------------------------                                       // 6645\n */                                                                                                                    // 6646\n                                                                                                                       // 6647\n/**                                                                                                                    // 6648\n * An incrementing ID assigned to each component when it is mounted. This is                                           // 6649\n * used to enforce the order in which `ReactUpdates` updates dirty components.                                         // 6650\n *                                                                                                                     // 6651\n * @private                                                                                                            // 6652\n */                                                                                                                    // 6653\nvar nextMountID = 1;                                                                                                   // 6654\n                                                                                                                       // 6655\n/**                                                                                                                    // 6656\n * @lends {ReactCompositeComponent.prototype}                                                                          // 6657\n */                                                                                                                    // 6658\nvar ReactCompositeComponentMixin = {                                                                                   // 6659\n                                                                                                                       // 6660\n  /**                                                                                                                  // 6661\n   * Base constructor for all composite component.                                                                     // 6662\n   *                                                                                                                   // 6663\n   * @param {ReactElement} element                                                                                     // 6664\n   * @final                                                                                                            // 6665\n   * @internal                                                                                                         // 6666\n   */                                                                                                                  // 6667\n  construct: function(element) {                                                                                       // 6668\n    this._currentElement = element;                                                                                    // 6669\n    this._rootNodeID = null;                                                                                           // 6670\n    this._instance = null;                                                                                             // 6671\n                                                                                                                       // 6672\n    // See ReactUpdateQueue                                                                                            // 6673\n    this._pendingElement = null;                                                                                       // 6674\n    this._pendingStateQueue = null;                                                                                    // 6675\n    this._pendingReplaceState = false;                                                                                 // 6676\n    this._pendingForceUpdate = false;                                                                                  // 6677\n                                                                                                                       // 6678\n    this._renderedComponent = null;                                                                                    // 6679\n                                                                                                                       // 6680\n    this._context = null;                                                                                              // 6681\n    this._mountOrder = 0;                                                                                              // 6682\n    this._isTopLevel = false;                                                                                          // 6683\n                                                                                                                       // 6684\n    // See ReactUpdates and ReactUpdateQueue.                                                                          // 6685\n    this._pendingCallbacks = null;                                                                                     // 6686\n  },                                                                                                                   // 6687\n                                                                                                                       // 6688\n  /**                                                                                                                  // 6689\n   * Initializes the component, renders markup, and registers event listeners.                                         // 6690\n   *                                                                                                                   // 6691\n   * @param {string} rootID DOM ID of the root node.                                                                   // 6692\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 6693\n   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 6694\n   * @final                                                                                                            // 6695\n   * @internal                                                                                                         // 6696\n   */                                                                                                                  // 6697\n  mountComponent: function(rootID, transaction, context) {                                                             // 6698\n    this._context = context;                                                                                           // 6699\n    this._mountOrder = nextMountID++;                                                                                  // 6700\n    this._rootNodeID = rootID;                                                                                         // 6701\n                                                                                                                       // 6702\n    var publicProps = this._processProps(this._currentElement.props);                                                  // 6703\n    var publicContext = this._processContext(this._currentElement._context);                                           // 6704\n                                                                                                                       // 6705\n    var Component = ReactNativeComponent.getComponentClassForElement(                                                  // 6706\n      this._currentElement                                                                                             // 6707\n    );                                                                                                                 // 6708\n                                                                                                                       // 6709\n    // Initialize the public class                                                                                     // 6710\n    var inst = new Component(publicProps, publicContext);                                                              // 6711\n                                                                                                                       // 6712\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 6713\n      // This will throw later in _renderValidatedComponent, but add an early                                          // 6714\n      // warning now to help debugging                                                                                 // 6715\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 6716\n        inst.render != null,                                                                                           // 6717\n        '%s(...): No `render` method found on the returned component ' +                                               // 6718\n        'instance: you may have forgotten to define `render` in your ' +                                               // 6719\n        'component or you may have accidentally tried to render an element ' +                                         // 6720\n        'whose type is a function that isn\\'t a React component.',                                                     // 6721\n        Component.displayName || Component.name || 'Component'                                                         // 6722\n      ) : null);                                                                                                       // 6723\n    }                                                                                                                  // 6724\n                                                                                                                       // 6725\n    // These should be set up in the constructor, but as a convenience for                                             // 6726\n    // simpler class abstractions, we set them up after the fact.                                                      // 6727\n    inst.props = publicProps;                                                                                          // 6728\n    inst.context = publicContext;                                                                                      // 6729\n    inst.refs = emptyObject;                                                                                           // 6730\n                                                                                                                       // 6731\n    this._instance = inst;                                                                                             // 6732\n                                                                                                                       // 6733\n    // Store a reference from the instance back to the internal representation                                         // 6734\n    ReactInstanceMap.set(inst, this);                                                                                  // 6735\n                                                                                                                       // 6736\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 6737\n      this._warnIfContextsDiffer(this._currentElement._context, context);                                              // 6738\n    }                                                                                                                  // 6739\n                                                                                                                       // 6740\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 6741\n      // Since plain JS classes are defined without any special initialization                                         // 6742\n      // logic, we can not catch common errors early. Therefore, we have to                                            // 6743\n      // catch them here, at initialization time, instead.                                                             // 6744\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 6745\n        !inst.getInitialState ||                                                                                       // 6746\n        inst.getInitialState.isReactClassApproved,                                                                     // 6747\n        'getInitialState was defined on %s, a plain JavaScript class. ' +                                              // 6748\n        'This is only supported for classes created using React.createClass. ' +                                       // 6749\n        'Did you mean to define a state property instead?',                                                            // 6750\n        this.getName() || 'a component'                                                                                // 6751\n      ) : null);                                                                                                       // 6752\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 6753\n        !inst.getDefaultProps ||                                                                                       // 6754\n        inst.getDefaultProps.isReactClassApproved,                                                                     // 6755\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +                                              // 6756\n        'This is only supported for classes created using React.createClass. ' +                                       // 6757\n        'Use a static property to define defaultProps instead.',                                                       // 6758\n        this.getName() || 'a component'                                                                                // 6759\n      ) : null);                                                                                                       // 6760\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 6761\n        !inst.propTypes,                                                                                               // 6762\n        'propTypes was defined as an instance property on %s. Use a static ' +                                         // 6763\n        'property to define propTypes instead.',                                                                       // 6764\n        this.getName() || 'a component'                                                                                // 6765\n      ) : null);                                                                                                       // 6766\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 6767\n        !inst.contextTypes,                                                                                            // 6768\n        'contextTypes was defined as an instance property on %s. Use a ' +                                             // 6769\n        'static property to define contextTypes instead.',                                                             // 6770\n        this.getName() || 'a component'                                                                                // 6771\n      ) : null);                                                                                                       // 6772\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 6773\n        typeof inst.componentShouldUpdate !== 'function',                                                              // 6774\n        '%s has a method called ' +                                                                                    // 6775\n        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +                                            // 6776\n        'The name is phrased as a question because the function is ' +                                                 // 6777\n        'expected to return a value.',                                                                                 // 6778\n        (this.getName() || 'A component')                                                                              // 6779\n      ) : null);                                                                                                       // 6780\n    }                                                                                                                  // 6781\n                                                                                                                       // 6782\n    var initialState = inst.state;                                                                                     // 6783\n    if (initialState === undefined) {                                                                                  // 6784\n      inst.state = initialState = null;                                                                                // 6785\n    }                                                                                                                  // 6786\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 6787\n      typeof initialState === 'object' && !Array.isArray(initialState),                                                // 6788\n      '%s.state: must be set to an object or null',                                                                    // 6789\n      this.getName() || 'ReactCompositeComponent'                                                                      // 6790\n    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));                                  // 6791\n                                                                                                                       // 6792\n    this._pendingStateQueue = null;                                                                                    // 6793\n    this._pendingReplaceState = false;                                                                                 // 6794\n    this._pendingForceUpdate = false;                                                                                  // 6795\n                                                                                                                       // 6796\n    var childContext;                                                                                                  // 6797\n    var renderedElement;                                                                                               // 6798\n                                                                                                                       // 6799\n    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;                                                 // 6800\n    ReactLifeCycle.currentlyMountingInstance = this;                                                                   // 6801\n    try {                                                                                                              // 6802\n      if (inst.componentWillMount) {                                                                                   // 6803\n        inst.componentWillMount();                                                                                     // 6804\n        // When mounting, calls to `setState` by `componentWillMount` will set                                         // 6805\n        // `this._pendingStateQueue` without triggering a re-render.                                                   // 6806\n        if (this._pendingStateQueue) {                                                                                 // 6807\n          inst.state = this._processPendingState(inst.props, inst.context);                                            // 6808\n        }                                                                                                              // 6809\n      }                                                                                                                // 6810\n                                                                                                                       // 6811\n      childContext = this._getValidatedChildContext(context);                                                          // 6812\n      renderedElement = this._renderValidatedComponent(childContext);                                                  // 6813\n    } finally {                                                                                                        // 6814\n      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;                                                   // 6815\n    }                                                                                                                  // 6816\n                                                                                                                       // 6817\n    this._renderedComponent = this._instantiateReactComponent(                                                         // 6818\n      renderedElement,                                                                                                 // 6819\n      this._currentElement.type // The wrapping type                                                                   // 6820\n    );                                                                                                                 // 6821\n                                                                                                                       // 6822\n    var markup = ReactReconciler.mountComponent(                                                                       // 6823\n      this._renderedComponent,                                                                                         // 6824\n      rootID,                                                                                                          // 6825\n      transaction,                                                                                                     // 6826\n      this._mergeChildContext(context, childContext)                                                                   // 6827\n    );                                                                                                                 // 6828\n    if (inst.componentDidMount) {                                                                                      // 6829\n      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);                                          // 6830\n    }                                                                                                                  // 6831\n                                                                                                                       // 6832\n    return markup;                                                                                                     // 6833\n  },                                                                                                                   // 6834\n                                                                                                                       // 6835\n  /**                                                                                                                  // 6836\n   * Releases any resources allocated by `mountComponent`.                                                             // 6837\n   *                                                                                                                   // 6838\n   * @final                                                                                                            // 6839\n   * @internal                                                                                                         // 6840\n   */                                                                                                                  // 6841\n  unmountComponent: function() {                                                                                       // 6842\n    var inst = this._instance;                                                                                         // 6843\n                                                                                                                       // 6844\n    if (inst.componentWillUnmount) {                                                                                   // 6845\n      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;                                           // 6846\n      ReactLifeCycle.currentlyUnmountingInstance = this;                                                               // 6847\n      try {                                                                                                            // 6848\n        inst.componentWillUnmount();                                                                                   // 6849\n      } finally {                                                                                                      // 6850\n        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;                                             // 6851\n      }                                                                                                                // 6852\n    }                                                                                                                  // 6853\n                                                                                                                       // 6854\n    ReactReconciler.unmountComponent(this._renderedComponent);                                                         // 6855\n    this._renderedComponent = null;                                                                                    // 6856\n                                                                                                                       // 6857\n    // Reset pending fields                                                                                            // 6858\n    this._pendingStateQueue = null;                                                                                    // 6859\n    this._pendingReplaceState = false;                                                                                 // 6860\n    this._pendingForceUpdate = false;                                                                                  // 6861\n    this._pendingCallbacks = null;                                                                                     // 6862\n    this._pendingElement = null;                                                                                       // 6863\n                                                                                                                       // 6864\n    // These fields do not really need to be reset since this object is no                                             // 6865\n    // longer accessible.                                                                                              // 6866\n    this._context = null;                                                                                              // 6867\n    this._rootNodeID = null;                                                                                           // 6868\n                                                                                                                       // 6869\n    // Delete the reference from the instance to this internal representation                                          // 6870\n    // which allow the internals to be properly cleaned up even if the user                                            // 6871\n    // leaks a reference to the public instance.                                                                       // 6872\n    ReactInstanceMap.remove(inst);                                                                                     // 6873\n                                                                                                                       // 6874\n    // Some existing components rely on inst.props even after they've been                                             // 6875\n    // destroyed (in event handlers).                                                                                  // 6876\n    // TODO: inst.props = null;                                                                                        // 6877\n    // TODO: inst.state = null;                                                                                        // 6878\n    // TODO: inst.context = null;                                                                                      // 6879\n  },                                                                                                                   // 6880\n                                                                                                                       // 6881\n  /**                                                                                                                  // 6882\n   * Schedule a partial update to the props. Only used for internal testing.                                           // 6883\n   *                                                                                                                   // 6884\n   * @param {object} partialProps Subset of the next props.                                                            // 6885\n   * @param {?function} callback Called after props are updated.                                                       // 6886\n   * @final                                                                                                            // 6887\n   * @internal                                                                                                         // 6888\n   */                                                                                                                  // 6889\n  _setPropsInternal: function(partialProps, callback) {                                                                // 6890\n    // This is a deoptimized path. We optimize for always having an element.                                           // 6891\n    // This creates an extra internal element.                                                                         // 6892\n    var element = this._pendingElement || this._currentElement;                                                        // 6893\n    this._pendingElement = ReactElement.cloneAndReplaceProps(                                                          // 6894\n      element,                                                                                                         // 6895\n      assign({}, element.props, partialProps)                                                                          // 6896\n    );                                                                                                                 // 6897\n    ReactUpdates.enqueueUpdate(this, callback);                                                                        // 6898\n  },                                                                                                                   // 6899\n                                                                                                                       // 6900\n  /**                                                                                                                  // 6901\n   * Filters the context object to only contain keys specified in                                                      // 6902\n   * `contextTypes`                                                                                                    // 6903\n   *                                                                                                                   // 6904\n   * @param {object} context                                                                                           // 6905\n   * @return {?object}                                                                                                 // 6906\n   * @private                                                                                                          // 6907\n   */                                                                                                                  // 6908\n  _maskContext: function(context) {                                                                                    // 6909\n    var maskedContext = null;                                                                                          // 6910\n    // This really should be getting the component class for the element,                                              // 6911\n    // but we know that we're not going to need it for built-ins.                                                      // 6912\n    if (typeof this._currentElement.type === 'string') {                                                               // 6913\n      return emptyObject;                                                                                              // 6914\n    }                                                                                                                  // 6915\n    var contextTypes = this._currentElement.type.contextTypes;                                                         // 6916\n    if (!contextTypes) {                                                                                               // 6917\n      return emptyObject;                                                                                              // 6918\n    }                                                                                                                  // 6919\n    maskedContext = {};                                                                                                // 6920\n    for (var contextName in contextTypes) {                                                                            // 6921\n      maskedContext[contextName] = context[contextName];                                                               // 6922\n    }                                                                                                                  // 6923\n    return maskedContext;                                                                                              // 6924\n  },                                                                                                                   // 6925\n                                                                                                                       // 6926\n  /**                                                                                                                  // 6927\n   * Filters the context object to only contain keys specified in                                                      // 6928\n   * `contextTypes`, and asserts that they are valid.                                                                  // 6929\n   *                                                                                                                   // 6930\n   * @param {object} context                                                                                           // 6931\n   * @return {?object}                                                                                                 // 6932\n   * @private                                                                                                          // 6933\n   */                                                                                                                  // 6934\n  _processContext: function(context) {                                                                                 // 6935\n    var maskedContext = this._maskContext(context);                                                                    // 6936\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 6937\n      var Component = ReactNativeComponent.getComponentClassForElement(                                                // 6938\n        this._currentElement                                                                                           // 6939\n      );                                                                                                               // 6940\n      if (Component.contextTypes) {                                                                                    // 6941\n        this._checkPropTypes(                                                                                          // 6942\n          Component.contextTypes,                                                                                      // 6943\n          maskedContext,                                                                                               // 6944\n          ReactPropTypeLocations.context                                                                               // 6945\n        );                                                                                                             // 6946\n      }                                                                                                                // 6947\n    }                                                                                                                  // 6948\n    return maskedContext;                                                                                              // 6949\n  },                                                                                                                   // 6950\n                                                                                                                       // 6951\n  /**                                                                                                                  // 6952\n   * @param {object} currentContext                                                                                    // 6953\n   * @return {object}                                                                                                  // 6954\n   * @private                                                                                                          // 6955\n   */                                                                                                                  // 6956\n  _getValidatedChildContext: function(currentContext) {                                                                // 6957\n    var inst = this._instance;                                                                                         // 6958\n    var childContext = inst.getChildContext && inst.getChildContext();                                                 // 6959\n    if (childContext) {                                                                                                // 6960\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 6961\n        typeof inst.constructor.childContextTypes === 'object',                                                        // 6962\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +                                       // 6963\n        'use getChildContext().',                                                                                      // 6964\n        this.getName() || 'ReactCompositeComponent'                                                                    // 6965\n      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));                                          // 6966\n      if (\"production\" !== process.env.NODE_ENV) {                                                                     // 6967\n        this._checkPropTypes(                                                                                          // 6968\n          inst.constructor.childContextTypes,                                                                          // 6969\n          childContext,                                                                                                // 6970\n          ReactPropTypeLocations.childContext                                                                          // 6971\n        );                                                                                                             // 6972\n      }                                                                                                                // 6973\n      for (var name in childContext) {                                                                                 // 6974\n        (\"production\" !== process.env.NODE_ENV ? invariant(                                                            // 6975\n          name in inst.constructor.childContextTypes,                                                                  // 6976\n          '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',                                       // 6977\n          this.getName() || 'ReactCompositeComponent',                                                                 // 6978\n          name                                                                                                         // 6979\n        ) : invariant(name in inst.constructor.childContextTypes));                                                    // 6980\n      }                                                                                                                // 6981\n      return childContext;                                                                                             // 6982\n    }                                                                                                                  // 6983\n    return null;                                                                                                       // 6984\n  },                                                                                                                   // 6985\n                                                                                                                       // 6986\n  _mergeChildContext: function(currentContext, childContext) {                                                         // 6987\n    if (childContext) {                                                                                                // 6988\n      return assign({}, currentContext, childContext);                                                                 // 6989\n    }                                                                                                                  // 6990\n    return currentContext;                                                                                             // 6991\n  },                                                                                                                   // 6992\n                                                                                                                       // 6993\n  /**                                                                                                                  // 6994\n   * Processes props by setting default values for unspecified props and                                               // 6995\n   * asserting that the props are valid. Does not mutate its argument; returns                                         // 6996\n   * a new props object with defaults merged in.                                                                       // 6997\n   *                                                                                                                   // 6998\n   * @param {object} newProps                                                                                          // 6999\n   * @return {object}                                                                                                  // 7000\n   * @private                                                                                                          // 7001\n   */                                                                                                                  // 7002\n  _processProps: function(newProps) {                                                                                  // 7003\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 7004\n      var Component = ReactNativeComponent.getComponentClassForElement(                                                // 7005\n        this._currentElement                                                                                           // 7006\n      );                                                                                                               // 7007\n      if (Component.propTypes) {                                                                                       // 7008\n        this._checkPropTypes(                                                                                          // 7009\n          Component.propTypes,                                                                                         // 7010\n          newProps,                                                                                                    // 7011\n          ReactPropTypeLocations.prop                                                                                  // 7012\n        );                                                                                                             // 7013\n      }                                                                                                                // 7014\n    }                                                                                                                  // 7015\n    return newProps;                                                                                                   // 7016\n  },                                                                                                                   // 7017\n                                                                                                                       // 7018\n  /**                                                                                                                  // 7019\n   * Assert that the props are valid                                                                                   // 7020\n   *                                                                                                                   // 7021\n   * @param {object} propTypes Map of prop name to a ReactPropType                                                     // 7022\n   * @param {object} props                                                                                             // 7023\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"                                                  // 7024\n   * @private                                                                                                          // 7025\n   */                                                                                                                  // 7026\n  _checkPropTypes: function(propTypes, props, location) {                                                              // 7027\n    // TODO: Stop validating prop types here and only use the element                                                  // 7028\n    // validation.                                                                                                     // 7029\n    var componentName = this.getName();                                                                                // 7030\n    for (var propName in propTypes) {                                                                                  // 7031\n      if (propTypes.hasOwnProperty(propName)) {                                                                        // 7032\n        var error;                                                                                                     // 7033\n        try {                                                                                                          // 7034\n          // This is intentionally an invariant that gets caught. It's the same                                        // 7035\n          // behavior as without this statement except with a better message.                                          // 7036\n          (\"production\" !== process.env.NODE_ENV ? invariant(                                                          // 7037\n            typeof propTypes[propName] === 'function',                                                                 // 7038\n            '%s: %s type `%s` is invalid; it must be a function, usually ' +                                           // 7039\n            'from React.PropTypes.',                                                                                   // 7040\n            componentName || 'React class',                                                                            // 7041\n            ReactPropTypeLocationNames[location],                                                                      // 7042\n            propName                                                                                                   // 7043\n          ) : invariant(typeof propTypes[propName] === 'function'));                                                   // 7044\n          error = propTypes[propName](props, propName, componentName, location);                                       // 7045\n        } catch (ex) {                                                                                                 // 7046\n          error = ex;                                                                                                  // 7047\n        }                                                                                                              // 7048\n        if (error instanceof Error) {                                                                                  // 7049\n          // We may want to extend this logic for similar errors in                                                    // 7050\n          // React.render calls, so I'm abstracting it away into                                                       // 7051\n          // a function to minimize refactoring in the future                                                          // 7052\n          var addendum = getDeclarationErrorAddendum(this);                                                            // 7053\n                                                                                                                       // 7054\n          if (location === ReactPropTypeLocations.prop) {                                                              // 7055\n            // Preface gives us something to blacklist in warning module                                               // 7056\n            (\"production\" !== process.env.NODE_ENV ? warning(                                                          // 7057\n              false,                                                                                                   // 7058\n              'Failed Composite propType: %s%s',                                                                       // 7059\n              error.message,                                                                                           // 7060\n              addendum                                                                                                 // 7061\n            ) : null);                                                                                                 // 7062\n          } else {                                                                                                     // 7063\n            (\"production\" !== process.env.NODE_ENV ? warning(                                                          // 7064\n              false,                                                                                                   // 7065\n              'Failed Context Types: %s%s',                                                                            // 7066\n              error.message,                                                                                           // 7067\n              addendum                                                                                                 // 7068\n            ) : null);                                                                                                 // 7069\n          }                                                                                                            // 7070\n        }                                                                                                              // 7071\n      }                                                                                                                // 7072\n    }                                                                                                                  // 7073\n  },                                                                                                                   // 7074\n                                                                                                                       // 7075\n  receiveComponent: function(nextElement, transaction, nextContext) {                                                  // 7076\n    var prevElement = this._currentElement;                                                                            // 7077\n    var prevContext = this._context;                                                                                   // 7078\n                                                                                                                       // 7079\n    this._pendingElement = null;                                                                                       // 7080\n                                                                                                                       // 7081\n    this.updateComponent(                                                                                              // 7082\n      transaction,                                                                                                     // 7083\n      prevElement,                                                                                                     // 7084\n      nextElement,                                                                                                     // 7085\n      prevContext,                                                                                                     // 7086\n      nextContext                                                                                                      // 7087\n    );                                                                                                                 // 7088\n  },                                                                                                                   // 7089\n                                                                                                                       // 7090\n  /**                                                                                                                  // 7091\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`                                       // 7092\n   * is set, update the component.                                                                                     // 7093\n   *                                                                                                                   // 7094\n   * @param {ReactReconcileTransaction} transaction                                                                    // 7095\n   * @internal                                                                                                         // 7096\n   */                                                                                                                  // 7097\n  performUpdateIfNecessary: function(transaction) {                                                                    // 7098\n    if (this._pendingElement != null) {                                                                                // 7099\n      ReactReconciler.receiveComponent(                                                                                // 7100\n        this,                                                                                                          // 7101\n        this._pendingElement || this._currentElement,                                                                  // 7102\n        transaction,                                                                                                   // 7103\n        this._context                                                                                                  // 7104\n      );                                                                                                               // 7105\n    }                                                                                                                  // 7106\n                                                                                                                       // 7107\n    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {                                                // 7108\n      if (\"production\" !== process.env.NODE_ENV) {                                                                     // 7109\n        ReactElementValidator.checkAndWarnForMutatedProps(                                                             // 7110\n          this._currentElement                                                                                         // 7111\n        );                                                                                                             // 7112\n      }                                                                                                                // 7113\n                                                                                                                       // 7114\n      this.updateComponent(                                                                                            // 7115\n        transaction,                                                                                                   // 7116\n        this._currentElement,                                                                                          // 7117\n        this._currentElement,                                                                                          // 7118\n        this._context,                                                                                                 // 7119\n        this._context                                                                                                  // 7120\n      );                                                                                                               // 7121\n    }                                                                                                                  // 7122\n  },                                                                                                                   // 7123\n                                                                                                                       // 7124\n  /**                                                                                                                  // 7125\n   * Compare two contexts, warning if they are different                                                               // 7126\n   * TODO: Remove this check when owner-context is removed                                                             // 7127\n   */                                                                                                                  // 7128\n   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {                                            // 7129\n    ownerBasedContext = this._maskContext(ownerBasedContext);                                                          // 7130\n    parentBasedContext = this._maskContext(parentBasedContext);                                                        // 7131\n    var parentKeys = Object.keys(parentBasedContext).sort();                                                           // 7132\n    var displayName = this.getName() || 'ReactCompositeComponent';                                                     // 7133\n    for (var i = 0; i < parentKeys.length; i++) {                                                                      // 7134\n      var key = parentKeys[i];                                                                                         // 7135\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 7136\n        ownerBasedContext[key] === parentBasedContext[key],                                                            // 7137\n        'owner-based and parent-based contexts differ '  +                                                             // 7138\n        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +                                                     // 7139\n        '(see: http://fb.me/react-context-by-parent)',                                                                 // 7140\n        ownerBasedContext[key],                                                                                        // 7141\n        parentBasedContext[key],                                                                                       // 7142\n        key,                                                                                                           // 7143\n        displayName                                                                                                    // 7144\n      ) : null);                                                                                                       // 7145\n    }                                                                                                                  // 7146\n  },                                                                                                                   // 7147\n                                                                                                                       // 7148\n  /**                                                                                                                  // 7149\n   * Perform an update to a mounted component. The componentWillReceiveProps and                                       // 7150\n   * shouldComponentUpdate methods are called, then (assuming the update isn't                                         // 7151\n   * skipped) the remaining update lifecycle methods are called and the DOM                                            // 7152\n   * representation is updated.                                                                                        // 7153\n   *                                                                                                                   // 7154\n   * By default, this implements React's rendering and reconciliation algorithm.                                       // 7155\n   * Sophisticated clients may wish to override this.                                                                  // 7156\n   *                                                                                                                   // 7157\n   * @param {ReactReconcileTransaction} transaction                                                                    // 7158\n   * @param {ReactElement} prevParentElement                                                                           // 7159\n   * @param {ReactElement} nextParentElement                                                                           // 7160\n   * @internal                                                                                                         // 7161\n   * @overridable                                                                                                      // 7162\n   */                                                                                                                  // 7163\n  updateComponent: function(                                                                                           // 7164\n    transaction,                                                                                                       // 7165\n    prevParentElement,                                                                                                 // 7166\n    nextParentElement,                                                                                                 // 7167\n    prevUnmaskedContext,                                                                                               // 7168\n    nextUnmaskedContext                                                                                                // 7169\n  ) {                                                                                                                  // 7170\n    var inst = this._instance;                                                                                         // 7171\n                                                                                                                       // 7172\n    var nextContext = inst.context;                                                                                    // 7173\n    var nextProps = inst.props;                                                                                        // 7174\n                                                                                                                       // 7175\n    // Distinguish between a props update versus a simple state update                                                 // 7176\n    if (prevParentElement !== nextParentElement) {                                                                     // 7177\n      nextContext = this._processContext(nextParentElement._context);                                                  // 7178\n      nextProps = this._processProps(nextParentElement.props);                                                         // 7179\n                                                                                                                       // 7180\n      if (\"production\" !== process.env.NODE_ENV) {                                                                     // 7181\n        if (nextUnmaskedContext != null) {                                                                             // 7182\n          this._warnIfContextsDiffer(                                                                                  // 7183\n            nextParentElement._context,                                                                                // 7184\n            nextUnmaskedContext                                                                                        // 7185\n          );                                                                                                           // 7186\n        }                                                                                                              // 7187\n      }                                                                                                                // 7188\n                                                                                                                       // 7189\n      // An update here will schedule an update but immediately set                                                    // 7190\n      // _pendingStateQueue which will ensure that any state updates gets                                              // 7191\n      // immediately reconciled instead of waiting for the next batch.                                                 // 7192\n                                                                                                                       // 7193\n      if (inst.componentWillReceiveProps) {                                                                            // 7194\n        inst.componentWillReceiveProps(nextProps, nextContext);                                                        // 7195\n      }                                                                                                                // 7196\n    }                                                                                                                  // 7197\n                                                                                                                       // 7198\n    var nextState = this._processPendingState(nextProps, nextContext);                                                 // 7199\n                                                                                                                       // 7200\n    var shouldUpdate =                                                                                                 // 7201\n      this._pendingForceUpdate ||                                                                                      // 7202\n      !inst.shouldComponentUpdate ||                                                                                   // 7203\n      inst.shouldComponentUpdate(nextProps, nextState, nextContext);                                                   // 7204\n                                                                                                                       // 7205\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 7206\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 7207\n        typeof shouldUpdate !== 'undefined',                                                                           // 7208\n        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +                                               // 7209\n        'boolean value. Make sure to return true or false.',                                                           // 7210\n        this.getName() || 'ReactCompositeComponent'                                                                    // 7211\n      ) : null);                                                                                                       // 7212\n    }                                                                                                                  // 7213\n                                                                                                                       // 7214\n    if (shouldUpdate) {                                                                                                // 7215\n      this._pendingForceUpdate = false;                                                                                // 7216\n      // Will set `this.props`, `this.state` and `this.context`.                                                       // 7217\n      this._performComponentUpdate(                                                                                    // 7218\n        nextParentElement,                                                                                             // 7219\n        nextProps,                                                                                                     // 7220\n        nextState,                                                                                                     // 7221\n        nextContext,                                                                                                   // 7222\n        transaction,                                                                                                   // 7223\n        nextUnmaskedContext                                                                                            // 7224\n      );                                                                                                               // 7225\n    } else {                                                                                                           // 7226\n      // If it's determined that a component should not update, we still want                                          // 7227\n      // to set props and state but we shortcut the rest of the update.                                                // 7228\n      this._currentElement = nextParentElement;                                                                        // 7229\n      this._context = nextUnmaskedContext;                                                                             // 7230\n      inst.props = nextProps;                                                                                          // 7231\n      inst.state = nextState;                                                                                          // 7232\n      inst.context = nextContext;                                                                                      // 7233\n    }                                                                                                                  // 7234\n  },                                                                                                                   // 7235\n                                                                                                                       // 7236\n  _processPendingState: function(props, context) {                                                                     // 7237\n    var inst = this._instance;                                                                                         // 7238\n    var queue = this._pendingStateQueue;                                                                               // 7239\n    var replace = this._pendingReplaceState;                                                                           // 7240\n    this._pendingReplaceState = false;                                                                                 // 7241\n    this._pendingStateQueue = null;                                                                                    // 7242\n                                                                                                                       // 7243\n    if (!queue) {                                                                                                      // 7244\n      return inst.state;                                                                                               // 7245\n    }                                                                                                                  // 7246\n                                                                                                                       // 7247\n    if (replace && queue.length === 1) {                                                                               // 7248\n      return queue[0];                                                                                                 // 7249\n    }                                                                                                                  // 7250\n                                                                                                                       // 7251\n    var nextState = assign({}, replace ? queue[0] : inst.state);                                                       // 7252\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {                                                             // 7253\n      var partial = queue[i];                                                                                          // 7254\n      assign(                                                                                                          // 7255\n        nextState,                                                                                                     // 7256\n        typeof partial === 'function' ?                                                                                // 7257\n          partial.call(inst, nextState, props, context) :                                                              // 7258\n          partial                                                                                                      // 7259\n      );                                                                                                               // 7260\n    }                                                                                                                  // 7261\n                                                                                                                       // 7262\n    return nextState;                                                                                                  // 7263\n  },                                                                                                                   // 7264\n                                                                                                                       // 7265\n  /**                                                                                                                  // 7266\n   * Merges new props and state, notifies delegate methods of update and                                               // 7267\n   * performs update.                                                                                                  // 7268\n   *                                                                                                                   // 7269\n   * @param {ReactElement} nextElement Next element                                                                    // 7270\n   * @param {object} nextProps Next public object to set as properties.                                                // 7271\n   * @param {?object} nextState Next object to set as state.                                                           // 7272\n   * @param {?object} nextContext Next public object to set as context.                                                // 7273\n   * @param {ReactReconcileTransaction} transaction                                                                    // 7274\n   * @param {?object} unmaskedContext                                                                                  // 7275\n   * @private                                                                                                          // 7276\n   */                                                                                                                  // 7277\n  _performComponentUpdate: function(                                                                                   // 7278\n    nextElement,                                                                                                       // 7279\n    nextProps,                                                                                                         // 7280\n    nextState,                                                                                                         // 7281\n    nextContext,                                                                                                       // 7282\n    transaction,                                                                                                       // 7283\n    unmaskedContext                                                                                                    // 7284\n  ) {                                                                                                                  // 7285\n    var inst = this._instance;                                                                                         // 7286\n                                                                                                                       // 7287\n    var prevProps = inst.props;                                                                                        // 7288\n    var prevState = inst.state;                                                                                        // 7289\n    var prevContext = inst.context;                                                                                    // 7290\n                                                                                                                       // 7291\n    if (inst.componentWillUpdate) {                                                                                    // 7292\n      inst.componentWillUpdate(nextProps, nextState, nextContext);                                                     // 7293\n    }                                                                                                                  // 7294\n                                                                                                                       // 7295\n    this._currentElement = nextElement;                                                                                // 7296\n    this._context = unmaskedContext;                                                                                   // 7297\n    inst.props = nextProps;                                                                                            // 7298\n    inst.state = nextState;                                                                                            // 7299\n    inst.context = nextContext;                                                                                        // 7300\n                                                                                                                       // 7301\n    this._updateRenderedComponent(transaction, unmaskedContext);                                                       // 7302\n                                                                                                                       // 7303\n    if (inst.componentDidUpdate) {                                                                                     // 7304\n      transaction.getReactMountReady().enqueue(                                                                        // 7305\n        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),                                         // 7306\n        inst                                                                                                           // 7307\n      );                                                                                                               // 7308\n    }                                                                                                                  // 7309\n  },                                                                                                                   // 7310\n                                                                                                                       // 7311\n  /**                                                                                                                  // 7312\n   * Call the component's `render` method and update the DOM accordingly.                                              // 7313\n   *                                                                                                                   // 7314\n   * @param {ReactReconcileTransaction} transaction                                                                    // 7315\n   * @internal                                                                                                         // 7316\n   */                                                                                                                  // 7317\n  _updateRenderedComponent: function(transaction, context) {                                                           // 7318\n    var prevComponentInstance = this._renderedComponent;                                                               // 7319\n    var prevRenderedElement = prevComponentInstance._currentElement;                                                   // 7320\n    var childContext = this._getValidatedChildContext();                                                               // 7321\n    var nextRenderedElement = this._renderValidatedComponent(childContext);                                            // 7322\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {                                        // 7323\n      ReactReconciler.receiveComponent(                                                                                // 7324\n        prevComponentInstance,                                                                                         // 7325\n        nextRenderedElement,                                                                                           // 7326\n        transaction,                                                                                                   // 7327\n        this._mergeChildContext(context, childContext)                                                                 // 7328\n      );                                                                                                               // 7329\n    } else {                                                                                                           // 7330\n      // These two IDs are actually the same! But nothing should rely on that.                                         // 7331\n      var thisID = this._rootNodeID;                                                                                   // 7332\n      var prevComponentID = prevComponentInstance._rootNodeID;                                                         // 7333\n      ReactReconciler.unmountComponent(prevComponentInstance);                                                         // 7334\n                                                                                                                       // 7335\n      this._renderedComponent = this._instantiateReactComponent(                                                       // 7336\n        nextRenderedElement,                                                                                           // 7337\n        this._currentElement.type                                                                                      // 7338\n      );                                                                                                               // 7339\n      var nextMarkup = ReactReconciler.mountComponent(                                                                 // 7340\n        this._renderedComponent,                                                                                       // 7341\n        thisID,                                                                                                        // 7342\n        transaction,                                                                                                   // 7343\n        this._mergeChildContext(context, childContext)                                                                 // 7344\n      );                                                                                                               // 7345\n      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);                                                    // 7346\n    }                                                                                                                  // 7347\n  },                                                                                                                   // 7348\n                                                                                                                       // 7349\n  /**                                                                                                                  // 7350\n   * @protected                                                                                                        // 7351\n   */                                                                                                                  // 7352\n  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {                                                  // 7353\n    ReactComponentEnvironment.replaceNodeWithMarkupByID(                                                               // 7354\n      prevComponentID,                                                                                                 // 7355\n      nextMarkup                                                                                                       // 7356\n    );                                                                                                                 // 7357\n  },                                                                                                                   // 7358\n                                                                                                                       // 7359\n  /**                                                                                                                  // 7360\n   * @protected                                                                                                        // 7361\n   */                                                                                                                  // 7362\n  _renderValidatedComponentWithoutOwnerOrContext: function() {                                                         // 7363\n    var inst = this._instance;                                                                                         // 7364\n    var renderedComponent = inst.render();                                                                             // 7365\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 7366\n      // We allow auto-mocks to proceed as if they're returning null.                                                  // 7367\n      if (typeof renderedComponent === 'undefined' &&                                                                  // 7368\n          inst.render._isMockFunction) {                                                                               // 7369\n        // This is probably bad practice. Consider warning here and                                                    // 7370\n        // deprecating this convenience.                                                                               // 7371\n        renderedComponent = null;                                                                                      // 7372\n      }                                                                                                                // 7373\n    }                                                                                                                  // 7374\n                                                                                                                       // 7375\n    return renderedComponent;                                                                                          // 7376\n  },                                                                                                                   // 7377\n                                                                                                                       // 7378\n  /**                                                                                                                  // 7379\n   * @private                                                                                                          // 7380\n   */                                                                                                                  // 7381\n  _renderValidatedComponent: function(childContext) {                                                                  // 7382\n    var renderedComponent;                                                                                             // 7383\n    var previousContext = ReactContext.current;                                                                        // 7384\n    ReactContext.current = this._mergeChildContext(                                                                    // 7385\n      this._currentElement._context,                                                                                   // 7386\n      childContext                                                                                                     // 7387\n    );                                                                                                                 // 7388\n    ReactCurrentOwner.current = this;                                                                                  // 7389\n    try {                                                                                                              // 7390\n      renderedComponent =                                                                                              // 7391\n        this._renderValidatedComponentWithoutOwnerOrContext();                                                         // 7392\n    } finally {                                                                                                        // 7393\n      ReactContext.current = previousContext;                                                                          // 7394\n      ReactCurrentOwner.current = null;                                                                                // 7395\n    }                                                                                                                  // 7396\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 7397\n      // TODO: An `isValidNode` function would probably be more appropriate                                            // 7398\n      renderedComponent === null || renderedComponent === false ||                                                     // 7399\n      ReactElement.isValidElement(renderedComponent),                                                                  // 7400\n      '%s.render(): A valid ReactComponent must be returned. You may have ' +                                          // 7401\n        'returned undefined, an array or some other invalid object.',                                                  // 7402\n      this.getName() || 'ReactCompositeComponent'                                                                      // 7403\n    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate                                // 7404\n    renderedComponent === null || renderedComponent === false ||                                                       // 7405\n    ReactElement.isValidElement(renderedComponent)));                                                                  // 7406\n    return renderedComponent;                                                                                          // 7407\n  },                                                                                                                   // 7408\n                                                                                                                       // 7409\n  /**                                                                                                                  // 7410\n   * Lazily allocates the refs object and stores `component` as `ref`.                                                 // 7411\n   *                                                                                                                   // 7412\n   * @param {string} ref Reference name.                                                                               // 7413\n   * @param {component} component Component to store as `ref`.                                                         // 7414\n   * @final                                                                                                            // 7415\n   * @private                                                                                                          // 7416\n   */                                                                                                                  // 7417\n  attachRef: function(ref, component) {                                                                                // 7418\n    var inst = this.getPublicInstance();                                                                               // 7419\n    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;                                               // 7420\n    refs[ref] = component.getPublicInstance();                                                                         // 7421\n  },                                                                                                                   // 7422\n                                                                                                                       // 7423\n  /**                                                                                                                  // 7424\n   * Detaches a reference name.                                                                                        // 7425\n   *                                                                                                                   // 7426\n   * @param {string} ref Name to dereference.                                                                          // 7427\n   * @final                                                                                                            // 7428\n   * @private                                                                                                          // 7429\n   */                                                                                                                  // 7430\n  detachRef: function(ref) {                                                                                           // 7431\n    var refs = this.getPublicInstance().refs;                                                                          // 7432\n    delete refs[ref];                                                                                                  // 7433\n  },                                                                                                                   // 7434\n                                                                                                                       // 7435\n  /**                                                                                                                  // 7436\n   * Get a text description of the component that can be used to identify it                                           // 7437\n   * in error messages.                                                                                                // 7438\n   * @return {string} The name or null.                                                                                // 7439\n   * @internal                                                                                                         // 7440\n   */                                                                                                                  // 7441\n  getName: function() {                                                                                                // 7442\n    var type = this._currentElement.type;                                                                              // 7443\n    var constructor = this._instance && this._instance.constructor;                                                    // 7444\n    return (                                                                                                           // 7445\n      type.displayName || (constructor && constructor.displayName) ||                                                  // 7446\n      type.name || (constructor && constructor.name) ||                                                                // 7447\n      null                                                                                                             // 7448\n    );                                                                                                                 // 7449\n  },                                                                                                                   // 7450\n                                                                                                                       // 7451\n  /**                                                                                                                  // 7452\n   * Get the publicly accessible representation of this component - i.e. what                                          // 7453\n   * is exposed by refs and returned by React.render. Can be null for stateless                                        // 7454\n   * components.                                                                                                       // 7455\n   *                                                                                                                   // 7456\n   * @return {ReactComponent} the public component instance.                                                           // 7457\n   * @internal                                                                                                         // 7458\n   */                                                                                                                  // 7459\n  getPublicInstance: function() {                                                                                      // 7460\n    return this._instance;                                                                                             // 7461\n  },                                                                                                                   // 7462\n                                                                                                                       // 7463\n  // Stub                                                                                                              // 7464\n  _instantiateReactComponent: null                                                                                     // 7465\n                                                                                                                       // 7466\n};                                                                                                                     // 7467\n                                                                                                                       // 7468\nReactPerf.measureMethods(                                                                                              // 7469\n  ReactCompositeComponentMixin,                                                                                        // 7470\n  'ReactCompositeComponent',                                                                                           // 7471\n  {                                                                                                                    // 7472\n    mountComponent: 'mountComponent',                                                                                  // 7473\n    updateComponent: 'updateComponent',                                                                                // 7474\n    _renderValidatedComponent: '_renderValidatedComponent'                                                             // 7475\n  }                                                                                                                    // 7476\n);                                                                                                                     // 7477\n                                                                                                                       // 7478\nvar ReactCompositeComponent = {                                                                                        // 7479\n                                                                                                                       // 7480\n  Mixin: ReactCompositeComponentMixin                                                                                  // 7481\n                                                                                                                       // 7482\n};                                                                                                                     // 7483\n                                                                                                                       // 7484\nmodule.exports = ReactCompositeComponent;                                                                              // 7485\n                                                                                                                       // 7486\n}).call(this,require('_process'))                                                                                      // 7487\n                                                                                                                       // 7488\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactComponentEnvironment\":\"react/lib/ReactComponentEnvironment\",\"./ReactContext\":\"react/lib/ReactContext\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactElementValidator\":\"react/lib/ReactElementValidator\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./ReactLifeCycle\":\"react/lib/ReactLifeCycle\",\"./ReactNativeComponent\":\"react/lib/ReactNativeComponent\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./ReactPropTypeLocationNames\":\"react/lib/ReactPropTypeLocationNames\",\"./ReactPropTypeLocations\":\"react/lib/ReactPropTypeLocations\",\"./ReactReconciler\":\"react/lib/ReactReconciler\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./emptyObject\":\"react/lib/emptyObject\",\"./invariant\":\"react/lib/invariant\",\"./shouldUpdateReactComponent\":\"react/lib/shouldUpdateReactComponent\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactContext\":[function(require,module,exports){\n(function (process){                                                                                                   // 7490\n/**                                                                                                                    // 7491\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 7492\n * All rights reserved.                                                                                                // 7493\n *                                                                                                                     // 7494\n * This source code is licensed under the BSD-style license found in the                                               // 7495\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 7496\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7497\n *                                                                                                                     // 7498\n * @providesModule ReactContext                                                                                        // 7499\n */                                                                                                                    // 7500\n                                                                                                                       // 7501\n'use strict';                                                                                                          // 7502\n                                                                                                                       // 7503\nvar assign = require(\"./Object.assign\");                                                                               // 7504\nvar emptyObject = require(\"./emptyObject\");                                                                            // 7505\nvar warning = require(\"./warning\");                                                                                    // 7506\n                                                                                                                       // 7507\nvar didWarn = false;                                                                                                   // 7508\n                                                                                                                       // 7509\n/**                                                                                                                    // 7510\n * Keeps track of the current context.                                                                                 // 7511\n *                                                                                                                     // 7512\n * The context is automatically passed down the component ownership hierarchy                                          // 7513\n * and is accessible via `this.context` on ReactCompositeComponents.                                                   // 7514\n */                                                                                                                    // 7515\nvar ReactContext = {                                                                                                   // 7516\n                                                                                                                       // 7517\n  /**                                                                                                                  // 7518\n   * @internal                                                                                                         // 7519\n   * @type {object}                                                                                                    // 7520\n   */                                                                                                                  // 7521\n  current: emptyObject,                                                                                                // 7522\n                                                                                                                       // 7523\n  /**                                                                                                                  // 7524\n   * Temporarily extends the current context while executing scopedCallback.                                           // 7525\n   *                                                                                                                   // 7526\n   * A typical use case might look like                                                                                // 7527\n   *                                                                                                                   // 7528\n   *  render: function() {                                                                                             // 7529\n   *    var children = ReactContext.withContext({foo: 'foo'}, () => (                                                  // 7530\n   *                                                                                                                   // 7531\n   *    ));                                                                                                            // 7532\n   *    return <div>{children}</div>;                                                                                  // 7533\n   *  }                                                                                                                // 7534\n   *                                                                                                                   // 7535\n   * @param {object} newContext New context to merge into the existing context                                         // 7536\n   * @param {function} scopedCallback Callback to run with the new context                                             // 7537\n   * @return {ReactComponent|array<ReactComponent>}                                                                    // 7538\n   */                                                                                                                  // 7539\n  withContext: function(newContext, scopedCallback) {                                                                  // 7540\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 7541\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 7542\n        didWarn,                                                                                                       // 7543\n        'withContext is deprecated and will be removed in a future version. ' +                                        // 7544\n        'Use a wrapper component with getChildContext instead.'                                                        // 7545\n      ) : null);                                                                                                       // 7546\n                                                                                                                       // 7547\n      didWarn = true;                                                                                                  // 7548\n    }                                                                                                                  // 7549\n                                                                                                                       // 7550\n    var result;                                                                                                        // 7551\n    var previousContext = ReactContext.current;                                                                        // 7552\n    ReactContext.current = assign({}, previousContext, newContext);                                                    // 7553\n    try {                                                                                                              // 7554\n      result = scopedCallback();                                                                                       // 7555\n    } finally {                                                                                                        // 7556\n      ReactContext.current = previousContext;                                                                          // 7557\n    }                                                                                                                  // 7558\n    return result;                                                                                                     // 7559\n  }                                                                                                                    // 7560\n                                                                                                                       // 7561\n};                                                                                                                     // 7562\n                                                                                                                       // 7563\nmodule.exports = ReactContext;                                                                                         // 7564\n                                                                                                                       // 7565\n}).call(this,require('_process'))                                                                                      // 7566\n                                                                                                                       // 7567\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./emptyObject\":\"react/lib/emptyObject\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactCurrentOwner\":[function(require,module,exports){\n/**                                                                                                                    // 7569\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 7570\n * All rights reserved.                                                                                                // 7571\n *                                                                                                                     // 7572\n * This source code is licensed under the BSD-style license found in the                                               // 7573\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 7574\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7575\n *                                                                                                                     // 7576\n * @providesModule ReactCurrentOwner                                                                                   // 7577\n */                                                                                                                    // 7578\n                                                                                                                       // 7579\n'use strict';                                                                                                          // 7580\n                                                                                                                       // 7581\n/**                                                                                                                    // 7582\n * Keeps track of the current owner.                                                                                   // 7583\n *                                                                                                                     // 7584\n * The current owner is the component who should own any components that are                                           // 7585\n * currently being constructed.                                                                                        // 7586\n *                                                                                                                     // 7587\n * The depth indicate how many composite components are above this render level.                                       // 7588\n */                                                                                                                    // 7589\nvar ReactCurrentOwner = {                                                                                              // 7590\n                                                                                                                       // 7591\n  /**                                                                                                                  // 7592\n   * @internal                                                                                                         // 7593\n   * @type {ReactComponent}                                                                                            // 7594\n   */                                                                                                                  // 7595\n  current: null                                                                                                        // 7596\n                                                                                                                       // 7597\n};                                                                                                                     // 7598\n                                                                                                                       // 7599\nmodule.exports = ReactCurrentOwner;                                                                                    // 7600\n                                                                                                                       // 7601\n},{}],\"react/lib/ReactDOMButton\":[function(require,module,exports){                                                    // 7602\n/**                                                                                                                    // 7603\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 7604\n * All rights reserved.                                                                                                // 7605\n *                                                                                                                     // 7606\n * This source code is licensed under the BSD-style license found in the                                               // 7607\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 7608\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7609\n *                                                                                                                     // 7610\n * @providesModule ReactDOMButton                                                                                      // 7611\n */                                                                                                                    // 7612\n                                                                                                                       // 7613\n'use strict';                                                                                                          // 7614\n                                                                                                                       // 7615\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");                                                                      // 7616\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");                                              // 7617\nvar ReactClass = require(\"./ReactClass\");                                                                              // 7618\nvar ReactElement = require(\"./ReactElement\");                                                                          // 7619\n                                                                                                                       // 7620\nvar keyMirror = require(\"./keyMirror\");                                                                                // 7621\n                                                                                                                       // 7622\nvar button = ReactElement.createFactory('button');                                                                     // 7623\n                                                                                                                       // 7624\nvar mouseListenerNames = keyMirror({                                                                                   // 7625\n  onClick: true,                                                                                                       // 7626\n  onDoubleClick: true,                                                                                                 // 7627\n  onMouseDown: true,                                                                                                   // 7628\n  onMouseMove: true,                                                                                                   // 7629\n  onMouseUp: true,                                                                                                     // 7630\n  onClickCapture: true,                                                                                                // 7631\n  onDoubleClickCapture: true,                                                                                          // 7632\n  onMouseDownCapture: true,                                                                                            // 7633\n  onMouseMoveCapture: true,                                                                                            // 7634\n  onMouseUpCapture: true                                                                                               // 7635\n});                                                                                                                    // 7636\n                                                                                                                       // 7637\n/**                                                                                                                    // 7638\n * Implements a <button> native component that does not receive mouse events                                           // 7639\n * when `disabled` is set.                                                                                             // 7640\n */                                                                                                                    // 7641\nvar ReactDOMButton = ReactClass.createClass({                                                                          // 7642\n  displayName: 'ReactDOMButton',                                                                                       // 7643\n  tagName: 'BUTTON',                                                                                                   // 7644\n                                                                                                                       // 7645\n  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],                                                                // 7646\n                                                                                                                       // 7647\n  render: function() {                                                                                                 // 7648\n    var props = {};                                                                                                    // 7649\n                                                                                                                       // 7650\n    // Copy the props; except the mouse listeners if we're disabled                                                    // 7651\n    for (var key in this.props) {                                                                                      // 7652\n      if (this.props.hasOwnProperty(key) &&                                                                            // 7653\n          (!this.props.disabled || !mouseListenerNames[key])) {                                                        // 7654\n        props[key] = this.props[key];                                                                                  // 7655\n      }                                                                                                                // 7656\n    }                                                                                                                  // 7657\n                                                                                                                       // 7658\n    return button(props, this.props.children);                                                                         // 7659\n  }                                                                                                                    // 7660\n                                                                                                                       // 7661\n});                                                                                                                    // 7662\n                                                                                                                       // 7663\nmodule.exports = ReactDOMButton;                                                                                       // 7664\n                                                                                                                       // 7665\n},{\"./AutoFocusMixin\":\"react/lib/AutoFocusMixin\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\",\"./keyMirror\":\"react/lib/keyMirror\"}],\"react/lib/ReactDOMComponent\":[function(require,module,exports){\n(function (process){                                                                                                   // 7667\n/**                                                                                                                    // 7668\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 7669\n * All rights reserved.                                                                                                // 7670\n *                                                                                                                     // 7671\n * This source code is licensed under the BSD-style license found in the                                               // 7672\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 7673\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 7674\n *                                                                                                                     // 7675\n * @providesModule ReactDOMComponent                                                                                   // 7676\n * @typechecks static-only                                                                                             // 7677\n */                                                                                                                    // 7678\n                                                                                                                       // 7679\n/* global hasOwnProperty:true */                                                                                       // 7680\n                                                                                                                       // 7681\n'use strict';                                                                                                          // 7682\n                                                                                                                       // 7683\nvar CSSPropertyOperations = require(\"./CSSPropertyOperations\");                                                        // 7684\nvar DOMProperty = require(\"./DOMProperty\");                                                                            // 7685\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");                                                        // 7686\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");                                                  // 7687\nvar ReactComponentBrowserEnvironment =                                                                                 // 7688\n  require(\"./ReactComponentBrowserEnvironment\");                                                                       // 7689\nvar ReactMount = require(\"./ReactMount\");                                                                              // 7690\nvar ReactMultiChild = require(\"./ReactMultiChild\");                                                                    // 7691\nvar ReactPerf = require(\"./ReactPerf\");                                                                                // 7692\n                                                                                                                       // 7693\nvar assign = require(\"./Object.assign\");                                                                               // 7694\nvar escapeTextContentForBrowser = require(\"./escapeTextContentForBrowser\");                                            // 7695\nvar invariant = require(\"./invariant\");                                                                                // 7696\nvar isEventSupported = require(\"./isEventSupported\");                                                                  // 7697\nvar keyOf = require(\"./keyOf\");                                                                                        // 7698\nvar warning = require(\"./warning\");                                                                                    // 7699\n                                                                                                                       // 7700\nvar deleteListener = ReactBrowserEventEmitter.deleteListener;                                                          // 7701\nvar listenTo = ReactBrowserEventEmitter.listenTo;                                                                      // 7702\nvar registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;                                        // 7703\n                                                                                                                       // 7704\n// For quickly matching children type, to test if can be treated as content.                                           // 7705\nvar CONTENT_TYPES = {'string': true, 'number': true};                                                                  // 7706\n                                                                                                                       // 7707\nvar STYLE = keyOf({style: null});                                                                                      // 7708\n                                                                                                                       // 7709\nvar ELEMENT_NODE_TYPE = 1;                                                                                             // 7710\n                                                                                                                       // 7711\n/**                                                                                                                    // 7712\n * Optionally injectable operations for mutating the DOM                                                               // 7713\n */                                                                                                                    // 7714\nvar BackendIDOperations = null;                                                                                        // 7715\n                                                                                                                       // 7716\n/**                                                                                                                    // 7717\n * @param {?object} props                                                                                              // 7718\n */                                                                                                                    // 7719\nfunction assertValidProps(props) {                                                                                     // 7720\n  if (!props) {                                                                                                        // 7721\n    return;                                                                                                            // 7722\n  }                                                                                                                    // 7723\n  // Note the use of `==` which checks for null or undefined.                                                          // 7724\n  if (props.dangerouslySetInnerHTML != null) {                                                                         // 7725\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 7726\n      props.children == null,                                                                                          // 7727\n      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'                                             // 7728\n    ) : invariant(props.children == null));                                                                            // 7729\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 7730\n      typeof props.dangerouslySetInnerHTML === 'object' &&                                                             // 7731\n      '__html' in props.dangerouslySetInnerHTML,                                                                       // 7732\n      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +                                        // 7733\n      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +                                       // 7734\n      'for more information.'                                                                                          // 7735\n    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&                                                 // 7736\n    '__html' in props.dangerouslySetInnerHTML));                                                                       // 7737\n  }                                                                                                                    // 7738\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 7739\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 7740\n      props.innerHTML == null,                                                                                         // 7741\n      'Directly setting property `innerHTML` is not permitted. ' +                                                     // 7742\n      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'                                       // 7743\n    ) : null);                                                                                                         // 7744\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 7745\n      !props.contentEditable || props.children == null,                                                                // 7746\n      'A component is `contentEditable` and contains `children` managed by ' +                                         // 7747\n      'React. It is now your responsibility to guarantee that none of ' +                                              // 7748\n      'those nodes are unexpectedly modified or duplicated. This is ' +                                                // 7749\n      'probably not intentional.'                                                                                      // 7750\n    ) : null);                                                                                                         // 7751\n  }                                                                                                                    // 7752\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 7753\n    props.style == null || typeof props.style === 'object',                                                            // 7754\n    'The `style` prop expects a mapping from style properties to values, ' +                                           // 7755\n    'not a string. For example, style={{marginRight: spacing + \\'em\\'}} when ' +                                       // 7756\n    'using JSX.'                                                                                                       // 7757\n  ) : invariant(props.style == null || typeof props.style === 'object'));                                              // 7758\n}                                                                                                                      // 7759\n                                                                                                                       // 7760\nfunction putListener(id, registrationName, listener, transaction) {                                                    // 7761\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 7762\n    // IE8 has no API for event capturing and the `onScroll` event doesn't                                             // 7763\n    // bubble.                                                                                                         // 7764\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 7765\n      registrationName !== 'onScroll' || isEventSupported('scroll', true),                                             // 7766\n      'This browser doesn\\'t support the `onScroll` event'                                                             // 7767\n    ) : null);                                                                                                         // 7768\n  }                                                                                                                    // 7769\n  var container = ReactMount.findReactContainerForID(id);                                                              // 7770\n  if (container) {                                                                                                     // 7771\n    var doc = container.nodeType === ELEMENT_NODE_TYPE ?                                                               // 7772\n      container.ownerDocument :                                                                                        // 7773\n      container;                                                                                                       // 7774\n    listenTo(registrationName, doc);                                                                                   // 7775\n  }                                                                                                                    // 7776\n  transaction.getPutListenerQueue().enqueuePutListener(                                                                // 7777\n    id,                                                                                                                // 7778\n    registrationName,                                                                                                  // 7779\n    listener                                                                                                           // 7780\n  );                                                                                                                   // 7781\n}                                                                                                                      // 7782\n                                                                                                                       // 7783\n// For HTML, certain tags should omit their close tag. We keep a whitelist for                                         // 7784\n// those special cased tags.                                                                                           // 7785\n                                                                                                                       // 7786\nvar omittedCloseTags = {                                                                                               // 7787\n  'area': true,                                                                                                        // 7788\n  'base': true,                                                                                                        // 7789\n  'br': true,                                                                                                          // 7790\n  'col': true,                                                                                                         // 7791\n  'embed': true,                                                                                                       // 7792\n  'hr': true,                                                                                                          // 7793\n  'img': true,                                                                                                         // 7794\n  'input': true,                                                                                                       // 7795\n  'keygen': true,                                                                                                      // 7796\n  'link': true,                                                                                                        // 7797\n  'meta': true,                                                                                                        // 7798\n  'param': true,                                                                                                       // 7799\n  'source': true,                                                                                                      // 7800\n  'track': true,                                                                                                       // 7801\n  'wbr': true                                                                                                          // 7802\n  // NOTE: menuitem's close tag should be omitted, but that causes problems.                                           // 7803\n};                                                                                                                     // 7804\n                                                                                                                       // 7805\n// We accept any tag to be rendered but since this gets injected into abitrary                                         // 7806\n// HTML, we want to make sure that it's a safe tag.                                                                    // 7807\n// http://www.w3.org/TR/REC-xml/#NT-Name                                                                               // 7808\n                                                                                                                       // 7809\nvar VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset                                              // 7810\nvar validatedTagCache = {};                                                                                            // 7811\nvar hasOwnProperty = {}.hasOwnProperty;                                                                                // 7812\n                                                                                                                       // 7813\nfunction validateDangerousTag(tag) {                                                                                   // 7814\n  if (!hasOwnProperty.call(validatedTagCache, tag)) {                                                                  // 7815\n    (\"production\" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));\n    validatedTagCache[tag] = true;                                                                                     // 7817\n  }                                                                                                                    // 7818\n}                                                                                                                      // 7819\n                                                                                                                       // 7820\n/**                                                                                                                    // 7821\n * Creates a new React class that is idempotent and capable of containing other                                        // 7822\n * React components. It accepts event listeners and DOM properties that are                                            // 7823\n * valid according to `DOMProperty`.                                                                                   // 7824\n *                                                                                                                     // 7825\n *  - Event listeners: `onClick`, `onMouseDown`, etc.                                                                  // 7826\n *  - DOM properties: `className`, `name`, `title`, etc.                                                               // 7827\n *                                                                                                                     // 7828\n * The `style` property functions differently from the DOM API. It accepts an                                          // 7829\n * object mapping of style properties to values.                                                                       // 7830\n *                                                                                                                     // 7831\n * @constructor ReactDOMComponent                                                                                      // 7832\n * @extends ReactMultiChild                                                                                            // 7833\n */                                                                                                                    // 7834\nfunction ReactDOMComponent(tag) {                                                                                      // 7835\n  validateDangerousTag(tag);                                                                                           // 7836\n  this._tag = tag;                                                                                                     // 7837\n  this._renderedChildren = null;                                                                                       // 7838\n  this._previousStyleCopy = null;                                                                                      // 7839\n  this._rootNodeID = null;                                                                                             // 7840\n}                                                                                                                      // 7841\n                                                                                                                       // 7842\nReactDOMComponent.displayName = 'ReactDOMComponent';                                                                   // 7843\n                                                                                                                       // 7844\nReactDOMComponent.Mixin = {                                                                                            // 7845\n                                                                                                                       // 7846\n  construct: function(element) {                                                                                       // 7847\n    this._currentElement = element;                                                                                    // 7848\n  },                                                                                                                   // 7849\n                                                                                                                       // 7850\n  /**                                                                                                                  // 7851\n   * Generates root tag markup then recurses. This method has side effects and                                         // 7852\n   * is not idempotent.                                                                                                // 7853\n   *                                                                                                                   // 7854\n   * @internal                                                                                                         // 7855\n   * @param {string} rootID The root DOM ID for this node.                                                             // 7856\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 7857\n   * @return {string} The computed markup.                                                                             // 7858\n   */                                                                                                                  // 7859\n  mountComponent: function(rootID, transaction, context) {                                                             // 7860\n    this._rootNodeID = rootID;                                                                                         // 7861\n    assertValidProps(this._currentElement.props);                                                                      // 7862\n    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';                                          // 7863\n    return (                                                                                                           // 7864\n      this._createOpenTagMarkupAndPutListeners(transaction) +                                                          // 7865\n      this._createContentMarkup(transaction, context) +                                                                // 7866\n      closeTag                                                                                                         // 7867\n    );                                                                                                                 // 7868\n  },                                                                                                                   // 7869\n                                                                                                                       // 7870\n  /**                                                                                                                  // 7871\n   * Creates markup for the open tag and all attributes.                                                               // 7872\n   *                                                                                                                   // 7873\n   * This method has side effects because events get registered.                                                       // 7874\n   *                                                                                                                   // 7875\n   * Iterating over object properties is faster than iterating over arrays.                                            // 7876\n   * @see http://jsperf.com/obj-vs-arr-iteration                                                                       // 7877\n   *                                                                                                                   // 7878\n   * @private                                                                                                          // 7879\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 7880\n   * @return {string} Markup of opening tag.                                                                           // 7881\n   */                                                                                                                  // 7882\n  _createOpenTagMarkupAndPutListeners: function(transaction) {                                                         // 7883\n    var props = this._currentElement.props;                                                                            // 7884\n    var ret = '<' + this._tag;                                                                                         // 7885\n                                                                                                                       // 7886\n    for (var propKey in props) {                                                                                       // 7887\n      if (!props.hasOwnProperty(propKey)) {                                                                            // 7888\n        continue;                                                                                                      // 7889\n      }                                                                                                                // 7890\n      var propValue = props[propKey];                                                                                  // 7891\n      if (propValue == null) {                                                                                         // 7892\n        continue;                                                                                                      // 7893\n      }                                                                                                                // 7894\n      if (registrationNameModules.hasOwnProperty(propKey)) {                                                           // 7895\n        putListener(this._rootNodeID, propKey, propValue, transaction);                                                // 7896\n      } else {                                                                                                         // 7897\n        if (propKey === STYLE) {                                                                                       // 7898\n          if (propValue) {                                                                                             // 7899\n            propValue = this._previousStyleCopy = assign({}, props.style);                                             // 7900\n          }                                                                                                            // 7901\n          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);                                          // 7902\n        }                                                                                                              // 7903\n        var markup =                                                                                                   // 7904\n          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);                                           // 7905\n        if (markup) {                                                                                                  // 7906\n          ret += ' ' + markup;                                                                                         // 7907\n        }                                                                                                              // 7908\n      }                                                                                                                // 7909\n    }                                                                                                                  // 7910\n                                                                                                                       // 7911\n    // For static pages, no need to put React ID and checksum. Saves lots of                                           // 7912\n    // bytes.                                                                                                          // 7913\n    if (transaction.renderToStaticMarkup) {                                                                            // 7914\n      return ret + '>';                                                                                                // 7915\n    }                                                                                                                  // 7916\n                                                                                                                       // 7917\n    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);                                       // 7918\n    return ret + ' ' + markupForID + '>';                                                                              // 7919\n  },                                                                                                                   // 7920\n                                                                                                                       // 7921\n  /**                                                                                                                  // 7922\n   * Creates markup for the content between the tags.                                                                  // 7923\n   *                                                                                                                   // 7924\n   * @private                                                                                                          // 7925\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 7926\n   * @param {object} context                                                                                           // 7927\n   * @return {string} Content markup.                                                                                  // 7928\n   */                                                                                                                  // 7929\n  _createContentMarkup: function(transaction, context) {                                                               // 7930\n    var prefix = '';                                                                                                   // 7931\n    if (this._tag === 'listing' ||                                                                                     // 7932\n        this._tag === 'pre' ||                                                                                         // 7933\n        this._tag === 'textarea') {                                                                                    // 7934\n      // Add an initial newline because browsers ignore the first newline in                                           // 7935\n      // a <listing>, <pre>, or <textarea> as an \"authoring convenience\" -- see                                        // 7936\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.                                       // 7937\n      prefix = '\\n';                                                                                                   // 7938\n    }                                                                                                                  // 7939\n                                                                                                                       // 7940\n    var props = this._currentElement.props;                                                                            // 7941\n                                                                                                                       // 7942\n    // Intentional use of != to avoid catching zero/false.                                                             // 7943\n    var innerHTML = props.dangerouslySetInnerHTML;                                                                     // 7944\n    if (innerHTML != null) {                                                                                           // 7945\n      if (innerHTML.__html != null) {                                                                                  // 7946\n        return prefix + innerHTML.__html;                                                                              // 7947\n      }                                                                                                                // 7948\n    } else {                                                                                                           // 7949\n      var contentToUse =                                                                                               // 7950\n        CONTENT_TYPES[typeof props.children] ? props.children : null;                                                  // 7951\n      var childrenToUse = contentToUse != null ? null : props.children;                                                // 7952\n      if (contentToUse != null) {                                                                                      // 7953\n        return prefix + escapeTextContentForBrowser(contentToUse);                                                     // 7954\n      } else if (childrenToUse != null) {                                                                              // 7955\n        var mountImages = this.mountChildren(                                                                          // 7956\n          childrenToUse,                                                                                               // 7957\n          transaction,                                                                                                 // 7958\n          context                                                                                                      // 7959\n        );                                                                                                             // 7960\n        return prefix + mountImages.join('');                                                                          // 7961\n      }                                                                                                                // 7962\n    }                                                                                                                  // 7963\n    return prefix;                                                                                                     // 7964\n  },                                                                                                                   // 7965\n                                                                                                                       // 7966\n  receiveComponent: function(nextElement, transaction, context) {                                                      // 7967\n    var prevElement = this._currentElement;                                                                            // 7968\n    this._currentElement = nextElement;                                                                                // 7969\n    this.updateComponent(transaction, prevElement, nextElement, context);                                              // 7970\n  },                                                                                                                   // 7971\n                                                                                                                       // 7972\n  /**                                                                                                                  // 7973\n   * Updates a native DOM component after it has already been allocated and                                            // 7974\n   * attached to the DOM. Reconciles the root DOM node, then recurses.                                                 // 7975\n   *                                                                                                                   // 7976\n   * @param {ReactReconcileTransaction} transaction                                                                    // 7977\n   * @param {ReactElement} prevElement                                                                                 // 7978\n   * @param {ReactElement} nextElement                                                                                 // 7979\n   * @internal                                                                                                         // 7980\n   * @overridable                                                                                                      // 7981\n   */                                                                                                                  // 7982\n  updateComponent: function(transaction, prevElement, nextElement, context) {                                          // 7983\n    assertValidProps(this._currentElement.props);                                                                      // 7984\n    this._updateDOMProperties(prevElement.props, transaction);                                                         // 7985\n    this._updateDOMChildren(prevElement.props, transaction, context);                                                  // 7986\n  },                                                                                                                   // 7987\n                                                                                                                       // 7988\n  /**                                                                                                                  // 7989\n   * Reconciles the properties by detecting differences in property values and                                         // 7990\n   * updating the DOM as necessary. This function is probably the single most                                          // 7991\n   * critical path for performance optimization.                                                                       // 7992\n   *                                                                                                                   // 7993\n   * TODO: Benchmark whether checking for changed values in memory actually                                            // 7994\n   *       improves performance (especially statically positioned elements).                                           // 7995\n   * TODO: Benchmark the effects of putting this at the top since 99% of props                                         // 7996\n   *       do not change for a given reconciliation.                                                                   // 7997\n   * TODO: Benchmark areas that can be improved with caching.                                                          // 7998\n   *                                                                                                                   // 7999\n   * @private                                                                                                          // 8000\n   * @param {object} lastProps                                                                                         // 8001\n   * @param {ReactReconcileTransaction} transaction                                                                    // 8002\n   */                                                                                                                  // 8003\n  _updateDOMProperties: function(lastProps, transaction) {                                                             // 8004\n    var nextProps = this._currentElement.props;                                                                        // 8005\n    var propKey;                                                                                                       // 8006\n    var styleName;                                                                                                     // 8007\n    var styleUpdates;                                                                                                  // 8008\n    for (propKey in lastProps) {                                                                                       // 8009\n      if (nextProps.hasOwnProperty(propKey) ||                                                                         // 8010\n         !lastProps.hasOwnProperty(propKey)) {                                                                         // 8011\n        continue;                                                                                                      // 8012\n      }                                                                                                                // 8013\n      if (propKey === STYLE) {                                                                                         // 8014\n        var lastStyle = this._previousStyleCopy;                                                                       // 8015\n        for (styleName in lastStyle) {                                                                                 // 8016\n          if (lastStyle.hasOwnProperty(styleName)) {                                                                   // 8017\n            styleUpdates = styleUpdates || {};                                                                         // 8018\n            styleUpdates[styleName] = '';                                                                              // 8019\n          }                                                                                                            // 8020\n        }                                                                                                              // 8021\n        this._previousStyleCopy = null;                                                                                // 8022\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {                                                    // 8023\n        deleteListener(this._rootNodeID, propKey);                                                                     // 8024\n      } else if (                                                                                                      // 8025\n          DOMProperty.isStandardName[propKey] ||                                                                       // 8026\n          DOMProperty.isCustomAttribute(propKey)) {                                                                    // 8027\n        BackendIDOperations.deletePropertyByID(                                                                        // 8028\n          this._rootNodeID,                                                                                            // 8029\n          propKey                                                                                                      // 8030\n        );                                                                                                             // 8031\n      }                                                                                                                // 8032\n    }                                                                                                                  // 8033\n    for (propKey in nextProps) {                                                                                       // 8034\n      var nextProp = nextProps[propKey];                                                                               // 8035\n      var lastProp = propKey === STYLE ?                                                                               // 8036\n        this._previousStyleCopy :                                                                                      // 8037\n        lastProps[propKey];                                                                                            // 8038\n      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {                                               // 8039\n        continue;                                                                                                      // 8040\n      }                                                                                                                // 8041\n      if (propKey === STYLE) {                                                                                         // 8042\n        if (nextProp) {                                                                                                // 8043\n          nextProp = this._previousStyleCopy = assign({}, nextProp);                                                   // 8044\n        } else {                                                                                                       // 8045\n          this._previousStyleCopy = null;                                                                              // 8046\n        }                                                                                                              // 8047\n        if (lastProp) {                                                                                                // 8048\n          // Unset styles on `lastProp` but not on `nextProp`.                                                         // 8049\n          for (styleName in lastProp) {                                                                                // 8050\n            if (lastProp.hasOwnProperty(styleName) &&                                                                  // 8051\n                (!nextProp || !nextProp.hasOwnProperty(styleName))) {                                                  // 8052\n              styleUpdates = styleUpdates || {};                                                                       // 8053\n              styleUpdates[styleName] = '';                                                                            // 8054\n            }                                                                                                          // 8055\n          }                                                                                                            // 8056\n          // Update styles that changed since `lastProp`.                                                              // 8057\n          for (styleName in nextProp) {                                                                                // 8058\n            if (nextProp.hasOwnProperty(styleName) &&                                                                  // 8059\n                lastProp[styleName] !== nextProp[styleName]) {                                                         // 8060\n              styleUpdates = styleUpdates || {};                                                                       // 8061\n              styleUpdates[styleName] = nextProp[styleName];                                                           // 8062\n            }                                                                                                          // 8063\n          }                                                                                                            // 8064\n        } else {                                                                                                       // 8065\n          // Relies on `updateStylesByID` not mutating `styleUpdates`.                                                 // 8066\n          styleUpdates = nextProp;                                                                                     // 8067\n        }                                                                                                              // 8068\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {                                                    // 8069\n        putListener(this._rootNodeID, propKey, nextProp, transaction);                                                 // 8070\n      } else if (                                                                                                      // 8071\n          DOMProperty.isStandardName[propKey] ||                                                                       // 8072\n          DOMProperty.isCustomAttribute(propKey)) {                                                                    // 8073\n        BackendIDOperations.updatePropertyByID(                                                                        // 8074\n          this._rootNodeID,                                                                                            // 8075\n          propKey,                                                                                                     // 8076\n          nextProp                                                                                                     // 8077\n        );                                                                                                             // 8078\n      }                                                                                                                // 8079\n    }                                                                                                                  // 8080\n    if (styleUpdates) {                                                                                                // 8081\n      BackendIDOperations.updateStylesByID(                                                                            // 8082\n        this._rootNodeID,                                                                                              // 8083\n        styleUpdates                                                                                                   // 8084\n      );                                                                                                               // 8085\n    }                                                                                                                  // 8086\n  },                                                                                                                   // 8087\n                                                                                                                       // 8088\n  /**                                                                                                                  // 8089\n   * Reconciles the children with the various properties that affect the                                               // 8090\n   * children content.                                                                                                 // 8091\n   *                                                                                                                   // 8092\n   * @param {object} lastProps                                                                                         // 8093\n   * @param {ReactReconcileTransaction} transaction                                                                    // 8094\n   */                                                                                                                  // 8095\n  _updateDOMChildren: function(lastProps, transaction, context) {                                                      // 8096\n    var nextProps = this._currentElement.props;                                                                        // 8097\n                                                                                                                       // 8098\n    var lastContent =                                                                                                  // 8099\n      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;                                            // 8100\n    var nextContent =                                                                                                  // 8101\n      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;                                            // 8102\n                                                                                                                       // 8103\n    var lastHtml =                                                                                                     // 8104\n      lastProps.dangerouslySetInnerHTML &&                                                                             // 8105\n      lastProps.dangerouslySetInnerHTML.__html;                                                                        // 8106\n    var nextHtml =                                                                                                     // 8107\n      nextProps.dangerouslySetInnerHTML &&                                                                             // 8108\n      nextProps.dangerouslySetInnerHTML.__html;                                                                        // 8109\n                                                                                                                       // 8110\n    // Note the use of `!=` which checks for null or undefined.                                                        // 8111\n    var lastChildren = lastContent != null ? null : lastProps.children;                                                // 8112\n    var nextChildren = nextContent != null ? null : nextProps.children;                                                // 8113\n                                                                                                                       // 8114\n    // If we're switching from children to content/html or vice versa, remove                                          // 8115\n    // the old content                                                                                                 // 8116\n    var lastHasContentOrHtml = lastContent != null || lastHtml != null;                                                // 8117\n    var nextHasContentOrHtml = nextContent != null || nextHtml != null;                                                // 8118\n    if (lastChildren != null && nextChildren == null) {                                                                // 8119\n      this.updateChildren(null, transaction, context);                                                                 // 8120\n    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {                                                        // 8121\n      this.updateTextContent('');                                                                                      // 8122\n    }                                                                                                                  // 8123\n                                                                                                                       // 8124\n    if (nextContent != null) {                                                                                         // 8125\n      if (lastContent !== nextContent) {                                                                               // 8126\n        this.updateTextContent('' + nextContent);                                                                      // 8127\n      }                                                                                                                // 8128\n    } else if (nextHtml != null) {                                                                                     // 8129\n      if (lastHtml !== nextHtml) {                                                                                     // 8130\n        BackendIDOperations.updateInnerHTMLByID(                                                                       // 8131\n          this._rootNodeID,                                                                                            // 8132\n          nextHtml                                                                                                     // 8133\n        );                                                                                                             // 8134\n      }                                                                                                                // 8135\n    } else if (nextChildren != null) {                                                                                 // 8136\n      this.updateChildren(nextChildren, transaction, context);                                                         // 8137\n    }                                                                                                                  // 8138\n  },                                                                                                                   // 8139\n                                                                                                                       // 8140\n  /**                                                                                                                  // 8141\n   * Destroys all event registrations for this instance. Does not remove from                                          // 8142\n   * the DOM. That must be done by the parent.                                                                         // 8143\n   *                                                                                                                   // 8144\n   * @internal                                                                                                         // 8145\n   */                                                                                                                  // 8146\n  unmountComponent: function() {                                                                                       // 8147\n    this.unmountChildren();                                                                                            // 8148\n    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);                                                     // 8149\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);                                       // 8150\n    this._rootNodeID = null;                                                                                           // 8151\n  }                                                                                                                    // 8152\n                                                                                                                       // 8153\n};                                                                                                                     // 8154\n                                                                                                                       // 8155\nReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {                                                     // 8156\n  mountComponent: 'mountComponent',                                                                                    // 8157\n  updateComponent: 'updateComponent'                                                                                   // 8158\n});                                                                                                                    // 8159\n                                                                                                                       // 8160\nassign(                                                                                                                // 8161\n  ReactDOMComponent.prototype,                                                                                         // 8162\n  ReactDOMComponent.Mixin,                                                                                             // 8163\n  ReactMultiChild.Mixin                                                                                                // 8164\n);                                                                                                                     // 8165\n                                                                                                                       // 8166\nReactDOMComponent.injection = {                                                                                        // 8167\n  injectIDOperations: function(IDOperations) {                                                                         // 8168\n    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;                                        // 8169\n  }                                                                                                                    // 8170\n};                                                                                                                     // 8171\n                                                                                                                       // 8172\nmodule.exports = ReactDOMComponent;                                                                                    // 8173\n                                                                                                                       // 8174\n}).call(this,require('_process'))                                                                                      // 8175\n                                                                                                                       // 8176\n},{\"./CSSPropertyOperations\":\"react/lib/CSSPropertyOperations\",\"./DOMProperty\":\"react/lib/DOMProperty\",\"./DOMPropertyOperations\":\"react/lib/DOMPropertyOperations\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\",\"./ReactComponentBrowserEnvironment\":\"react/lib/ReactComponentBrowserEnvironment\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactMultiChild\":\"react/lib/ReactMultiChild\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./escapeTextContentForBrowser\":\"react/lib/escapeTextContentForBrowser\",\"./invariant\":\"react/lib/invariant\",\"./isEventSupported\":\"react/lib/isEventSupported\",\"./keyOf\":\"react/lib/keyOf\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactDOMForm\":[function(require,module,exports){\n/**                                                                                                                    // 8178\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8179\n * All rights reserved.                                                                                                // 8180\n *                                                                                                                     // 8181\n * This source code is licensed under the BSD-style license found in the                                               // 8182\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8183\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 8184\n *                                                                                                                     // 8185\n * @providesModule ReactDOMForm                                                                                        // 8186\n */                                                                                                                    // 8187\n                                                                                                                       // 8188\n'use strict';                                                                                                          // 8189\n                                                                                                                       // 8190\nvar EventConstants = require(\"./EventConstants\");                                                                      // 8191\nvar LocalEventTrapMixin = require(\"./LocalEventTrapMixin\");                                                            // 8192\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");                                              // 8193\nvar ReactClass = require(\"./ReactClass\");                                                                              // 8194\nvar ReactElement = require(\"./ReactElement\");                                                                          // 8195\n                                                                                                                       // 8196\nvar form = ReactElement.createFactory('form');                                                                         // 8197\n                                                                                                                       // 8198\n/**                                                                                                                    // 8199\n * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need                                           // 8200\n * to capture it on the <form> element itself. There are lots of hacks we could                                        // 8201\n * do to accomplish this, but the most reliable is to make <form> a                                                    // 8202\n * composite component and use `componentDidMount` to attach the event handlers.                                       // 8203\n */                                                                                                                    // 8204\nvar ReactDOMForm = ReactClass.createClass({                                                                            // 8205\n  displayName: 'ReactDOMForm',                                                                                         // 8206\n  tagName: 'FORM',                                                                                                     // 8207\n                                                                                                                       // 8208\n  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],                                                           // 8209\n                                                                                                                       // 8210\n  render: function() {                                                                                                 // 8211\n    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,                                         // 8212\n    // `jshint` fails to parse JSX so in order for linting to work in the open                                         // 8213\n    // source repo, we need to just use `ReactDOM.form`.                                                               // 8214\n    return form(this.props);                                                                                           // 8215\n  },                                                                                                                   // 8216\n                                                                                                                       // 8217\n  componentDidMount: function() {                                                                                      // 8218\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');                                             // 8219\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');                                           // 8220\n  }                                                                                                                    // 8221\n});                                                                                                                    // 8222\n                                                                                                                       // 8223\nmodule.exports = ReactDOMForm;                                                                                         // 8224\n                                                                                                                       // 8225\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./LocalEventTrapMixin\":\"react/lib/LocalEventTrapMixin\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\"}],\"react/lib/ReactDOMIDOperations\":[function(require,module,exports){\n(function (process){                                                                                                   // 8227\n/**                                                                                                                    // 8228\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8229\n * All rights reserved.                                                                                                // 8230\n *                                                                                                                     // 8231\n * This source code is licensed under the BSD-style license found in the                                               // 8232\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8233\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 8234\n *                                                                                                                     // 8235\n * @providesModule ReactDOMIDOperations                                                                                // 8236\n * @typechecks static-only                                                                                             // 8237\n */                                                                                                                    // 8238\n                                                                                                                       // 8239\n/*jslint evil: true */                                                                                                 // 8240\n                                                                                                                       // 8241\n'use strict';                                                                                                          // 8242\n                                                                                                                       // 8243\nvar CSSPropertyOperations = require(\"./CSSPropertyOperations\");                                                        // 8244\nvar DOMChildrenOperations = require(\"./DOMChildrenOperations\");                                                        // 8245\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");                                                        // 8246\nvar ReactMount = require(\"./ReactMount\");                                                                              // 8247\nvar ReactPerf = require(\"./ReactPerf\");                                                                                // 8248\n                                                                                                                       // 8249\nvar invariant = require(\"./invariant\");                                                                                // 8250\nvar setInnerHTML = require(\"./setInnerHTML\");                                                                          // 8251\n                                                                                                                       // 8252\n/**                                                                                                                    // 8253\n * Errors for properties that should not be updated with `updatePropertyById()`.                                       // 8254\n *                                                                                                                     // 8255\n * @type {object}                                                                                                      // 8256\n * @private                                                                                                            // 8257\n */                                                                                                                    // 8258\nvar INVALID_PROPERTY_ERRORS = {                                                                                        // 8259\n  dangerouslySetInnerHTML:                                                                                             // 8260\n    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',                                            // 8261\n  style: '`style` must be set using `updateStylesByID()`.'                                                             // 8262\n};                                                                                                                     // 8263\n                                                                                                                       // 8264\n/**                                                                                                                    // 8265\n * Operations used to process updates to DOM nodes. This is made injectable via                                        // 8266\n * `ReactDOMComponent.BackendIDOperations`.                                                                            // 8267\n */                                                                                                                    // 8268\nvar ReactDOMIDOperations = {                                                                                           // 8269\n                                                                                                                       // 8270\n  /**                                                                                                                  // 8271\n   * Updates a DOM node with new property values. This should only be used to                                          // 8272\n   * update DOM properties in `DOMProperty`.                                                                           // 8273\n   *                                                                                                                   // 8274\n   * @param {string} id ID of the node to update.                                                                      // 8275\n   * @param {string} name A valid property name, see `DOMProperty`.                                                    // 8276\n   * @param {*} value New value of the property.                                                                       // 8277\n   * @internal                                                                                                         // 8278\n   */                                                                                                                  // 8279\n  updatePropertyByID: function(id, name, value) {                                                                      // 8280\n    var node = ReactMount.getNode(id);                                                                                 // 8281\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 8282\n      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),                                                                   // 8283\n      'updatePropertyByID(...): %s',                                                                                   // 8284\n      INVALID_PROPERTY_ERRORS[name]                                                                                    // 8285\n    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));                                                     // 8286\n                                                                                                                       // 8287\n    // If we're updating to null or undefined, we should remove the property                                           // 8288\n    // from the DOM node instead of inadvertantly setting to a string. This                                            // 8289\n    // brings us in line with the same behavior we have on initial render.                                             // 8290\n    if (value != null) {                                                                                               // 8291\n      DOMPropertyOperations.setValueForProperty(node, name, value);                                                    // 8292\n    } else {                                                                                                           // 8293\n      DOMPropertyOperations.deleteValueForProperty(node, name);                                                        // 8294\n    }                                                                                                                  // 8295\n  },                                                                                                                   // 8296\n                                                                                                                       // 8297\n  /**                                                                                                                  // 8298\n   * Updates a DOM node to remove a property. This should only be used to remove                                       // 8299\n   * DOM properties in `DOMProperty`.                                                                                  // 8300\n   *                                                                                                                   // 8301\n   * @param {string} id ID of the node to update.                                                                      // 8302\n   * @param {string} name A property name to remove, see `DOMProperty`.                                                // 8303\n   * @internal                                                                                                         // 8304\n   */                                                                                                                  // 8305\n  deletePropertyByID: function(id, name, value) {                                                                      // 8306\n    var node = ReactMount.getNode(id);                                                                                 // 8307\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 8308\n      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),                                                                   // 8309\n      'updatePropertyByID(...): %s',                                                                                   // 8310\n      INVALID_PROPERTY_ERRORS[name]                                                                                    // 8311\n    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));                                                     // 8312\n    DOMPropertyOperations.deleteValueForProperty(node, name, value);                                                   // 8313\n  },                                                                                                                   // 8314\n                                                                                                                       // 8315\n  /**                                                                                                                  // 8316\n   * Updates a DOM node with new style values. If a value is specified as '',                                          // 8317\n   * the corresponding style property will be unset.                                                                   // 8318\n   *                                                                                                                   // 8319\n   * @param {string} id ID of the node to update.                                                                      // 8320\n   * @param {object} styles Mapping from styles to values.                                                             // 8321\n   * @internal                                                                                                         // 8322\n   */                                                                                                                  // 8323\n  updateStylesByID: function(id, styles) {                                                                             // 8324\n    var node = ReactMount.getNode(id);                                                                                 // 8325\n    CSSPropertyOperations.setValueForStyles(node, styles);                                                             // 8326\n  },                                                                                                                   // 8327\n                                                                                                                       // 8328\n  /**                                                                                                                  // 8329\n   * Updates a DOM node's innerHTML.                                                                                   // 8330\n   *                                                                                                                   // 8331\n   * @param {string} id ID of the node to update.                                                                      // 8332\n   * @param {string} html An HTML string.                                                                              // 8333\n   * @internal                                                                                                         // 8334\n   */                                                                                                                  // 8335\n  updateInnerHTMLByID: function(id, html) {                                                                            // 8336\n    var node = ReactMount.getNode(id);                                                                                 // 8337\n    setInnerHTML(node, html);                                                                                          // 8338\n  },                                                                                                                   // 8339\n                                                                                                                       // 8340\n  /**                                                                                                                  // 8341\n   * Updates a DOM node's text content set by `props.content`.                                                         // 8342\n   *                                                                                                                   // 8343\n   * @param {string} id ID of the node to update.                                                                      // 8344\n   * @param {string} content Text content.                                                                             // 8345\n   * @internal                                                                                                         // 8346\n   */                                                                                                                  // 8347\n  updateTextContentByID: function(id, content) {                                                                       // 8348\n    var node = ReactMount.getNode(id);                                                                                 // 8349\n    DOMChildrenOperations.updateTextContent(node, content);                                                            // 8350\n  },                                                                                                                   // 8351\n                                                                                                                       // 8352\n  /**                                                                                                                  // 8353\n   * Replaces a DOM node that exists in the document with markup.                                                      // 8354\n   *                                                                                                                   // 8355\n   * @param {string} id ID of child to be replaced.                                                                    // 8356\n   * @param {string} markup Dangerous markup to inject in place of child.                                              // 8357\n   * @internal                                                                                                         // 8358\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}                                                                    // 8359\n   */                                                                                                                  // 8360\n  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {                                                         // 8361\n    var node = ReactMount.getNode(id);                                                                                 // 8362\n    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);                                              // 8363\n  },                                                                                                                   // 8364\n                                                                                                                       // 8365\n  /**                                                                                                                  // 8366\n   * Updates a component's children by processing a series of updates.                                                 // 8367\n   *                                                                                                                   // 8368\n   * @param {array<object>} updates List of update configurations.                                                     // 8369\n   * @param {array<string>} markup List of markup strings.                                                             // 8370\n   * @internal                                                                                                         // 8371\n   */                                                                                                                  // 8372\n  dangerouslyProcessChildrenUpdates: function(updates, markup) {                                                       // 8373\n    for (var i = 0; i < updates.length; i++) {                                                                         // 8374\n      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);                                                 // 8375\n    }                                                                                                                  // 8376\n    DOMChildrenOperations.processUpdates(updates, markup);                                                             // 8377\n  }                                                                                                                    // 8378\n};                                                                                                                     // 8379\n                                                                                                                       // 8380\nReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {                                               // 8381\n  updatePropertyByID: 'updatePropertyByID',                                                                            // 8382\n  deletePropertyByID: 'deletePropertyByID',                                                                            // 8383\n  updateStylesByID: 'updateStylesByID',                                                                                // 8384\n  updateInnerHTMLByID: 'updateInnerHTMLByID',                                                                          // 8385\n  updateTextContentByID: 'updateTextContentByID',                                                                      // 8386\n  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',                                        // 8387\n  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'                                               // 8388\n});                                                                                                                    // 8389\n                                                                                                                       // 8390\nmodule.exports = ReactDOMIDOperations;                                                                                 // 8391\n                                                                                                                       // 8392\n}).call(this,require('_process'))                                                                                      // 8393\n                                                                                                                       // 8394\n},{\"./CSSPropertyOperations\":\"react/lib/CSSPropertyOperations\",\"./DOMChildrenOperations\":\"react/lib/DOMChildrenOperations\",\"./DOMPropertyOperations\":\"react/lib/DOMPropertyOperations\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./invariant\":\"react/lib/invariant\",\"./setInnerHTML\":\"react/lib/setInnerHTML\",\"_process\":1}],\"react/lib/ReactDOMIframe\":[function(require,module,exports){\n/**                                                                                                                    // 8396\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8397\n * All rights reserved.                                                                                                // 8398\n *                                                                                                                     // 8399\n * This source code is licensed under the BSD-style license found in the                                               // 8400\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8401\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 8402\n *                                                                                                                     // 8403\n * @providesModule ReactDOMIframe                                                                                      // 8404\n */                                                                                                                    // 8405\n                                                                                                                       // 8406\n'use strict';                                                                                                          // 8407\n                                                                                                                       // 8408\nvar EventConstants = require(\"./EventConstants\");                                                                      // 8409\nvar LocalEventTrapMixin = require(\"./LocalEventTrapMixin\");                                                            // 8410\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");                                              // 8411\nvar ReactClass = require(\"./ReactClass\");                                                                              // 8412\nvar ReactElement = require(\"./ReactElement\");                                                                          // 8413\n                                                                                                                       // 8414\nvar iframe = ReactElement.createFactory('iframe');                                                                     // 8415\n                                                                                                                       // 8416\n/**                                                                                                                    // 8417\n * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to                                          // 8418\n * capture it on the <iframe> element itself. There are lots of hacks we could                                         // 8419\n * do to accomplish this, but the most reliable is to make <iframe> a composite                                        // 8420\n * component and use `componentDidMount` to attach the event handlers.                                                 // 8421\n */                                                                                                                    // 8422\nvar ReactDOMIframe = ReactClass.createClass({                                                                          // 8423\n  displayName: 'ReactDOMIframe',                                                                                       // 8424\n  tagName: 'IFRAME',                                                                                                   // 8425\n                                                                                                                       // 8426\n  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],                                                           // 8427\n                                                                                                                       // 8428\n  render: function() {                                                                                                 // 8429\n    return iframe(this.props);                                                                                         // 8430\n  },                                                                                                                   // 8431\n                                                                                                                       // 8432\n  componentDidMount: function() {                                                                                      // 8433\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');                                               // 8434\n  }                                                                                                                    // 8435\n});                                                                                                                    // 8436\n                                                                                                                       // 8437\nmodule.exports = ReactDOMIframe;                                                                                       // 8438\n                                                                                                                       // 8439\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./LocalEventTrapMixin\":\"react/lib/LocalEventTrapMixin\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\"}],\"react/lib/ReactDOMImg\":[function(require,module,exports){\n/**                                                                                                                    // 8441\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8442\n * All rights reserved.                                                                                                // 8443\n *                                                                                                                     // 8444\n * This source code is licensed under the BSD-style license found in the                                               // 8445\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8446\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 8447\n *                                                                                                                     // 8448\n * @providesModule ReactDOMImg                                                                                         // 8449\n */                                                                                                                    // 8450\n                                                                                                                       // 8451\n'use strict';                                                                                                          // 8452\n                                                                                                                       // 8453\nvar EventConstants = require(\"./EventConstants\");                                                                      // 8454\nvar LocalEventTrapMixin = require(\"./LocalEventTrapMixin\");                                                            // 8455\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");                                              // 8456\nvar ReactClass = require(\"./ReactClass\");                                                                              // 8457\nvar ReactElement = require(\"./ReactElement\");                                                                          // 8458\n                                                                                                                       // 8459\nvar img = ReactElement.createFactory('img');                                                                           // 8460\n                                                                                                                       // 8461\n/**                                                                                                                    // 8462\n * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to                                          // 8463\n * capture it on the <img> element itself. There are lots of hacks we could do                                         // 8464\n * to accomplish this, but the most reliable is to make <img> a composite                                              // 8465\n * component and use `componentDidMount` to attach the event handlers.                                                 // 8466\n */                                                                                                                    // 8467\nvar ReactDOMImg = ReactClass.createClass({                                                                             // 8468\n  displayName: 'ReactDOMImg',                                                                                          // 8469\n  tagName: 'IMG',                                                                                                      // 8470\n                                                                                                                       // 8471\n  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],                                                           // 8472\n                                                                                                                       // 8473\n  render: function() {                                                                                                 // 8474\n    return img(this.props);                                                                                            // 8475\n  },                                                                                                                   // 8476\n                                                                                                                       // 8477\n  componentDidMount: function() {                                                                                      // 8478\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');                                               // 8479\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');                                             // 8480\n  }                                                                                                                    // 8481\n});                                                                                                                    // 8482\n                                                                                                                       // 8483\nmodule.exports = ReactDOMImg;                                                                                          // 8484\n                                                                                                                       // 8485\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./LocalEventTrapMixin\":\"react/lib/LocalEventTrapMixin\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\"}],\"react/lib/ReactDOMInput\":[function(require,module,exports){\n(function (process){                                                                                                   // 8487\n/**                                                                                                                    // 8488\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8489\n * All rights reserved.                                                                                                // 8490\n *                                                                                                                     // 8491\n * This source code is licensed under the BSD-style license found in the                                               // 8492\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8493\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 8494\n *                                                                                                                     // 8495\n * @providesModule ReactDOMInput                                                                                       // 8496\n */                                                                                                                    // 8497\n                                                                                                                       // 8498\n'use strict';                                                                                                          // 8499\n                                                                                                                       // 8500\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");                                                                      // 8501\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");                                                        // 8502\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");                                                                  // 8503\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");                                              // 8504\nvar ReactClass = require(\"./ReactClass\");                                                                              // 8505\nvar ReactElement = require(\"./ReactElement\");                                                                          // 8506\nvar ReactMount = require(\"./ReactMount\");                                                                              // 8507\nvar ReactUpdates = require(\"./ReactUpdates\");                                                                          // 8508\n                                                                                                                       // 8509\nvar assign = require(\"./Object.assign\");                                                                               // 8510\nvar invariant = require(\"./invariant\");                                                                                // 8511\n                                                                                                                       // 8512\nvar input = ReactElement.createFactory('input');                                                                       // 8513\n                                                                                                                       // 8514\nvar instancesByReactID = {};                                                                                           // 8515\n                                                                                                                       // 8516\nfunction forceUpdateIfMounted() {                                                                                      // 8517\n  /*jshint validthis:true */                                                                                           // 8518\n  if (this.isMounted()) {                                                                                              // 8519\n    this.forceUpdate();                                                                                                // 8520\n  }                                                                                                                    // 8521\n}                                                                                                                      // 8522\n                                                                                                                       // 8523\n/**                                                                                                                    // 8524\n * Implements an <input> native component that allows setting these optional                                           // 8525\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.                                                    // 8526\n *                                                                                                                     // 8527\n * If `checked` or `value` are not supplied (or null/undefined), user actions                                          // 8528\n * that affect the checked state or value will trigger updates to the element.                                         // 8529\n *                                                                                                                     // 8530\n * If they are supplied (and not null/undefined), the rendered element will not                                        // 8531\n * trigger updates to the element. Instead, the props must change in order for                                         // 8532\n * the rendered element to be updated.                                                                                 // 8533\n *                                                                                                                     // 8534\n * The rendered element will be initialized as unchecked (or `defaultChecked`)                                         // 8535\n * with an empty value (or `defaultValue`).                                                                            // 8536\n *                                                                                                                     // 8537\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html                                             // 8538\n */                                                                                                                    // 8539\nvar ReactDOMInput = ReactClass.createClass({                                                                           // 8540\n  displayName: 'ReactDOMInput',                                                                                        // 8541\n  tagName: 'INPUT',                                                                                                    // 8542\n                                                                                                                       // 8543\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],                                        // 8544\n                                                                                                                       // 8545\n  getInitialState: function() {                                                                                        // 8546\n    var defaultValue = this.props.defaultValue;                                                                        // 8547\n    return {                                                                                                           // 8548\n      initialChecked: this.props.defaultChecked || false,                                                              // 8549\n      initialValue: defaultValue != null ? defaultValue : null                                                         // 8550\n    };                                                                                                                 // 8551\n  },                                                                                                                   // 8552\n                                                                                                                       // 8553\n  render: function() {                                                                                                 // 8554\n    // Clone `this.props` so we don't mutate the input.                                                                // 8555\n    var props = assign({}, this.props);                                                                                // 8556\n                                                                                                                       // 8557\n    props.defaultChecked = null;                                                                                       // 8558\n    props.defaultValue = null;                                                                                         // 8559\n                                                                                                                       // 8560\n    var value = LinkedValueUtils.getValue(this);                                                                       // 8561\n    props.value = value != null ? value : this.state.initialValue;                                                     // 8562\n                                                                                                                       // 8563\n    var checked = LinkedValueUtils.getChecked(this);                                                                   // 8564\n    props.checked = checked != null ? checked : this.state.initialChecked;                                             // 8565\n                                                                                                                       // 8566\n    props.onChange = this._handleChange;                                                                               // 8567\n                                                                                                                       // 8568\n    return input(props, this.props.children);                                                                          // 8569\n  },                                                                                                                   // 8570\n                                                                                                                       // 8571\n  componentDidMount: function() {                                                                                      // 8572\n    var id = ReactMount.getID(this.getDOMNode());                                                                      // 8573\n    instancesByReactID[id] = this;                                                                                     // 8574\n  },                                                                                                                   // 8575\n                                                                                                                       // 8576\n  componentWillUnmount: function() {                                                                                   // 8577\n    var rootNode = this.getDOMNode();                                                                                  // 8578\n    var id = ReactMount.getID(rootNode);                                                                               // 8579\n    delete instancesByReactID[id];                                                                                     // 8580\n  },                                                                                                                   // 8581\n                                                                                                                       // 8582\n  componentDidUpdate: function(prevProps, prevState, prevContext) {                                                    // 8583\n    var rootNode = this.getDOMNode();                                                                                  // 8584\n    if (this.props.checked != null) {                                                                                  // 8585\n      DOMPropertyOperations.setValueForProperty(                                                                       // 8586\n        rootNode,                                                                                                      // 8587\n        'checked',                                                                                                     // 8588\n        this.props.checked || false                                                                                    // 8589\n      );                                                                                                               // 8590\n    }                                                                                                                  // 8591\n                                                                                                                       // 8592\n    var value = LinkedValueUtils.getValue(this);                                                                       // 8593\n    if (value != null) {                                                                                               // 8594\n      // Cast `value` to a string to ensure the value is set correctly. While                                          // 8595\n      // browsers typically do this as necessary, jsdom doesn't.                                                       // 8596\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);                                        // 8597\n    }                                                                                                                  // 8598\n  },                                                                                                                   // 8599\n                                                                                                                       // 8600\n  _handleChange: function(event) {                                                                                     // 8601\n    var returnValue;                                                                                                   // 8602\n    var onChange = LinkedValueUtils.getOnChange(this);                                                                 // 8603\n    if (onChange) {                                                                                                    // 8604\n      returnValue = onChange.call(this, event);                                                                        // 8605\n    }                                                                                                                  // 8606\n    // Here we use asap to wait until all updates have propagated, which                                               // 8607\n    // is important when using controlled components within layers:                                                    // 8608\n    // https://github.com/facebook/react/issues/1698                                                                   // 8609\n    ReactUpdates.asap(forceUpdateIfMounted, this);                                                                     // 8610\n                                                                                                                       // 8611\n    var name = this.props.name;                                                                                        // 8612\n    if (this.props.type === 'radio' && name != null) {                                                                 // 8613\n      var rootNode = this.getDOMNode();                                                                                // 8614\n      var queryRoot = rootNode;                                                                                        // 8615\n                                                                                                                       // 8616\n      while (queryRoot.parentNode) {                                                                                   // 8617\n        queryRoot = queryRoot.parentNode;                                                                              // 8618\n      }                                                                                                                // 8619\n                                                                                                                       // 8620\n      // If `rootNode.form` was non-null, then we could try `form.elements`,                                           // 8621\n      // but that sometimes behaves strangely in IE8. We could also try using                                          // 8622\n      // `form.getElementsByName`, but that will only return direct children                                           // 8623\n      // and won't include inputs that use the HTML5 `form=` attribute. Since                                          // 8624\n      // the input might not even be in a form, let's just use the global                                              // 8625\n      // `querySelectorAll` to ensure we don't miss anything.                                                          // 8626\n      var group = queryRoot.querySelectorAll(                                                                          // 8627\n        'input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');                                                // 8628\n                                                                                                                       // 8629\n      for (var i = 0, groupLen = group.length; i < groupLen; i++) {                                                    // 8630\n        var otherNode = group[i];                                                                                      // 8631\n        if (otherNode === rootNode ||                                                                                  // 8632\n            otherNode.form !== rootNode.form) {                                                                        // 8633\n          continue;                                                                                                    // 8634\n        }                                                                                                              // 8635\n        var otherID = ReactMount.getID(otherNode);                                                                     // 8636\n        (\"production\" !== process.env.NODE_ENV ? invariant(                                                            // 8637\n          otherID,                                                                                                     // 8638\n          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +                                         // 8639\n          'same `name` is not supported.'                                                                              // 8640\n        ) : invariant(otherID));                                                                                       // 8641\n        var otherInstance = instancesByReactID[otherID];                                                               // 8642\n        (\"production\" !== process.env.NODE_ENV ? invariant(                                                            // 8643\n          otherInstance,                                                                                               // 8644\n          'ReactDOMInput: Unknown radio button ID %s.',                                                                // 8645\n          otherID                                                                                                      // 8646\n        ) : invariant(otherInstance));                                                                                 // 8647\n        // If this is a controlled radio button group, forcing the input that                                          // 8648\n        // was previously checked to update will cause it to be come re-checked                                        // 8649\n        // as appropriate.                                                                                             // 8650\n        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);                                                        // 8651\n      }                                                                                                                // 8652\n    }                                                                                                                  // 8653\n                                                                                                                       // 8654\n    return returnValue;                                                                                                // 8655\n  }                                                                                                                    // 8656\n                                                                                                                       // 8657\n});                                                                                                                    // 8658\n                                                                                                                       // 8659\nmodule.exports = ReactDOMInput;                                                                                        // 8660\n                                                                                                                       // 8661\n}).call(this,require('_process'))                                                                                      // 8662\n                                                                                                                       // 8663\n},{\"./AutoFocusMixin\":\"react/lib/AutoFocusMixin\",\"./DOMPropertyOperations\":\"react/lib/DOMPropertyOperations\",\"./LinkedValueUtils\":\"react/lib/LinkedValueUtils\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactDOMOption\":[function(require,module,exports){\n(function (process){                                                                                                   // 8665\n/**                                                                                                                    // 8666\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8667\n * All rights reserved.                                                                                                // 8668\n *                                                                                                                     // 8669\n * This source code is licensed under the BSD-style license found in the                                               // 8670\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8671\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 8672\n *                                                                                                                     // 8673\n * @providesModule ReactDOMOption                                                                                      // 8674\n */                                                                                                                    // 8675\n                                                                                                                       // 8676\n'use strict';                                                                                                          // 8677\n                                                                                                                       // 8678\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");                                              // 8679\nvar ReactClass = require(\"./ReactClass\");                                                                              // 8680\nvar ReactElement = require(\"./ReactElement\");                                                                          // 8681\n                                                                                                                       // 8682\nvar warning = require(\"./warning\");                                                                                    // 8683\n                                                                                                                       // 8684\nvar option = ReactElement.createFactory('option');                                                                     // 8685\n                                                                                                                       // 8686\n/**                                                                                                                    // 8687\n * Implements an <option> native component that warns when `selected` is set.                                          // 8688\n */                                                                                                                    // 8689\nvar ReactDOMOption = ReactClass.createClass({                                                                          // 8690\n  displayName: 'ReactDOMOption',                                                                                       // 8691\n  tagName: 'OPTION',                                                                                                   // 8692\n                                                                                                                       // 8693\n  mixins: [ReactBrowserComponentMixin],                                                                                // 8694\n                                                                                                                       // 8695\n  componentWillMount: function() {                                                                                     // 8696\n    // TODO (yungsters): Remove support for `selected` in <option>.                                                    // 8697\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 8698\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 8699\n        this.props.selected == null,                                                                                   // 8700\n        'Use the `defaultValue` or `value` props on <select> instead of ' +                                            // 8701\n        'setting `selected` on <option>.'                                                                              // 8702\n      ) : null);                                                                                                       // 8703\n    }                                                                                                                  // 8704\n  },                                                                                                                   // 8705\n                                                                                                                       // 8706\n  render: function() {                                                                                                 // 8707\n    return option(this.props, this.props.children);                                                                    // 8708\n  }                                                                                                                    // 8709\n                                                                                                                       // 8710\n});                                                                                                                    // 8711\n                                                                                                                       // 8712\nmodule.exports = ReactDOMOption;                                                                                       // 8713\n                                                                                                                       // 8714\n}).call(this,require('_process'))                                                                                      // 8715\n                                                                                                                       // 8716\n},{\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactDOMSelection\":[function(require,module,exports){\n/**                                                                                                                    // 8718\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8719\n * All rights reserved.                                                                                                // 8720\n *                                                                                                                     // 8721\n * This source code is licensed under the BSD-style license found in the                                               // 8722\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8723\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 8724\n *                                                                                                                     // 8725\n * @providesModule ReactDOMSelection                                                                                   // 8726\n */                                                                                                                    // 8727\n                                                                                                                       // 8728\n'use strict';                                                                                                          // 8729\n                                                                                                                       // 8730\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 8731\n                                                                                                                       // 8732\nvar getNodeForCharacterOffset = require(\"./getNodeForCharacterOffset\");                                                // 8733\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");                                                      // 8734\n                                                                                                                       // 8735\n/**                                                                                                                    // 8736\n * While `isCollapsed` is available on the Selection object and `collapsed`                                            // 8737\n * is available on the Range object, IE11 sometimes gets them wrong.                                                   // 8738\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.                                         // 8739\n */                                                                                                                    // 8740\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {                                               // 8741\n  return anchorNode === focusNode && anchorOffset === focusOffset;                                                     // 8742\n}                                                                                                                      // 8743\n                                                                                                                       // 8744\n/**                                                                                                                    // 8745\n * Get the appropriate anchor and focus node/offset pairs for IE.                                                      // 8746\n *                                                                                                                     // 8747\n * The catch here is that IE's selection API doesn't provide information                                               // 8748\n * about whether the selection is forward or backward, so we have to                                                   // 8749\n * behave as though it's always forward.                                                                               // 8750\n *                                                                                                                     // 8751\n * IE text differs from modern selection in that it behaves as though                                                  // 8752\n * block elements end with a new line. This means character offsets will                                               // 8753\n * differ between the two APIs.                                                                                        // 8754\n *                                                                                                                     // 8755\n * @param {DOMElement} node                                                                                            // 8756\n * @return {object}                                                                                                    // 8757\n */                                                                                                                    // 8758\nfunction getIEOffsets(node) {                                                                                          // 8759\n  var selection = document.selection;                                                                                  // 8760\n  var selectedRange = selection.createRange();                                                                         // 8761\n  var selectedLength = selectedRange.text.length;                                                                      // 8762\n                                                                                                                       // 8763\n  // Duplicate selection so we can move range without breaking user selection.                                         // 8764\n  var fromStart = selectedRange.duplicate();                                                                           // 8765\n  fromStart.moveToElementText(node);                                                                                   // 8766\n  fromStart.setEndPoint('EndToStart', selectedRange);                                                                  // 8767\n                                                                                                                       // 8768\n  var startOffset = fromStart.text.length;                                                                             // 8769\n  var endOffset = startOffset + selectedLength;                                                                        // 8770\n                                                                                                                       // 8771\n  return {                                                                                                             // 8772\n    start: startOffset,                                                                                                // 8773\n    end: endOffset                                                                                                     // 8774\n  };                                                                                                                   // 8775\n}                                                                                                                      // 8776\n                                                                                                                       // 8777\n/**                                                                                                                    // 8778\n * @param {DOMElement} node                                                                                            // 8779\n * @return {?object}                                                                                                   // 8780\n */                                                                                                                    // 8781\nfunction getModernOffsets(node) {                                                                                      // 8782\n  var selection = window.getSelection && window.getSelection();                                                        // 8783\n                                                                                                                       // 8784\n  if (!selection || selection.rangeCount === 0) {                                                                      // 8785\n    return null;                                                                                                       // 8786\n  }                                                                                                                    // 8787\n                                                                                                                       // 8788\n  var anchorNode = selection.anchorNode;                                                                               // 8789\n  var anchorOffset = selection.anchorOffset;                                                                           // 8790\n  var focusNode = selection.focusNode;                                                                                 // 8791\n  var focusOffset = selection.focusOffset;                                                                             // 8792\n                                                                                                                       // 8793\n  var currentRange = selection.getRangeAt(0);                                                                          // 8794\n                                                                                                                       // 8795\n  // If the node and offset values are the same, the selection is collapsed.                                           // 8796\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets                                              // 8797\n  // this value wrong.                                                                                                 // 8798\n  var isSelectionCollapsed = isCollapsed(                                                                              // 8799\n    selection.anchorNode,                                                                                              // 8800\n    selection.anchorOffset,                                                                                            // 8801\n    selection.focusNode,                                                                                               // 8802\n    selection.focusOffset                                                                                              // 8803\n  );                                                                                                                   // 8804\n                                                                                                                       // 8805\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;                                         // 8806\n                                                                                                                       // 8807\n  var tempRange = currentRange.cloneRange();                                                                           // 8808\n  tempRange.selectNodeContents(node);                                                                                  // 8809\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);                                             // 8810\n                                                                                                                       // 8811\n  var isTempRangeCollapsed = isCollapsed(                                                                              // 8812\n    tempRange.startContainer,                                                                                          // 8813\n    tempRange.startOffset,                                                                                             // 8814\n    tempRange.endContainer,                                                                                            // 8815\n    tempRange.endOffset                                                                                                // 8816\n  );                                                                                                                   // 8817\n                                                                                                                       // 8818\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;                                                  // 8819\n  var end = start + rangeLength;                                                                                       // 8820\n                                                                                                                       // 8821\n  // Detect whether the selection is backward.                                                                         // 8822\n  var detectionRange = document.createRange();                                                                         // 8823\n  detectionRange.setStart(anchorNode, anchorOffset);                                                                   // 8824\n  detectionRange.setEnd(focusNode, focusOffset);                                                                       // 8825\n  var isBackward = detectionRange.collapsed;                                                                           // 8826\n                                                                                                                       // 8827\n  return {                                                                                                             // 8828\n    start: isBackward ? end : start,                                                                                   // 8829\n    end: isBackward ? start : end                                                                                      // 8830\n  };                                                                                                                   // 8831\n}                                                                                                                      // 8832\n                                                                                                                       // 8833\n/**                                                                                                                    // 8834\n * @param {DOMElement|DOMTextNode} node                                                                                // 8835\n * @param {object} offsets                                                                                             // 8836\n */                                                                                                                    // 8837\nfunction setIEOffsets(node, offsets) {                                                                                 // 8838\n  var range = document.selection.createRange().duplicate();                                                            // 8839\n  var start, end;                                                                                                      // 8840\n                                                                                                                       // 8841\n  if (typeof offsets.end === 'undefined') {                                                                            // 8842\n    start = offsets.start;                                                                                             // 8843\n    end = start;                                                                                                       // 8844\n  } else if (offsets.start > offsets.end) {                                                                            // 8845\n    start = offsets.end;                                                                                               // 8846\n    end = offsets.start;                                                                                               // 8847\n  } else {                                                                                                             // 8848\n    start = offsets.start;                                                                                             // 8849\n    end = offsets.end;                                                                                                 // 8850\n  }                                                                                                                    // 8851\n                                                                                                                       // 8852\n  range.moveToElementText(node);                                                                                       // 8853\n  range.moveStart('character', start);                                                                                 // 8854\n  range.setEndPoint('EndToStart', range);                                                                              // 8855\n  range.moveEnd('character', end - start);                                                                             // 8856\n  range.select();                                                                                                      // 8857\n}                                                                                                                      // 8858\n                                                                                                                       // 8859\n/**                                                                                                                    // 8860\n * In modern non-IE browsers, we can support both forward and backward                                                 // 8861\n * selections.                                                                                                         // 8862\n *                                                                                                                     // 8863\n * Note: IE10+ supports the Selection object, but it does not support                                                  // 8864\n * the `extend` method, which means that even in modern IE, it's not possible                                          // 8865\n * to programatically create a backward selection. Thus, for all IE                                                    // 8866\n * versions, we use the old IE API to create our selections.                                                           // 8867\n *                                                                                                                     // 8868\n * @param {DOMElement|DOMTextNode} node                                                                                // 8869\n * @param {object} offsets                                                                                             // 8870\n */                                                                                                                    // 8871\nfunction setModernOffsets(node, offsets) {                                                                             // 8872\n  if (!window.getSelection) {                                                                                          // 8873\n    return;                                                                                                            // 8874\n  }                                                                                                                    // 8875\n                                                                                                                       // 8876\n  var selection = window.getSelection();                                                                               // 8877\n  var length = node[getTextContentAccessor()].length;                                                                  // 8878\n  var start = Math.min(offsets.start, length);                                                                         // 8879\n  var end = typeof offsets.end === 'undefined' ?                                                                       // 8880\n            start : Math.min(offsets.end, length);                                                                     // 8881\n                                                                                                                       // 8882\n  // IE 11 uses modern selection, but doesn't support the extend method.                                               // 8883\n  // Flip backward selections, so we can set with a single range.                                                      // 8884\n  if (!selection.extend && start > end) {                                                                              // 8885\n    var temp = end;                                                                                                    // 8886\n    end = start;                                                                                                       // 8887\n    start = temp;                                                                                                      // 8888\n  }                                                                                                                    // 8889\n                                                                                                                       // 8890\n  var startMarker = getNodeForCharacterOffset(node, start);                                                            // 8891\n  var endMarker = getNodeForCharacterOffset(node, end);                                                                // 8892\n                                                                                                                       // 8893\n  if (startMarker && endMarker) {                                                                                      // 8894\n    var range = document.createRange();                                                                                // 8895\n    range.setStart(startMarker.node, startMarker.offset);                                                              // 8896\n    selection.removeAllRanges();                                                                                       // 8897\n                                                                                                                       // 8898\n    if (start > end) {                                                                                                 // 8899\n      selection.addRange(range);                                                                                       // 8900\n      selection.extend(endMarker.node, endMarker.offset);                                                              // 8901\n    } else {                                                                                                           // 8902\n      range.setEnd(endMarker.node, endMarker.offset);                                                                  // 8903\n      selection.addRange(range);                                                                                       // 8904\n    }                                                                                                                  // 8905\n  }                                                                                                                    // 8906\n}                                                                                                                      // 8907\n                                                                                                                       // 8908\nvar useIEOffsets = (                                                                                                   // 8909\n  ExecutionEnvironment.canUseDOM &&                                                                                    // 8910\n  'selection' in document &&                                                                                           // 8911\n  !('getSelection' in window)                                                                                          // 8912\n);                                                                                                                     // 8913\n                                                                                                                       // 8914\nvar ReactDOMSelection = {                                                                                              // 8915\n  /**                                                                                                                  // 8916\n   * @param {DOMElement} node                                                                                          // 8917\n   */                                                                                                                  // 8918\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,                                                          // 8919\n                                                                                                                       // 8920\n  /**                                                                                                                  // 8921\n   * @param {DOMElement|DOMTextNode} node                                                                              // 8922\n   * @param {object} offsets                                                                                           // 8923\n   */                                                                                                                  // 8924\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets                                                           // 8925\n};                                                                                                                     // 8926\n                                                                                                                       // 8927\nmodule.exports = ReactDOMSelection;                                                                                    // 8928\n                                                                                                                       // 8929\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./getNodeForCharacterOffset\":\"react/lib/getNodeForCharacterOffset\",\"./getTextContentAccessor\":\"react/lib/getTextContentAccessor\"}],\"react/lib/ReactDOMSelect\":[function(require,module,exports){\n/**                                                                                                                    // 8931\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 8932\n * All rights reserved.                                                                                                // 8933\n *                                                                                                                     // 8934\n * This source code is licensed under the BSD-style license found in the                                               // 8935\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 8936\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 8937\n *                                                                                                                     // 8938\n * @providesModule ReactDOMSelect                                                                                      // 8939\n */                                                                                                                    // 8940\n                                                                                                                       // 8941\n'use strict';                                                                                                          // 8942\n                                                                                                                       // 8943\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");                                                                      // 8944\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");                                                                  // 8945\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");                                              // 8946\nvar ReactClass = require(\"./ReactClass\");                                                                              // 8947\nvar ReactElement = require(\"./ReactElement\");                                                                          // 8948\nvar ReactUpdates = require(\"./ReactUpdates\");                                                                          // 8949\n                                                                                                                       // 8950\nvar assign = require(\"./Object.assign\");                                                                               // 8951\n                                                                                                                       // 8952\nvar select = ReactElement.createFactory('select');                                                                     // 8953\n                                                                                                                       // 8954\nfunction updateOptionsIfPendingUpdateAndMounted() {                                                                    // 8955\n  /*jshint validthis:true */                                                                                           // 8956\n  if (this._pendingUpdate) {                                                                                           // 8957\n    this._pendingUpdate = false;                                                                                       // 8958\n    var value = LinkedValueUtils.getValue(this);                                                                       // 8959\n    if (value != null && this.isMounted()) {                                                                           // 8960\n      updateOptions(this, value);                                                                                      // 8961\n    }                                                                                                                  // 8962\n  }                                                                                                                    // 8963\n}                                                                                                                      // 8964\n                                                                                                                       // 8965\n/**                                                                                                                    // 8966\n * Validation function for `value` and `defaultValue`.                                                                 // 8967\n * @private                                                                                                            // 8968\n */                                                                                                                    // 8969\nfunction selectValueType(props, propName, componentName) {                                                             // 8970\n  if (props[propName] == null) {                                                                                       // 8971\n    return null;                                                                                                       // 8972\n  }                                                                                                                    // 8973\n  if (props.multiple) {                                                                                                // 8974\n    if (!Array.isArray(props[propName])) {                                                                             // 8975\n      return new Error(                                                                                                // 8976\n        (\"The `\" + propName + \"` prop supplied to <select> must be an array if \") +                                    // 8977\n        (\"`multiple` is true.\")                                                                                        // 8978\n      );                                                                                                               // 8979\n    }                                                                                                                  // 8980\n  } else {                                                                                                             // 8981\n    if (Array.isArray(props[propName])) {                                                                              // 8982\n      return new Error(                                                                                                // 8983\n        (\"The `\" + propName + \"` prop supplied to <select> must be a scalar \") +                                       // 8984\n        (\"value if `multiple` is false.\")                                                                              // 8985\n      );                                                                                                               // 8986\n    }                                                                                                                  // 8987\n  }                                                                                                                    // 8988\n}                                                                                                                      // 8989\n                                                                                                                       // 8990\n/**                                                                                                                    // 8991\n * @param {ReactComponent} component Instance of ReactDOMSelect                                                        // 8992\n * @param {*} propValue A stringable (with `multiple`, a list of stringables).                                         // 8993\n * @private                                                                                                            // 8994\n */                                                                                                                    // 8995\nfunction updateOptions(component, propValue) {                                                                         // 8996\n  var selectedValue, i, l;                                                                                             // 8997\n  var options = component.getDOMNode().options;                                                                        // 8998\n                                                                                                                       // 8999\n  if (component.props.multiple) {                                                                                      // 9000\n    selectedValue = {};                                                                                                // 9001\n    for (i = 0, l = propValue.length; i < l; i++) {                                                                    // 9002\n      selectedValue['' + propValue[i]] = true;                                                                         // 9003\n    }                                                                                                                  // 9004\n    for (i = 0, l = options.length; i < l; i++) {                                                                      // 9005\n      var selected = selectedValue.hasOwnProperty(options[i].value);                                                   // 9006\n      if (options[i].selected !== selected) {                                                                          // 9007\n        options[i].selected = selected;                                                                                // 9008\n      }                                                                                                                // 9009\n    }                                                                                                                  // 9010\n  } else {                                                                                                             // 9011\n    // Do not set `select.value` as exact behavior isn't consistent across all                                         // 9012\n    // browsers for all cases.                                                                                         // 9013\n    selectedValue = '' + propValue;                                                                                    // 9014\n    for (i = 0, l = options.length; i < l; i++) {                                                                      // 9015\n      if (options[i].value === selectedValue) {                                                                        // 9016\n        options[i].selected = true;                                                                                    // 9017\n        return;                                                                                                        // 9018\n      }                                                                                                                // 9019\n    }                                                                                                                  // 9020\n    if (options.length) {                                                                                              // 9021\n      options[0].selected = true;                                                                                      // 9022\n    }                                                                                                                  // 9023\n  }                                                                                                                    // 9024\n}                                                                                                                      // 9025\n                                                                                                                       // 9026\n/**                                                                                                                    // 9027\n * Implements a <select> native component that allows optionally setting the                                           // 9028\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a                                        // 9029\n * stringable. If `multiple` is true, the prop must be an array of stringables.                                        // 9030\n *                                                                                                                     // 9031\n * If `value` is not supplied (or null/undefined), user actions that change the                                        // 9032\n * selected option will trigger updates to the rendered options.                                                       // 9033\n *                                                                                                                     // 9034\n * If it is supplied (and not null/undefined), the rendered options will not                                           // 9035\n * update in response to user actions. Instead, the `value` prop must change in                                        // 9036\n * order for the rendered options to update.                                                                           // 9037\n *                                                                                                                     // 9038\n * If `defaultValue` is provided, any options with the supplied values will be                                         // 9039\n * selected.                                                                                                           // 9040\n */                                                                                                                    // 9041\nvar ReactDOMSelect = ReactClass.createClass({                                                                          // 9042\n  displayName: 'ReactDOMSelect',                                                                                       // 9043\n  tagName: 'SELECT',                                                                                                   // 9044\n                                                                                                                       // 9045\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],                                        // 9046\n                                                                                                                       // 9047\n  propTypes: {                                                                                                         // 9048\n    defaultValue: selectValueType,                                                                                     // 9049\n    value: selectValueType                                                                                             // 9050\n  },                                                                                                                   // 9051\n                                                                                                                       // 9052\n  render: function() {                                                                                                 // 9053\n    // Clone `this.props` so we don't mutate the input.                                                                // 9054\n    var props = assign({}, this.props);                                                                                // 9055\n                                                                                                                       // 9056\n    props.onChange = this._handleChange;                                                                               // 9057\n    props.value = null;                                                                                                // 9058\n                                                                                                                       // 9059\n    return select(props, this.props.children);                                                                         // 9060\n  },                                                                                                                   // 9061\n                                                                                                                       // 9062\n  componentWillMount: function() {                                                                                     // 9063\n    this._pendingUpdate = false;                                                                                       // 9064\n  },                                                                                                                   // 9065\n                                                                                                                       // 9066\n  componentDidMount: function() {                                                                                      // 9067\n    var value = LinkedValueUtils.getValue(this);                                                                       // 9068\n    if (value != null) {                                                                                               // 9069\n      updateOptions(this, value);                                                                                      // 9070\n    } else if (this.props.defaultValue != null) {                                                                      // 9071\n      updateOptions(this, this.props.defaultValue);                                                                    // 9072\n    }                                                                                                                  // 9073\n  },                                                                                                                   // 9074\n                                                                                                                       // 9075\n  componentDidUpdate: function(prevProps) {                                                                            // 9076\n    var value = LinkedValueUtils.getValue(this);                                                                       // 9077\n    if (value != null) {                                                                                               // 9078\n      this._pendingUpdate = false;                                                                                     // 9079\n      updateOptions(this, value);                                                                                      // 9080\n    } else if (!prevProps.multiple !== !this.props.multiple) {                                                         // 9081\n      // For simplicity, reapply `defaultValue` if `multiple` is toggled.                                              // 9082\n      if (this.props.defaultValue != null) {                                                                           // 9083\n        updateOptions(this, this.props.defaultValue);                                                                  // 9084\n      } else {                                                                                                         // 9085\n        // Revert the select back to its default unselected state.                                                     // 9086\n        updateOptions(this, this.props.multiple ? [] : '');                                                            // 9087\n      }                                                                                                                // 9088\n    }                                                                                                                  // 9089\n  },                                                                                                                   // 9090\n                                                                                                                       // 9091\n  _handleChange: function(event) {                                                                                     // 9092\n    var returnValue;                                                                                                   // 9093\n    var onChange = LinkedValueUtils.getOnChange(this);                                                                 // 9094\n    if (onChange) {                                                                                                    // 9095\n      returnValue = onChange.call(this, event);                                                                        // 9096\n    }                                                                                                                  // 9097\n                                                                                                                       // 9098\n    this._pendingUpdate = true;                                                                                        // 9099\n    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);                                                   // 9100\n    return returnValue;                                                                                                // 9101\n  }                                                                                                                    // 9102\n                                                                                                                       // 9103\n});                                                                                                                    // 9104\n                                                                                                                       // 9105\nmodule.exports = ReactDOMSelect;                                                                                       // 9106\n                                                                                                                       // 9107\n},{\"./AutoFocusMixin\":\"react/lib/AutoFocusMixin\",\"./LinkedValueUtils\":\"react/lib/LinkedValueUtils\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactUpdates\":\"react/lib/ReactUpdates\"}],\"react/lib/ReactDOMTextComponent\":[function(require,module,exports){\n/**                                                                                                                    // 9109\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9110\n * All rights reserved.                                                                                                // 9111\n *                                                                                                                     // 9112\n * This source code is licensed under the BSD-style license found in the                                               // 9113\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 9114\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9115\n *                                                                                                                     // 9116\n * @providesModule ReactDOMTextComponent                                                                               // 9117\n * @typechecks static-only                                                                                             // 9118\n */                                                                                                                    // 9119\n                                                                                                                       // 9120\n'use strict';                                                                                                          // 9121\n                                                                                                                       // 9122\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");                                                        // 9123\nvar ReactComponentBrowserEnvironment =                                                                                 // 9124\n  require(\"./ReactComponentBrowserEnvironment\");                                                                       // 9125\nvar ReactDOMComponent = require(\"./ReactDOMComponent\");                                                                // 9126\n                                                                                                                       // 9127\nvar assign = require(\"./Object.assign\");                                                                               // 9128\nvar escapeTextContentForBrowser = require(\"./escapeTextContentForBrowser\");                                            // 9129\n                                                                                                                       // 9130\n/**                                                                                                                    // 9131\n * Text nodes violate a couple assumptions that React makes about components:                                          // 9132\n *                                                                                                                     // 9133\n *  - When mounting text into the DOM, adjacent text nodes are merged.                                                 // 9134\n *  - Text nodes cannot be assigned a React root ID.                                                                   // 9135\n *                                                                                                                     // 9136\n * This component is used to wrap strings in elements so that they can undergo                                         // 9137\n * the same reconciliation that is applied to elements.                                                                // 9138\n *                                                                                                                     // 9139\n * TODO: Investigate representing React components in the DOM with text nodes.                                         // 9140\n *                                                                                                                     // 9141\n * @class ReactDOMTextComponent                                                                                        // 9142\n * @extends ReactComponent                                                                                             // 9143\n * @internal                                                                                                           // 9144\n */                                                                                                                    // 9145\nvar ReactDOMTextComponent = function(props) {                                                                          // 9146\n  // This constructor and its argument is currently used by mocks.                                                     // 9147\n};                                                                                                                     // 9148\n                                                                                                                       // 9149\nassign(ReactDOMTextComponent.prototype, {                                                                              // 9150\n                                                                                                                       // 9151\n  /**                                                                                                                  // 9152\n   * @param {ReactText} text                                                                                           // 9153\n   * @internal                                                                                                         // 9154\n   */                                                                                                                  // 9155\n  construct: function(text) {                                                                                          // 9156\n    // TODO: This is really a ReactText (ReactNode), not a ReactElement                                                // 9157\n    this._currentElement = text;                                                                                       // 9158\n    this._stringText = '' + text;                                                                                      // 9159\n                                                                                                                       // 9160\n    // Properties                                                                                                      // 9161\n    this._rootNodeID = null;                                                                                           // 9162\n    this._mountIndex = 0;                                                                                              // 9163\n  },                                                                                                                   // 9164\n                                                                                                                       // 9165\n  /**                                                                                                                  // 9166\n   * Creates the markup for this text node. This node is not intended to have                                          // 9167\n   * any features besides containing text content.                                                                     // 9168\n   *                                                                                                                   // 9169\n   * @param {string} rootID DOM ID of the root node.                                                                   // 9170\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 9171\n   * @return {string} Markup for this text node.                                                                       // 9172\n   * @internal                                                                                                         // 9173\n   */                                                                                                                  // 9174\n  mountComponent: function(rootID, transaction, context) {                                                             // 9175\n    this._rootNodeID = rootID;                                                                                         // 9176\n    var escapedText = escapeTextContentForBrowser(this._stringText);                                                   // 9177\n                                                                                                                       // 9178\n    if (transaction.renderToStaticMarkup) {                                                                            // 9179\n      // Normally we'd wrap this in a `span` for the reasons stated above, but                                         // 9180\n      // since this is a situation where React won't take over (static pages),                                         // 9181\n      // we can simply return the text as it is.                                                                       // 9182\n      return escapedText;                                                                                              // 9183\n    }                                                                                                                  // 9184\n                                                                                                                       // 9185\n    return (                                                                                                           // 9186\n      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +                                               // 9187\n        escapedText +                                                                                                  // 9188\n      '</span>'                                                                                                        // 9189\n    );                                                                                                                 // 9190\n  },                                                                                                                   // 9191\n                                                                                                                       // 9192\n  /**                                                                                                                  // 9193\n   * Updates this component by updating the text content.                                                              // 9194\n   *                                                                                                                   // 9195\n   * @param {ReactText} nextText The next text content                                                                 // 9196\n   * @param {ReactReconcileTransaction} transaction                                                                    // 9197\n   * @internal                                                                                                         // 9198\n   */                                                                                                                  // 9199\n  receiveComponent: function(nextText, transaction) {                                                                  // 9200\n    if (nextText !== this._currentElement) {                                                                           // 9201\n      this._currentElement = nextText;                                                                                 // 9202\n      var nextStringText = '' + nextText;                                                                              // 9203\n      if (nextStringText !== this._stringText) {                                                                       // 9204\n        // TODO: Save this as pending props and use performUpdateIfNecessary                                           // 9205\n        // and/or updateComponent to do the actual update for consistency with                                         // 9206\n        // other component types?                                                                                      // 9207\n        this._stringText = nextStringText;                                                                             // 9208\n        ReactDOMComponent.BackendIDOperations.updateTextContentByID(                                                   // 9209\n          this._rootNodeID,                                                                                            // 9210\n          nextStringText                                                                                               // 9211\n        );                                                                                                             // 9212\n      }                                                                                                                // 9213\n    }                                                                                                                  // 9214\n  },                                                                                                                   // 9215\n                                                                                                                       // 9216\n  unmountComponent: function() {                                                                                       // 9217\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);                                       // 9218\n  }                                                                                                                    // 9219\n                                                                                                                       // 9220\n});                                                                                                                    // 9221\n                                                                                                                       // 9222\nmodule.exports = ReactDOMTextComponent;                                                                                // 9223\n                                                                                                                       // 9224\n},{\"./DOMPropertyOperations\":\"react/lib/DOMPropertyOperations\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactComponentBrowserEnvironment\":\"react/lib/ReactComponentBrowserEnvironment\",\"./ReactDOMComponent\":\"react/lib/ReactDOMComponent\",\"./escapeTextContentForBrowser\":\"react/lib/escapeTextContentForBrowser\"}],\"react/lib/ReactDOMTextarea\":[function(require,module,exports){\n(function (process){                                                                                                   // 9226\n/**                                                                                                                    // 9227\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9228\n * All rights reserved.                                                                                                // 9229\n *                                                                                                                     // 9230\n * This source code is licensed under the BSD-style license found in the                                               // 9231\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 9232\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9233\n *                                                                                                                     // 9234\n * @providesModule ReactDOMTextarea                                                                                    // 9235\n */                                                                                                                    // 9236\n                                                                                                                       // 9237\n'use strict';                                                                                                          // 9238\n                                                                                                                       // 9239\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");                                                                      // 9240\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");                                                        // 9241\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");                                                                  // 9242\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");                                              // 9243\nvar ReactClass = require(\"./ReactClass\");                                                                              // 9244\nvar ReactElement = require(\"./ReactElement\");                                                                          // 9245\nvar ReactUpdates = require(\"./ReactUpdates\");                                                                          // 9246\n                                                                                                                       // 9247\nvar assign = require(\"./Object.assign\");                                                                               // 9248\nvar invariant = require(\"./invariant\");                                                                                // 9249\n                                                                                                                       // 9250\nvar warning = require(\"./warning\");                                                                                    // 9251\n                                                                                                                       // 9252\nvar textarea = ReactElement.createFactory('textarea');                                                                 // 9253\n                                                                                                                       // 9254\nfunction forceUpdateIfMounted() {                                                                                      // 9255\n  /*jshint validthis:true */                                                                                           // 9256\n  if (this.isMounted()) {                                                                                              // 9257\n    this.forceUpdate();                                                                                                // 9258\n  }                                                                                                                    // 9259\n}                                                                                                                      // 9260\n                                                                                                                       // 9261\n/**                                                                                                                    // 9262\n * Implements a <textarea> native component that allows setting `value`, and                                           // 9263\n * `defaultValue`. This differs from the traditional DOM API because value is                                          // 9264\n * usually set as PCDATA children.                                                                                     // 9265\n *                                                                                                                     // 9266\n * If `value` is not supplied (or null/undefined), user actions that affect the                                        // 9267\n * value will trigger updates to the element.                                                                          // 9268\n *                                                                                                                     // 9269\n * If `value` is supplied (and not null/undefined), the rendered element will                                          // 9270\n * not trigger updates to the element. Instead, the `value` prop must change in                                        // 9271\n * order for the rendered element to be updated.                                                                       // 9272\n *                                                                                                                     // 9273\n * The rendered element will be initialized with an empty value, the prop                                              // 9274\n * `defaultValue` if specified, or the children content (deprecated).                                                  // 9275\n */                                                                                                                    // 9276\nvar ReactDOMTextarea = ReactClass.createClass({                                                                        // 9277\n  displayName: 'ReactDOMTextarea',                                                                                     // 9278\n  tagName: 'TEXTAREA',                                                                                                 // 9279\n                                                                                                                       // 9280\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],                                        // 9281\n                                                                                                                       // 9282\n  getInitialState: function() {                                                                                        // 9283\n    var defaultValue = this.props.defaultValue;                                                                        // 9284\n    // TODO (yungsters): Remove support for children content in <textarea>.                                            // 9285\n    var children = this.props.children;                                                                                // 9286\n    if (children != null) {                                                                                            // 9287\n      if (\"production\" !== process.env.NODE_ENV) {                                                                     // 9288\n        (\"production\" !== process.env.NODE_ENV ? warning(                                                              // 9289\n          false,                                                                                                       // 9290\n          'Use the `defaultValue` or `value` props instead of setting ' +                                              // 9291\n          'children on <textarea>.'                                                                                    // 9292\n        ) : null);                                                                                                     // 9293\n      }                                                                                                                // 9294\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 9295\n        defaultValue == null,                                                                                          // 9296\n        'If you supply `defaultValue` on a <textarea>, do not pass children.'                                          // 9297\n      ) : invariant(defaultValue == null));                                                                            // 9298\n      if (Array.isArray(children)) {                                                                                   // 9299\n        (\"production\" !== process.env.NODE_ENV ? invariant(                                                            // 9300\n          children.length <= 1,                                                                                        // 9301\n          '<textarea> can only have at most one child.'                                                                // 9302\n        ) : invariant(children.length <= 1));                                                                          // 9303\n        children = children[0];                                                                                        // 9304\n      }                                                                                                                // 9305\n                                                                                                                       // 9306\n      defaultValue = '' + children;                                                                                    // 9307\n    }                                                                                                                  // 9308\n    if (defaultValue == null) {                                                                                        // 9309\n      defaultValue = '';                                                                                               // 9310\n    }                                                                                                                  // 9311\n    var value = LinkedValueUtils.getValue(this);                                                                       // 9312\n    return {                                                                                                           // 9313\n      // We save the initial value so that `ReactDOMComponent` doesn't update                                          // 9314\n      // `textContent` (unnecessary since we update value).                                                            // 9315\n      // The initial value can be a boolean or object so that's why it's                                               // 9316\n      // forced to be a string.                                                                                        // 9317\n      initialValue: '' + (value != null ? value : defaultValue)                                                        // 9318\n    };                                                                                                                 // 9319\n  },                                                                                                                   // 9320\n                                                                                                                       // 9321\n  render: function() {                                                                                                 // 9322\n    // Clone `this.props` so we don't mutate the input.                                                                // 9323\n    var props = assign({}, this.props);                                                                                // 9324\n                                                                                                                       // 9325\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 9326\n      props.dangerouslySetInnerHTML == null,                                                                           // 9327\n      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'                                                   // 9328\n    ) : invariant(props.dangerouslySetInnerHTML == null));                                                             // 9329\n                                                                                                                       // 9330\n    props.defaultValue = null;                                                                                         // 9331\n    props.value = null;                                                                                                // 9332\n    props.onChange = this._handleChange;                                                                               // 9333\n                                                                                                                       // 9334\n    // Always set children to the same thing. In IE9, the selection range will                                         // 9335\n    // get reset if `textContent` is mutated.                                                                          // 9336\n    return textarea(props, this.state.initialValue);                                                                   // 9337\n  },                                                                                                                   // 9338\n                                                                                                                       // 9339\n  componentDidUpdate: function(prevProps, prevState, prevContext) {                                                    // 9340\n    var value = LinkedValueUtils.getValue(this);                                                                       // 9341\n    if (value != null) {                                                                                               // 9342\n      var rootNode = this.getDOMNode();                                                                                // 9343\n      // Cast `value` to a string to ensure the value is set correctly. While                                          // 9344\n      // browsers typically do this as necessary, jsdom doesn't.                                                       // 9345\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);                                        // 9346\n    }                                                                                                                  // 9347\n  },                                                                                                                   // 9348\n                                                                                                                       // 9349\n  _handleChange: function(event) {                                                                                     // 9350\n    var returnValue;                                                                                                   // 9351\n    var onChange = LinkedValueUtils.getOnChange(this);                                                                 // 9352\n    if (onChange) {                                                                                                    // 9353\n      returnValue = onChange.call(this, event);                                                                        // 9354\n    }                                                                                                                  // 9355\n    ReactUpdates.asap(forceUpdateIfMounted, this);                                                                     // 9356\n    return returnValue;                                                                                                // 9357\n  }                                                                                                                    // 9358\n                                                                                                                       // 9359\n});                                                                                                                    // 9360\n                                                                                                                       // 9361\nmodule.exports = ReactDOMTextarea;                                                                                     // 9362\n                                                                                                                       // 9363\n}).call(this,require('_process'))                                                                                      // 9364\n                                                                                                                       // 9365\n},{\"./AutoFocusMixin\":\"react/lib/AutoFocusMixin\",\"./DOMPropertyOperations\":\"react/lib/DOMPropertyOperations\",\"./LinkedValueUtils\":\"react/lib/LinkedValueUtils\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactDOM\":[function(require,module,exports){\n(function (process){                                                                                                   // 9367\n/**                                                                                                                    // 9368\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9369\n * All rights reserved.                                                                                                // 9370\n *                                                                                                                     // 9371\n * This source code is licensed under the BSD-style license found in the                                               // 9372\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 9373\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9374\n *                                                                                                                     // 9375\n * @providesModule ReactDOM                                                                                            // 9376\n * @typechecks static-only                                                                                             // 9377\n */                                                                                                                    // 9378\n                                                                                                                       // 9379\n'use strict';                                                                                                          // 9380\n                                                                                                                       // 9381\nvar ReactElement = require(\"./ReactElement\");                                                                          // 9382\nvar ReactElementValidator = require(\"./ReactElementValidator\");                                                        // 9383\n                                                                                                                       // 9384\nvar mapObject = require(\"./mapObject\");                                                                                // 9385\n                                                                                                                       // 9386\n/**                                                                                                                    // 9387\n * Create a factory that creates HTML tag elements.                                                                    // 9388\n *                                                                                                                     // 9389\n * @param {string} tag Tag name (e.g. `div`).                                                                          // 9390\n * @private                                                                                                            // 9391\n */                                                                                                                    // 9392\nfunction createDOMFactory(tag) {                                                                                       // 9393\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 9394\n    return ReactElementValidator.createFactory(tag);                                                                   // 9395\n  }                                                                                                                    // 9396\n  return ReactElement.createFactory(tag);                                                                              // 9397\n}                                                                                                                      // 9398\n                                                                                                                       // 9399\n/**                                                                                                                    // 9400\n * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.                                          // 9401\n * This is also accessible via `React.DOM`.                                                                            // 9402\n *                                                                                                                     // 9403\n * @public                                                                                                             // 9404\n */                                                                                                                    // 9405\nvar ReactDOM = mapObject({                                                                                             // 9406\n  a: 'a',                                                                                                              // 9407\n  abbr: 'abbr',                                                                                                        // 9408\n  address: 'address',                                                                                                  // 9409\n  area: 'area',                                                                                                        // 9410\n  article: 'article',                                                                                                  // 9411\n  aside: 'aside',                                                                                                      // 9412\n  audio: 'audio',                                                                                                      // 9413\n  b: 'b',                                                                                                              // 9414\n  base: 'base',                                                                                                        // 9415\n  bdi: 'bdi',                                                                                                          // 9416\n  bdo: 'bdo',                                                                                                          // 9417\n  big: 'big',                                                                                                          // 9418\n  blockquote: 'blockquote',                                                                                            // 9419\n  body: 'body',                                                                                                        // 9420\n  br: 'br',                                                                                                            // 9421\n  button: 'button',                                                                                                    // 9422\n  canvas: 'canvas',                                                                                                    // 9423\n  caption: 'caption',                                                                                                  // 9424\n  cite: 'cite',                                                                                                        // 9425\n  code: 'code',                                                                                                        // 9426\n  col: 'col',                                                                                                          // 9427\n  colgroup: 'colgroup',                                                                                                // 9428\n  data: 'data',                                                                                                        // 9429\n  datalist: 'datalist',                                                                                                // 9430\n  dd: 'dd',                                                                                                            // 9431\n  del: 'del',                                                                                                          // 9432\n  details: 'details',                                                                                                  // 9433\n  dfn: 'dfn',                                                                                                          // 9434\n  dialog: 'dialog',                                                                                                    // 9435\n  div: 'div',                                                                                                          // 9436\n  dl: 'dl',                                                                                                            // 9437\n  dt: 'dt',                                                                                                            // 9438\n  em: 'em',                                                                                                            // 9439\n  embed: 'embed',                                                                                                      // 9440\n  fieldset: 'fieldset',                                                                                                // 9441\n  figcaption: 'figcaption',                                                                                            // 9442\n  figure: 'figure',                                                                                                    // 9443\n  footer: 'footer',                                                                                                    // 9444\n  form: 'form',                                                                                                        // 9445\n  h1: 'h1',                                                                                                            // 9446\n  h2: 'h2',                                                                                                            // 9447\n  h3: 'h3',                                                                                                            // 9448\n  h4: 'h4',                                                                                                            // 9449\n  h5: 'h5',                                                                                                            // 9450\n  h6: 'h6',                                                                                                            // 9451\n  head: 'head',                                                                                                        // 9452\n  header: 'header',                                                                                                    // 9453\n  hr: 'hr',                                                                                                            // 9454\n  html: 'html',                                                                                                        // 9455\n  i: 'i',                                                                                                              // 9456\n  iframe: 'iframe',                                                                                                    // 9457\n  img: 'img',                                                                                                          // 9458\n  input: 'input',                                                                                                      // 9459\n  ins: 'ins',                                                                                                          // 9460\n  kbd: 'kbd',                                                                                                          // 9461\n  keygen: 'keygen',                                                                                                    // 9462\n  label: 'label',                                                                                                      // 9463\n  legend: 'legend',                                                                                                    // 9464\n  li: 'li',                                                                                                            // 9465\n  link: 'link',                                                                                                        // 9466\n  main: 'main',                                                                                                        // 9467\n  map: 'map',                                                                                                          // 9468\n  mark: 'mark',                                                                                                        // 9469\n  menu: 'menu',                                                                                                        // 9470\n  menuitem: 'menuitem',                                                                                                // 9471\n  meta: 'meta',                                                                                                        // 9472\n  meter: 'meter',                                                                                                      // 9473\n  nav: 'nav',                                                                                                          // 9474\n  noscript: 'noscript',                                                                                                // 9475\n  object: 'object',                                                                                                    // 9476\n  ol: 'ol',                                                                                                            // 9477\n  optgroup: 'optgroup',                                                                                                // 9478\n  option: 'option',                                                                                                    // 9479\n  output: 'output',                                                                                                    // 9480\n  p: 'p',                                                                                                              // 9481\n  param: 'param',                                                                                                      // 9482\n  picture: 'picture',                                                                                                  // 9483\n  pre: 'pre',                                                                                                          // 9484\n  progress: 'progress',                                                                                                // 9485\n  q: 'q',                                                                                                              // 9486\n  rp: 'rp',                                                                                                            // 9487\n  rt: 'rt',                                                                                                            // 9488\n  ruby: 'ruby',                                                                                                        // 9489\n  s: 's',                                                                                                              // 9490\n  samp: 'samp',                                                                                                        // 9491\n  script: 'script',                                                                                                    // 9492\n  section: 'section',                                                                                                  // 9493\n  select: 'select',                                                                                                    // 9494\n  small: 'small',                                                                                                      // 9495\n  source: 'source',                                                                                                    // 9496\n  span: 'span',                                                                                                        // 9497\n  strong: 'strong',                                                                                                    // 9498\n  style: 'style',                                                                                                      // 9499\n  sub: 'sub',                                                                                                          // 9500\n  summary: 'summary',                                                                                                  // 9501\n  sup: 'sup',                                                                                                          // 9502\n  table: 'table',                                                                                                      // 9503\n  tbody: 'tbody',                                                                                                      // 9504\n  td: 'td',                                                                                                            // 9505\n  textarea: 'textarea',                                                                                                // 9506\n  tfoot: 'tfoot',                                                                                                      // 9507\n  th: 'th',                                                                                                            // 9508\n  thead: 'thead',                                                                                                      // 9509\n  time: 'time',                                                                                                        // 9510\n  title: 'title',                                                                                                      // 9511\n  tr: 'tr',                                                                                                            // 9512\n  track: 'track',                                                                                                      // 9513\n  u: 'u',                                                                                                              // 9514\n  ul: 'ul',                                                                                                            // 9515\n  'var': 'var',                                                                                                        // 9516\n  video: 'video',                                                                                                      // 9517\n  wbr: 'wbr',                                                                                                          // 9518\n                                                                                                                       // 9519\n  // SVG                                                                                                               // 9520\n  circle: 'circle',                                                                                                    // 9521\n  clipPath: 'clipPath',                                                                                                // 9522\n  defs: 'defs',                                                                                                        // 9523\n  ellipse: 'ellipse',                                                                                                  // 9524\n  g: 'g',                                                                                                              // 9525\n  line: 'line',                                                                                                        // 9526\n  linearGradient: 'linearGradient',                                                                                    // 9527\n  mask: 'mask',                                                                                                        // 9528\n  path: 'path',                                                                                                        // 9529\n  pattern: 'pattern',                                                                                                  // 9530\n  polygon: 'polygon',                                                                                                  // 9531\n  polyline: 'polyline',                                                                                                // 9532\n  radialGradient: 'radialGradient',                                                                                    // 9533\n  rect: 'rect',                                                                                                        // 9534\n  stop: 'stop',                                                                                                        // 9535\n  svg: 'svg',                                                                                                          // 9536\n  text: 'text',                                                                                                        // 9537\n  tspan: 'tspan'                                                                                                       // 9538\n                                                                                                                       // 9539\n}, createDOMFactory);                                                                                                  // 9540\n                                                                                                                       // 9541\nmodule.exports = ReactDOM;                                                                                             // 9542\n                                                                                                                       // 9543\n}).call(this,require('_process'))                                                                                      // 9544\n                                                                                                                       // 9545\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactElementValidator\":\"react/lib/ReactElementValidator\",\"./mapObject\":\"react/lib/mapObject\",\"_process\":1}],\"react/lib/ReactDefaultBatchingStrategy\":[function(require,module,exports){\n/**                                                                                                                    // 9547\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9548\n * All rights reserved.                                                                                                // 9549\n *                                                                                                                     // 9550\n * This source code is licensed under the BSD-style license found in the                                               // 9551\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 9552\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9553\n *                                                                                                                     // 9554\n * @providesModule ReactDefaultBatchingStrategy                                                                        // 9555\n */                                                                                                                    // 9556\n                                                                                                                       // 9557\n'use strict';                                                                                                          // 9558\n                                                                                                                       // 9559\nvar ReactUpdates = require(\"./ReactUpdates\");                                                                          // 9560\nvar Transaction = require(\"./Transaction\");                                                                            // 9561\n                                                                                                                       // 9562\nvar assign = require(\"./Object.assign\");                                                                               // 9563\nvar emptyFunction = require(\"./emptyFunction\");                                                                        // 9564\n                                                                                                                       // 9565\nvar RESET_BATCHED_UPDATES = {                                                                                          // 9566\n  initialize: emptyFunction,                                                                                           // 9567\n  close: function() {                                                                                                  // 9568\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;                                                            // 9569\n  }                                                                                                                    // 9570\n};                                                                                                                     // 9571\n                                                                                                                       // 9572\nvar FLUSH_BATCHED_UPDATES = {                                                                                          // 9573\n  initialize: emptyFunction,                                                                                           // 9574\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)                                                           // 9575\n};                                                                                                                     // 9576\n                                                                                                                       // 9577\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];                                             // 9578\n                                                                                                                       // 9579\nfunction ReactDefaultBatchingStrategyTransaction() {                                                                   // 9580\n  this.reinitializeTransaction();                                                                                      // 9581\n}                                                                                                                      // 9582\n                                                                                                                       // 9583\nassign(                                                                                                                // 9584\n  ReactDefaultBatchingStrategyTransaction.prototype,                                                                   // 9585\n  Transaction.Mixin,                                                                                                   // 9586\n  {                                                                                                                    // 9587\n    getTransactionWrappers: function() {                                                                               // 9588\n      return TRANSACTION_WRAPPERS;                                                                                     // 9589\n    }                                                                                                                  // 9590\n  }                                                                                                                    // 9591\n);                                                                                                                     // 9592\n                                                                                                                       // 9593\nvar transaction = new ReactDefaultBatchingStrategyTransaction();                                                       // 9594\n                                                                                                                       // 9595\nvar ReactDefaultBatchingStrategy = {                                                                                   // 9596\n  isBatchingUpdates: false,                                                                                            // 9597\n                                                                                                                       // 9598\n  /**                                                                                                                  // 9599\n   * Call the provided function in a context within which calls to `setState`                                          // 9600\n   * and friends are batched such that components aren't updated unnecessarily.                                        // 9601\n   */                                                                                                                  // 9602\n  batchedUpdates: function(callback, a, b, c, d) {                                                                     // 9603\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;                                       // 9604\n                                                                                                                       // 9605\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;                                                             // 9606\n                                                                                                                       // 9607\n    // The code is written this way to avoid extra allocations                                                         // 9608\n    if (alreadyBatchingUpdates) {                                                                                      // 9609\n      callback(a, b, c, d);                                                                                            // 9610\n    } else {                                                                                                           // 9611\n      transaction.perform(callback, null, a, b, c, d);                                                                 // 9612\n    }                                                                                                                  // 9613\n  }                                                                                                                    // 9614\n};                                                                                                                     // 9615\n                                                                                                                       // 9616\nmodule.exports = ReactDefaultBatchingStrategy;                                                                         // 9617\n                                                                                                                       // 9618\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./Transaction\":\"react/lib/Transaction\",\"./emptyFunction\":\"react/lib/emptyFunction\"}],\"react/lib/ReactDefaultInjection\":[function(require,module,exports){\n(function (process){                                                                                                   // 9620\n/**                                                                                                                    // 9621\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9622\n * All rights reserved.                                                                                                // 9623\n *                                                                                                                     // 9624\n * This source code is licensed under the BSD-style license found in the                                               // 9625\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 9626\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9627\n *                                                                                                                     // 9628\n * @providesModule ReactDefaultInjection                                                                               // 9629\n */                                                                                                                    // 9630\n                                                                                                                       // 9631\n'use strict';                                                                                                          // 9632\n                                                                                                                       // 9633\nvar BeforeInputEventPlugin = require(\"./BeforeInputEventPlugin\");                                                      // 9634\nvar ChangeEventPlugin = require(\"./ChangeEventPlugin\");                                                                // 9635\nvar ClientReactRootIndex = require(\"./ClientReactRootIndex\");                                                          // 9636\nvar DefaultEventPluginOrder = require(\"./DefaultEventPluginOrder\");                                                    // 9637\nvar EnterLeaveEventPlugin = require(\"./EnterLeaveEventPlugin\");                                                        // 9638\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 9639\nvar HTMLDOMPropertyConfig = require(\"./HTMLDOMPropertyConfig\");                                                        // 9640\nvar MobileSafariClickEventPlugin = require(\"./MobileSafariClickEventPlugin\");                                          // 9641\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");                                              // 9642\nvar ReactClass = require(\"./ReactClass\");                                                                              // 9643\nvar ReactComponentBrowserEnvironment =                                                                                 // 9644\n  require(\"./ReactComponentBrowserEnvironment\");                                                                       // 9645\nvar ReactDefaultBatchingStrategy = require(\"./ReactDefaultBatchingStrategy\");                                          // 9646\nvar ReactDOMComponent = require(\"./ReactDOMComponent\");                                                                // 9647\nvar ReactDOMButton = require(\"./ReactDOMButton\");                                                                      // 9648\nvar ReactDOMForm = require(\"./ReactDOMForm\");                                                                          // 9649\nvar ReactDOMImg = require(\"./ReactDOMImg\");                                                                            // 9650\nvar ReactDOMIDOperations = require(\"./ReactDOMIDOperations\");                                                          // 9651\nvar ReactDOMIframe = require(\"./ReactDOMIframe\");                                                                      // 9652\nvar ReactDOMInput = require(\"./ReactDOMInput\");                                                                        // 9653\nvar ReactDOMOption = require(\"./ReactDOMOption\");                                                                      // 9654\nvar ReactDOMSelect = require(\"./ReactDOMSelect\");                                                                      // 9655\nvar ReactDOMTextarea = require(\"./ReactDOMTextarea\");                                                                  // 9656\nvar ReactDOMTextComponent = require(\"./ReactDOMTextComponent\");                                                        // 9657\nvar ReactElement = require(\"./ReactElement\");                                                                          // 9658\nvar ReactEventListener = require(\"./ReactEventListener\");                                                              // 9659\nvar ReactInjection = require(\"./ReactInjection\");                                                                      // 9660\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");                                                          // 9661\nvar ReactMount = require(\"./ReactMount\");                                                                              // 9662\nvar ReactReconcileTransaction = require(\"./ReactReconcileTransaction\");                                                // 9663\nvar SelectEventPlugin = require(\"./SelectEventPlugin\");                                                                // 9664\nvar ServerReactRootIndex = require(\"./ServerReactRootIndex\");                                                          // 9665\nvar SimpleEventPlugin = require(\"./SimpleEventPlugin\");                                                                // 9666\nvar SVGDOMPropertyConfig = require(\"./SVGDOMPropertyConfig\");                                                          // 9667\n                                                                                                                       // 9668\nvar createFullPageComponent = require(\"./createFullPageComponent\");                                                    // 9669\n                                                                                                                       // 9670\nfunction autoGenerateWrapperClass(type) {                                                                              // 9671\n  return ReactClass.createClass({                                                                                      // 9672\n    tagName: type.toUpperCase(),                                                                                       // 9673\n    render: function() {                                                                                               // 9674\n      return new ReactElement(                                                                                         // 9675\n        type,                                                                                                          // 9676\n        null,                                                                                                          // 9677\n        null,                                                                                                          // 9678\n        null,                                                                                                          // 9679\n        null,                                                                                                          // 9680\n        this.props                                                                                                     // 9681\n      );                                                                                                               // 9682\n    }                                                                                                                  // 9683\n  });                                                                                                                  // 9684\n}                                                                                                                      // 9685\n                                                                                                                       // 9686\nfunction inject() {                                                                                                    // 9687\n  ReactInjection.EventEmitter.injectReactEventListener(                                                                // 9688\n    ReactEventListener                                                                                                 // 9689\n  );                                                                                                                   // 9690\n                                                                                                                       // 9691\n  /**                                                                                                                  // 9692\n   * Inject modules for resolving DOM hierarchy and plugin ordering.                                                   // 9693\n   */                                                                                                                  // 9694\n  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);                                       // 9695\n  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);                                            // 9696\n  ReactInjection.EventPluginHub.injectMount(ReactMount);                                                               // 9697\n                                                                                                                       // 9698\n  /**                                                                                                                  // 9699\n   * Some important event plugins included by default (without having to require                                       // 9700\n   * them).                                                                                                            // 9701\n   */                                                                                                                  // 9702\n  ReactInjection.EventPluginHub.injectEventPluginsByName({                                                             // 9703\n    SimpleEventPlugin: SimpleEventPlugin,                                                                              // 9704\n    EnterLeaveEventPlugin: EnterLeaveEventPlugin,                                                                      // 9705\n    ChangeEventPlugin: ChangeEventPlugin,                                                                              // 9706\n    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,                                                        // 9707\n    SelectEventPlugin: SelectEventPlugin,                                                                              // 9708\n    BeforeInputEventPlugin: BeforeInputEventPlugin                                                                     // 9709\n  });                                                                                                                  // 9710\n                                                                                                                       // 9711\n  ReactInjection.NativeComponent.injectGenericComponentClass(                                                          // 9712\n    ReactDOMComponent                                                                                                  // 9713\n  );                                                                                                                   // 9714\n                                                                                                                       // 9715\n  ReactInjection.NativeComponent.injectTextComponentClass(                                                             // 9716\n    ReactDOMTextComponent                                                                                              // 9717\n  );                                                                                                                   // 9718\n                                                                                                                       // 9719\n  ReactInjection.NativeComponent.injectAutoWrapper(                                                                    // 9720\n    autoGenerateWrapperClass                                                                                           // 9721\n  );                                                                                                                   // 9722\n                                                                                                                       // 9723\n  // This needs to happen before createFullPageComponent() otherwise the mixin                                         // 9724\n  // won't be included.                                                                                                // 9725\n  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);                                                        // 9726\n                                                                                                                       // 9727\n  ReactInjection.NativeComponent.injectComponentClasses({                                                              // 9728\n    'button': ReactDOMButton,                                                                                          // 9729\n    'form': ReactDOMForm,                                                                                              // 9730\n    'iframe': ReactDOMIframe,                                                                                          // 9731\n    'img': ReactDOMImg,                                                                                                // 9732\n    'input': ReactDOMInput,                                                                                            // 9733\n    'option': ReactDOMOption,                                                                                          // 9734\n    'select': ReactDOMSelect,                                                                                          // 9735\n    'textarea': ReactDOMTextarea,                                                                                      // 9736\n                                                                                                                       // 9737\n    'html': createFullPageComponent('html'),                                                                           // 9738\n    'head': createFullPageComponent('head'),                                                                           // 9739\n    'body': createFullPageComponent('body')                                                                            // 9740\n  });                                                                                                                  // 9741\n                                                                                                                       // 9742\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);                                           // 9743\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);                                            // 9744\n                                                                                                                       // 9745\n  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');                                                      // 9746\n                                                                                                                       // 9747\n  ReactInjection.Updates.injectReconcileTransaction(                                                                   // 9748\n    ReactReconcileTransaction                                                                                          // 9749\n  );                                                                                                                   // 9750\n  ReactInjection.Updates.injectBatchingStrategy(                                                                       // 9751\n    ReactDefaultBatchingStrategy                                                                                       // 9752\n  );                                                                                                                   // 9753\n                                                                                                                       // 9754\n  ReactInjection.RootIndex.injectCreateReactRootIndex(                                                                 // 9755\n    ExecutionEnvironment.canUseDOM ?                                                                                   // 9756\n      ClientReactRootIndex.createReactRootIndex :                                                                      // 9757\n      ServerReactRootIndex.createReactRootIndex                                                                        // 9758\n  );                                                                                                                   // 9759\n                                                                                                                       // 9760\n  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);                                        // 9761\n  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);                                                // 9762\n                                                                                                                       // 9763\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 9764\n    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';                                          // 9765\n    if ((/[?&]react_perf\\b/).test(url)) {                                                                              // 9766\n      var ReactDefaultPerf = require(\"./ReactDefaultPerf\");                                                            // 9767\n      ReactDefaultPerf.start();                                                                                        // 9768\n    }                                                                                                                  // 9769\n  }                                                                                                                    // 9770\n}                                                                                                                      // 9771\n                                                                                                                       // 9772\nmodule.exports = {                                                                                                     // 9773\n  inject: inject                                                                                                       // 9774\n};                                                                                                                     // 9775\n                                                                                                                       // 9776\n}).call(this,require('_process'))                                                                                      // 9777\n                                                                                                                       // 9778\n},{\"./BeforeInputEventPlugin\":\"react/lib/BeforeInputEventPlugin\",\"./ChangeEventPlugin\":\"react/lib/ChangeEventPlugin\",\"./ClientReactRootIndex\":\"react/lib/ClientReactRootIndex\",\"./DefaultEventPluginOrder\":\"react/lib/DefaultEventPluginOrder\",\"./EnterLeaveEventPlugin\":\"react/lib/EnterLeaveEventPlugin\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./HTMLDOMPropertyConfig\":\"react/lib/HTMLDOMPropertyConfig\",\"./MobileSafariClickEventPlugin\":\"react/lib/MobileSafariClickEventPlugin\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactComponentBrowserEnvironment\":\"react/lib/ReactComponentBrowserEnvironment\",\"./ReactDOMButton\":\"react/lib/ReactDOMButton\",\"./ReactDOMComponent\":\"react/lib/ReactDOMComponent\",\"./ReactDOMForm\":\"react/lib/ReactDOMForm\",\"./ReactDOMIDOperations\":\"react/lib/ReactDOMIDOperations\",\"./ReactDOMIframe\":\"react/lib/ReactDOMIframe\",\"./ReactDOMImg\":\"react/lib/ReactDOMImg\",\"./ReactDOMInput\":\"react/lib/ReactDOMInput\",\"./ReactDOMOption\":\"react/lib/ReactDOMOption\",\"./ReactDOMSelect\":\"react/lib/ReactDOMSelect\",\"./ReactDOMTextComponent\":\"react/lib/ReactDOMTextComponent\",\"./ReactDOMTextarea\":\"react/lib/ReactDOMTextarea\",\"./ReactDefaultBatchingStrategy\":\"react/lib/ReactDefaultBatchingStrategy\",\"./ReactDefaultPerf\":\"react/lib/ReactDefaultPerf\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactEventListener\":\"react/lib/ReactEventListener\",\"./ReactInjection\":\"react/lib/ReactInjection\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactReconcileTransaction\":\"react/lib/ReactReconcileTransaction\",\"./SVGDOMPropertyConfig\":\"react/lib/SVGDOMPropertyConfig\",\"./SelectEventPlugin\":\"react/lib/SelectEventPlugin\",\"./ServerReactRootIndex\":\"react/lib/ServerReactRootIndex\",\"./SimpleEventPlugin\":\"react/lib/SimpleEventPlugin\",\"./createFullPageComponent\":\"react/lib/createFullPageComponent\",\"_process\":1}],\"react/lib/ReactDefaultPerfAnalysis\":[function(require,module,exports){\n/**                                                                                                                    // 9780\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9781\n * All rights reserved.                                                                                                // 9782\n *                                                                                                                     // 9783\n * This source code is licensed under the BSD-style license found in the                                               // 9784\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 9785\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9786\n *                                                                                                                     // 9787\n * @providesModule ReactDefaultPerfAnalysis                                                                            // 9788\n */                                                                                                                    // 9789\n                                                                                                                       // 9790\nvar assign = require(\"./Object.assign\");                                                                               // 9791\n                                                                                                                       // 9792\n// Don't try to save users less than 1.2ms (a number I made up)                                                        // 9793\nvar DONT_CARE_THRESHOLD = 1.2;                                                                                         // 9794\nvar DOM_OPERATION_TYPES = {                                                                                            // 9795\n  '_mountImageIntoNode': 'set innerHTML',                                                                              // 9796\n  INSERT_MARKUP: 'set innerHTML',                                                                                      // 9797\n  MOVE_EXISTING: 'move',                                                                                               // 9798\n  REMOVE_NODE: 'remove',                                                                                               // 9799\n  TEXT_CONTENT: 'set textContent',                                                                                     // 9800\n  'updatePropertyByID': 'update attribute',                                                                            // 9801\n  'deletePropertyByID': 'delete attribute',                                                                            // 9802\n  'updateStylesByID': 'update styles',                                                                                 // 9803\n  'updateInnerHTMLByID': 'set innerHTML',                                                                              // 9804\n  'dangerouslyReplaceNodeWithMarkupByID': 'replace'                                                                    // 9805\n};                                                                                                                     // 9806\n                                                                                                                       // 9807\nfunction getTotalTime(measurements) {                                                                                  // 9808\n  // TODO: return number of DOM ops? could be misleading.                                                              // 9809\n  // TODO: measure dropped frames after reconcile?                                                                     // 9810\n  // TODO: log total time of each reconcile and the top-level component                                                // 9811\n  // class that triggered it.                                                                                          // 9812\n  var totalTime = 0;                                                                                                   // 9813\n  for (var i = 0; i < measurements.length; i++) {                                                                      // 9814\n    var measurement = measurements[i];                                                                                 // 9815\n    totalTime += measurement.totalTime;                                                                                // 9816\n  }                                                                                                                    // 9817\n  return totalTime;                                                                                                    // 9818\n}                                                                                                                      // 9819\n                                                                                                                       // 9820\nfunction getDOMSummary(measurements) {                                                                                 // 9821\n  var items = [];                                                                                                      // 9822\n  for (var i = 0; i < measurements.length; i++) {                                                                      // 9823\n    var measurement = measurements[i];                                                                                 // 9824\n    var id;                                                                                                            // 9825\n                                                                                                                       // 9826\n    for (id in measurement.writes) {                                                                                   // 9827\n      measurement.writes[id].forEach(function(write) {                                                                 // 9828\n        items.push({                                                                                                   // 9829\n          id: id,                                                                                                      // 9830\n          type: DOM_OPERATION_TYPES[write.type] || write.type,                                                         // 9831\n          args: write.args                                                                                             // 9832\n        });                                                                                                            // 9833\n      });                                                                                                              // 9834\n    }                                                                                                                  // 9835\n  }                                                                                                                    // 9836\n  return items;                                                                                                        // 9837\n}                                                                                                                      // 9838\n                                                                                                                       // 9839\nfunction getExclusiveSummary(measurements) {                                                                           // 9840\n  var candidates = {};                                                                                                 // 9841\n  var displayName;                                                                                                     // 9842\n                                                                                                                       // 9843\n  for (var i = 0; i < measurements.length; i++) {                                                                      // 9844\n    var measurement = measurements[i];                                                                                 // 9845\n    var allIDs = assign(                                                                                               // 9846\n      {},                                                                                                              // 9847\n      measurement.exclusive,                                                                                           // 9848\n      measurement.inclusive                                                                                            // 9849\n    );                                                                                                                 // 9850\n                                                                                                                       // 9851\n    for (var id in allIDs) {                                                                                           // 9852\n      displayName = measurement.displayNames[id].current;                                                              // 9853\n                                                                                                                       // 9854\n      candidates[displayName] = candidates[displayName] || {                                                           // 9855\n        componentName: displayName,                                                                                    // 9856\n        inclusive: 0,                                                                                                  // 9857\n        exclusive: 0,                                                                                                  // 9858\n        render: 0,                                                                                                     // 9859\n        count: 0                                                                                                       // 9860\n      };                                                                                                               // 9861\n      if (measurement.render[id]) {                                                                                    // 9862\n        candidates[displayName].render += measurement.render[id];                                                      // 9863\n      }                                                                                                                // 9864\n      if (measurement.exclusive[id]) {                                                                                 // 9865\n        candidates[displayName].exclusive += measurement.exclusive[id];                                                // 9866\n      }                                                                                                                // 9867\n      if (measurement.inclusive[id]) {                                                                                 // 9868\n        candidates[displayName].inclusive += measurement.inclusive[id];                                                // 9869\n      }                                                                                                                // 9870\n      if (measurement.counts[id]) {                                                                                    // 9871\n        candidates[displayName].count += measurement.counts[id];                                                       // 9872\n      }                                                                                                                // 9873\n    }                                                                                                                  // 9874\n  }                                                                                                                    // 9875\n                                                                                                                       // 9876\n  // Now make a sorted array with the results.                                                                         // 9877\n  var arr = [];                                                                                                        // 9878\n  for (displayName in candidates) {                                                                                    // 9879\n    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {                                                    // 9880\n      arr.push(candidates[displayName]);                                                                               // 9881\n    }                                                                                                                  // 9882\n  }                                                                                                                    // 9883\n                                                                                                                       // 9884\n  arr.sort(function(a, b) {                                                                                            // 9885\n    return b.exclusive - a.exclusive;                                                                                  // 9886\n  });                                                                                                                  // 9887\n                                                                                                                       // 9888\n  return arr;                                                                                                          // 9889\n}                                                                                                                      // 9890\n                                                                                                                       // 9891\nfunction getInclusiveSummary(measurements, onlyClean) {                                                                // 9892\n  var candidates = {};                                                                                                 // 9893\n  var inclusiveKey;                                                                                                    // 9894\n                                                                                                                       // 9895\n  for (var i = 0; i < measurements.length; i++) {                                                                      // 9896\n    var measurement = measurements[i];                                                                                 // 9897\n    var allIDs = assign(                                                                                               // 9898\n      {},                                                                                                              // 9899\n      measurement.exclusive,                                                                                           // 9900\n      measurement.inclusive                                                                                            // 9901\n    );                                                                                                                 // 9902\n    var cleanComponents;                                                                                               // 9903\n                                                                                                                       // 9904\n    if (onlyClean) {                                                                                                   // 9905\n      cleanComponents = getUnchangedComponents(measurement);                                                           // 9906\n    }                                                                                                                  // 9907\n                                                                                                                       // 9908\n    for (var id in allIDs) {                                                                                           // 9909\n      if (onlyClean && !cleanComponents[id]) {                                                                         // 9910\n        continue;                                                                                                      // 9911\n      }                                                                                                                // 9912\n                                                                                                                       // 9913\n      var displayName = measurement.displayNames[id];                                                                  // 9914\n                                                                                                                       // 9915\n      // Inclusive time is not useful for many components without knowing where                                        // 9916\n      // they are instantiated. So we aggregate inclusive time with both the                                           // 9917\n      // owner and current displayName as the key.                                                                     // 9918\n      inclusiveKey = displayName.owner + ' > ' + displayName.current;                                                  // 9919\n                                                                                                                       // 9920\n      candidates[inclusiveKey] = candidates[inclusiveKey] || {                                                         // 9921\n        componentName: inclusiveKey,                                                                                   // 9922\n        time: 0,                                                                                                       // 9923\n        count: 0                                                                                                       // 9924\n      };                                                                                                               // 9925\n                                                                                                                       // 9926\n      if (measurement.inclusive[id]) {                                                                                 // 9927\n        candidates[inclusiveKey].time += measurement.inclusive[id];                                                    // 9928\n      }                                                                                                                // 9929\n      if (measurement.counts[id]) {                                                                                    // 9930\n        candidates[inclusiveKey].count += measurement.counts[id];                                                      // 9931\n      }                                                                                                                // 9932\n    }                                                                                                                  // 9933\n  }                                                                                                                    // 9934\n                                                                                                                       // 9935\n  // Now make a sorted array with the results.                                                                         // 9936\n  var arr = [];                                                                                                        // 9937\n  for (inclusiveKey in candidates) {                                                                                   // 9938\n    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {                                                        // 9939\n      arr.push(candidates[inclusiveKey]);                                                                              // 9940\n    }                                                                                                                  // 9941\n  }                                                                                                                    // 9942\n                                                                                                                       // 9943\n  arr.sort(function(a, b) {                                                                                            // 9944\n    return b.time - a.time;                                                                                            // 9945\n  });                                                                                                                  // 9946\n                                                                                                                       // 9947\n  return arr;                                                                                                          // 9948\n}                                                                                                                      // 9949\n                                                                                                                       // 9950\nfunction getUnchangedComponents(measurement) {                                                                         // 9951\n  // For a given reconcile, look at which components did not actually                                                  // 9952\n  // render anything to the DOM and return a mapping of their ID to                                                    // 9953\n  // the amount of time it took to render the entire subtree.                                                          // 9954\n  var cleanComponents = {};                                                                                            // 9955\n  var dirtyLeafIDs = Object.keys(measurement.writes);                                                                  // 9956\n  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);                                               // 9957\n                                                                                                                       // 9958\n  for (var id in allIDs) {                                                                                             // 9959\n    var isDirty = false;                                                                                               // 9960\n    // For each component that rendered, see if a component that triggered                                             // 9961\n    // a DOM op is in its subtree.                                                                                     // 9962\n    for (var i = 0; i < dirtyLeafIDs.length; i++) {                                                                    // 9963\n      if (dirtyLeafIDs[i].indexOf(id) === 0) {                                                                         // 9964\n        isDirty = true;                                                                                                // 9965\n        break;                                                                                                         // 9966\n      }                                                                                                                // 9967\n    }                                                                                                                  // 9968\n    if (!isDirty && measurement.counts[id] > 0) {                                                                      // 9969\n      cleanComponents[id] = true;                                                                                      // 9970\n    }                                                                                                                  // 9971\n  }                                                                                                                    // 9972\n  return cleanComponents;                                                                                              // 9973\n}                                                                                                                      // 9974\n                                                                                                                       // 9975\nvar ReactDefaultPerfAnalysis = {                                                                                       // 9976\n  getExclusiveSummary: getExclusiveSummary,                                                                            // 9977\n  getInclusiveSummary: getInclusiveSummary,                                                                            // 9978\n  getDOMSummary: getDOMSummary,                                                                                        // 9979\n  getTotalTime: getTotalTime                                                                                           // 9980\n};                                                                                                                     // 9981\n                                                                                                                       // 9982\nmodule.exports = ReactDefaultPerfAnalysis;                                                                             // 9983\n                                                                                                                       // 9984\n},{\"./Object.assign\":\"react/lib/Object.assign\"}],\"react/lib/ReactDefaultPerf\":[function(require,module,exports){       // 9985\n/**                                                                                                                    // 9986\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 9987\n * All rights reserved.                                                                                                // 9988\n *                                                                                                                     // 9989\n * This source code is licensed under the BSD-style license found in the                                               // 9990\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 9991\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 9992\n *                                                                                                                     // 9993\n * @providesModule ReactDefaultPerf                                                                                    // 9994\n * @typechecks static-only                                                                                             // 9995\n */                                                                                                                    // 9996\n                                                                                                                       // 9997\n'use strict';                                                                                                          // 9998\n                                                                                                                       // 9999\nvar DOMProperty = require(\"./DOMProperty\");                                                                            // 10000\nvar ReactDefaultPerfAnalysis = require(\"./ReactDefaultPerfAnalysis\");                                                  // 10001\nvar ReactMount = require(\"./ReactMount\");                                                                              // 10002\nvar ReactPerf = require(\"./ReactPerf\");                                                                                // 10003\n                                                                                                                       // 10004\nvar performanceNow = require(\"./performanceNow\");                                                                      // 10005\n                                                                                                                       // 10006\nfunction roundFloat(val) {                                                                                             // 10007\n  return Math.floor(val * 100) / 100;                                                                                  // 10008\n}                                                                                                                      // 10009\n                                                                                                                       // 10010\nfunction addValue(obj, key, val) {                                                                                     // 10011\n  obj[key] = (obj[key] || 0) + val;                                                                                    // 10012\n}                                                                                                                      // 10013\n                                                                                                                       // 10014\nvar ReactDefaultPerf = {                                                                                               // 10015\n  _allMeasurements: [], // last item in the list is the current one                                                    // 10016\n  _mountStack: [0],                                                                                                    // 10017\n  _injected: false,                                                                                                    // 10018\n                                                                                                                       // 10019\n  start: function() {                                                                                                  // 10020\n    if (!ReactDefaultPerf._injected) {                                                                                 // 10021\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);                                                     // 10022\n    }                                                                                                                  // 10023\n                                                                                                                       // 10024\n    ReactDefaultPerf._allMeasurements.length = 0;                                                                      // 10025\n    ReactPerf.enableMeasure = true;                                                                                    // 10026\n  },                                                                                                                   // 10027\n                                                                                                                       // 10028\n  stop: function() {                                                                                                   // 10029\n    ReactPerf.enableMeasure = false;                                                                                   // 10030\n  },                                                                                                                   // 10031\n                                                                                                                       // 10032\n  getLastMeasurements: function() {                                                                                    // 10033\n    return ReactDefaultPerf._allMeasurements;                                                                          // 10034\n  },                                                                                                                   // 10035\n                                                                                                                       // 10036\n  printExclusive: function(measurements) {                                                                             // 10037\n    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 10038\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);                                          // 10039\n    console.table(summary.map(function(item) {                                                                         // 10040\n      return {                                                                                                         // 10041\n        'Component class name': item.componentName,                                                                    // 10042\n        'Total inclusive time (ms)': roundFloat(item.inclusive),                                                       // 10043\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),                                                       // 10044\n        'Exclusive render time (ms)': roundFloat(item.render),                                                         // 10045\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),                                       // 10046\n        'Render time per instance (ms)': roundFloat(item.render / item.count),                                         // 10047\n        'Instances': item.count                                                                                        // 10048\n      };                                                                                                               // 10049\n    }));                                                                                                               // 10050\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct                                       // 10051\n    // number.                                                                                                         // 10052\n  },                                                                                                                   // 10053\n                                                                                                                       // 10054\n  printInclusive: function(measurements) {                                                                             // 10055\n    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 10056\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);                                          // 10057\n    console.table(summary.map(function(item) {                                                                         // 10058\n      return {                                                                                                         // 10059\n        'Owner > component': item.componentName,                                                                       // 10060\n        'Inclusive time (ms)': roundFloat(item.time),                                                                  // 10061\n        'Instances': item.count                                                                                        // 10062\n      };                                                                                                               // 10063\n    }));                                                                                                               // 10064\n    console.log(                                                                                                       // 10065\n      'Total time:',                                                                                                   // 10066\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'                                           // 10067\n    );                                                                                                                 // 10068\n  },                                                                                                                   // 10069\n                                                                                                                       // 10070\n  getMeasurementsSummaryMap: function(measurements) {                                                                  // 10071\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(                                                        // 10072\n      measurements,                                                                                                    // 10073\n      true                                                                                                             // 10074\n    );                                                                                                                 // 10075\n    return summary.map(function(item) {                                                                                // 10076\n      return {                                                                                                         // 10077\n        'Owner > component': item.componentName,                                                                       // 10078\n        'Wasted time (ms)': item.time,                                                                                 // 10079\n        'Instances': item.count                                                                                        // 10080\n      };                                                                                                               // 10081\n    });                                                                                                                // 10082\n  },                                                                                                                   // 10083\n                                                                                                                       // 10084\n  printWasted: function(measurements) {                                                                                // 10085\n    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 10086\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));                                           // 10087\n    console.log(                                                                                                       // 10088\n      'Total time:',                                                                                                   // 10089\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'                                           // 10090\n    );                                                                                                                 // 10091\n  },                                                                                                                   // 10092\n                                                                                                                       // 10093\n  printDOM: function(measurements) {                                                                                   // 10094\n    measurements = measurements || ReactDefaultPerf._allMeasurements;                                                  // 10095\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);                                                // 10096\n    console.table(summary.map(function(item) {                                                                         // 10097\n      var result = {};                                                                                                 // 10098\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;                                                                 // 10099\n      result['type'] = item.type;                                                                                      // 10100\n      result['args'] = JSON.stringify(item.args);                                                                      // 10101\n      return result;                                                                                                   // 10102\n    }));                                                                                                               // 10103\n    console.log(                                                                                                       // 10104\n      'Total time:',                                                                                                   // 10105\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'                                           // 10106\n    );                                                                                                                 // 10107\n  },                                                                                                                   // 10108\n                                                                                                                       // 10109\n  _recordWrite: function(id, fnName, totalTime, args) {                                                                // 10110\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows                                         // 10111\n    var writes =                                                                                                       // 10112\n      ReactDefaultPerf                                                                                                 // 10113\n        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]                                                // 10114\n        .writes;                                                                                                       // 10115\n    writes[id] = writes[id] || [];                                                                                     // 10116\n    writes[id].push({                                                                                                  // 10117\n      type: fnName,                                                                                                    // 10118\n      time: totalTime,                                                                                                 // 10119\n      args: args                                                                                                       // 10120\n    });                                                                                                                // 10121\n  },                                                                                                                   // 10122\n                                                                                                                       // 10123\n  measure: function(moduleName, fnName, func) {                                                                        // 10124\n    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);     // 10125\n      var totalTime;                                                                                                   // 10126\n      var rv;                                                                                                          // 10127\n      var start;                                                                                                       // 10128\n                                                                                                                       // 10129\n      if (fnName === '_renderNewRootComponent' ||                                                                      // 10130\n          fnName === 'flushBatchedUpdates') {                                                                          // 10131\n        // A \"measurement\" is a set of metrics recorded for each flush. We want                                        // 10132\n        // to group the metrics for a given flush together so we can look at the                                       // 10133\n        // components that rendered and the DOM operations that actually                                               // 10134\n        // happened to determine the amount of \"wasted work\" performed.                                                // 10135\n        ReactDefaultPerf._allMeasurements.push({                                                                       // 10136\n          exclusive: {},                                                                                               // 10137\n          inclusive: {},                                                                                               // 10138\n          render: {},                                                                                                  // 10139\n          counts: {},                                                                                                  // 10140\n          writes: {},                                                                                                  // 10141\n          displayNames: {},                                                                                            // 10142\n          totalTime: 0                                                                                                 // 10143\n        });                                                                                                            // 10144\n        start = performanceNow();                                                                                      // 10145\n        rv = func.apply(this, args);                                                                                   // 10146\n        ReactDefaultPerf._allMeasurements[                                                                             // 10147\n          ReactDefaultPerf._allMeasurements.length - 1                                                                 // 10148\n        ].totalTime = performanceNow() - start;                                                                        // 10149\n        return rv;                                                                                                     // 10150\n      } else if (fnName === '_mountImageIntoNode' ||                                                                   // 10151\n          moduleName === 'ReactDOMIDOperations') {                                                                     // 10152\n        start = performanceNow();                                                                                      // 10153\n        rv = func.apply(this, args);                                                                                   // 10154\n        totalTime = performanceNow() - start;                                                                          // 10155\n                                                                                                                       // 10156\n        if (fnName === '_mountImageIntoNode') {                                                                        // 10157\n          var mountID = ReactMount.getID(args[1]);                                                                     // 10158\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);                                          // 10159\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {                                                   // 10160\n          // special format                                                                                            // 10161\n          args[0].forEach(function(update) {                                                                           // 10162\n            var writeArgs = {};                                                                                        // 10163\n            if (update.fromIndex !== null) {                                                                           // 10164\n              writeArgs.fromIndex = update.fromIndex;                                                                  // 10165\n            }                                                                                                          // 10166\n            if (update.toIndex !== null) {                                                                             // 10167\n              writeArgs.toIndex = update.toIndex;                                                                      // 10168\n            }                                                                                                          // 10169\n            if (update.textContent !== null) {                                                                         // 10170\n              writeArgs.textContent = update.textContent;                                                              // 10171\n            }                                                                                                          // 10172\n            if (update.markupIndex !== null) {                                                                         // 10173\n              writeArgs.markup = args[1][update.markupIndex];                                                          // 10174\n            }                                                                                                          // 10175\n            ReactDefaultPerf._recordWrite(                                                                             // 10176\n              update.parentID,                                                                                         // 10177\n              update.type,                                                                                             // 10178\n              totalTime,                                                                                               // 10179\n              writeArgs                                                                                                // 10180\n            );                                                                                                         // 10181\n          });                                                                                                          // 10182\n        } else {                                                                                                       // 10183\n          // basic format                                                                                              // 10184\n          ReactDefaultPerf._recordWrite(                                                                               // 10185\n            args[0],                                                                                                   // 10186\n            fnName,                                                                                                    // 10187\n            totalTime,                                                                                                 // 10188\n            Array.prototype.slice.call(args, 1)                                                                        // 10189\n          );                                                                                                           // 10190\n        }                                                                                                              // 10191\n        return rv;                                                                                                     // 10192\n      } else if (moduleName === 'ReactCompositeComponent' && (                                                         // 10193\n        (// TODO: receiveComponent()?                                                                                  // 10194\n        (fnName === 'mountComponent' ||                                                                                // 10195\n        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {                                   // 10196\n                                                                                                                       // 10197\n        if (typeof this._currentElement.type === 'string') {                                                           // 10198\n          return func.apply(this, args);                                                                               // 10199\n        }                                                                                                              // 10200\n                                                                                                                       // 10201\n        var rootNodeID = fnName === 'mountComponent' ?                                                                 // 10202\n          args[0] :                                                                                                    // 10203\n          this._rootNodeID;                                                                                            // 10204\n        var isRender = fnName === '_renderValidatedComponent';                                                         // 10205\n        var isMount = fnName === 'mountComponent';                                                                     // 10206\n                                                                                                                       // 10207\n        var mountStack = ReactDefaultPerf._mountStack;                                                                 // 10208\n        var entry = ReactDefaultPerf._allMeasurements[                                                                 // 10209\n          ReactDefaultPerf._allMeasurements.length - 1                                                                 // 10210\n        ];                                                                                                             // 10211\n                                                                                                                       // 10212\n        if (isRender) {                                                                                                // 10213\n          addValue(entry.counts, rootNodeID, 1);                                                                       // 10214\n        } else if (isMount) {                                                                                          // 10215\n          mountStack.push(0);                                                                                          // 10216\n        }                                                                                                              // 10217\n                                                                                                                       // 10218\n        start = performanceNow();                                                                                      // 10219\n        rv = func.apply(this, args);                                                                                   // 10220\n        totalTime = performanceNow() - start;                                                                          // 10221\n                                                                                                                       // 10222\n        if (isRender) {                                                                                                // 10223\n          addValue(entry.render, rootNodeID, totalTime);                                                               // 10224\n        } else if (isMount) {                                                                                          // 10225\n          var subMountTime = mountStack.pop();                                                                         // 10226\n          mountStack[mountStack.length - 1] += totalTime;                                                              // 10227\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);                                             // 10228\n          addValue(entry.inclusive, rootNodeID, totalTime);                                                            // 10229\n        } else {                                                                                                       // 10230\n          addValue(entry.inclusive, rootNodeID, totalTime);                                                            // 10231\n        }                                                                                                              // 10232\n                                                                                                                       // 10233\n        entry.displayNames[rootNodeID] = {                                                                             // 10234\n          current: this.getName(),                                                                                     // 10235\n          owner: this._currentElement._owner ?                                                                         // 10236\n            this._currentElement._owner.getName() :                                                                    // 10237\n            '<root>'                                                                                                   // 10238\n        };                                                                                                             // 10239\n                                                                                                                       // 10240\n        return rv;                                                                                                     // 10241\n      } else {                                                                                                         // 10242\n        return func.apply(this, args);                                                                                 // 10243\n      }                                                                                                                // 10244\n    };                                                                                                                 // 10245\n  }                                                                                                                    // 10246\n};                                                                                                                     // 10247\n                                                                                                                       // 10248\nmodule.exports = ReactDefaultPerf;                                                                                     // 10249\n                                                                                                                       // 10250\n},{\"./DOMProperty\":\"react/lib/DOMProperty\",\"./ReactDefaultPerfAnalysis\":\"react/lib/ReactDefaultPerfAnalysis\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./performanceNow\":\"react/lib/performanceNow\"}],\"react/lib/ReactElementValidator\":[function(require,module,exports){\n(function (process){                                                                                                   // 10252\n/**                                                                                                                    // 10253\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 10254\n * All rights reserved.                                                                                                // 10255\n *                                                                                                                     // 10256\n * This source code is licensed under the BSD-style license found in the                                               // 10257\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 10258\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 10259\n *                                                                                                                     // 10260\n * @providesModule ReactElementValidator                                                                               // 10261\n */                                                                                                                    // 10262\n                                                                                                                       // 10263\n/**                                                                                                                    // 10264\n * ReactElementValidator provides a wrapper around a element factory                                                   // 10265\n * which validates the props passed to the element. This is intended to be                                             // 10266\n * used only in DEV and could be replaced by a static type checker for languages                                       // 10267\n * that support it.                                                                                                    // 10268\n */                                                                                                                    // 10269\n                                                                                                                       // 10270\n'use strict';                                                                                                          // 10271\n                                                                                                                       // 10272\nvar ReactElement = require(\"./ReactElement\");                                                                          // 10273\nvar ReactFragment = require(\"./ReactFragment\");                                                                        // 10274\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");                                                      // 10275\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");                                              // 10276\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");                                                                // 10277\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");                                                          // 10278\n                                                                                                                       // 10279\nvar getIteratorFn = require(\"./getIteratorFn\");                                                                        // 10280\nvar invariant = require(\"./invariant\");                                                                                // 10281\nvar warning = require(\"./warning\");                                                                                    // 10282\n                                                                                                                       // 10283\nfunction getDeclarationErrorAddendum() {                                                                               // 10284\n  if (ReactCurrentOwner.current) {                                                                                     // 10285\n    var name = ReactCurrentOwner.current.getName();                                                                    // 10286\n    if (name) {                                                                                                        // 10287\n      return ' Check the render method of `' + name + '`.';                                                            // 10288\n    }                                                                                                                  // 10289\n  }                                                                                                                    // 10290\n  return '';                                                                                                           // 10291\n}                                                                                                                      // 10292\n                                                                                                                       // 10293\n/**                                                                                                                    // 10294\n * Warn if there's no key explicitly set on dynamic arrays of children or                                              // 10295\n * object keys are not valid. This allows us to keep track of children between                                         // 10296\n * updates.                                                                                                            // 10297\n */                                                                                                                    // 10298\nvar ownerHasKeyUseWarning = {};                                                                                        // 10299\n                                                                                                                       // 10300\nvar loggedTypeFailures = {};                                                                                           // 10301\n                                                                                                                       // 10302\nvar NUMERIC_PROPERTY_REGEX = /^\\d+$/;                                                                                  // 10303\n                                                                                                                       // 10304\n/**                                                                                                                    // 10305\n * Gets the instance's name for use in warnings.                                                                       // 10306\n *                                                                                                                     // 10307\n * @internal                                                                                                           // 10308\n * @return {?string} Display name or undefined                                                                         // 10309\n */                                                                                                                    // 10310\nfunction getName(instance) {                                                                                           // 10311\n  var publicInstance = instance && instance.getPublicInstance();                                                       // 10312\n  if (!publicInstance) {                                                                                               // 10313\n    return undefined;                                                                                                  // 10314\n  }                                                                                                                    // 10315\n  var constructor = publicInstance.constructor;                                                                        // 10316\n  if (!constructor) {                                                                                                  // 10317\n    return undefined;                                                                                                  // 10318\n  }                                                                                                                    // 10319\n  return constructor.displayName || constructor.name || undefined;                                                     // 10320\n}                                                                                                                      // 10321\n                                                                                                                       // 10322\n/**                                                                                                                    // 10323\n * Gets the current owner's displayName for use in warnings.                                                           // 10324\n *                                                                                                                     // 10325\n * @internal                                                                                                           // 10326\n * @return {?string} Display name or undefined                                                                         // 10327\n */                                                                                                                    // 10328\nfunction getCurrentOwnerDisplayName() {                                                                                // 10329\n  var current = ReactCurrentOwner.current;                                                                             // 10330\n  return (                                                                                                             // 10331\n    current && getName(current) || undefined                                                                           // 10332\n  );                                                                                                                   // 10333\n}                                                                                                                      // 10334\n                                                                                                                       // 10335\n/**                                                                                                                    // 10336\n * Warn if the element doesn't have an explicit key assigned to it.                                                    // 10337\n * This element is in an array. The array could grow and shrink or be                                                  // 10338\n * reordered. All children that haven't already been validated are required to                                         // 10339\n * have a \"key\" property assigned to it.                                                                               // 10340\n *                                                                                                                     // 10341\n * @internal                                                                                                           // 10342\n * @param {ReactElement} element Element that requires a key.                                                          // 10343\n * @param {*} parentType element's parent's type.                                                                      // 10344\n */                                                                                                                    // 10345\nfunction validateExplicitKey(element, parentType) {                                                                    // 10346\n  if (element._store.validated || element.key != null) {                                                               // 10347\n    return;                                                                                                            // 10348\n  }                                                                                                                    // 10349\n  element._store.validated = true;                                                                                     // 10350\n                                                                                                                       // 10351\n  warnAndMonitorForKeyUse(                                                                                             // 10352\n    'Each child in an array or iterator should have a unique \"key\" prop.',                                             // 10353\n    element,                                                                                                           // 10354\n    parentType                                                                                                         // 10355\n  );                                                                                                                   // 10356\n}                                                                                                                      // 10357\n                                                                                                                       // 10358\n/**                                                                                                                    // 10359\n * Warn if the key is being defined as an object property but has an incorrect                                         // 10360\n * value.                                                                                                              // 10361\n *                                                                                                                     // 10362\n * @internal                                                                                                           // 10363\n * @param {string} name Property name of the key.                                                                      // 10364\n * @param {ReactElement} element Component that requires a key.                                                        // 10365\n * @param {*} parentType element's parent's type.                                                                      // 10366\n */                                                                                                                    // 10367\nfunction validatePropertyKey(name, element, parentType) {                                                              // 10368\n  if (!NUMERIC_PROPERTY_REGEX.test(name)) {                                                                            // 10369\n    return;                                                                                                            // 10370\n  }                                                                                                                    // 10371\n  warnAndMonitorForKeyUse(                                                                                             // 10372\n    'Child objects should have non-numeric keys so ordering is preserved.',                                            // 10373\n    element,                                                                                                           // 10374\n    parentType                                                                                                         // 10375\n  );                                                                                                                   // 10376\n}                                                                                                                      // 10377\n                                                                                                                       // 10378\n/**                                                                                                                    // 10379\n * Shared warning and monitoring code for the key warnings.                                                            // 10380\n *                                                                                                                     // 10381\n * @internal                                                                                                           // 10382\n * @param {string} message The base warning that gets output.                                                          // 10383\n * @param {ReactElement} element Component that requires a key.                                                        // 10384\n * @param {*} parentType element's parent's type.                                                                      // 10385\n */                                                                                                                    // 10386\nfunction warnAndMonitorForKeyUse(message, element, parentType) {                                                       // 10387\n  var ownerName = getCurrentOwnerDisplayName();                                                                        // 10388\n  var parentName = typeof parentType === 'string' ?                                                                    // 10389\n    parentType : parentType.displayName || parentType.name;                                                            // 10390\n                                                                                                                       // 10391\n  var useName = ownerName || parentName;                                                                               // 10392\n  var memoizer = ownerHasKeyUseWarning[message] || (                                                                   // 10393\n    (ownerHasKeyUseWarning[message] = {})                                                                              // 10394\n  );                                                                                                                   // 10395\n  if (memoizer.hasOwnProperty(useName)) {                                                                              // 10396\n    return;                                                                                                            // 10397\n  }                                                                                                                    // 10398\n  memoizer[useName] = true;                                                                                            // 10399\n                                                                                                                       // 10400\n  var parentOrOwnerAddendum =                                                                                          // 10401\n    ownerName ? (\" Check the render method of \" + ownerName + \".\") :                                                   // 10402\n    parentName ? (\" Check the React.render call using <\" + parentName + \">.\") :                                        // 10403\n    '';                                                                                                                // 10404\n                                                                                                                       // 10405\n  // Usually the current owner is the offender, but if it accepts children as a                                        // 10406\n  // property, it may be the creator of the child that's responsible for                                               // 10407\n  // assigning it a key.                                                                                               // 10408\n  var childOwnerAddendum = '';                                                                                         // 10409\n  if (element &&                                                                                                       // 10410\n      element._owner &&                                                                                                // 10411\n      element._owner !== ReactCurrentOwner.current) {                                                                  // 10412\n    // Name of the component that originally created this child.                                                       // 10413\n    var childOwnerName = getName(element._owner);                                                                      // 10414\n                                                                                                                       // 10415\n    childOwnerAddendum = (\" It was passed a child from \" + childOwnerName + \".\");                                      // 10416\n  }                                                                                                                    // 10417\n                                                                                                                       // 10418\n  (\"production\" !== process.env.NODE_ENV ? warning(                                                                    // 10419\n    false,                                                                                                             // 10420\n    message + '%s%s See https://fb.me/react-warning-keys for more information.',                                       // 10421\n    parentOrOwnerAddendum,                                                                                             // 10422\n    childOwnerAddendum                                                                                                 // 10423\n  ) : null);                                                                                                           // 10424\n}                                                                                                                      // 10425\n                                                                                                                       // 10426\n/**                                                                                                                    // 10427\n * Ensure that every element either is passed in a static location, in an                                              // 10428\n * array with an explicit keys property defined, or in an object literal                                               // 10429\n * with valid key property.                                                                                            // 10430\n *                                                                                                                     // 10431\n * @internal                                                                                                           // 10432\n * @param {ReactNode} node Statically passed child of any type.                                                        // 10433\n * @param {*} parentType node's parent's type.                                                                         // 10434\n */                                                                                                                    // 10435\nfunction validateChildKeys(node, parentType) {                                                                         // 10436\n  if (Array.isArray(node)) {                                                                                           // 10437\n    for (var i = 0; i < node.length; i++) {                                                                            // 10438\n      var child = node[i];                                                                                             // 10439\n      if (ReactElement.isValidElement(child)) {                                                                        // 10440\n        validateExplicitKey(child, parentType);                                                                        // 10441\n      }                                                                                                                // 10442\n    }                                                                                                                  // 10443\n  } else if (ReactElement.isValidElement(node)) {                                                                      // 10444\n    // This element was passed in a valid location.                                                                    // 10445\n    node._store.validated = true;                                                                                      // 10446\n  } else if (node) {                                                                                                   // 10447\n    var iteratorFn = getIteratorFn(node);                                                                              // 10448\n    // Entry iterators provide implicit keys.                                                                          // 10449\n    if (iteratorFn) {                                                                                                  // 10450\n      if (iteratorFn !== node.entries) {                                                                               // 10451\n        var iterator = iteratorFn.call(node);                                                                          // 10452\n        var step;                                                                                                      // 10453\n        while (!(step = iterator.next()).done) {                                                                       // 10454\n          if (ReactElement.isValidElement(step.value)) {                                                               // 10455\n            validateExplicitKey(step.value, parentType);                                                               // 10456\n          }                                                                                                            // 10457\n        }                                                                                                              // 10458\n      }                                                                                                                // 10459\n    } else if (typeof node === 'object') {                                                                             // 10460\n      var fragment = ReactFragment.extractIfFragment(node);                                                            // 10461\n      for (var key in fragment) {                                                                                      // 10462\n        if (fragment.hasOwnProperty(key)) {                                                                            // 10463\n          validatePropertyKey(key, fragment[key], parentType);                                                         // 10464\n        }                                                                                                              // 10465\n      }                                                                                                                // 10466\n    }                                                                                                                  // 10467\n  }                                                                                                                    // 10468\n}                                                                                                                      // 10469\n                                                                                                                       // 10470\n/**                                                                                                                    // 10471\n * Assert that the props are valid                                                                                     // 10472\n *                                                                                                                     // 10473\n * @param {string} componentName Name of the component for error messages.                                             // 10474\n * @param {object} propTypes Map of prop name to a ReactPropType                                                       // 10475\n * @param {object} props                                                                                               // 10476\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"                                                    // 10477\n * @private                                                                                                            // 10478\n */                                                                                                                    // 10479\nfunction checkPropTypes(componentName, propTypes, props, location) {                                                   // 10480\n  for (var propName in propTypes) {                                                                                    // 10481\n    if (propTypes.hasOwnProperty(propName)) {                                                                          // 10482\n      var error;                                                                                                       // 10483\n      // Prop type validation may throw. In case they do, we don't want to                                             // 10484\n      // fail the render phase where it didn't fail before. So we log it.                                              // 10485\n      // After these have been cleaned up, we'll let them throw.                                                       // 10486\n      try {                                                                                                            // 10487\n        // This is intentionally an invariant that gets caught. It's the same                                          // 10488\n        // behavior as without this statement except with a better message.                                            // 10489\n        (\"production\" !== process.env.NODE_ENV ? invariant(                                                            // 10490\n          typeof propTypes[propName] === 'function',                                                                   // 10491\n          '%s: %s type `%s` is invalid; it must be a function, usually from ' +                                        // 10492\n          'React.PropTypes.',                                                                                          // 10493\n          componentName || 'React class',                                                                              // 10494\n          ReactPropTypeLocationNames[location],                                                                        // 10495\n          propName                                                                                                     // 10496\n        ) : invariant(typeof propTypes[propName] === 'function'));                                                     // 10497\n        error = propTypes[propName](props, propName, componentName, location);                                         // 10498\n      } catch (ex) {                                                                                                   // 10499\n        error = ex;                                                                                                    // 10500\n      }                                                                                                                // 10501\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                          // 10502\n        // Only monitor this failure once because there tends to be a lot of the                                       // 10503\n        // same error.                                                                                                 // 10504\n        loggedTypeFailures[error.message] = true;                                                                      // 10505\n                                                                                                                       // 10506\n        var addendum = getDeclarationErrorAddendum(this);                                                              // 10507\n        (\"production\" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);\n      }                                                                                                                // 10509\n    }                                                                                                                  // 10510\n  }                                                                                                                    // 10511\n}                                                                                                                      // 10512\n                                                                                                                       // 10513\nvar warnedPropsMutations = {};                                                                                         // 10514\n                                                                                                                       // 10515\n/**                                                                                                                    // 10516\n * Warn about mutating props when setting `propName` on `element`.                                                     // 10517\n *                                                                                                                     // 10518\n * @param {string} propName The string key within props that was set                                                   // 10519\n * @param {ReactElement} element                                                                                       // 10520\n */                                                                                                                    // 10521\nfunction warnForPropsMutation(propName, element) {                                                                     // 10522\n  var type = element.type;                                                                                             // 10523\n  var elementName = typeof type === 'string' ? type : type.displayName;                                                // 10524\n  var ownerName = element._owner ?                                                                                     // 10525\n    element._owner.getPublicInstance().constructor.displayName : null;                                                 // 10526\n                                                                                                                       // 10527\n  var warningKey = propName + '|' + elementName + '|' + ownerName;                                                     // 10528\n  if (warnedPropsMutations.hasOwnProperty(warningKey)) {                                                               // 10529\n    return;                                                                                                            // 10530\n  }                                                                                                                    // 10531\n  warnedPropsMutations[warningKey] = true;                                                                             // 10532\n                                                                                                                       // 10533\n  var elementInfo = '';                                                                                                // 10534\n  if (elementName) {                                                                                                   // 10535\n    elementInfo = ' <' + elementName + ' />';                                                                          // 10536\n  }                                                                                                                    // 10537\n  var ownerInfo = '';                                                                                                  // 10538\n  if (ownerName) {                                                                                                     // 10539\n    ownerInfo = ' The element was created by ' + ownerName + '.';                                                      // 10540\n  }                                                                                                                    // 10541\n                                                                                                                       // 10542\n  (\"production\" !== process.env.NODE_ENV ? warning(                                                                    // 10543\n    false,                                                                                                             // 10544\n    'Don\\'t set .props.%s of the React component%s. Instead, specify the ' +                                           // 10545\n    'correct value when initially creating the element or use ' +                                                      // 10546\n    'React.cloneElement to make a new element with updated props.%s',                                                  // 10547\n    propName,                                                                                                          // 10548\n    elementInfo,                                                                                                       // 10549\n    ownerInfo                                                                                                          // 10550\n  ) : null);                                                                                                           // 10551\n}                                                                                                                      // 10552\n                                                                                                                       // 10553\n// Inline Object.is polyfill                                                                                           // 10554\nfunction is(a, b) {                                                                                                    // 10555\n  if (a !== a) {                                                                                                       // 10556\n    // NaN                                                                                                             // 10557\n    return b !== b;                                                                                                    // 10558\n  }                                                                                                                    // 10559\n  if (a === 0 && b === 0) {                                                                                            // 10560\n    // +-0                                                                                                             // 10561\n    return 1 / a === 1 / b;                                                                                            // 10562\n  }                                                                                                                    // 10563\n  return a === b;                                                                                                      // 10564\n}                                                                                                                      // 10565\n                                                                                                                       // 10566\n/**                                                                                                                    // 10567\n * Given an element, check if its props have been mutated since element                                                // 10568\n * creation (or the last call to this function). In particular, check if any                                           // 10569\n * new props have been added, which we can't directly catch by defining warning                                        // 10570\n * properties on the props object.                                                                                     // 10571\n *                                                                                                                     // 10572\n * @param {ReactElement} element                                                                                       // 10573\n */                                                                                                                    // 10574\nfunction checkAndWarnForMutatedProps(element) {                                                                        // 10575\n  if (!element._store) {                                                                                               // 10576\n    // Element was created using `new ReactElement` directly or with                                                   // 10577\n    // `ReactElement.createElement`; skip mutation checking                                                            // 10578\n    return;                                                                                                            // 10579\n  }                                                                                                                    // 10580\n                                                                                                                       // 10581\n  var originalProps = element._store.originalProps;                                                                    // 10582\n  var props = element.props;                                                                                           // 10583\n                                                                                                                       // 10584\n  for (var propName in props) {                                                                                        // 10585\n    if (props.hasOwnProperty(propName)) {                                                                              // 10586\n      if (!originalProps.hasOwnProperty(propName) ||                                                                   // 10587\n          !is(originalProps[propName], props[propName])) {                                                             // 10588\n        warnForPropsMutation(propName, element);                                                                       // 10589\n                                                                                                                       // 10590\n        // Copy over the new value so that the two props objects match again                                           // 10591\n        originalProps[propName] = props[propName];                                                                     // 10592\n      }                                                                                                                // 10593\n    }                                                                                                                  // 10594\n  }                                                                                                                    // 10595\n}                                                                                                                      // 10596\n                                                                                                                       // 10597\n/**                                                                                                                    // 10598\n * Given an element, validate that its props follow the propTypes definition,                                          // 10599\n * provided by the type.                                                                                               // 10600\n *                                                                                                                     // 10601\n * @param {ReactElement} element                                                                                       // 10602\n */                                                                                                                    // 10603\nfunction validatePropTypes(element) {                                                                                  // 10604\n  if (element.type == null) {                                                                                          // 10605\n    // This has already warned. Don't throw.                                                                           // 10606\n    return;                                                                                                            // 10607\n  }                                                                                                                    // 10608\n  // Extract the component class from the element. Converts string types                                               // 10609\n  // to a composite class which may have propTypes.                                                                    // 10610\n  // TODO: Validating a string's propTypes is not decoupled from the                                                   // 10611\n  // rendering target which is problematic.                                                                            // 10612\n  var componentClass = ReactNativeComponent.getComponentClassForElement(                                               // 10613\n    element                                                                                                            // 10614\n  );                                                                                                                   // 10615\n  var name = componentClass.displayName || componentClass.name;                                                        // 10616\n  if (componentClass.propTypes) {                                                                                      // 10617\n    checkPropTypes(                                                                                                    // 10618\n      name,                                                                                                            // 10619\n      componentClass.propTypes,                                                                                        // 10620\n      element.props,                                                                                                   // 10621\n      ReactPropTypeLocations.prop                                                                                      // 10622\n    );                                                                                                                 // 10623\n  }                                                                                                                    // 10624\n  if (typeof componentClass.getDefaultProps === 'function') {                                                          // 10625\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 10626\n      componentClass.getDefaultProps.isReactClassApproved,                                                             // 10627\n      'getDefaultProps is only used on classic React.createClass ' +                                                   // 10628\n      'definitions. Use a static property named `defaultProps` instead.'                                               // 10629\n    ) : null);                                                                                                         // 10630\n  }                                                                                                                    // 10631\n}                                                                                                                      // 10632\n                                                                                                                       // 10633\nvar ReactElementValidator = {                                                                                          // 10634\n                                                                                                                       // 10635\n  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,                                                            // 10636\n                                                                                                                       // 10637\n  createElement: function(type, props, children) {                                                                     // 10638\n    // We warn in this case but don't throw. We expect the element creation to                                         // 10639\n    // succeed and there will likely be errors in render.                                                              // 10640\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 10641\n      type != null,                                                                                                    // 10642\n      'React.createElement: type should not be null or undefined. It should ' +                                        // 10643\n        'be a string (for DOM elements) or a ReactClass (for composite ' +                                             // 10644\n        'components).'                                                                                                 // 10645\n    ) : null);                                                                                                         // 10646\n                                                                                                                       // 10647\n    var element = ReactElement.createElement.apply(this, arguments);                                                   // 10648\n                                                                                                                       // 10649\n    // The result can be nullish if a mock or a custom function is used.                                               // 10650\n    // TODO: Drop this when these are no longer allowed as the type argument.                                          // 10651\n    if (element == null) {                                                                                             // 10652\n      return element;                                                                                                  // 10653\n    }                                                                                                                  // 10654\n                                                                                                                       // 10655\n    for (var i = 2; i < arguments.length; i++) {                                                                       // 10656\n      validateChildKeys(arguments[i], type);                                                                           // 10657\n    }                                                                                                                  // 10658\n                                                                                                                       // 10659\n    validatePropTypes(element);                                                                                        // 10660\n                                                                                                                       // 10661\n    return element;                                                                                                    // 10662\n  },                                                                                                                   // 10663\n                                                                                                                       // 10664\n  createFactory: function(type) {                                                                                      // 10665\n    var validatedFactory = ReactElementValidator.createElement.bind(                                                   // 10666\n      null,                                                                                                            // 10667\n      type                                                                                                             // 10668\n    );                                                                                                                 // 10669\n    // Legacy hook TODO: Warn if this is accessed                                                                      // 10670\n    validatedFactory.type = type;                                                                                      // 10671\n                                                                                                                       // 10672\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 10673\n      try {                                                                                                            // 10674\n        Object.defineProperty(                                                                                         // 10675\n          validatedFactory,                                                                                            // 10676\n          'type',                                                                                                      // 10677\n          {                                                                                                            // 10678\n            enumerable: false,                                                                                         // 10679\n            get: function() {                                                                                          // 10680\n              (\"production\" !== process.env.NODE_ENV ? warning(                                                        // 10681\n                false,                                                                                                 // 10682\n                'Factory.type is deprecated. Access the class directly ' +                                             // 10683\n                'before passing it to createFactory.'                                                                  // 10684\n              ) : null);                                                                                               // 10685\n              Object.defineProperty(this, 'type', {                                                                    // 10686\n                value: type                                                                                            // 10687\n              });                                                                                                      // 10688\n              return type;                                                                                             // 10689\n            }                                                                                                          // 10690\n          }                                                                                                            // 10691\n        );                                                                                                             // 10692\n      } catch (x) {                                                                                                    // 10693\n        // IE will fail on defineProperty (es5-shim/sham too)                                                          // 10694\n      }                                                                                                                // 10695\n    }                                                                                                                  // 10696\n                                                                                                                       // 10697\n                                                                                                                       // 10698\n    return validatedFactory;                                                                                           // 10699\n  },                                                                                                                   // 10700\n                                                                                                                       // 10701\n  cloneElement: function(element, props, children) {                                                                   // 10702\n    var newElement = ReactElement.cloneElement.apply(this, arguments);                                                 // 10703\n    for (var i = 2; i < arguments.length; i++) {                                                                       // 10704\n      validateChildKeys(arguments[i], newElement.type);                                                                // 10705\n    }                                                                                                                  // 10706\n    validatePropTypes(newElement);                                                                                     // 10707\n    return newElement;                                                                                                 // 10708\n  }                                                                                                                    // 10709\n                                                                                                                       // 10710\n};                                                                                                                     // 10711\n                                                                                                                       // 10712\nmodule.exports = ReactElementValidator;                                                                                // 10713\n                                                                                                                       // 10714\n}).call(this,require('_process'))                                                                                      // 10715\n                                                                                                                       // 10716\n},{\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactFragment\":\"react/lib/ReactFragment\",\"./ReactNativeComponent\":\"react/lib/ReactNativeComponent\",\"./ReactPropTypeLocationNames\":\"react/lib/ReactPropTypeLocationNames\",\"./ReactPropTypeLocations\":\"react/lib/ReactPropTypeLocations\",\"./getIteratorFn\":\"react/lib/getIteratorFn\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactElement\":[function(require,module,exports){\n(function (process){                                                                                                   // 10718\n/**                                                                                                                    // 10719\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 10720\n * All rights reserved.                                                                                                // 10721\n *                                                                                                                     // 10722\n * This source code is licensed under the BSD-style license found in the                                               // 10723\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 10724\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 10725\n *                                                                                                                     // 10726\n * @providesModule ReactElement                                                                                        // 10727\n */                                                                                                                    // 10728\n                                                                                                                       // 10729\n'use strict';                                                                                                          // 10730\n                                                                                                                       // 10731\nvar ReactContext = require(\"./ReactContext\");                                                                          // 10732\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");                                                                // 10733\n                                                                                                                       // 10734\nvar assign = require(\"./Object.assign\");                                                                               // 10735\nvar warning = require(\"./warning\");                                                                                    // 10736\n                                                                                                                       // 10737\nvar RESERVED_PROPS = {                                                                                                 // 10738\n  key: true,                                                                                                           // 10739\n  ref: true                                                                                                            // 10740\n};                                                                                                                     // 10741\n                                                                                                                       // 10742\n/**                                                                                                                    // 10743\n * Warn for mutations.                                                                                                 // 10744\n *                                                                                                                     // 10745\n * @internal                                                                                                           // 10746\n * @param {object} object                                                                                              // 10747\n * @param {string} key                                                                                                 // 10748\n */                                                                                                                    // 10749\nfunction defineWarningProperty(object, key) {                                                                          // 10750\n  Object.defineProperty(object, key, {                                                                                 // 10751\n                                                                                                                       // 10752\n    configurable: false,                                                                                               // 10753\n    enumerable: true,                                                                                                  // 10754\n                                                                                                                       // 10755\n    get: function() {                                                                                                  // 10756\n      if (!this._store) {                                                                                              // 10757\n        return null;                                                                                                   // 10758\n      }                                                                                                                // 10759\n      return this._store[key];                                                                                         // 10760\n    },                                                                                                                 // 10761\n                                                                                                                       // 10762\n    set: function(value) {                                                                                             // 10763\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 10764\n        false,                                                                                                         // 10765\n        'Don\\'t set the %s property of the React element. Instead, ' +                                                 // 10766\n        'specify the correct value when initially creating the element.',                                              // 10767\n        key                                                                                                            // 10768\n      ) : null);                                                                                                       // 10769\n      this._store[key] = value;                                                                                        // 10770\n    }                                                                                                                  // 10771\n                                                                                                                       // 10772\n  });                                                                                                                  // 10773\n}                                                                                                                      // 10774\n                                                                                                                       // 10775\n/**                                                                                                                    // 10776\n * This is updated to true if the membrane is successfully created.                                                    // 10777\n */                                                                                                                    // 10778\nvar useMutationMembrane = false;                                                                                       // 10779\n                                                                                                                       // 10780\n/**                                                                                                                    // 10781\n * Warn for mutations.                                                                                                 // 10782\n *                                                                                                                     // 10783\n * @internal                                                                                                           // 10784\n * @param {object} element                                                                                             // 10785\n */                                                                                                                    // 10786\nfunction defineMutationMembrane(prototype) {                                                                           // 10787\n  try {                                                                                                                // 10788\n    var pseudoFrozenProperties = {                                                                                     // 10789\n      props: true                                                                                                      // 10790\n    };                                                                                                                 // 10791\n    for (var key in pseudoFrozenProperties) {                                                                          // 10792\n      defineWarningProperty(prototype, key);                                                                           // 10793\n    }                                                                                                                  // 10794\n    useMutationMembrane = true;                                                                                        // 10795\n  } catch (x) {                                                                                                        // 10796\n    // IE will fail on defineProperty                                                                                  // 10797\n  }                                                                                                                    // 10798\n}                                                                                                                      // 10799\n                                                                                                                       // 10800\n/**                                                                                                                    // 10801\n * Base constructor for all React elements. This is only used to make this                                             // 10802\n * work with a dynamic instanceof check. Nothing should live on this prototype.                                        // 10803\n *                                                                                                                     // 10804\n * @param {*} type                                                                                                     // 10805\n * @param {string|object} ref                                                                                          // 10806\n * @param {*} key                                                                                                      // 10807\n * @param {*} props                                                                                                    // 10808\n * @internal                                                                                                           // 10809\n */                                                                                                                    // 10810\nvar ReactElement = function(type, key, ref, owner, context, props) {                                                   // 10811\n  // Built-in properties that belong on the element                                                                    // 10812\n  this.type = type;                                                                                                    // 10813\n  this.key = key;                                                                                                      // 10814\n  this.ref = ref;                                                                                                      // 10815\n                                                                                                                       // 10816\n  // Record the component responsible for creating this element.                                                       // 10817\n  this._owner = owner;                                                                                                 // 10818\n                                                                                                                       // 10819\n  // TODO: Deprecate withContext, and then the context becomes accessible                                              // 10820\n  // through the owner.                                                                                                // 10821\n  this._context = context;                                                                                             // 10822\n                                                                                                                       // 10823\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 10824\n    // The validation flag and props are currently mutative. We put them on                                            // 10825\n    // an external backing store so that we can freeze the whole object.                                               // 10826\n    // This can be replaced with a WeakMap once they are implemented in                                                // 10827\n    // commonly used development environments.                                                                         // 10828\n    this._store = {props: props, originalProps: assign({}, props)};                                                    // 10829\n                                                                                                                       // 10830\n    // To make comparing ReactElements easier for testing purposes, we make                                            // 10831\n    // the validation flag non-enumerable (where possible, which should                                                // 10832\n    // include every environment we run tests in), so the test framework                                               // 10833\n    // ignores it.                                                                                                     // 10834\n    try {                                                                                                              // 10835\n      Object.defineProperty(this._store, 'validated', {                                                                // 10836\n        configurable: false,                                                                                           // 10837\n        enumerable: false,                                                                                             // 10838\n        writable: true                                                                                                 // 10839\n      });                                                                                                              // 10840\n    } catch (x) {                                                                                                      // 10841\n    }                                                                                                                  // 10842\n    this._store.validated = false;                                                                                     // 10843\n                                                                                                                       // 10844\n    // We're not allowed to set props directly on the object so we early                                               // 10845\n    // return and rely on the prototype membrane to forward to the backing                                             // 10846\n    // store.                                                                                                          // 10847\n    if (useMutationMembrane) {                                                                                         // 10848\n      Object_freeze(this);                                                                                             // 10849\n      return;                                                                                                          // 10850\n    }                                                                                                                  // 10851\n  }                                                                                                                    // 10852\n                                                                                                                       // 10853\n  this.props = props;                                                                                                  // 10854\n};                                                                                                                     // 10855\n                                                                                                                       // 10856\n// We intentionally don't expose the function on the constructor property.                                             // 10857\n// ReactElement should be indistinguishable from a plain object.                                                       // 10858\nReactElement.prototype = {                                                                                             // 10859\n  _isReactElement: true                                                                                                // 10860\n};                                                                                                                     // 10861\n                                                                                                                       // 10862\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 10863\n  defineMutationMembrane(ReactElement.prototype);                                                                      // 10864\n}                                                                                                                      // 10865\n                                                                                                                       // 10866\nReactElement.createElement = function(type, config, children) {                                                        // 10867\n  var propName;                                                                                                        // 10868\n                                                                                                                       // 10869\n  // Reserved names are extracted                                                                                      // 10870\n  var props = {};                                                                                                      // 10871\n                                                                                                                       // 10872\n  var key = null;                                                                                                      // 10873\n  var ref = null;                                                                                                      // 10874\n                                                                                                                       // 10875\n  if (config != null) {                                                                                                // 10876\n    ref = config.ref === undefined ? null : config.ref;                                                                // 10877\n    key = config.key === undefined ? null : '' + config.key;                                                           // 10878\n    // Remaining properties are added to a new props object                                                            // 10879\n    for (propName in config) {                                                                                         // 10880\n      if (config.hasOwnProperty(propName) &&                                                                           // 10881\n          !RESERVED_PROPS.hasOwnProperty(propName)) {                                                                  // 10882\n        props[propName] = config[propName];                                                                            // 10883\n      }                                                                                                                // 10884\n    }                                                                                                                  // 10885\n  }                                                                                                                    // 10886\n                                                                                                                       // 10887\n  // Children can be more than one argument, and those are transferred onto                                            // 10888\n  // the newly allocated props object.                                                                                 // 10889\n  var childrenLength = arguments.length - 2;                                                                           // 10890\n  if (childrenLength === 1) {                                                                                          // 10891\n    props.children = children;                                                                                         // 10892\n  } else if (childrenLength > 1) {                                                                                     // 10893\n    var childArray = Array(childrenLength);                                                                            // 10894\n    for (var i = 0; i < childrenLength; i++) {                                                                         // 10895\n      childArray[i] = arguments[i + 2];                                                                                // 10896\n    }                                                                                                                  // 10897\n    props.children = childArray;                                                                                       // 10898\n  }                                                                                                                    // 10899\n                                                                                                                       // 10900\n  // Resolve default props                                                                                             // 10901\n  if (type && type.defaultProps) {                                                                                     // 10902\n    var defaultProps = type.defaultProps;                                                                              // 10903\n    for (propName in defaultProps) {                                                                                   // 10904\n      if (typeof props[propName] === 'undefined') {                                                                    // 10905\n        props[propName] = defaultProps[propName];                                                                      // 10906\n      }                                                                                                                // 10907\n    }                                                                                                                  // 10908\n  }                                                                                                                    // 10909\n                                                                                                                       // 10910\n  return new ReactElement(                                                                                             // 10911\n    type,                                                                                                              // 10912\n    key,                                                                                                               // 10913\n    ref,                                                                                                               // 10914\n    ReactCurrentOwner.current,                                                                                         // 10915\n    ReactContext.current,                                                                                              // 10916\n    props                                                                                                              // 10917\n  );                                                                                                                   // 10918\n};                                                                                                                     // 10919\n                                                                                                                       // 10920\nReactElement.createFactory = function(type) {                                                                          // 10921\n  var factory = ReactElement.createElement.bind(null, type);                                                           // 10922\n  // Expose the type on the factory and the prototype so that it can be                                                // 10923\n  // easily accessed on elements. E.g. <Foo />.type === Foo.type.                                                      // 10924\n  // This should not be named `constructor` since this may not be the function                                         // 10925\n  // that created the element, and it may not even be a constructor.                                                   // 10926\n  // Legacy hook TODO: Warn if this is accessed                                                                        // 10927\n  factory.type = type;                                                                                                 // 10928\n  return factory;                                                                                                      // 10929\n};                                                                                                                     // 10930\n                                                                                                                       // 10931\nReactElement.cloneAndReplaceProps = function(oldElement, newProps) {                                                   // 10932\n  var newElement = new ReactElement(                                                                                   // 10933\n    oldElement.type,                                                                                                   // 10934\n    oldElement.key,                                                                                                    // 10935\n    oldElement.ref,                                                                                                    // 10936\n    oldElement._owner,                                                                                                 // 10937\n    oldElement._context,                                                                                               // 10938\n    newProps                                                                                                           // 10939\n  );                                                                                                                   // 10940\n                                                                                                                       // 10941\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 10942\n    // If the key on the original is valid, then the clone is valid                                                    // 10943\n    newElement._store.validated = oldElement._store.validated;                                                         // 10944\n  }                                                                                                                    // 10945\n  return newElement;                                                                                                   // 10946\n};                                                                                                                     // 10947\n                                                                                                                       // 10948\nReactElement.cloneElement = function(element, config, children) {                                                      // 10949\n  var propName;                                                                                                        // 10950\n                                                                                                                       // 10951\n  // Original props are copied                                                                                         // 10952\n  var props = assign({}, element.props);                                                                               // 10953\n                                                                                                                       // 10954\n  // Reserved names are extracted                                                                                      // 10955\n  var key = element.key;                                                                                               // 10956\n  var ref = element.ref;                                                                                               // 10957\n                                                                                                                       // 10958\n  // Owner will be preserved, unless ref is overridden                                                                 // 10959\n  var owner = element._owner;                                                                                          // 10960\n                                                                                                                       // 10961\n  if (config != null) {                                                                                                // 10962\n    if (config.ref !== undefined) {                                                                                    // 10963\n      // Silently steal the ref from the parent.                                                                       // 10964\n      ref = config.ref;                                                                                                // 10965\n      owner = ReactCurrentOwner.current;                                                                               // 10966\n    }                                                                                                                  // 10967\n    if (config.key !== undefined) {                                                                                    // 10968\n      key = '' + config.key;                                                                                           // 10969\n    }                                                                                                                  // 10970\n    // Remaining properties override existing props                                                                    // 10971\n    for (propName in config) {                                                                                         // 10972\n      if (config.hasOwnProperty(propName) &&                                                                           // 10973\n          !RESERVED_PROPS.hasOwnProperty(propName)) {                                                                  // 10974\n        props[propName] = config[propName];                                                                            // 10975\n      }                                                                                                                // 10976\n    }                                                                                                                  // 10977\n  }                                                                                                                    // 10978\n                                                                                                                       // 10979\n  // Children can be more than one argument, and those are transferred onto                                            // 10980\n  // the newly allocated props object.                                                                                 // 10981\n  var childrenLength = arguments.length - 2;                                                                           // 10982\n  if (childrenLength === 1) {                                                                                          // 10983\n    props.children = children;                                                                                         // 10984\n  } else if (childrenLength > 1) {                                                                                     // 10985\n    var childArray = Array(childrenLength);                                                                            // 10986\n    for (var i = 0; i < childrenLength; i++) {                                                                         // 10987\n      childArray[i] = arguments[i + 2];                                                                                // 10988\n    }                                                                                                                  // 10989\n    props.children = childArray;                                                                                       // 10990\n  }                                                                                                                    // 10991\n                                                                                                                       // 10992\n  return new ReactElement(                                                                                             // 10993\n    element.type,                                                                                                      // 10994\n    key,                                                                                                               // 10995\n    ref,                                                                                                               // 10996\n    owner,                                                                                                             // 10997\n    element._context,                                                                                                  // 10998\n    props                                                                                                              // 10999\n  );                                                                                                                   // 11000\n};                                                                                                                     // 11001\n                                                                                                                       // 11002\n/**                                                                                                                    // 11003\n * @param {?object} object                                                                                             // 11004\n * @return {boolean} True if `object` is a valid component.                                                            // 11005\n * @final                                                                                                              // 11006\n */                                                                                                                    // 11007\nReactElement.isValidElement = function(object) {                                                                       // 11008\n  // ReactTestUtils is often used outside of beforeEach where as React is                                              // 11009\n  // within it. This leads to two different instances of React on the same                                             // 11010\n  // page. To identify a element from a different React instance we use                                                // 11011\n  // a flag instead of an instanceof check.                                                                            // 11012\n  var isElement = !!(object && object._isReactElement);                                                                // 11013\n  // if (isElement && !(object instanceof ReactElement)) {                                                             // 11014\n  // This is an indicator that you're using multiple versions of React at the                                          // 11015\n  // same time. This will screw with ownership and stuff. Fix it, please.                                              // 11016\n  // TODO: We could possibly warn here.                                                                                // 11017\n  // }                                                                                                                 // 11018\n  return isElement;                                                                                                    // 11019\n};                                                                                                                     // 11020\n                                                                                                                       // 11021\nmodule.exports = ReactElement;                                                                                         // 11022\n                                                                                                                       // 11023\n}).call(this,require('_process'))                                                                                      // 11024\n                                                                                                                       // 11025\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactContext\":\"react/lib/ReactContext\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactEmptyComponent\":[function(require,module,exports){\n(function (process){                                                                                                   // 11027\n/**                                                                                                                    // 11028\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 11029\n * All rights reserved.                                                                                                // 11030\n *                                                                                                                     // 11031\n * This source code is licensed under the BSD-style license found in the                                               // 11032\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 11033\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 11034\n *                                                                                                                     // 11035\n * @providesModule ReactEmptyComponent                                                                                 // 11036\n */                                                                                                                    // 11037\n                                                                                                                       // 11038\n'use strict';                                                                                                          // 11039\n                                                                                                                       // 11040\nvar ReactElement = require(\"./ReactElement\");                                                                          // 11041\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");                                                                  // 11042\n                                                                                                                       // 11043\nvar invariant = require(\"./invariant\");                                                                                // 11044\n                                                                                                                       // 11045\nvar component;                                                                                                         // 11046\n// This registry keeps track of the React IDs of the components that rendered to                                       // 11047\n// `null` (in reality a placeholder such as `noscript`)                                                                // 11048\nvar nullComponentIDsRegistry = {};                                                                                     // 11049\n                                                                                                                       // 11050\nvar ReactEmptyComponentInjection = {                                                                                   // 11051\n  injectEmptyComponent: function(emptyComponent) {                                                                     // 11052\n    component = ReactElement.createFactory(emptyComponent);                                                            // 11053\n  }                                                                                                                    // 11054\n};                                                                                                                     // 11055\n                                                                                                                       // 11056\nvar ReactEmptyComponentType = function() {};                                                                           // 11057\nReactEmptyComponentType.prototype.componentDidMount = function() {                                                     // 11058\n  var internalInstance = ReactInstanceMap.get(this);                                                                   // 11059\n  // TODO: Make sure we run these methods in the correct order, we shouldn't                                           // 11060\n  // need this check. We're going to assume if we're here it means we ran                                              // 11061\n  // componentWillUnmount already so there is no internal instance (it gets                                            // 11062\n  // removed as part of the unmounting process).                                                                       // 11063\n  if (!internalInstance) {                                                                                             // 11064\n    return;                                                                                                            // 11065\n  }                                                                                                                    // 11066\n  registerNullComponentID(internalInstance._rootNodeID);                                                               // 11067\n};                                                                                                                     // 11068\nReactEmptyComponentType.prototype.componentWillUnmount = function() {                                                  // 11069\n  var internalInstance = ReactInstanceMap.get(this);                                                                   // 11070\n  // TODO: Get rid of this check. See TODO in componentDidMount.                                                       // 11071\n  if (!internalInstance) {                                                                                             // 11072\n    return;                                                                                                            // 11073\n  }                                                                                                                    // 11074\n  deregisterNullComponentID(internalInstance._rootNodeID);                                                             // 11075\n};                                                                                                                     // 11076\nReactEmptyComponentType.prototype.render = function() {                                                                // 11077\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 11078\n    component,                                                                                                         // 11079\n    'Trying to return null from a render, but no null placeholder component ' +                                        // 11080\n    'was injected.'                                                                                                    // 11081\n  ) : invariant(component));                                                                                           // 11082\n  return component();                                                                                                  // 11083\n};                                                                                                                     // 11084\n                                                                                                                       // 11085\nvar emptyElement = ReactElement.createElement(ReactEmptyComponentType);                                                // 11086\n                                                                                                                       // 11087\n/**                                                                                                                    // 11088\n * Mark the component as having rendered to null.                                                                      // 11089\n * @param {string} id Component's `_rootNodeID`.                                                                       // 11090\n */                                                                                                                    // 11091\nfunction registerNullComponentID(id) {                                                                                 // 11092\n  nullComponentIDsRegistry[id] = true;                                                                                 // 11093\n}                                                                                                                      // 11094\n                                                                                                                       // 11095\n/**                                                                                                                    // 11096\n * Unmark the component as having rendered to null: it renders to something now.                                       // 11097\n * @param {string} id Component's `_rootNodeID`.                                                                       // 11098\n */                                                                                                                    // 11099\nfunction deregisterNullComponentID(id) {                                                                               // 11100\n  delete nullComponentIDsRegistry[id];                                                                                 // 11101\n}                                                                                                                      // 11102\n                                                                                                                       // 11103\n/**                                                                                                                    // 11104\n * @param {string} id Component's `_rootNodeID`.                                                                       // 11105\n * @return {boolean} True if the component is rendered to null.                                                        // 11106\n */                                                                                                                    // 11107\nfunction isNullComponentID(id) {                                                                                       // 11108\n  return !!nullComponentIDsRegistry[id];                                                                               // 11109\n}                                                                                                                      // 11110\n                                                                                                                       // 11111\nvar ReactEmptyComponent = {                                                                                            // 11112\n  emptyElement: emptyElement,                                                                                          // 11113\n  injection: ReactEmptyComponentInjection,                                                                             // 11114\n  isNullComponentID: isNullComponentID                                                                                 // 11115\n};                                                                                                                     // 11116\n                                                                                                                       // 11117\nmodule.exports = ReactEmptyComponent;                                                                                  // 11118\n                                                                                                                       // 11119\n}).call(this,require('_process'))                                                                                      // 11120\n                                                                                                                       // 11121\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactErrorUtils\":[function(require,module,exports){\n/**                                                                                                                    // 11123\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 11124\n * All rights reserved.                                                                                                // 11125\n *                                                                                                                     // 11126\n * This source code is licensed under the BSD-style license found in the                                               // 11127\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 11128\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 11129\n *                                                                                                                     // 11130\n * @providesModule ReactErrorUtils                                                                                     // 11131\n * @typechecks                                                                                                         // 11132\n */                                                                                                                    // 11133\n                                                                                                                       // 11134\n\"use strict\";                                                                                                          // 11135\n                                                                                                                       // 11136\nvar ReactErrorUtils = {                                                                                                // 11137\n  /**                                                                                                                  // 11138\n   * Creates a guarded version of a function. This is supposed to make debugging                                       // 11139\n   * of event handlers easier. To aid debugging with the browser's debugger,                                           // 11140\n   * this currently simply returns the original function.                                                              // 11141\n   *                                                                                                                   // 11142\n   * @param {function} func Function to be executed                                                                    // 11143\n   * @param {string} name The name of the guard                                                                        // 11144\n   * @return {function}                                                                                                // 11145\n   */                                                                                                                  // 11146\n  guard: function(func, name) {                                                                                        // 11147\n    return func;                                                                                                       // 11148\n  }                                                                                                                    // 11149\n};                                                                                                                     // 11150\n                                                                                                                       // 11151\nmodule.exports = ReactErrorUtils;                                                                                      // 11152\n                                                                                                                       // 11153\n},{}],\"react/lib/ReactEventEmitterMixin\":[function(require,module,exports){                                            // 11154\n/**                                                                                                                    // 11155\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 11156\n * All rights reserved.                                                                                                // 11157\n *                                                                                                                     // 11158\n * This source code is licensed under the BSD-style license found in the                                               // 11159\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 11160\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 11161\n *                                                                                                                     // 11162\n * @providesModule ReactEventEmitterMixin                                                                              // 11163\n */                                                                                                                    // 11164\n                                                                                                                       // 11165\n'use strict';                                                                                                          // 11166\n                                                                                                                       // 11167\nvar EventPluginHub = require(\"./EventPluginHub\");                                                                      // 11168\n                                                                                                                       // 11169\nfunction runEventQueueInBatch(events) {                                                                                // 11170\n  EventPluginHub.enqueueEvents(events);                                                                                // 11171\n  EventPluginHub.processEventQueue();                                                                                  // 11172\n}                                                                                                                      // 11173\n                                                                                                                       // 11174\nvar ReactEventEmitterMixin = {                                                                                         // 11175\n                                                                                                                       // 11176\n  /**                                                                                                                  // 11177\n   * Streams a fired top-level event to `EventPluginHub` where plugins have the                                        // 11178\n   * opportunity to create `ReactEvent`s to be dispatched.                                                             // 11179\n   *                                                                                                                   // 11180\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 11181\n   * @param {object} topLevelTarget The listening component root node.                                                 // 11182\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 11183\n   * @param {object} nativeEvent Native environment event.                                                             // 11184\n   */                                                                                                                  // 11185\n  handleTopLevel: function(                                                                                            // 11186\n      topLevelType,                                                                                                    // 11187\n      topLevelTarget,                                                                                                  // 11188\n      topLevelTargetID,                                                                                                // 11189\n      nativeEvent) {                                                                                                   // 11190\n    var events = EventPluginHub.extractEvents(                                                                         // 11191\n      topLevelType,                                                                                                    // 11192\n      topLevelTarget,                                                                                                  // 11193\n      topLevelTargetID,                                                                                                // 11194\n      nativeEvent                                                                                                      // 11195\n    );                                                                                                                 // 11196\n                                                                                                                       // 11197\n    runEventQueueInBatch(events);                                                                                      // 11198\n  }                                                                                                                    // 11199\n};                                                                                                                     // 11200\n                                                                                                                       // 11201\nmodule.exports = ReactEventEmitterMixin;                                                                               // 11202\n                                                                                                                       // 11203\n},{\"./EventPluginHub\":\"react/lib/EventPluginHub\"}],\"react/lib/ReactEventListener\":[function(require,module,exports){   // 11204\n/**                                                                                                                    // 11205\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 11206\n * All rights reserved.                                                                                                // 11207\n *                                                                                                                     // 11208\n * This source code is licensed under the BSD-style license found in the                                               // 11209\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 11210\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 11211\n *                                                                                                                     // 11212\n * @providesModule ReactEventListener                                                                                  // 11213\n * @typechecks static-only                                                                                             // 11214\n */                                                                                                                    // 11215\n                                                                                                                       // 11216\n'use strict';                                                                                                          // 11217\n                                                                                                                       // 11218\nvar EventListener = require(\"./EventListener\");                                                                        // 11219\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 11220\nvar PooledClass = require(\"./PooledClass\");                                                                            // 11221\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");                                                          // 11222\nvar ReactMount = require(\"./ReactMount\");                                                                              // 11223\nvar ReactUpdates = require(\"./ReactUpdates\");                                                                          // 11224\n                                                                                                                       // 11225\nvar assign = require(\"./Object.assign\");                                                                               // 11226\nvar getEventTarget = require(\"./getEventTarget\");                                                                      // 11227\nvar getUnboundedScrollPosition = require(\"./getUnboundedScrollPosition\");                                              // 11228\n                                                                                                                       // 11229\n/**                                                                                                                    // 11230\n * Finds the parent React component of `node`.                                                                         // 11231\n *                                                                                                                     // 11232\n * @param {*} node                                                                                                     // 11233\n * @return {?DOMEventTarget} Parent container, or `null` if the specified node                                         // 11234\n *                           is not nested.                                                                            // 11235\n */                                                                                                                    // 11236\nfunction findParent(node) {                                                                                            // 11237\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM                                              // 11238\n  // traversal, but caching is difficult to do correctly without using a                                               // 11239\n  // mutation observer to listen for all DOM changes.                                                                  // 11240\n  var nodeID = ReactMount.getID(node);                                                                                 // 11241\n  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);                                                  // 11242\n  var container = ReactMount.findReactContainerForID(rootID);                                                          // 11243\n  var parent = ReactMount.getFirstReactDOM(container);                                                                 // 11244\n  return parent;                                                                                                       // 11245\n}                                                                                                                      // 11246\n                                                                                                                       // 11247\n// Used to store ancestor hierarchy in top level callback                                                              // 11248\nfunction TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {                                                      // 11249\n  this.topLevelType = topLevelType;                                                                                    // 11250\n  this.nativeEvent = nativeEvent;                                                                                      // 11251\n  this.ancestors = [];                                                                                                 // 11252\n}                                                                                                                      // 11253\nassign(TopLevelCallbackBookKeeping.prototype, {                                                                        // 11254\n  destructor: function() {                                                                                             // 11255\n    this.topLevelType = null;                                                                                          // 11256\n    this.nativeEvent = null;                                                                                           // 11257\n    this.ancestors.length = 0;                                                                                         // 11258\n  }                                                                                                                    // 11259\n});                                                                                                                    // 11260\nPooledClass.addPoolingTo(                                                                                              // 11261\n  TopLevelCallbackBookKeeping,                                                                                         // 11262\n  PooledClass.twoArgumentPooler                                                                                        // 11263\n);                                                                                                                     // 11264\n                                                                                                                       // 11265\nfunction handleTopLevelImpl(bookKeeping) {                                                                             // 11266\n  var topLevelTarget = ReactMount.getFirstReactDOM(                                                                    // 11267\n    getEventTarget(bookKeeping.nativeEvent)                                                                            // 11268\n  ) || window;                                                                                                         // 11269\n                                                                                                                       // 11270\n  // Loop through the hierarchy, in case there's any nested components.                                                // 11271\n  // It's important that we build the array of ancestors before calling any                                            // 11272\n  // event handlers, because event handlers can modify the DOM, leading to                                             // 11273\n  // inconsistencies with ReactMount's node cache. See #1105.                                                          // 11274\n  var ancestor = topLevelTarget;                                                                                       // 11275\n  while (ancestor) {                                                                                                   // 11276\n    bookKeeping.ancestors.push(ancestor);                                                                              // 11277\n    ancestor = findParent(ancestor);                                                                                   // 11278\n  }                                                                                                                    // 11279\n                                                                                                                       // 11280\n  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {                                                      // 11281\n    topLevelTarget = bookKeeping.ancestors[i];                                                                         // 11282\n    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';                                                     // 11283\n    ReactEventListener._handleTopLevel(                                                                                // 11284\n      bookKeeping.topLevelType,                                                                                        // 11285\n      topLevelTarget,                                                                                                  // 11286\n      topLevelTargetID,                                                                                                // 11287\n      bookKeeping.nativeEvent                                                                                          // 11288\n    );                                                                                                                 // 11289\n  }                                                                                                                    // 11290\n}                                                                                                                      // 11291\n                                                                                                                       // 11292\nfunction scrollValueMonitor(cb) {                                                                                      // 11293\n  var scrollPosition = getUnboundedScrollPosition(window);                                                             // 11294\n  cb(scrollPosition);                                                                                                  // 11295\n}                                                                                                                      // 11296\n                                                                                                                       // 11297\nvar ReactEventListener = {                                                                                             // 11298\n  _enabled: true,                                                                                                      // 11299\n  _handleTopLevel: null,                                                                                               // 11300\n                                                                                                                       // 11301\n  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,                                                       // 11302\n                                                                                                                       // 11303\n  setHandleTopLevel: function(handleTopLevel) {                                                                        // 11304\n    ReactEventListener._handleTopLevel = handleTopLevel;                                                               // 11305\n  },                                                                                                                   // 11306\n                                                                                                                       // 11307\n  setEnabled: function(enabled) {                                                                                      // 11308\n    ReactEventListener._enabled = !!enabled;                                                                           // 11309\n  },                                                                                                                   // 11310\n                                                                                                                       // 11311\n  isEnabled: function() {                                                                                              // 11312\n    return ReactEventListener._enabled;                                                                                // 11313\n  },                                                                                                                   // 11314\n                                                                                                                       // 11315\n                                                                                                                       // 11316\n  /**                                                                                                                  // 11317\n   * Traps top-level events by using event bubbling.                                                                   // 11318\n   *                                                                                                                   // 11319\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 11320\n   * @param {string} handlerBaseName Event name (e.g. \"click\").                                                        // 11321\n   * @param {object} handle Element on which to attach listener.                                                       // 11322\n   * @return {object} An object with a remove function which will forcefully                                           // 11323\n   *                  remove the listener.                                                                             // 11324\n   * @internal                                                                                                         // 11325\n   */                                                                                                                  // 11326\n  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {                                                  // 11327\n    var element = handle;                                                                                              // 11328\n    if (!element) {                                                                                                    // 11329\n      return null;                                                                                                     // 11330\n    }                                                                                                                  // 11331\n    return EventListener.listen(                                                                                       // 11332\n      element,                                                                                                         // 11333\n      handlerBaseName,                                                                                                 // 11334\n      ReactEventListener.dispatchEvent.bind(null, topLevelType)                                                        // 11335\n    );                                                                                                                 // 11336\n  },                                                                                                                   // 11337\n                                                                                                                       // 11338\n  /**                                                                                                                  // 11339\n   * Traps a top-level event by using event capturing.                                                                 // 11340\n   *                                                                                                                   // 11341\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 11342\n   * @param {string} handlerBaseName Event name (e.g. \"click\").                                                        // 11343\n   * @param {object} handle Element on which to attach listener.                                                       // 11344\n   * @return {object} An object with a remove function which will forcefully                                           // 11345\n   *                  remove the listener.                                                                             // 11346\n   * @internal                                                                                                         // 11347\n   */                                                                                                                  // 11348\n  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {                                                 // 11349\n    var element = handle;                                                                                              // 11350\n    if (!element) {                                                                                                    // 11351\n      return null;                                                                                                     // 11352\n    }                                                                                                                  // 11353\n    return EventListener.capture(                                                                                      // 11354\n      element,                                                                                                         // 11355\n      handlerBaseName,                                                                                                 // 11356\n      ReactEventListener.dispatchEvent.bind(null, topLevelType)                                                        // 11357\n    );                                                                                                                 // 11358\n  },                                                                                                                   // 11359\n                                                                                                                       // 11360\n  monitorScrollValue: function(refresh) {                                                                              // 11361\n    var callback = scrollValueMonitor.bind(null, refresh);                                                             // 11362\n    EventListener.listen(window, 'scroll', callback);                                                                  // 11363\n  },                                                                                                                   // 11364\n                                                                                                                       // 11365\n  dispatchEvent: function(topLevelType, nativeEvent) {                                                                 // 11366\n    if (!ReactEventListener._enabled) {                                                                                // 11367\n      return;                                                                                                          // 11368\n    }                                                                                                                  // 11369\n                                                                                                                       // 11370\n    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(                                                           // 11371\n      topLevelType,                                                                                                    // 11372\n      nativeEvent                                                                                                      // 11373\n    );                                                                                                                 // 11374\n    try {                                                                                                              // 11375\n      // Event queue being processed in the same cycle allows                                                          // 11376\n      // `preventDefault`.                                                                                             // 11377\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);                                                    // 11378\n    } finally {                                                                                                        // 11379\n      TopLevelCallbackBookKeeping.release(bookKeeping);                                                                // 11380\n    }                                                                                                                  // 11381\n  }                                                                                                                    // 11382\n};                                                                                                                     // 11383\n                                                                                                                       // 11384\nmodule.exports = ReactEventListener;                                                                                   // 11385\n                                                                                                                       // 11386\n},{\"./EventListener\":\"react/lib/EventListener\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./getEventTarget\":\"react/lib/getEventTarget\",\"./getUnboundedScrollPosition\":\"react/lib/getUnboundedScrollPosition\"}],\"react/lib/ReactFragment\":[function(require,module,exports){\n(function (process){                                                                                                   // 11388\n/**                                                                                                                    // 11389\n * Copyright 2015, Facebook, Inc.                                                                                      // 11390\n * All rights reserved.                                                                                                // 11391\n *                                                                                                                     // 11392\n * This source code is licensed under the BSD-style license found in the                                               // 11393\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 11394\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 11395\n *                                                                                                                     // 11396\n* @providesModule ReactFragment                                                                                        // 11397\n*/                                                                                                                     // 11398\n                                                                                                                       // 11399\n'use strict';                                                                                                          // 11400\n                                                                                                                       // 11401\nvar ReactElement = require(\"./ReactElement\");                                                                          // 11402\n                                                                                                                       // 11403\nvar warning = require(\"./warning\");                                                                                    // 11404\n                                                                                                                       // 11405\n/**                                                                                                                    // 11406\n * We used to allow keyed objects to serve as a collection of ReactElements,                                           // 11407\n * or nested sets. This allowed us a way to explicitly key a set a fragment of                                         // 11408\n * components. This is now being replaced with an opaque data structure.                                               // 11409\n * The upgrade path is to call React.addons.createFragment({ key: value }) to                                          // 11410\n * create a keyed fragment. The resulting data structure is opaque, for now.                                           // 11411\n */                                                                                                                    // 11412\n                                                                                                                       // 11413\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 11414\n  var fragmentKey = '_reactFragment';                                                                                  // 11415\n  var didWarnKey = '_reactDidWarn';                                                                                    // 11416\n  var canWarnForReactFragment = false;                                                                                 // 11417\n                                                                                                                       // 11418\n  try {                                                                                                                // 11419\n    // Feature test. Don't even try to issue this warning if we can't use                                              // 11420\n    // enumerable: false.                                                                                              // 11421\n                                                                                                                       // 11422\n    var dummy = function() {                                                                                           // 11423\n      return 1;                                                                                                        // 11424\n    };                                                                                                                 // 11425\n                                                                                                                       // 11426\n    Object.defineProperty(                                                                                             // 11427\n      {},                                                                                                              // 11428\n      fragmentKey,                                                                                                     // 11429\n      {enumerable: false, value: true}                                                                                 // 11430\n    );                                                                                                                 // 11431\n                                                                                                                       // 11432\n    Object.defineProperty(                                                                                             // 11433\n      {},                                                                                                              // 11434\n      'key',                                                                                                           // 11435\n      {enumerable: true, get: dummy}                                                                                   // 11436\n    );                                                                                                                 // 11437\n                                                                                                                       // 11438\n    canWarnForReactFragment = true;                                                                                    // 11439\n  } catch (x) { }                                                                                                      // 11440\n                                                                                                                       // 11441\n  var proxyPropertyAccessWithWarning = function(obj, key) {                                                            // 11442\n    Object.defineProperty(obj, key, {                                                                                  // 11443\n      enumerable: true,                                                                                                // 11444\n      get: function() {                                                                                                // 11445\n        (\"production\" !== process.env.NODE_ENV ? warning(                                                              // 11446\n          this[didWarnKey],                                                                                            // 11447\n          'A ReactFragment is an opaque type. Accessing any of its ' +                                                 // 11448\n          'properties is deprecated. Pass it to one of the React.Children ' +                                          // 11449\n          'helpers.'                                                                                                   // 11450\n        ) : null);                                                                                                     // 11451\n        this[didWarnKey] = true;                                                                                       // 11452\n        return this[fragmentKey][key];                                                                                 // 11453\n      },                                                                                                               // 11454\n      set: function(value) {                                                                                           // 11455\n        (\"production\" !== process.env.NODE_ENV ? warning(                                                              // 11456\n          this[didWarnKey],                                                                                            // 11457\n          'A ReactFragment is an immutable opaque type. Mutating its ' +                                               // 11458\n          'properties is deprecated.'                                                                                  // 11459\n        ) : null);                                                                                                     // 11460\n        this[didWarnKey] = true;                                                                                       // 11461\n        this[fragmentKey][key] = value;                                                                                // 11462\n      }                                                                                                                // 11463\n    });                                                                                                                // 11464\n  };                                                                                                                   // 11465\n                                                                                                                       // 11466\n  var issuedWarnings = {};                                                                                             // 11467\n                                                                                                                       // 11468\n  var didWarnForFragment = function(fragment) {                                                                        // 11469\n    // We use the keys and the type of the value as a heuristic to dedupe the                                          // 11470\n    // warning to avoid spamming too much.                                                                             // 11471\n    var fragmentCacheKey = '';                                                                                         // 11472\n    for (var key in fragment) {                                                                                        // 11473\n      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';                                                    // 11474\n    }                                                                                                                  // 11475\n    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];                                                        // 11476\n    issuedWarnings[fragmentCacheKey] = true;                                                                           // 11477\n    return alreadyWarnedOnce;                                                                                          // 11478\n  };                                                                                                                   // 11479\n}                                                                                                                      // 11480\n                                                                                                                       // 11481\nvar ReactFragment = {                                                                                                  // 11482\n  // Wrap a keyed object in an opaque proxy that warns you if you access any                                           // 11483\n  // of its properties.                                                                                                // 11484\n  create: function(object) {                                                                                           // 11485\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 11486\n      if (typeof object !== 'object' || !object || Array.isArray(object)) {                                            // 11487\n        (\"production\" !== process.env.NODE_ENV ? warning(                                                              // 11488\n          false,                                                                                                       // 11489\n          'React.addons.createFragment only accepts a single object.',                                                 // 11490\n          object                                                                                                       // 11491\n        ) : null);                                                                                                     // 11492\n        return object;                                                                                                 // 11493\n      }                                                                                                                // 11494\n      if (ReactElement.isValidElement(object)) {                                                                       // 11495\n        (\"production\" !== process.env.NODE_ENV ? warning(                                                              // 11496\n          false,                                                                                                       // 11497\n          'React.addons.createFragment does not accept a ReactElement ' +                                              // 11498\n          'without a wrapper object.'                                                                                  // 11499\n        ) : null);                                                                                                     // 11500\n        return object;                                                                                                 // 11501\n      }                                                                                                                // 11502\n      if (canWarnForReactFragment) {                                                                                   // 11503\n        var proxy = {};                                                                                                // 11504\n        Object.defineProperty(proxy, fragmentKey, {                                                                    // 11505\n          enumerable: false,                                                                                           // 11506\n          value: object                                                                                                // 11507\n        });                                                                                                            // 11508\n        Object.defineProperty(proxy, didWarnKey, {                                                                     // 11509\n          writable: true,                                                                                              // 11510\n          enumerable: false,                                                                                           // 11511\n          value: false                                                                                                 // 11512\n        });                                                                                                            // 11513\n        for (var key in object) {                                                                                      // 11514\n          proxyPropertyAccessWithWarning(proxy, key);                                                                  // 11515\n        }                                                                                                              // 11516\n        Object.preventExtensions(proxy);                                                                               // 11517\n        return proxy;                                                                                                  // 11518\n      }                                                                                                                // 11519\n    }                                                                                                                  // 11520\n    return object;                                                                                                     // 11521\n  },                                                                                                                   // 11522\n  // Extract the original keyed object from the fragment opaque type. Warn if                                          // 11523\n  // a plain object is passed here.                                                                                    // 11524\n  extract: function(fragment) {                                                                                        // 11525\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 11526\n      if (canWarnForReactFragment) {                                                                                   // 11527\n        if (!fragment[fragmentKey]) {                                                                                  // 11528\n          (\"production\" !== process.env.NODE_ENV ? warning(                                                            // 11529\n            didWarnForFragment(fragment),                                                                              // 11530\n            'Any use of a keyed object should be wrapped in ' +                                                        // 11531\n            'React.addons.createFragment(object) before being passed as a ' +                                          // 11532\n            'child.'                                                                                                   // 11533\n          ) : null);                                                                                                   // 11534\n          return fragment;                                                                                             // 11535\n        }                                                                                                              // 11536\n        return fragment[fragmentKey];                                                                                  // 11537\n      }                                                                                                                // 11538\n    }                                                                                                                  // 11539\n    return fragment;                                                                                                   // 11540\n  },                                                                                                                   // 11541\n  // Check if this is a fragment and if so, extract the keyed object. If it                                            // 11542\n  // is a fragment-like object, warn that it should be wrapped. Ignore if we                                           // 11543\n  // can't determine what kind of object this is.                                                                      // 11544\n  extractIfFragment: function(fragment) {                                                                              // 11545\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 11546\n      if (canWarnForReactFragment) {                                                                                   // 11547\n        // If it is the opaque type, return the keyed object.                                                          // 11548\n        if (fragment[fragmentKey]) {                                                                                   // 11549\n          return fragment[fragmentKey];                                                                                // 11550\n        }                                                                                                              // 11551\n        // Otherwise, check each property if it has an element, if it does                                             // 11552\n        // it is probably meant as a fragment, so we can warn early. Defer,                                            // 11553\n        // the warning to extract.                                                                                     // 11554\n        for (var key in fragment) {                                                                                    // 11555\n          if (fragment.hasOwnProperty(key) &&                                                                          // 11556\n              ReactElement.isValidElement(fragment[key])) {                                                            // 11557\n            // This looks like a fragment object, we should provide an                                                 // 11558\n            // early warning.                                                                                          // 11559\n            return ReactFragment.extract(fragment);                                                                    // 11560\n          }                                                                                                            // 11561\n        }                                                                                                              // 11562\n      }                                                                                                                // 11563\n    }                                                                                                                  // 11564\n    return fragment;                                                                                                   // 11565\n  }                                                                                                                    // 11566\n};                                                                                                                     // 11567\n                                                                                                                       // 11568\nmodule.exports = ReactFragment;                                                                                        // 11569\n                                                                                                                       // 11570\n}).call(this,require('_process'))                                                                                      // 11571\n                                                                                                                       // 11572\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactInjection\":[function(require,module,exports){\n/**                                                                                                                    // 11574\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 11575\n * All rights reserved.                                                                                                // 11576\n *                                                                                                                     // 11577\n * This source code is licensed under the BSD-style license found in the                                               // 11578\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 11579\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 11580\n *                                                                                                                     // 11581\n * @providesModule ReactInjection                                                                                      // 11582\n */                                                                                                                    // 11583\n                                                                                                                       // 11584\n'use strict';                                                                                                          // 11585\n                                                                                                                       // 11586\nvar DOMProperty = require(\"./DOMProperty\");                                                                            // 11587\nvar EventPluginHub = require(\"./EventPluginHub\");                                                                      // 11588\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");                                                // 11589\nvar ReactClass = require(\"./ReactClass\");                                                                              // 11590\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");                                                            // 11591\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");                                                  // 11592\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");                                                          // 11593\nvar ReactDOMComponent = require(\"./ReactDOMComponent\");                                                                // 11594\nvar ReactPerf = require(\"./ReactPerf\");                                                                                // 11595\nvar ReactRootIndex = require(\"./ReactRootIndex\");                                                                      // 11596\nvar ReactUpdates = require(\"./ReactUpdates\");                                                                          // 11597\n                                                                                                                       // 11598\nvar ReactInjection = {                                                                                                 // 11599\n  Component: ReactComponentEnvironment.injection,                                                                      // 11600\n  Class: ReactClass.injection,                                                                                         // 11601\n  DOMComponent: ReactDOMComponent.injection,                                                                           // 11602\n  DOMProperty: DOMProperty.injection,                                                                                  // 11603\n  EmptyComponent: ReactEmptyComponent.injection,                                                                       // 11604\n  EventPluginHub: EventPluginHub.injection,                                                                            // 11605\n  EventEmitter: ReactBrowserEventEmitter.injection,                                                                    // 11606\n  NativeComponent: ReactNativeComponent.injection,                                                                     // 11607\n  Perf: ReactPerf.injection,                                                                                           // 11608\n  RootIndex: ReactRootIndex.injection,                                                                                 // 11609\n  Updates: ReactUpdates.injection                                                                                      // 11610\n};                                                                                                                     // 11611\n                                                                                                                       // 11612\nmodule.exports = ReactInjection;                                                                                       // 11613\n                                                                                                                       // 11614\n},{\"./DOMProperty\":\"react/lib/DOMProperty\",\"./EventPluginHub\":\"react/lib/EventPluginHub\",\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactComponentEnvironment\":\"react/lib/ReactComponentEnvironment\",\"./ReactDOMComponent\":\"react/lib/ReactDOMComponent\",\"./ReactEmptyComponent\":\"react/lib/ReactEmptyComponent\",\"./ReactNativeComponent\":\"react/lib/ReactNativeComponent\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./ReactRootIndex\":\"react/lib/ReactRootIndex\",\"./ReactUpdates\":\"react/lib/ReactUpdates\"}],\"react/lib/ReactInputSelection\":[function(require,module,exports){\n/**                                                                                                                    // 11616\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 11617\n * All rights reserved.                                                                                                // 11618\n *                                                                                                                     // 11619\n * This source code is licensed under the BSD-style license found in the                                               // 11620\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 11621\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 11622\n *                                                                                                                     // 11623\n * @providesModule ReactInputSelection                                                                                 // 11624\n */                                                                                                                    // 11625\n                                                                                                                       // 11626\n'use strict';                                                                                                          // 11627\n                                                                                                                       // 11628\nvar ReactDOMSelection = require(\"./ReactDOMSelection\");                                                                // 11629\n                                                                                                                       // 11630\nvar containsNode = require(\"./containsNode\");                                                                          // 11631\nvar focusNode = require(\"./focusNode\");                                                                                // 11632\nvar getActiveElement = require(\"./getActiveElement\");                                                                  // 11633\n                                                                                                                       // 11634\nfunction isInDocument(node) {                                                                                          // 11635\n  return containsNode(document.documentElement, node);                                                                 // 11636\n}                                                                                                                      // 11637\n                                                                                                                       // 11638\n/**                                                                                                                    // 11639\n * @ReactInputSelection: React input selection module. Based on Selection.js,                                          // 11640\n * but modified to be suitable for react and has a couple of bug fixes (doesn't                                        // 11641\n * assume buttons have range selections allowed).                                                                      // 11642\n * Input selection module for React.                                                                                   // 11643\n */                                                                                                                    // 11644\nvar ReactInputSelection = {                                                                                            // 11645\n                                                                                                                       // 11646\n  hasSelectionCapabilities: function(elem) {                                                                           // 11647\n    return elem && (                                                                                                   // 11648\n      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||                                                          // 11649\n      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')                                                 // 11650\n    );                                                                                                                 // 11651\n  },                                                                                                                   // 11652\n                                                                                                                       // 11653\n  getSelectionInformation: function() {                                                                                // 11654\n    var focusedElem = getActiveElement();                                                                              // 11655\n    return {                                                                                                           // 11656\n      focusedElem: focusedElem,                                                                                        // 11657\n      selectionRange:                                                                                                  // 11658\n          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?                                                  // 11659\n          ReactInputSelection.getSelection(focusedElem) :                                                              // 11660\n          null                                                                                                         // 11661\n    };                                                                                                                 // 11662\n  },                                                                                                                   // 11663\n                                                                                                                       // 11664\n  /**                                                                                                                  // 11665\n   * @restoreSelection: If any selection information was potentially lost,                                             // 11666\n   * restore it. This is useful when performing operations that could remove dom                                       // 11667\n   * nodes and place them back in, resulting in focus being lost.                                                      // 11668\n   */                                                                                                                  // 11669\n  restoreSelection: function(priorSelectionInformation) {                                                              // 11670\n    var curFocusedElem = getActiveElement();                                                                           // 11671\n    var priorFocusedElem = priorSelectionInformation.focusedElem;                                                      // 11672\n    var priorSelectionRange = priorSelectionInformation.selectionRange;                                                // 11673\n    if (curFocusedElem !== priorFocusedElem &&                                                                         // 11674\n        isInDocument(priorFocusedElem)) {                                                                              // 11675\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {                                            // 11676\n        ReactInputSelection.setSelection(                                                                              // 11677\n          priorFocusedElem,                                                                                            // 11678\n          priorSelectionRange                                                                                          // 11679\n        );                                                                                                             // 11680\n      }                                                                                                                // 11681\n      focusNode(priorFocusedElem);                                                                                     // 11682\n    }                                                                                                                  // 11683\n  },                                                                                                                   // 11684\n                                                                                                                       // 11685\n  /**                                                                                                                  // 11686\n   * @getSelection: Gets the selection bounds of a focused textarea, input or                                          // 11687\n   * contentEditable node.                                                                                             // 11688\n   * -@input: Look up selection bounds of this input                                                                   // 11689\n   * -@return {start: selectionStart, end: selectionEnd}                                                               // 11690\n   */                                                                                                                  // 11691\n  getSelection: function(input) {                                                                                      // 11692\n    var selection;                                                                                                     // 11693\n                                                                                                                       // 11694\n    if ('selectionStart' in input) {                                                                                   // 11695\n      // Modern browser with input or textarea.                                                                        // 11696\n      selection = {                                                                                                    // 11697\n        start: input.selectionStart,                                                                                   // 11698\n        end: input.selectionEnd                                                                                        // 11699\n      };                                                                                                               // 11700\n    } else if (document.selection && input.nodeName === 'INPUT') {                                                     // 11701\n      // IE8 input.                                                                                                    // 11702\n      var range = document.selection.createRange();                                                                    // 11703\n      // There can only be one selection per document in IE, so it must                                                // 11704\n      // be in our element.                                                                                            // 11705\n      if (range.parentElement() === input) {                                                                           // 11706\n        selection = {                                                                                                  // 11707\n          start: -range.moveStart('character', -input.value.length),                                                   // 11708\n          end: -range.moveEnd('character', -input.value.length)                                                        // 11709\n        };                                                                                                             // 11710\n      }                                                                                                                // 11711\n    } else {                                                                                                           // 11712\n      // Content editable or old IE textarea.                                                                          // 11713\n      selection = ReactDOMSelection.getOffsets(input);                                                                 // 11714\n    }                                                                                                                  // 11715\n                                                                                                                       // 11716\n    return selection || {start: 0, end: 0};                                                                            // 11717\n  },                                                                                                                   // 11718\n                                                                                                                       // 11719\n  /**                                                                                                                  // 11720\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses                                       // 11721\n   * the input.                                                                                                        // 11722\n   * -@input     Set selection bounds of this input or textarea                                                        // 11723\n   * -@offsets   Object of same form that is returned from get*                                                        // 11724\n   */                                                                                                                  // 11725\n  setSelection: function(input, offsets) {                                                                             // 11726\n    var start = offsets.start;                                                                                         // 11727\n    var end = offsets.end;                                                                                             // 11728\n    if (typeof end === 'undefined') {                                                                                  // 11729\n      end = start;                                                                                                     // 11730\n    }                                                                                                                  // 11731\n                                                                                                                       // 11732\n    if ('selectionStart' in input) {                                                                                   // 11733\n      input.selectionStart = start;                                                                                    // 11734\n      input.selectionEnd = Math.min(end, input.value.length);                                                          // 11735\n    } else if (document.selection && input.nodeName === 'INPUT') {                                                     // 11736\n      var range = input.createTextRange();                                                                             // 11737\n      range.collapse(true);                                                                                            // 11738\n      range.moveStart('character', start);                                                                             // 11739\n      range.moveEnd('character', end - start);                                                                         // 11740\n      range.select();                                                                                                  // 11741\n    } else {                                                                                                           // 11742\n      ReactDOMSelection.setOffsets(input, offsets);                                                                    // 11743\n    }                                                                                                                  // 11744\n  }                                                                                                                    // 11745\n};                                                                                                                     // 11746\n                                                                                                                       // 11747\nmodule.exports = ReactInputSelection;                                                                                  // 11748\n                                                                                                                       // 11749\n},{\"./ReactDOMSelection\":\"react/lib/ReactDOMSelection\",\"./containsNode\":\"react/lib/containsNode\",\"./focusNode\":\"react/lib/focusNode\",\"./getActiveElement\":\"react/lib/getActiveElement\"}],\"react/lib/ReactInstanceHandles\":[function(require,module,exports){\n(function (process){                                                                                                   // 11751\n/**                                                                                                                    // 11752\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 11753\n * All rights reserved.                                                                                                // 11754\n *                                                                                                                     // 11755\n * This source code is licensed under the BSD-style license found in the                                               // 11756\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 11757\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 11758\n *                                                                                                                     // 11759\n * @providesModule ReactInstanceHandles                                                                                // 11760\n * @typechecks static-only                                                                                             // 11761\n */                                                                                                                    // 11762\n                                                                                                                       // 11763\n'use strict';                                                                                                          // 11764\n                                                                                                                       // 11765\nvar ReactRootIndex = require(\"./ReactRootIndex\");                                                                      // 11766\n                                                                                                                       // 11767\nvar invariant = require(\"./invariant\");                                                                                // 11768\n                                                                                                                       // 11769\nvar SEPARATOR = '.';                                                                                                   // 11770\nvar SEPARATOR_LENGTH = SEPARATOR.length;                                                                               // 11771\n                                                                                                                       // 11772\n/**                                                                                                                    // 11773\n * Maximum depth of traversals before we consider the possibility of a bad ID.                                         // 11774\n */                                                                                                                    // 11775\nvar MAX_TREE_DEPTH = 100;                                                                                              // 11776\n                                                                                                                       // 11777\n/**                                                                                                                    // 11778\n * Creates a DOM ID prefix to use when mounting React components.                                                      // 11779\n *                                                                                                                     // 11780\n * @param {number} index A unique integer                                                                              // 11781\n * @return {string} React root ID.                                                                                     // 11782\n * @internal                                                                                                           // 11783\n */                                                                                                                    // 11784\nfunction getReactRootIDString(index) {                                                                                 // 11785\n  return SEPARATOR + index.toString(36);                                                                               // 11786\n}                                                                                                                      // 11787\n                                                                                                                       // 11788\n/**                                                                                                                    // 11789\n * Checks if a character in the supplied ID is a separator or the end.                                                 // 11790\n *                                                                                                                     // 11791\n * @param {string} id A React DOM ID.                                                                                  // 11792\n * @param {number} index Index of the character to check.                                                              // 11793\n * @return {boolean} True if the character is a separator or end of the ID.                                            // 11794\n * @private                                                                                                            // 11795\n */                                                                                                                    // 11796\nfunction isBoundary(id, index) {                                                                                       // 11797\n  return id.charAt(index) === SEPARATOR || index === id.length;                                                        // 11798\n}                                                                                                                      // 11799\n                                                                                                                       // 11800\n/**                                                                                                                    // 11801\n * Checks if the supplied string is a valid React DOM ID.                                                              // 11802\n *                                                                                                                     // 11803\n * @param {string} id A React DOM ID, maybe.                                                                           // 11804\n * @return {boolean} True if the string is a valid React DOM ID.                                                       // 11805\n * @private                                                                                                            // 11806\n */                                                                                                                    // 11807\nfunction isValidID(id) {                                                                                               // 11808\n  return id === '' || (                                                                                                // 11809\n    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR                                               // 11810\n  );                                                                                                                   // 11811\n}                                                                                                                      // 11812\n                                                                                                                       // 11813\n/**                                                                                                                    // 11814\n * Checks if the first ID is an ancestor of or equal to the second ID.                                                 // 11815\n *                                                                                                                     // 11816\n * @param {string} ancestorID                                                                                          // 11817\n * @param {string} descendantID                                                                                        // 11818\n * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.                                            // 11819\n * @internal                                                                                                           // 11820\n */                                                                                                                    // 11821\nfunction isAncestorIDOf(ancestorID, descendantID) {                                                                    // 11822\n  return (                                                                                                             // 11823\n    descendantID.indexOf(ancestorID) === 0 &&                                                                          // 11824\n    isBoundary(descendantID, ancestorID.length)                                                                        // 11825\n  );                                                                                                                   // 11826\n}                                                                                                                      // 11827\n                                                                                                                       // 11828\n/**                                                                                                                    // 11829\n * Gets the parent ID of the supplied React DOM ID, `id`.                                                              // 11830\n *                                                                                                                     // 11831\n * @param {string} id ID of a component.                                                                               // 11832\n * @return {string} ID of the parent, or an empty string.                                                              // 11833\n * @private                                                                                                            // 11834\n */                                                                                                                    // 11835\nfunction getParentID(id) {                                                                                             // 11836\n  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';                                                            // 11837\n}                                                                                                                      // 11838\n                                                                                                                       // 11839\n/**                                                                                                                    // 11840\n * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the                                         // 11841\n * supplied `destinationID`. If they are equal, the ID is returned.                                                    // 11842\n *                                                                                                                     // 11843\n * @param {string} ancestorID ID of an ancestor node of `destinationID`.                                               // 11844\n * @param {string} destinationID ID of the destination node.                                                           // 11845\n * @return {string} Next ID on the path from `ancestorID` to `destinationID`.                                          // 11846\n * @private                                                                                                            // 11847\n */                                                                                                                    // 11848\nfunction getNextDescendantID(ancestorID, destinationID) {                                                              // 11849\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 11850\n    isValidID(ancestorID) && isValidID(destinationID),                                                                 // 11851\n    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',                                                  // 11852\n    ancestorID,                                                                                                        // 11853\n    destinationID                                                                                                      // 11854\n  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));                                                   // 11855\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 11856\n    isAncestorIDOf(ancestorID, destinationID),                                                                         // 11857\n    'getNextDescendantID(...): React has made an invalid assumption about ' +                                          // 11858\n    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',                                                     // 11859\n    ancestorID,                                                                                                        // 11860\n    destinationID                                                                                                      // 11861\n  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));                                                           // 11862\n  if (ancestorID === destinationID) {                                                                                  // 11863\n    return ancestorID;                                                                                                 // 11864\n  }                                                                                                                    // 11865\n  // Skip over the ancestor and the immediate separator. Traverse until we hit                                         // 11866\n  // another separator or we reach the end of `destinationID`.                                                         // 11867\n  var start = ancestorID.length + SEPARATOR_LENGTH;                                                                    // 11868\n  var i;                                                                                                               // 11869\n  for (i = start; i < destinationID.length; i++) {                                                                     // 11870\n    if (isBoundary(destinationID, i)) {                                                                                // 11871\n      break;                                                                                                           // 11872\n    }                                                                                                                  // 11873\n  }                                                                                                                    // 11874\n  return destinationID.substr(0, i);                                                                                   // 11875\n}                                                                                                                      // 11876\n                                                                                                                       // 11877\n/**                                                                                                                    // 11878\n * Gets the nearest common ancestor ID of two IDs.                                                                     // 11879\n *                                                                                                                     // 11880\n * Using this ID scheme, the nearest common ancestor ID is the longest common                                          // 11881\n * prefix of the two IDs that immediately preceded a \"marker\" in both strings.                                         // 11882\n *                                                                                                                     // 11883\n * @param {string} oneID                                                                                               // 11884\n * @param {string} twoID                                                                                               // 11885\n * @return {string} Nearest common ancestor ID, or the empty string if none.                                           // 11886\n * @private                                                                                                            // 11887\n */                                                                                                                    // 11888\nfunction getFirstCommonAncestorID(oneID, twoID) {                                                                      // 11889\n  var minLength = Math.min(oneID.length, twoID.length);                                                                // 11890\n  if (minLength === 0) {                                                                                               // 11891\n    return '';                                                                                                         // 11892\n  }                                                                                                                    // 11893\n  var lastCommonMarkerIndex = 0;                                                                                       // 11894\n  // Use `<=` to traverse until the \"EOL\" of the shorter string.                                                       // 11895\n  for (var i = 0; i <= minLength; i++) {                                                                               // 11896\n    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {                                                                // 11897\n      lastCommonMarkerIndex = i;                                                                                       // 11898\n    } else if (oneID.charAt(i) !== twoID.charAt(i)) {                                                                  // 11899\n      break;                                                                                                           // 11900\n    }                                                                                                                  // 11901\n  }                                                                                                                    // 11902\n  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);                                                        // 11903\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 11904\n    isValidID(longestCommonID),                                                                                        // 11905\n    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',                                             // 11906\n    oneID,                                                                                                             // 11907\n    twoID,                                                                                                             // 11908\n    longestCommonID                                                                                                    // 11909\n  ) : invariant(isValidID(longestCommonID)));                                                                          // 11910\n  return longestCommonID;                                                                                              // 11911\n}                                                                                                                      // 11912\n                                                                                                                       // 11913\n/**                                                                                                                    // 11914\n * Traverses the parent path between two IDs (either up or down). The IDs must                                         // 11915\n * not be the same, and there must exist a parent path between them. If the                                            // 11916\n * callback returns `false`, traversal is stopped.                                                                     // 11917\n *                                                                                                                     // 11918\n * @param {?string} start ID at which to start traversal.                                                              // 11919\n * @param {?string} stop ID at which to end traversal.                                                                 // 11920\n * @param {function} cb Callback to invoke each ID with.                                                               // 11921\n * @param {?boolean} skipFirst Whether or not to skip the first node.                                                  // 11922\n * @param {?boolean} skipLast Whether or not to skip the last node.                                                    // 11923\n * @private                                                                                                            // 11924\n */                                                                                                                    // 11925\nfunction traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {                                               // 11926\n  start = start || '';                                                                                                 // 11927\n  stop = stop || '';                                                                                                   // 11928\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 11929\n    start !== stop,                                                                                                    // 11930\n    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',                                         // 11931\n    start                                                                                                              // 11932\n  ) : invariant(start !== stop));                                                                                      // 11933\n  var traverseUp = isAncestorIDOf(stop, start);                                                                        // 11934\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 11935\n    traverseUp || isAncestorIDOf(start, stop),                                                                         // 11936\n    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +                                         // 11937\n    'not have a parent path.',                                                                                         // 11938\n    start,                                                                                                             // 11939\n    stop                                                                                                               // 11940\n  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));                                                           // 11941\n  // Traverse from `start` to `stop` one depth at a time.                                                              // 11942\n  var depth = 0;                                                                                                       // 11943\n  var traverse = traverseUp ? getParentID : getNextDescendantID;                                                       // 11944\n  for (var id = start; /* until break */; id = traverse(id, stop)) {                                                   // 11945\n    var ret;                                                                                                           // 11946\n    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {                                                  // 11947\n      ret = cb(id, traverseUp, arg);                                                                                   // 11948\n    }                                                                                                                  // 11949\n    if (ret === false || id === stop) {                                                                                // 11950\n      // Only break //after// visiting `stop`.                                                                         // 11951\n      break;                                                                                                           // 11952\n    }                                                                                                                  // 11953\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 11954\n      depth++ < MAX_TREE_DEPTH,                                                                                        // 11955\n      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +                                            // 11956\n      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',                                        // 11957\n      start, stop                                                                                                      // 11958\n    ) : invariant(depth++ < MAX_TREE_DEPTH));                                                                          // 11959\n  }                                                                                                                    // 11960\n}                                                                                                                      // 11961\n                                                                                                                       // 11962\n/**                                                                                                                    // 11963\n * Manages the IDs assigned to DOM representations of React components. This                                           // 11964\n * uses a specific scheme in order to traverse the DOM efficiently (e.g. in                                            // 11965\n * order to simulate events).                                                                                          // 11966\n *                                                                                                                     // 11967\n * @internal                                                                                                           // 11968\n */                                                                                                                    // 11969\nvar ReactInstanceHandles = {                                                                                           // 11970\n                                                                                                                       // 11971\n  /**                                                                                                                  // 11972\n   * Constructs a React root ID                                                                                        // 11973\n   * @return {string} A React root ID.                                                                                 // 11974\n   */                                                                                                                  // 11975\n  createReactRootID: function() {                                                                                      // 11976\n    return getReactRootIDString(ReactRootIndex.createReactRootIndex());                                                // 11977\n  },                                                                                                                   // 11978\n                                                                                                                       // 11979\n  /**                                                                                                                  // 11980\n   * Constructs a React ID by joining a root ID with a name.                                                           // 11981\n   *                                                                                                                   // 11982\n   * @param {string} rootID Root ID of a parent component.                                                             // 11983\n   * @param {string} name A component's name (as flattened children).                                                  // 11984\n   * @return {string} A React ID.                                                                                      // 11985\n   * @internal                                                                                                         // 11986\n   */                                                                                                                  // 11987\n  createReactID: function(rootID, name) {                                                                              // 11988\n    return rootID + name;                                                                                              // 11989\n  },                                                                                                                   // 11990\n                                                                                                                       // 11991\n  /**                                                                                                                  // 11992\n   * Gets the DOM ID of the React component that is the root of the tree that                                          // 11993\n   * contains the React component with the supplied DOM ID.                                                            // 11994\n   *                                                                                                                   // 11995\n   * @param {string} id DOM ID of a React component.                                                                   // 11996\n   * @return {?string} DOM ID of the React component that is the root.                                                 // 11997\n   * @internal                                                                                                         // 11998\n   */                                                                                                                  // 11999\n  getReactRootIDFromNodeID: function(id) {                                                                             // 12000\n    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {                                                           // 12001\n      var index = id.indexOf(SEPARATOR, 1);                                                                            // 12002\n      return index > -1 ? id.substr(0, index) : id;                                                                    // 12003\n    }                                                                                                                  // 12004\n    return null;                                                                                                       // 12005\n  },                                                                                                                   // 12006\n                                                                                                                       // 12007\n  /**                                                                                                                  // 12008\n   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that                                          // 12009\n   * should would receive a `mouseEnter` or `mouseLeave` event.                                                        // 12010\n   *                                                                                                                   // 12011\n   * NOTE: Does not invoke the callback on the nearest common ancestor because                                         // 12012\n   * nothing \"entered\" or \"left\" that element.                                                                         // 12013\n   *                                                                                                                   // 12014\n   * @param {string} leaveID ID being left.                                                                            // 12015\n   * @param {string} enterID ID being entered.                                                                         // 12016\n   * @param {function} cb Callback to invoke on each entered/left ID.                                                  // 12017\n   * @param {*} upArg Argument to invoke the callback with on left IDs.                                                // 12018\n   * @param {*} downArg Argument to invoke the callback with on entered IDs.                                           // 12019\n   * @internal                                                                                                         // 12020\n   */                                                                                                                  // 12021\n  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {                                                 // 12022\n    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);                                                       // 12023\n    if (ancestorID !== leaveID) {                                                                                      // 12024\n      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);                                                 // 12025\n    }                                                                                                                  // 12026\n    if (ancestorID !== enterID) {                                                                                      // 12027\n      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);                                               // 12028\n    }                                                                                                                  // 12029\n  },                                                                                                                   // 12030\n                                                                                                                       // 12031\n  /**                                                                                                                  // 12032\n   * Simulates the traversal of a two-phase, capture/bubble event dispatch.                                            // 12033\n   *                                                                                                                   // 12034\n   * NOTE: This traversal happens on IDs without touching the DOM.                                                     // 12035\n   *                                                                                                                   // 12036\n   * @param {string} targetID ID of the target node.                                                                   // 12037\n   * @param {function} cb Callback to invoke.                                                                          // 12038\n   * @param {*} arg Argument to invoke the callback with.                                                              // 12039\n   * @internal                                                                                                         // 12040\n   */                                                                                                                  // 12041\n  traverseTwoPhase: function(targetID, cb, arg) {                                                                      // 12042\n    if (targetID) {                                                                                                    // 12043\n      traverseParentPath('', targetID, cb, arg, true, false);                                                          // 12044\n      traverseParentPath(targetID, '', cb, arg, false, true);                                                          // 12045\n    }                                                                                                                  // 12046\n  },                                                                                                                   // 12047\n                                                                                                                       // 12048\n  /**                                                                                                                  // 12049\n   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For                                           // 12050\n   * example, passing `.0.$row-0.1` would result in `cb` getting called                                                // 12051\n   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.                                                                        // 12052\n   *                                                                                                                   // 12053\n   * NOTE: This traversal happens on IDs without touching the DOM.                                                     // 12054\n   *                                                                                                                   // 12055\n   * @param {string} targetID ID of the target node.                                                                   // 12056\n   * @param {function} cb Callback to invoke.                                                                          // 12057\n   * @param {*} arg Argument to invoke the callback with.                                                              // 12058\n   * @internal                                                                                                         // 12059\n   */                                                                                                                  // 12060\n  traverseAncestors: function(targetID, cb, arg) {                                                                     // 12061\n    traverseParentPath('', targetID, cb, arg, true, false);                                                            // 12062\n  },                                                                                                                   // 12063\n                                                                                                                       // 12064\n  /**                                                                                                                  // 12065\n   * Exposed for unit testing.                                                                                         // 12066\n   * @private                                                                                                          // 12067\n   */                                                                                                                  // 12068\n  _getFirstCommonAncestorID: getFirstCommonAncestorID,                                                                 // 12069\n                                                                                                                       // 12070\n  /**                                                                                                                  // 12071\n   * Exposed for unit testing.                                                                                         // 12072\n   * @private                                                                                                          // 12073\n   */                                                                                                                  // 12074\n  _getNextDescendantID: getNextDescendantID,                                                                           // 12075\n                                                                                                                       // 12076\n  isAncestorIDOf: isAncestorIDOf,                                                                                      // 12077\n                                                                                                                       // 12078\n  SEPARATOR: SEPARATOR                                                                                                 // 12079\n                                                                                                                       // 12080\n};                                                                                                                     // 12081\n                                                                                                                       // 12082\nmodule.exports = ReactInstanceHandles;                                                                                 // 12083\n                                                                                                                       // 12084\n}).call(this,require('_process'))                                                                                      // 12085\n                                                                                                                       // 12086\n},{\"./ReactRootIndex\":\"react/lib/ReactRootIndex\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactInstanceMap\":[function(require,module,exports){\n/**                                                                                                                    // 12088\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 12089\n * All rights reserved.                                                                                                // 12090\n *                                                                                                                     // 12091\n * This source code is licensed under the BSD-style license found in the                                               // 12092\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 12093\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 12094\n *                                                                                                                     // 12095\n * @providesModule ReactInstanceMap                                                                                    // 12096\n */                                                                                                                    // 12097\n                                                                                                                       // 12098\n'use strict';                                                                                                          // 12099\n                                                                                                                       // 12100\n/**                                                                                                                    // 12101\n * `ReactInstanceMap` maintains a mapping from a public facing stateful                                                // 12102\n * instance (key) and the internal representation (value). This allows public                                          // 12103\n * methods to accept the user facing instance as an argument and map them back                                         // 12104\n * to internal methods.                                                                                                // 12105\n */                                                                                                                    // 12106\n                                                                                                                       // 12107\n// TODO: Replace this with ES6: var ReactInstanceMap = new Map();                                                      // 12108\nvar ReactInstanceMap = {                                                                                               // 12109\n                                                                                                                       // 12110\n  /**                                                                                                                  // 12111\n   * This API should be called `delete` but we'd have to make sure to always                                           // 12112\n   * transform these to strings for IE support. When this transform is fully                                           // 12113\n   * supported we can rename it.                                                                                       // 12114\n   */                                                                                                                  // 12115\n  remove: function(key) {                                                                                              // 12116\n    key._reactInternalInstance = undefined;                                                                            // 12117\n  },                                                                                                                   // 12118\n                                                                                                                       // 12119\n  get: function(key) {                                                                                                 // 12120\n    return key._reactInternalInstance;                                                                                 // 12121\n  },                                                                                                                   // 12122\n                                                                                                                       // 12123\n  has: function(key) {                                                                                                 // 12124\n    return key._reactInternalInstance !== undefined;                                                                   // 12125\n  },                                                                                                                   // 12126\n                                                                                                                       // 12127\n  set: function(key, value) {                                                                                          // 12128\n    key._reactInternalInstance = value;                                                                                // 12129\n  }                                                                                                                    // 12130\n                                                                                                                       // 12131\n};                                                                                                                     // 12132\n                                                                                                                       // 12133\nmodule.exports = ReactInstanceMap;                                                                                     // 12134\n                                                                                                                       // 12135\n},{}],\"react/lib/ReactLifeCycle\":[function(require,module,exports){                                                    // 12136\n/**                                                                                                                    // 12137\n * Copyright 2015, Facebook, Inc.                                                                                      // 12138\n * All rights reserved.                                                                                                // 12139\n *                                                                                                                     // 12140\n * This source code is licensed under the BSD-style license found in the                                               // 12141\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 12142\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 12143\n *                                                                                                                     // 12144\n * @providesModule ReactLifeCycle                                                                                      // 12145\n */                                                                                                                    // 12146\n                                                                                                                       // 12147\n'use strict';                                                                                                          // 12148\n                                                                                                                       // 12149\n/**                                                                                                                    // 12150\n * This module manages the bookkeeping when a component is in the process                                              // 12151\n * of being mounted or being unmounted. This is used as a way to enforce                                               // 12152\n * invariants (or warnings) when it is not recommended to call                                                         // 12153\n * setState/forceUpdate.                                                                                               // 12154\n *                                                                                                                     // 12155\n * currentlyMountingInstance: During the construction phase, it is not possible                                        // 12156\n * to trigger an update since the instance is not fully mounted yet. However, we                                       // 12157\n * currently allow this as a convenience for mutating the initial state.                                               // 12158\n *                                                                                                                     // 12159\n * currentlyUnmountingInstance: During the unmounting phase, the instance is                                           // 12160\n * still mounted and can therefore schedule an update. However, this is not                                            // 12161\n * recommended and probably an error since it's about to be unmounted.                                                 // 12162\n * Therefore we still want to trigger in an error for that case.                                                       // 12163\n */                                                                                                                    // 12164\n                                                                                                                       // 12165\nvar ReactLifeCycle = {                                                                                                 // 12166\n  currentlyMountingInstance: null,                                                                                     // 12167\n  currentlyUnmountingInstance: null                                                                                    // 12168\n};                                                                                                                     // 12169\n                                                                                                                       // 12170\nmodule.exports = ReactLifeCycle;                                                                                       // 12171\n                                                                                                                       // 12172\n},{}],\"react/lib/ReactLink\":[function(require,module,exports){                                                         // 12173\n/**                                                                                                                    // 12174\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 12175\n * All rights reserved.                                                                                                // 12176\n *                                                                                                                     // 12177\n * This source code is licensed under the BSD-style license found in the                                               // 12178\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 12179\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 12180\n *                                                                                                                     // 12181\n * @providesModule ReactLink                                                                                           // 12182\n * @typechecks static-only                                                                                             // 12183\n */                                                                                                                    // 12184\n                                                                                                                       // 12185\n'use strict';                                                                                                          // 12186\n                                                                                                                       // 12187\n/**                                                                                                                    // 12188\n * ReactLink encapsulates a common pattern in which a component wants to modify                                        // 12189\n * a prop received from its parent. ReactLink allows the parent to pass down a                                         // 12190\n * value coupled with a callback that, when invoked, expresses an intent to                                            // 12191\n * modify that value. For example:                                                                                     // 12192\n *                                                                                                                     // 12193\n * React.createClass({                                                                                                 // 12194\n *   getInitialState: function() {                                                                                     // 12195\n *     return {value: ''};                                                                                             // 12196\n *   },                                                                                                                // 12197\n *   render: function() {                                                                                              // 12198\n *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);                                       // 12199\n *     return <input valueLink={valueLink} />;                                                                         // 12200\n *   },                                                                                                                // 12201\n *   this._handleValueChange: function(newValue) {                                                                     // 12202\n *     this.setState({value: newValue});                                                                               // 12203\n *   }                                                                                                                 // 12204\n * });                                                                                                                 // 12205\n *                                                                                                                     // 12206\n * We have provided some sugary mixins to make the creation and                                                        // 12207\n * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.                                         // 12208\n */                                                                                                                    // 12209\n                                                                                                                       // 12210\nvar React = require(\"./React\");                                                                                        // 12211\n                                                                                                                       // 12212\n/**                                                                                                                    // 12213\n * @param {*} value current value of the link                                                                          // 12214\n * @param {function} requestChange callback to request a change                                                        // 12215\n */                                                                                                                    // 12216\nfunction ReactLink(value, requestChange) {                                                                             // 12217\n  this.value = value;                                                                                                  // 12218\n  this.requestChange = requestChange;                                                                                  // 12219\n}                                                                                                                      // 12220\n                                                                                                                       // 12221\n/**                                                                                                                    // 12222\n * Creates a PropType that enforces the ReactLink API and optionally checks the                                        // 12223\n * type of the value being passed inside the link. Example:                                                            // 12224\n *                                                                                                                     // 12225\n * MyComponent.propTypes = {                                                                                           // 12226\n *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)                                                    // 12227\n * }                                                                                                                   // 12228\n */                                                                                                                    // 12229\nfunction createLinkTypeChecker(linkType) {                                                                             // 12230\n  var shapes = {                                                                                                       // 12231\n    value: typeof linkType === 'undefined' ?                                                                           // 12232\n      React.PropTypes.any.isRequired :                                                                                 // 12233\n      linkType.isRequired,                                                                                             // 12234\n    requestChange: React.PropTypes.func.isRequired                                                                     // 12235\n  };                                                                                                                   // 12236\n  return React.PropTypes.shape(shapes);                                                                                // 12237\n}                                                                                                                      // 12238\n                                                                                                                       // 12239\nReactLink.PropTypes = {                                                                                                // 12240\n  link: createLinkTypeChecker                                                                                          // 12241\n};                                                                                                                     // 12242\n                                                                                                                       // 12243\nmodule.exports = ReactLink;                                                                                            // 12244\n                                                                                                                       // 12245\n},{\"./React\":\"react/lib/React\"}],\"react/lib/ReactMarkupChecksum\":[function(require,module,exports){                    // 12246\n/**                                                                                                                    // 12247\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 12248\n * All rights reserved.                                                                                                // 12249\n *                                                                                                                     // 12250\n * This source code is licensed under the BSD-style license found in the                                               // 12251\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 12252\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 12253\n *                                                                                                                     // 12254\n * @providesModule ReactMarkupChecksum                                                                                 // 12255\n */                                                                                                                    // 12256\n                                                                                                                       // 12257\n'use strict';                                                                                                          // 12258\n                                                                                                                       // 12259\nvar adler32 = require(\"./adler32\");                                                                                    // 12260\n                                                                                                                       // 12261\nvar ReactMarkupChecksum = {                                                                                            // 12262\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',                                                                           // 12263\n                                                                                                                       // 12264\n  /**                                                                                                                  // 12265\n   * @param {string} markup Markup string                                                                              // 12266\n   * @return {string} Markup string with checksum attribute attached                                                   // 12267\n   */                                                                                                                  // 12268\n  addChecksumToMarkup: function(markup) {                                                                              // 12269\n    var checksum = adler32(markup);                                                                                    // 12270\n    return markup.replace(                                                                                             // 12271\n      '>',                                                                                                             // 12272\n      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\">'                                            // 12273\n    );                                                                                                                 // 12274\n  },                                                                                                                   // 12275\n                                                                                                                       // 12276\n  /**                                                                                                                  // 12277\n   * @param {string} markup to use                                                                                     // 12278\n   * @param {DOMElement} element root React element                                                                    // 12279\n   * @returns {boolean} whether or not the markup is the same                                                          // 12280\n   */                                                                                                                  // 12281\n  canReuseMarkup: function(markup, element) {                                                                          // 12282\n    var existingChecksum = element.getAttribute(                                                                       // 12283\n      ReactMarkupChecksum.CHECKSUM_ATTR_NAME                                                                           // 12284\n    );                                                                                                                 // 12285\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);                                             // 12286\n    var markupChecksum = adler32(markup);                                                                              // 12287\n    return markupChecksum === existingChecksum;                                                                        // 12288\n  }                                                                                                                    // 12289\n};                                                                                                                     // 12290\n                                                                                                                       // 12291\nmodule.exports = ReactMarkupChecksum;                                                                                  // 12292\n                                                                                                                       // 12293\n},{\"./adler32\":\"react/lib/adler32\"}],\"react/lib/ReactMount\":[function(require,module,exports){                         // 12294\n(function (process){                                                                                                   // 12295\n/**                                                                                                                    // 12296\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 12297\n * All rights reserved.                                                                                                // 12298\n *                                                                                                                     // 12299\n * This source code is licensed under the BSD-style license found in the                                               // 12300\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 12301\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 12302\n *                                                                                                                     // 12303\n * @providesModule ReactMount                                                                                          // 12304\n */                                                                                                                    // 12305\n                                                                                                                       // 12306\n'use strict';                                                                                                          // 12307\n                                                                                                                       // 12308\nvar DOMProperty = require(\"./DOMProperty\");                                                                            // 12309\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");                                                  // 12310\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");                                                                // 12311\nvar ReactElement = require(\"./ReactElement\");                                                                          // 12312\nvar ReactElementValidator = require(\"./ReactElementValidator\");                                                        // 12313\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");                                                            // 12314\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");                                                          // 12315\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");                                                                  // 12316\nvar ReactMarkupChecksum = require(\"./ReactMarkupChecksum\");                                                            // 12317\nvar ReactPerf = require(\"./ReactPerf\");                                                                                // 12318\nvar ReactReconciler = require(\"./ReactReconciler\");                                                                    // 12319\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");                                                                  // 12320\nvar ReactUpdates = require(\"./ReactUpdates\");                                                                          // 12321\n                                                                                                                       // 12322\nvar emptyObject = require(\"./emptyObject\");                                                                            // 12323\nvar containsNode = require(\"./containsNode\");                                                                          // 12324\nvar getReactRootElementInContainer = require(\"./getReactRootElementInContainer\");                                      // 12325\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");                                                // 12326\nvar invariant = require(\"./invariant\");                                                                                // 12327\nvar setInnerHTML = require(\"./setInnerHTML\");                                                                          // 12328\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");                                              // 12329\nvar warning = require(\"./warning\");                                                                                    // 12330\n                                                                                                                       // 12331\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;                                                                        // 12332\n                                                                                                                       // 12333\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;                                                                         // 12334\nvar nodeCache = {};                                                                                                    // 12335\n                                                                                                                       // 12336\nvar ELEMENT_NODE_TYPE = 1;                                                                                             // 12337\nvar DOC_NODE_TYPE = 9;                                                                                                 // 12338\n                                                                                                                       // 12339\n/** Mapping from reactRootID to React component instance. */                                                           // 12340\nvar instancesByReactRootID = {};                                                                                       // 12341\n                                                                                                                       // 12342\n/** Mapping from reactRootID to `container` nodes. */                                                                  // 12343\nvar containersByReactRootID = {};                                                                                      // 12344\n                                                                                                                       // 12345\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 12346\n  /** __DEV__-only mapping from reactRootID to root elements. */                                                       // 12347\n  var rootElementsByReactRootID = {};                                                                                  // 12348\n}                                                                                                                      // 12349\n                                                                                                                       // 12350\n// Used to store breadth-first search state in findComponentRoot.                                                      // 12351\nvar findComponentRootReusableArray = [];                                                                               // 12352\n                                                                                                                       // 12353\n/**                                                                                                                    // 12354\n * Finds the index of the first character                                                                              // 12355\n * that's not common between the two given strings.                                                                    // 12356\n *                                                                                                                     // 12357\n * @return {number} the index of the character where the strings diverge                                               // 12358\n */                                                                                                                    // 12359\nfunction firstDifferenceIndex(string1, string2) {                                                                      // 12360\n  var minLen = Math.min(string1.length, string2.length);                                                               // 12361\n  for (var i = 0; i < minLen; i++) {                                                                                   // 12362\n    if (string1.charAt(i) !== string2.charAt(i)) {                                                                     // 12363\n      return i;                                                                                                        // 12364\n    }                                                                                                                  // 12365\n  }                                                                                                                    // 12366\n  return string1.length === string2.length ? -1 : minLen;                                                              // 12367\n}                                                                                                                      // 12368\n                                                                                                                       // 12369\n/**                                                                                                                    // 12370\n * @param {DOMElement} container DOM element that may contain a React component.                                       // 12371\n * @return {?string} A \"reactRoot\" ID, if a React component is rendered.                                               // 12372\n */                                                                                                                    // 12373\nfunction getReactRootID(container) {                                                                                   // 12374\n  var rootElement = getReactRootElementInContainer(container);                                                         // 12375\n  return rootElement && ReactMount.getID(rootElement);                                                                 // 12376\n}                                                                                                                      // 12377\n                                                                                                                       // 12378\n/**                                                                                                                    // 12379\n * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form                                              // 12380\n * element can return its control whose name or ID equals ATTR_NAME. All                                               // 12381\n * DOM nodes support `getAttributeNode` but this can also get called on                                                // 12382\n * other objects so just return '' if we're given something other than a                                               // 12383\n * DOM node (such as window).                                                                                          // 12384\n *                                                                                                                     // 12385\n * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.                                               // 12386\n * @return {string} ID of the supplied `domNode`.                                                                      // 12387\n */                                                                                                                    // 12388\nfunction getID(node) {                                                                                                 // 12389\n  var id = internalGetID(node);                                                                                        // 12390\n  if (id) {                                                                                                            // 12391\n    if (nodeCache.hasOwnProperty(id)) {                                                                                // 12392\n      var cached = nodeCache[id];                                                                                      // 12393\n      if (cached !== node) {                                                                                           // 12394\n        (\"production\" !== process.env.NODE_ENV ? invariant(                                                            // 12395\n          !isValid(cached, id),                                                                                        // 12396\n          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',                                            // 12397\n          ATTR_NAME, id                                                                                                // 12398\n        ) : invariant(!isValid(cached, id)));                                                                          // 12399\n                                                                                                                       // 12400\n        nodeCache[id] = node;                                                                                          // 12401\n      }                                                                                                                // 12402\n    } else {                                                                                                           // 12403\n      nodeCache[id] = node;                                                                                            // 12404\n    }                                                                                                                  // 12405\n  }                                                                                                                    // 12406\n                                                                                                                       // 12407\n  return id;                                                                                                           // 12408\n}                                                                                                                      // 12409\n                                                                                                                       // 12410\nfunction internalGetID(node) {                                                                                         // 12411\n  // If node is something like a window, document, or text node, none of                                               // 12412\n  // which support attributes or a .getAttribute method, gracefully return                                             // 12413\n  // the empty string, as if the attribute were missing.                                                               // 12414\n  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';                                              // 12415\n}                                                                                                                      // 12416\n                                                                                                                       // 12417\n/**                                                                                                                    // 12418\n * Sets the React-specific ID of the given node.                                                                       // 12419\n *                                                                                                                     // 12420\n * @param {DOMElement} node The DOM node whose ID will be set.                                                         // 12421\n * @param {string} id The value of the ID attribute.                                                                   // 12422\n */                                                                                                                    // 12423\nfunction setID(node, id) {                                                                                             // 12424\n  var oldID = internalGetID(node);                                                                                     // 12425\n  if (oldID !== id) {                                                                                                  // 12426\n    delete nodeCache[oldID];                                                                                           // 12427\n  }                                                                                                                    // 12428\n  node.setAttribute(ATTR_NAME, id);                                                                                    // 12429\n  nodeCache[id] = node;                                                                                                // 12430\n}                                                                                                                      // 12431\n                                                                                                                       // 12432\n/**                                                                                                                    // 12433\n * Finds the node with the supplied React-generated DOM ID.                                                            // 12434\n *                                                                                                                     // 12435\n * @param {string} id A React-generated DOM ID.                                                                        // 12436\n * @return {DOMElement} DOM node with the suppled `id`.                                                                // 12437\n * @internal                                                                                                           // 12438\n */                                                                                                                    // 12439\nfunction getNode(id) {                                                                                                 // 12440\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {                                                  // 12441\n    nodeCache[id] = ReactMount.findReactNodeByID(id);                                                                  // 12442\n  }                                                                                                                    // 12443\n  return nodeCache[id];                                                                                                // 12444\n}                                                                                                                      // 12445\n                                                                                                                       // 12446\n/**                                                                                                                    // 12447\n * Finds the node with the supplied public React instance.                                                             // 12448\n *                                                                                                                     // 12449\n * @param {*} instance A public React instance.                                                                        // 12450\n * @return {?DOMElement} DOM node with the suppled `id`.                                                               // 12451\n * @internal                                                                                                           // 12452\n */                                                                                                                    // 12453\nfunction getNodeFromInstance(instance) {                                                                               // 12454\n  var id = ReactInstanceMap.get(instance)._rootNodeID;                                                                 // 12455\n  if (ReactEmptyComponent.isNullComponentID(id)) {                                                                     // 12456\n    return null;                                                                                                       // 12457\n  }                                                                                                                    // 12458\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {                                                  // 12459\n    nodeCache[id] = ReactMount.findReactNodeByID(id);                                                                  // 12460\n  }                                                                                                                    // 12461\n  return nodeCache[id];                                                                                                // 12462\n}                                                                                                                      // 12463\n                                                                                                                       // 12464\n/**                                                                                                                    // 12465\n * A node is \"valid\" if it is contained by a currently mounted container.                                              // 12466\n *                                                                                                                     // 12467\n * This means that the node does not have to be contained by a document in                                             // 12468\n * order to be considered valid.                                                                                       // 12469\n *                                                                                                                     // 12470\n * @param {?DOMElement} node The candidate DOM node.                                                                   // 12471\n * @param {string} id The expected ID of the node.                                                                     // 12472\n * @return {boolean} Whether the node is contained by a mounted container.                                             // 12473\n */                                                                                                                    // 12474\nfunction isValid(node, id) {                                                                                           // 12475\n  if (node) {                                                                                                          // 12476\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 12477\n      internalGetID(node) === id,                                                                                      // 12478\n      'ReactMount: Unexpected modification of `%s`',                                                                   // 12479\n      ATTR_NAME                                                                                                        // 12480\n    ) : invariant(internalGetID(node) === id));                                                                        // 12481\n                                                                                                                       // 12482\n    var container = ReactMount.findReactContainerForID(id);                                                            // 12483\n    if (container && containsNode(container, node)) {                                                                  // 12484\n      return true;                                                                                                     // 12485\n    }                                                                                                                  // 12486\n  }                                                                                                                    // 12487\n                                                                                                                       // 12488\n  return false;                                                                                                        // 12489\n}                                                                                                                      // 12490\n                                                                                                                       // 12491\n/**                                                                                                                    // 12492\n * Causes the cache to forget about one React-specific ID.                                                             // 12493\n *                                                                                                                     // 12494\n * @param {string} id The ID to forget.                                                                                // 12495\n */                                                                                                                    // 12496\nfunction purgeID(id) {                                                                                                 // 12497\n  delete nodeCache[id];                                                                                                // 12498\n}                                                                                                                      // 12499\n                                                                                                                       // 12500\nvar deepestNodeSoFar = null;                                                                                           // 12501\nfunction findDeepestCachedAncestorImpl(ancestorID) {                                                                   // 12502\n  var ancestor = nodeCache[ancestorID];                                                                                // 12503\n  if (ancestor && isValid(ancestor, ancestorID)) {                                                                     // 12504\n    deepestNodeSoFar = ancestor;                                                                                       // 12505\n  } else {                                                                                                             // 12506\n    // This node isn't populated in the cache, so presumably none of its                                               // 12507\n    // descendants are. Break out of the loop.                                                                         // 12508\n    return false;                                                                                                      // 12509\n  }                                                                                                                    // 12510\n}                                                                                                                      // 12511\n                                                                                                                       // 12512\n/**                                                                                                                    // 12513\n * Return the deepest cached node whose ID is a prefix of `targetID`.                                                  // 12514\n */                                                                                                                    // 12515\nfunction findDeepestCachedAncestor(targetID) {                                                                         // 12516\n  deepestNodeSoFar = null;                                                                                             // 12517\n  ReactInstanceHandles.traverseAncestors(                                                                              // 12518\n    targetID,                                                                                                          // 12519\n    findDeepestCachedAncestorImpl                                                                                      // 12520\n  );                                                                                                                   // 12521\n                                                                                                                       // 12522\n  var foundNode = deepestNodeSoFar;                                                                                    // 12523\n  deepestNodeSoFar = null;                                                                                             // 12524\n  return foundNode;                                                                                                    // 12525\n}                                                                                                                      // 12526\n                                                                                                                       // 12527\n/**                                                                                                                    // 12528\n * Mounts this component and inserts it into the DOM.                                                                  // 12529\n *                                                                                                                     // 12530\n * @param {ReactComponent} componentInstance The instance to mount.                                                    // 12531\n * @param {string} rootID DOM ID of the root node.                                                                     // 12532\n * @param {DOMElement} container DOM element to mount into.                                                            // 12533\n * @param {ReactReconcileTransaction} transaction                                                                      // 12534\n * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                    // 12535\n */                                                                                                                    // 12536\nfunction mountComponentIntoNode(                                                                                       // 12537\n    componentInstance,                                                                                                 // 12538\n    rootID,                                                                                                            // 12539\n    container,                                                                                                         // 12540\n    transaction,                                                                                                       // 12541\n    shouldReuseMarkup) {                                                                                               // 12542\n  var markup = ReactReconciler.mountComponent(                                                                         // 12543\n    componentInstance, rootID, transaction, emptyObject                                                                // 12544\n  );                                                                                                                   // 12545\n  componentInstance._isTopLevel = true;                                                                                // 12546\n  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);                                                // 12547\n}                                                                                                                      // 12548\n                                                                                                                       // 12549\n/**                                                                                                                    // 12550\n * Batched mount.                                                                                                      // 12551\n *                                                                                                                     // 12552\n * @param {ReactComponent} componentInstance The instance to mount.                                                    // 12553\n * @param {string} rootID DOM ID of the root node.                                                                     // 12554\n * @param {DOMElement} container DOM element to mount into.                                                            // 12555\n * @param {boolean} shouldReuseMarkup If true, do not insert markup                                                    // 12556\n */                                                                                                                    // 12557\nfunction batchedMountComponentIntoNode(                                                                                // 12558\n    componentInstance,                                                                                                 // 12559\n    rootID,                                                                                                            // 12560\n    container,                                                                                                         // 12561\n    shouldReuseMarkup) {                                                                                               // 12562\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();                                                // 12563\n  transaction.perform(                                                                                                 // 12564\n    mountComponentIntoNode,                                                                                            // 12565\n    null,                                                                                                              // 12566\n    componentInstance,                                                                                                 // 12567\n    rootID,                                                                                                            // 12568\n    container,                                                                                                         // 12569\n    transaction,                                                                                                       // 12570\n    shouldReuseMarkup                                                                                                  // 12571\n  );                                                                                                                   // 12572\n  ReactUpdates.ReactReconcileTransaction.release(transaction);                                                         // 12573\n}                                                                                                                      // 12574\n                                                                                                                       // 12575\n/**                                                                                                                    // 12576\n * Mounting is the process of initializing a React component by creating its                                           // 12577\n * representative DOM elements and inserting them into a supplied `container`.                                         // 12578\n * Any prior content inside `container` is destroyed in the process.                                                   // 12579\n *                                                                                                                     // 12580\n *   ReactMount.render(                                                                                                // 12581\n *     component,                                                                                                      // 12582\n *     document.getElementById('container')                                                                            // 12583\n *   );                                                                                                                // 12584\n *                                                                                                                     // 12585\n *   <div id=\"container\">                   <-- Supplied `container`.                                                  // 12586\n *     <div data-reactid=\".3\">              <-- Rendered reactRoot of React                                            // 12587\n *       // ...                                 component.                                                             // 12588\n *     </div>                                                                                                          // 12589\n *   </div>                                                                                                            // 12590\n *                                                                                                                     // 12591\n * Inside of `container`, the first element rendered is the \"reactRoot\".                                               // 12592\n */                                                                                                                    // 12593\nvar ReactMount = {                                                                                                     // 12594\n  /** Exposed for debugging purposes **/                                                                               // 12595\n  _instancesByReactRootID: instancesByReactRootID,                                                                     // 12596\n                                                                                                                       // 12597\n  /**                                                                                                                  // 12598\n   * This is a hook provided to support rendering React components while                                               // 12599\n   * ensuring that the apparent scroll position of its `container` does not                                            // 12600\n   * change.                                                                                                           // 12601\n   *                                                                                                                   // 12602\n   * @param {DOMElement} container The `container` being rendered into.                                                // 12603\n   * @param {function} renderCallback This must be called once to do the render.                                       // 12604\n   */                                                                                                                  // 12605\n  scrollMonitor: function(container, renderCallback) {                                                                 // 12606\n    renderCallback();                                                                                                  // 12607\n  },                                                                                                                   // 12608\n                                                                                                                       // 12609\n  /**                                                                                                                  // 12610\n   * Take a component that's already mounted into the DOM and replace its props                                        // 12611\n   * @param {ReactComponent} prevComponent component instance already in the DOM                                       // 12612\n   * @param {ReactElement} nextElement component instance to render                                                    // 12613\n   * @param {DOMElement} container container to render into                                                            // 12614\n   * @param {?function} callback function triggered on completion                                                      // 12615\n   */                                                                                                                  // 12616\n  _updateRootComponent: function(                                                                                      // 12617\n      prevComponent,                                                                                                   // 12618\n      nextElement,                                                                                                     // 12619\n      container,                                                                                                       // 12620\n      callback) {                                                                                                      // 12621\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 12622\n      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);                                                  // 12623\n    }                                                                                                                  // 12624\n                                                                                                                       // 12625\n    ReactMount.scrollMonitor(container, function() {                                                                   // 12626\n      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);                                             // 12627\n      if (callback) {                                                                                                  // 12628\n        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);                                             // 12629\n      }                                                                                                                // 12630\n    });                                                                                                                // 12631\n                                                                                                                       // 12632\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 12633\n      // Record the root element in case it later gets transplanted.                                                   // 12634\n      rootElementsByReactRootID[getReactRootID(container)] =                                                           // 12635\n        getReactRootElementInContainer(container);                                                                     // 12636\n    }                                                                                                                  // 12637\n                                                                                                                       // 12638\n    return prevComponent;                                                                                              // 12639\n  },                                                                                                                   // 12640\n                                                                                                                       // 12641\n  /**                                                                                                                  // 12642\n   * Register a component into the instance map and starts scroll value                                                // 12643\n   * monitoring                                                                                                        // 12644\n   * @param {ReactComponent} nextComponent component instance to render                                                // 12645\n   * @param {DOMElement} container container to render into                                                            // 12646\n   * @return {string} reactRoot ID prefix                                                                              // 12647\n   */                                                                                                                  // 12648\n  _registerComponent: function(nextComponent, container) {                                                             // 12649\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 12650\n      container && (                                                                                                   // 12651\n        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)                             // 12652\n      ),                                                                                                               // 12653\n      '_registerComponent(...): Target container is not a DOM element.'                                                // 12654\n    ) : invariant(container && (                                                                                       // 12655\n      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)                               // 12656\n    )));                                                                                                               // 12657\n                                                                                                                       // 12658\n    ReactBrowserEventEmitter.ensureScrollValueMonitoring();                                                            // 12659\n                                                                                                                       // 12660\n    var reactRootID = ReactMount.registerContainer(container);                                                         // 12661\n    instancesByReactRootID[reactRootID] = nextComponent;                                                               // 12662\n    return reactRootID;                                                                                                // 12663\n  },                                                                                                                   // 12664\n                                                                                                                       // 12665\n  /**                                                                                                                  // 12666\n   * Render a new component into the DOM.                                                                              // 12667\n   * @param {ReactElement} nextElement element to render                                                               // 12668\n   * @param {DOMElement} container container to render into                                                            // 12669\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion                                         // 12670\n   * @return {ReactComponent} nextComponent                                                                            // 12671\n   */                                                                                                                  // 12672\n  _renderNewRootComponent: function(                                                                                   // 12673\n    nextElement,                                                                                                       // 12674\n    container,                                                                                                         // 12675\n    shouldReuseMarkup                                                                                                  // 12676\n  ) {                                                                                                                  // 12677\n    // Various parts of our code (such as ReactCompositeComponent's                                                    // 12678\n    // _renderValidatedComponent) assume that calls to render aren't nested;                                           // 12679\n    // verify that that's the case.                                                                                    // 12680\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 12681\n      ReactCurrentOwner.current == null,                                                                               // 12682\n      '_renderNewRootComponent(): Render methods should be a pure function ' +                                         // 12683\n      'of props and state; triggering nested component updates from ' +                                                // 12684\n      'render is not allowed. If necessary, trigger nested updates in ' +                                              // 12685\n      'componentDidUpdate.'                                                                                            // 12686\n    ) : null);                                                                                                         // 12687\n                                                                                                                       // 12688\n    var componentInstance = instantiateReactComponent(nextElement, null);                                              // 12689\n    var reactRootID = ReactMount._registerComponent(                                                                   // 12690\n      componentInstance,                                                                                               // 12691\n      container                                                                                                        // 12692\n    );                                                                                                                 // 12693\n                                                                                                                       // 12694\n    // The initial render is synchronous but any updates that happen during                                            // 12695\n    // rendering, in componentWillMount or componentDidMount, will be batched                                          // 12696\n    // according to the current batching strategy.                                                                     // 12697\n                                                                                                                       // 12698\n    ReactUpdates.batchedUpdates(                                                                                       // 12699\n      batchedMountComponentIntoNode,                                                                                   // 12700\n      componentInstance,                                                                                               // 12701\n      reactRootID,                                                                                                     // 12702\n      container,                                                                                                       // 12703\n      shouldReuseMarkup                                                                                                // 12704\n    );                                                                                                                 // 12705\n                                                                                                                       // 12706\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 12707\n      // Record the root element in case it later gets transplanted.                                                   // 12708\n      rootElementsByReactRootID[reactRootID] =                                                                         // 12709\n        getReactRootElementInContainer(container);                                                                     // 12710\n    }                                                                                                                  // 12711\n                                                                                                                       // 12712\n    return componentInstance;                                                                                          // 12713\n  },                                                                                                                   // 12714\n                                                                                                                       // 12715\n  /**                                                                                                                  // 12716\n   * Renders a React component into the DOM in the supplied `container`.                                               // 12717\n   *                                                                                                                   // 12718\n   * If the React component was previously rendered into `container`, this will                                        // 12719\n   * perform an update on it and only mutate the DOM as necessary to reflect the                                       // 12720\n   * latest React component.                                                                                           // 12721\n   *                                                                                                                   // 12722\n   * @param {ReactElement} nextElement Component element to render.                                                    // 12723\n   * @param {DOMElement} container DOM element to render into.                                                         // 12724\n   * @param {?function} callback function triggered on completion                                                      // 12725\n   * @return {ReactComponent} Component instance rendered in `container`.                                              // 12726\n   */                                                                                                                  // 12727\n  render: function(nextElement, container, callback) {                                                                 // 12728\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 12729\n      ReactElement.isValidElement(nextElement),                                                                        // 12730\n      'React.render(): Invalid component element.%s',                                                                  // 12731\n      (                                                                                                                // 12732\n        typeof nextElement === 'string' ?                                                                              // 12733\n          ' Instead of passing an element string, make sure to instantiate ' +                                         // 12734\n          'it by passing it to React.createElement.' :                                                                 // 12735\n        typeof nextElement === 'function' ?                                                                            // 12736\n          ' Instead of passing a component class, make sure to instantiate ' +                                         // 12737\n          'it by passing it to React.createElement.' :                                                                 // 12738\n        // Check if it quacks like an element                                                                          // 12739\n        nextElement != null && nextElement.props !== undefined ?                                                       // 12740\n          ' This may be caused by unintentionally loading two independent ' +                                          // 12741\n          'copies of React.' :                                                                                         // 12742\n          ''                                                                                                           // 12743\n      )                                                                                                                // 12744\n    ) : invariant(ReactElement.isValidElement(nextElement)));                                                          // 12745\n                                                                                                                       // 12746\n    var prevComponent = instancesByReactRootID[getReactRootID(container)];                                             // 12747\n                                                                                                                       // 12748\n    if (prevComponent) {                                                                                               // 12749\n      var prevElement = prevComponent._currentElement;                                                                 // 12750\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {                                                      // 12751\n        return ReactMount._updateRootComponent(                                                                        // 12752\n          prevComponent,                                                                                               // 12753\n          nextElement,                                                                                                 // 12754\n          container,                                                                                                   // 12755\n          callback                                                                                                     // 12756\n        ).getPublicInstance();                                                                                         // 12757\n      } else {                                                                                                         // 12758\n        ReactMount.unmountComponentAtNode(container);                                                                  // 12759\n      }                                                                                                                // 12760\n    }                                                                                                                  // 12761\n                                                                                                                       // 12762\n    var reactRootElement = getReactRootElementInContainer(container);                                                  // 12763\n    var containerHasReactMarkup =                                                                                      // 12764\n      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);                                              // 12765\n                                                                                                                       // 12766\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 12767\n      if (!containerHasReactMarkup || reactRootElement.nextSibling) {                                                  // 12768\n        var rootElementSibling = reactRootElement;                                                                     // 12769\n        while (rootElementSibling) {                                                                                   // 12770\n          if (ReactMount.isRenderedByReact(rootElementSibling)) {                                                      // 12771\n            (\"production\" !== process.env.NODE_ENV ? warning(                                                          // 12772\n              false,                                                                                                   // 12773\n              'render(): Target node has markup rendered by React, but there ' +                                       // 12774\n              'are unrelated nodes as well. This is most commonly caused by ' +                                        // 12775\n              'white-space inserted around server-rendered markup.'                                                    // 12776\n            ) : null);                                                                                                 // 12777\n            break;                                                                                                     // 12778\n          }                                                                                                            // 12779\n                                                                                                                       // 12780\n          rootElementSibling = rootElementSibling.nextSibling;                                                         // 12781\n        }                                                                                                              // 12782\n      }                                                                                                                // 12783\n    }                                                                                                                  // 12784\n                                                                                                                       // 12785\n    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;                                                 // 12786\n                                                                                                                       // 12787\n    var component = ReactMount._renderNewRootComponent(                                                                // 12788\n      nextElement,                                                                                                     // 12789\n      container,                                                                                                       // 12790\n      shouldReuseMarkup                                                                                                // 12791\n    ).getPublicInstance();                                                                                             // 12792\n    if (callback) {                                                                                                    // 12793\n      callback.call(component);                                                                                        // 12794\n    }                                                                                                                  // 12795\n    return component;                                                                                                  // 12796\n  },                                                                                                                   // 12797\n                                                                                                                       // 12798\n  /**                                                                                                                  // 12799\n   * Constructs a component instance of `constructor` with `initialProps` and                                          // 12800\n   * renders it into the supplied `container`.                                                                         // 12801\n   *                                                                                                                   // 12802\n   * @param {function} constructor React component constructor.                                                        // 12803\n   * @param {?object} props Initial props of the component instance.                                                   // 12804\n   * @param {DOMElement} container DOM element to render into.                                                         // 12805\n   * @return {ReactComponent} Component instance rendered in `container`.                                              // 12806\n   */                                                                                                                  // 12807\n  constructAndRenderComponent: function(constructor, props, container) {                                               // 12808\n    var element = ReactElement.createElement(constructor, props);                                                      // 12809\n    return ReactMount.render(element, container);                                                                      // 12810\n  },                                                                                                                   // 12811\n                                                                                                                       // 12812\n  /**                                                                                                                  // 12813\n   * Constructs a component instance of `constructor` with `initialProps` and                                          // 12814\n   * renders it into a container node identified by supplied `id`.                                                     // 12815\n   *                                                                                                                   // 12816\n   * @param {function} componentConstructor React component constructor                                                // 12817\n   * @param {?object} props Initial props of the component instance.                                                   // 12818\n   * @param {string} id ID of the DOM element to render into.                                                          // 12819\n   * @return {ReactComponent} Component instance rendered in the container node.                                       // 12820\n   */                                                                                                                  // 12821\n  constructAndRenderComponentByID: function(constructor, props, id) {                                                  // 12822\n    var domNode = document.getElementById(id);                                                                         // 12823\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 12824\n      domNode,                                                                                                         // 12825\n      'Tried to get element with id of \"%s\" but it is not present on the page.',                                       // 12826\n      id                                                                                                               // 12827\n    ) : invariant(domNode));                                                                                           // 12828\n    return ReactMount.constructAndRenderComponent(constructor, props, domNode);                                        // 12829\n  },                                                                                                                   // 12830\n                                                                                                                       // 12831\n  /**                                                                                                                  // 12832\n   * Registers a container node into which React components will be rendered.                                          // 12833\n   * This also creates the \"reactRoot\" ID that will be assigned to the element                                         // 12834\n   * rendered within.                                                                                                  // 12835\n   *                                                                                                                   // 12836\n   * @param {DOMElement} container DOM element to register as a container.                                             // 12837\n   * @return {string} The \"reactRoot\" ID of elements rendered within.                                                  // 12838\n   */                                                                                                                  // 12839\n  registerContainer: function(container) {                                                                             // 12840\n    var reactRootID = getReactRootID(container);                                                                       // 12841\n    if (reactRootID) {                                                                                                 // 12842\n      // If one exists, make sure it is a valid \"reactRoot\" ID.                                                        // 12843\n      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);                                        // 12844\n    }                                                                                                                  // 12845\n    if (!reactRootID) {                                                                                                // 12846\n      // No valid \"reactRoot\" ID found, create one.                                                                    // 12847\n      reactRootID = ReactInstanceHandles.createReactRootID();                                                          // 12848\n    }                                                                                                                  // 12849\n    containersByReactRootID[reactRootID] = container;                                                                  // 12850\n    return reactRootID;                                                                                                // 12851\n  },                                                                                                                   // 12852\n                                                                                                                       // 12853\n  /**                                                                                                                  // 12854\n   * Unmounts and destroys the React component rendered in the `container`.                                            // 12855\n   *                                                                                                                   // 12856\n   * @param {DOMElement} container DOM element containing a React component.                                           // 12857\n   * @return {boolean} True if a component was found in and unmounted from                                             // 12858\n   *                   `container`                                                                                     // 12859\n   */                                                                                                                  // 12860\n  unmountComponentAtNode: function(container) {                                                                        // 12861\n    // Various parts of our code (such as ReactCompositeComponent's                                                    // 12862\n    // _renderValidatedComponent) assume that calls to render aren't nested;                                           // 12863\n    // verify that that's the case. (Strictly speaking, unmounting won't cause a                                       // 12864\n    // render but we still don't expect to be in a render call here.)                                                  // 12865\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 12866\n      ReactCurrentOwner.current == null,                                                                               // 12867\n      'unmountComponentAtNode(): Render methods should be a pure function of ' +                                       // 12868\n      'props and state; triggering nested component updates from render is ' +                                         // 12869\n      'not allowed. If necessary, trigger nested updates in ' +                                                        // 12870\n      'componentDidUpdate.'                                                                                            // 12871\n    ) : null);                                                                                                         // 12872\n                                                                                                                       // 12873\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 12874\n      container && (                                                                                                   // 12875\n        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)                             // 12876\n      ),                                                                                                               // 12877\n      'unmountComponentAtNode(...): Target container is not a DOM element.'                                            // 12878\n    ) : invariant(container && (                                                                                       // 12879\n      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)                               // 12880\n    )));                                                                                                               // 12881\n                                                                                                                       // 12882\n    var reactRootID = getReactRootID(container);                                                                       // 12883\n    var component = instancesByReactRootID[reactRootID];                                                               // 12884\n    if (!component) {                                                                                                  // 12885\n      return false;                                                                                                    // 12886\n    }                                                                                                                  // 12887\n    ReactMount.unmountComponentFromNode(component, container);                                                         // 12888\n    delete instancesByReactRootID[reactRootID];                                                                        // 12889\n    delete containersByReactRootID[reactRootID];                                                                       // 12890\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 12891\n      delete rootElementsByReactRootID[reactRootID];                                                                   // 12892\n    }                                                                                                                  // 12893\n    return true;                                                                                                       // 12894\n  },                                                                                                                   // 12895\n                                                                                                                       // 12896\n  /**                                                                                                                  // 12897\n   * Unmounts a component and removes it from the DOM.                                                                 // 12898\n   *                                                                                                                   // 12899\n   * @param {ReactComponent} instance React component instance.                                                        // 12900\n   * @param {DOMElement} container DOM element to unmount from.                                                        // 12901\n   * @final                                                                                                            // 12902\n   * @internal                                                                                                         // 12903\n   * @see {ReactMount.unmountComponentAtNode}                                                                          // 12904\n   */                                                                                                                  // 12905\n  unmountComponentFromNode: function(instance, container) {                                                            // 12906\n    ReactReconciler.unmountComponent(instance);                                                                        // 12907\n                                                                                                                       // 12908\n    if (container.nodeType === DOC_NODE_TYPE) {                                                                        // 12909\n      container = container.documentElement;                                                                           // 12910\n    }                                                                                                                  // 12911\n                                                                                                                       // 12912\n    // http://jsperf.com/emptying-a-node                                                                               // 12913\n    while (container.lastChild) {                                                                                      // 12914\n      container.removeChild(container.lastChild);                                                                      // 12915\n    }                                                                                                                  // 12916\n  },                                                                                                                   // 12917\n                                                                                                                       // 12918\n  /**                                                                                                                  // 12919\n   * Finds the container DOM element that contains React component to which the                                        // 12920\n   * supplied DOM `id` belongs.                                                                                        // 12921\n   *                                                                                                                   // 12922\n   * @param {string} id The ID of an element rendered by a React component.                                            // 12923\n   * @return {?DOMElement} DOM element that contains the `id`.                                                         // 12924\n   */                                                                                                                  // 12925\n  findReactContainerForID: function(id) {                                                                              // 12926\n    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);                                               // 12927\n    var container = containersByReactRootID[reactRootID];                                                              // 12928\n                                                                                                                       // 12929\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 12930\n      var rootElement = rootElementsByReactRootID[reactRootID];                                                        // 12931\n      if (rootElement && rootElement.parentNode !== container) {                                                       // 12932\n        (\"production\" !== process.env.NODE_ENV ? invariant(                                                            // 12933\n          // Call internalGetID here because getID calls isValid which calls                                           // 12934\n          // findReactContainerForID (this function).                                                                  // 12935\n          internalGetID(rootElement) === reactRootID,                                                                  // 12936\n          'ReactMount: Root element ID differed from reactRootID.'                                                     // 12937\n        ) : invariant(// Call internalGetID here because getID calls isValid which calls                               // 12938\n        // findReactContainerForID (this function).                                                                    // 12939\n        internalGetID(rootElement) === reactRootID));                                                                  // 12940\n                                                                                                                       // 12941\n        var containerChild = container.firstChild;                                                                     // 12942\n        if (containerChild &&                                                                                          // 12943\n            reactRootID === internalGetID(containerChild)) {                                                           // 12944\n          // If the container has a new child with the same ID as the old                                              // 12945\n          // root element, then rootElementsByReactRootID[reactRootID] is                                              // 12946\n          // just stale and needs to be updated. The case that deserves a                                              // 12947\n          // warning is when the container is empty.                                                                   // 12948\n          rootElementsByReactRootID[reactRootID] = containerChild;                                                     // 12949\n        } else {                                                                                                       // 12950\n          (\"production\" !== process.env.NODE_ENV ? warning(                                                            // 12951\n            false,                                                                                                     // 12952\n            'ReactMount: Root element has been removed from its original ' +                                           // 12953\n            'container. New container:', rootElement.parentNode                                                        // 12954\n          ) : null);                                                                                                   // 12955\n        }                                                                                                              // 12956\n      }                                                                                                                // 12957\n    }                                                                                                                  // 12958\n                                                                                                                       // 12959\n    return container;                                                                                                  // 12960\n  },                                                                                                                   // 12961\n                                                                                                                       // 12962\n  /**                                                                                                                  // 12963\n   * Finds an element rendered by React with the supplied ID.                                                          // 12964\n   *                                                                                                                   // 12965\n   * @param {string} id ID of a DOM node in the React component.                                                       // 12966\n   * @return {DOMElement} Root DOM node of the React component.                                                        // 12967\n   */                                                                                                                  // 12968\n  findReactNodeByID: function(id) {                                                                                    // 12969\n    var reactRoot = ReactMount.findReactContainerForID(id);                                                            // 12970\n    return ReactMount.findComponentRoot(reactRoot, id);                                                                // 12971\n  },                                                                                                                   // 12972\n                                                                                                                       // 12973\n  /**                                                                                                                  // 12974\n   * True if the supplied `node` is rendered by React.                                                                 // 12975\n   *                                                                                                                   // 12976\n   * @param {*} node DOM Element to check.                                                                             // 12977\n   * @return {boolean} True if the DOM Element appears to be rendered by React.                                        // 12978\n   * @internal                                                                                                         // 12979\n   */                                                                                                                  // 12980\n  isRenderedByReact: function(node) {                                                                                  // 12981\n    if (node.nodeType !== 1) {                                                                                         // 12982\n      // Not a DOMElement, therefore not a React component                                                             // 12983\n      return false;                                                                                                    // 12984\n    }                                                                                                                  // 12985\n    var id = ReactMount.getID(node);                                                                                   // 12986\n    return id ? id.charAt(0) === SEPARATOR : false;                                                                    // 12987\n  },                                                                                                                   // 12988\n                                                                                                                       // 12989\n  /**                                                                                                                  // 12990\n   * Traverses up the ancestors of the supplied node to find a node that is a                                          // 12991\n   * DOM representation of a React component.                                                                          // 12992\n   *                                                                                                                   // 12993\n   * @param {*} node                                                                                                   // 12994\n   * @return {?DOMEventTarget}                                                                                         // 12995\n   * @internal                                                                                                         // 12996\n   */                                                                                                                  // 12997\n  getFirstReactDOM: function(node) {                                                                                   // 12998\n    var current = node;                                                                                                // 12999\n    while (current && current.parentNode !== current) {                                                                // 13000\n      if (ReactMount.isRenderedByReact(current)) {                                                                     // 13001\n        return current;                                                                                                // 13002\n      }                                                                                                                // 13003\n      current = current.parentNode;                                                                                    // 13004\n    }                                                                                                                  // 13005\n    return null;                                                                                                       // 13006\n  },                                                                                                                   // 13007\n                                                                                                                       // 13008\n  /**                                                                                                                  // 13009\n   * Finds a node with the supplied `targetID` inside of the supplied                                                  // 13010\n   * `ancestorNode`.  Exploits the ID naming scheme to perform the search                                              // 13011\n   * quickly.                                                                                                          // 13012\n   *                                                                                                                   // 13013\n   * @param {DOMEventTarget} ancestorNode Search from this root.                                                       // 13014\n   * @pararm {string} targetID ID of the DOM representation of the component.                                          // 13015\n   * @return {DOMEventTarget} DOM node with the supplied `targetID`.                                                   // 13016\n   * @internal                                                                                                         // 13017\n   */                                                                                                                  // 13018\n  findComponentRoot: function(ancestorNode, targetID) {                                                                // 13019\n    var firstChildren = findComponentRootReusableArray;                                                                // 13020\n    var childIndex = 0;                                                                                                // 13021\n                                                                                                                       // 13022\n    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;                                         // 13023\n                                                                                                                       // 13024\n    firstChildren[0] = deepestAncestor.firstChild;                                                                     // 13025\n    firstChildren.length = 1;                                                                                          // 13026\n                                                                                                                       // 13027\n    while (childIndex < firstChildren.length) {                                                                        // 13028\n      var child = firstChildren[childIndex++];                                                                         // 13029\n      var targetChild;                                                                                                 // 13030\n                                                                                                                       // 13031\n      while (child) {                                                                                                  // 13032\n        var childID = ReactMount.getID(child);                                                                         // 13033\n        if (childID) {                                                                                                 // 13034\n          // Even if we find the node we're looking for, we finish looping                                             // 13035\n          // through its siblings to ensure they're cached so that we don't have                                       // 13036\n          // to revisit this node again. Otherwise, we make n^2 calls to getID                                         // 13037\n          // when visiting the many children of a single node in order.                                                // 13038\n                                                                                                                       // 13039\n          if (targetID === childID) {                                                                                  // 13040\n            targetChild = child;                                                                                       // 13041\n          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {                                         // 13042\n            // If we find a child whose ID is an ancestor of the given ID,                                             // 13043\n            // then we can be sure that we only want to search the subtree                                             // 13044\n            // rooted at this child, so we can throw out the rest of the                                               // 13045\n            // search state.                                                                                           // 13046\n            firstChildren.length = childIndex = 0;                                                                     // 13047\n            firstChildren.push(child.firstChild);                                                                      // 13048\n          }                                                                                                            // 13049\n                                                                                                                       // 13050\n        } else {                                                                                                       // 13051\n          // If this child had no ID, then there's a chance that it was                                                // 13052\n          // injected automatically by the browser, as when a `<table>`                                                // 13053\n          // element sprouts an extra `<tbody>` child as a side effect of                                              // 13054\n          // `.innerHTML` parsing. Optimistically continue down this                                                   // 13055\n          // branch, but not before examining the other siblings.                                                      // 13056\n          firstChildren.push(child.firstChild);                                                                        // 13057\n        }                                                                                                              // 13058\n                                                                                                                       // 13059\n        child = child.nextSibling;                                                                                     // 13060\n      }                                                                                                                // 13061\n                                                                                                                       // 13062\n      if (targetChild) {                                                                                               // 13063\n        // Emptying firstChildren/findComponentRootReusableArray is                                                    // 13064\n        // not necessary for correctness, but it helps the GC reclaim                                                  // 13065\n        // any nodes that were left at the end of the search.                                                          // 13066\n        firstChildren.length = 0;                                                                                      // 13067\n                                                                                                                       // 13068\n        return targetChild;                                                                                            // 13069\n      }                                                                                                                // 13070\n    }                                                                                                                  // 13071\n                                                                                                                       // 13072\n    firstChildren.length = 0;                                                                                          // 13073\n                                                                                                                       // 13074\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 13075\n      false,                                                                                                           // 13076\n      'findComponentRoot(..., %s): Unable to find element. This probably ' +                                           // 13077\n      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +                                              // 13078\n      'usually due to forgetting a <tbody> when using tables, nesting tags ' +                                         // 13079\n      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +                                             // 13080\n      'parent. ' +                                                                                                     // 13081\n      'Try inspecting the child nodes of the element with React ID `%s`.',                                             // 13082\n      targetID,                                                                                                        // 13083\n      ReactMount.getID(ancestorNode)                                                                                   // 13084\n    ) : invariant(false));                                                                                             // 13085\n  },                                                                                                                   // 13086\n                                                                                                                       // 13087\n  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {                                                // 13088\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 13089\n      container && (                                                                                                   // 13090\n        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)                             // 13091\n      ),                                                                                                               // 13092\n      'mountComponentIntoNode(...): Target container is not valid.'                                                    // 13093\n    ) : invariant(container && (                                                                                       // 13094\n      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)                               // 13095\n    )));                                                                                                               // 13096\n                                                                                                                       // 13097\n    if (shouldReuseMarkup) {                                                                                           // 13098\n      var rootElement = getReactRootElementInContainer(container);                                                     // 13099\n      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {                                                   // 13100\n        return;                                                                                                        // 13101\n      } else {                                                                                                         // 13102\n        var checksum = rootElement.getAttribute(                                                                       // 13103\n          ReactMarkupChecksum.CHECKSUM_ATTR_NAME                                                                       // 13104\n        );                                                                                                             // 13105\n        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);                                           // 13106\n                                                                                                                       // 13107\n        var rootMarkup = rootElement.outerHTML;                                                                        // 13108\n        rootElement.setAttribute(                                                                                      // 13109\n          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,                                                                      // 13110\n          checksum                                                                                                     // 13111\n        );                                                                                                             // 13112\n                                                                                                                       // 13113\n        var diffIndex = firstDifferenceIndex(markup, rootMarkup);                                                      // 13114\n        var difference = ' (client) ' +                                                                                // 13115\n          markup.substring(diffIndex - 20, diffIndex + 20) +                                                           // 13116\n          '\\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);                                       // 13117\n                                                                                                                       // 13118\n        (\"production\" !== process.env.NODE_ENV ? invariant(                                                            // 13119\n          container.nodeType !== DOC_NODE_TYPE,                                                                        // 13120\n          'You\\'re trying to render a component to the document using ' +                                              // 13121\n          'server rendering but the checksum was invalid. This usually ' +                                             // 13122\n          'means you rendered a different component type or props on ' +                                               // 13123\n          'the client from the one on the server, or your render() ' +                                                 // 13124\n          'methods are impure. React cannot handle this case due to ' +                                                // 13125\n          'cross-browser quirks by rendering at the document root. You ' +                                             // 13126\n          'should look for environment dependent code in your components ' +                                           // 13127\n          'and ensure the props are the same client and server side:\\n%s',                                             // 13128\n          difference                                                                                                   // 13129\n        ) : invariant(container.nodeType !== DOC_NODE_TYPE));                                                          // 13130\n                                                                                                                       // 13131\n        if (\"production\" !== process.env.NODE_ENV) {                                                                   // 13132\n          (\"production\" !== process.env.NODE_ENV ? warning(                                                            // 13133\n            false,                                                                                                     // 13134\n            'React attempted to reuse markup in a container but the ' +                                                // 13135\n            'checksum was invalid. This generally means that you are ' +                                               // 13136\n            'using server rendering and the markup generated on the ' +                                                // 13137\n            'server was not what the client was expecting. React injected ' +                                          // 13138\n            'new markup to compensate which works but you have lost many ' +                                           // 13139\n            'of the benefits of server rendering. Instead, figure out ' +                                              // 13140\n            'why the markup being generated is different on the client ' +                                             // 13141\n            'or server:\\n%s',                                                                                          // 13142\n            difference                                                                                                 // 13143\n          ) : null);                                                                                                   // 13144\n        }                                                                                                              // 13145\n      }                                                                                                                // 13146\n    }                                                                                                                  // 13147\n                                                                                                                       // 13148\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 13149\n      container.nodeType !== DOC_NODE_TYPE,                                                                            // 13150\n      'You\\'re trying to render a component to the document but ' +                                                    // 13151\n        'you didn\\'t use server rendering. We can\\'t do this ' +                                                       // 13152\n        'without using server rendering due to cross-browser quirks. ' +                                               // 13153\n        'See React.renderToString() for server rendering.'                                                             // 13154\n    ) : invariant(container.nodeType !== DOC_NODE_TYPE));                                                              // 13155\n                                                                                                                       // 13156\n    setInnerHTML(container, markup);                                                                                   // 13157\n  },                                                                                                                   // 13158\n                                                                                                                       // 13159\n  /**                                                                                                                  // 13160\n   * React ID utilities.                                                                                               // 13161\n   */                                                                                                                  // 13162\n                                                                                                                       // 13163\n  getReactRootID: getReactRootID,                                                                                      // 13164\n                                                                                                                       // 13165\n  getID: getID,                                                                                                        // 13166\n                                                                                                                       // 13167\n  setID: setID,                                                                                                        // 13168\n                                                                                                                       // 13169\n  getNode: getNode,                                                                                                    // 13170\n                                                                                                                       // 13171\n  getNodeFromInstance: getNodeFromInstance,                                                                            // 13172\n                                                                                                                       // 13173\n  purgeID: purgeID                                                                                                     // 13174\n};                                                                                                                     // 13175\n                                                                                                                       // 13176\nReactPerf.measureMethods(ReactMount, 'ReactMount', {                                                                   // 13177\n  _renderNewRootComponent: '_renderNewRootComponent',                                                                  // 13178\n  _mountImageIntoNode: '_mountImageIntoNode'                                                                           // 13179\n});                                                                                                                    // 13180\n                                                                                                                       // 13181\nmodule.exports = ReactMount;                                                                                           // 13182\n                                                                                                                       // 13183\n}).call(this,require('_process'))                                                                                      // 13184\n                                                                                                                       // 13185\n},{\"./DOMProperty\":\"react/lib/DOMProperty\",\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactElementValidator\":\"react/lib/ReactElementValidator\",\"./ReactEmptyComponent\":\"react/lib/ReactEmptyComponent\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./ReactMarkupChecksum\":\"react/lib/ReactMarkupChecksum\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./ReactReconciler\":\"react/lib/ReactReconciler\",\"./ReactUpdateQueue\":\"react/lib/ReactUpdateQueue\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./containsNode\":\"react/lib/containsNode\",\"./emptyObject\":\"react/lib/emptyObject\",\"./getReactRootElementInContainer\":\"react/lib/getReactRootElementInContainer\",\"./instantiateReactComponent\":\"react/lib/instantiateReactComponent\",\"./invariant\":\"react/lib/invariant\",\"./setInnerHTML\":\"react/lib/setInnerHTML\",\"./shouldUpdateReactComponent\":\"react/lib/shouldUpdateReactComponent\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactMultiChildUpdateTypes\":[function(require,module,exports){\n/**                                                                                                                    // 13187\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 13188\n * All rights reserved.                                                                                                // 13189\n *                                                                                                                     // 13190\n * This source code is licensed under the BSD-style license found in the                                               // 13191\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 13192\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 13193\n *                                                                                                                     // 13194\n * @providesModule ReactMultiChildUpdateTypes                                                                          // 13195\n */                                                                                                                    // 13196\n                                                                                                                       // 13197\n'use strict';                                                                                                          // 13198\n                                                                                                                       // 13199\nvar keyMirror = require(\"./keyMirror\");                                                                                // 13200\n                                                                                                                       // 13201\n/**                                                                                                                    // 13202\n * When a component's children are updated, a series of update configuration                                           // 13203\n * objects are created in order to batch and serialize the required changes.                                           // 13204\n *                                                                                                                     // 13205\n * Enumerates all the possible types of update configurations.                                                         // 13206\n *                                                                                                                     // 13207\n * @internal                                                                                                           // 13208\n */                                                                                                                    // 13209\nvar ReactMultiChildUpdateTypes = keyMirror({                                                                           // 13210\n  INSERT_MARKUP: null,                                                                                                 // 13211\n  MOVE_EXISTING: null,                                                                                                 // 13212\n  REMOVE_NODE: null,                                                                                                   // 13213\n  TEXT_CONTENT: null                                                                                                   // 13214\n});                                                                                                                    // 13215\n                                                                                                                       // 13216\nmodule.exports = ReactMultiChildUpdateTypes;                                                                           // 13217\n                                                                                                                       // 13218\n},{\"./keyMirror\":\"react/lib/keyMirror\"}],\"react/lib/ReactMultiChild\":[function(require,module,exports){                // 13219\n/**                                                                                                                    // 13220\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 13221\n * All rights reserved.                                                                                                // 13222\n *                                                                                                                     // 13223\n * This source code is licensed under the BSD-style license found in the                                               // 13224\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 13225\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 13226\n *                                                                                                                     // 13227\n * @providesModule ReactMultiChild                                                                                     // 13228\n * @typechecks static-only                                                                                             // 13229\n */                                                                                                                    // 13230\n                                                                                                                       // 13231\n'use strict';                                                                                                          // 13232\n                                                                                                                       // 13233\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");                                                // 13234\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");                                              // 13235\n                                                                                                                       // 13236\nvar ReactReconciler = require(\"./ReactReconciler\");                                                                    // 13237\nvar ReactChildReconciler = require(\"./ReactChildReconciler\");                                                          // 13238\n                                                                                                                       // 13239\n/**                                                                                                                    // 13240\n * Updating children of a component may trigger recursive updates. The depth is                                        // 13241\n * used to batch recursive updates to render markup more efficiently.                                                  // 13242\n *                                                                                                                     // 13243\n * @type {number}                                                                                                      // 13244\n * @private                                                                                                            // 13245\n */                                                                                                                    // 13246\nvar updateDepth = 0;                                                                                                   // 13247\n                                                                                                                       // 13248\n/**                                                                                                                    // 13249\n * Queue of update configuration objects.                                                                              // 13250\n *                                                                                                                     // 13251\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.                                          // 13252\n *                                                                                                                     // 13253\n * @type {array<object>}                                                                                               // 13254\n * @private                                                                                                            // 13255\n */                                                                                                                    // 13256\nvar updateQueue = [];                                                                                                  // 13257\n                                                                                                                       // 13258\n/**                                                                                                                    // 13259\n * Queue of markup to be rendered.                                                                                     // 13260\n *                                                                                                                     // 13261\n * @type {array<string>}                                                                                               // 13262\n * @private                                                                                                            // 13263\n */                                                                                                                    // 13264\nvar markupQueue = [];                                                                                                  // 13265\n                                                                                                                       // 13266\n/**                                                                                                                    // 13267\n * Enqueues markup to be rendered and inserted at a supplied index.                                                    // 13268\n *                                                                                                                     // 13269\n * @param {string} parentID ID of the parent component.                                                                // 13270\n * @param {string} markup Markup that renders into an element.                                                         // 13271\n * @param {number} toIndex Destination index.                                                                          // 13272\n * @private                                                                                                            // 13273\n */                                                                                                                    // 13274\nfunction enqueueMarkup(parentID, markup, toIndex) {                                                                    // 13275\n  // NOTE: Null values reduce hidden classes.                                                                          // 13276\n  updateQueue.push({                                                                                                   // 13277\n    parentID: parentID,                                                                                                // 13278\n    parentNode: null,                                                                                                  // 13279\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,                                                                    // 13280\n    markupIndex: markupQueue.push(markup) - 1,                                                                         // 13281\n    textContent: null,                                                                                                 // 13282\n    fromIndex: null,                                                                                                   // 13283\n    toIndex: toIndex                                                                                                   // 13284\n  });                                                                                                                  // 13285\n}                                                                                                                      // 13286\n                                                                                                                       // 13287\n/**                                                                                                                    // 13288\n * Enqueues moving an existing element to another index.                                                               // 13289\n *                                                                                                                     // 13290\n * @param {string} parentID ID of the parent component.                                                                // 13291\n * @param {number} fromIndex Source index of the existing element.                                                     // 13292\n * @param {number} toIndex Destination index of the element.                                                           // 13293\n * @private                                                                                                            // 13294\n */                                                                                                                    // 13295\nfunction enqueueMove(parentID, fromIndex, toIndex) {                                                                   // 13296\n  // NOTE: Null values reduce hidden classes.                                                                          // 13297\n  updateQueue.push({                                                                                                   // 13298\n    parentID: parentID,                                                                                                // 13299\n    parentNode: null,                                                                                                  // 13300\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,                                                                    // 13301\n    markupIndex: null,                                                                                                 // 13302\n    textContent: null,                                                                                                 // 13303\n    fromIndex: fromIndex,                                                                                              // 13304\n    toIndex: toIndex                                                                                                   // 13305\n  });                                                                                                                  // 13306\n}                                                                                                                      // 13307\n                                                                                                                       // 13308\n/**                                                                                                                    // 13309\n * Enqueues removing an element at an index.                                                                           // 13310\n *                                                                                                                     // 13311\n * @param {string} parentID ID of the parent component.                                                                // 13312\n * @param {number} fromIndex Index of the element to remove.                                                           // 13313\n * @private                                                                                                            // 13314\n */                                                                                                                    // 13315\nfunction enqueueRemove(parentID, fromIndex) {                                                                          // 13316\n  // NOTE: Null values reduce hidden classes.                                                                          // 13317\n  updateQueue.push({                                                                                                   // 13318\n    parentID: parentID,                                                                                                // 13319\n    parentNode: null,                                                                                                  // 13320\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,                                                                      // 13321\n    markupIndex: null,                                                                                                 // 13322\n    textContent: null,                                                                                                 // 13323\n    fromIndex: fromIndex,                                                                                              // 13324\n    toIndex: null                                                                                                      // 13325\n  });                                                                                                                  // 13326\n}                                                                                                                      // 13327\n                                                                                                                       // 13328\n/**                                                                                                                    // 13329\n * Enqueues setting the text content.                                                                                  // 13330\n *                                                                                                                     // 13331\n * @param {string} parentID ID of the parent component.                                                                // 13332\n * @param {string} textContent Text content to set.                                                                    // 13333\n * @private                                                                                                            // 13334\n */                                                                                                                    // 13335\nfunction enqueueTextContent(parentID, textContent) {                                                                   // 13336\n  // NOTE: Null values reduce hidden classes.                                                                          // 13337\n  updateQueue.push({                                                                                                   // 13338\n    parentID: parentID,                                                                                                // 13339\n    parentNode: null,                                                                                                  // 13340\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,                                                                     // 13341\n    markupIndex: null,                                                                                                 // 13342\n    textContent: textContent,                                                                                          // 13343\n    fromIndex: null,                                                                                                   // 13344\n    toIndex: null                                                                                                      // 13345\n  });                                                                                                                  // 13346\n}                                                                                                                      // 13347\n                                                                                                                       // 13348\n/**                                                                                                                    // 13349\n * Processes any enqueued updates.                                                                                     // 13350\n *                                                                                                                     // 13351\n * @private                                                                                                            // 13352\n */                                                                                                                    // 13353\nfunction processQueue() {                                                                                              // 13354\n  if (updateQueue.length) {                                                                                            // 13355\n    ReactComponentEnvironment.processChildrenUpdates(                                                                  // 13356\n      updateQueue,                                                                                                     // 13357\n      markupQueue                                                                                                      // 13358\n    );                                                                                                                 // 13359\n    clearQueue();                                                                                                      // 13360\n  }                                                                                                                    // 13361\n}                                                                                                                      // 13362\n                                                                                                                       // 13363\n/**                                                                                                                    // 13364\n * Clears any enqueued updates.                                                                                        // 13365\n *                                                                                                                     // 13366\n * @private                                                                                                            // 13367\n */                                                                                                                    // 13368\nfunction clearQueue() {                                                                                                // 13369\n  updateQueue.length = 0;                                                                                              // 13370\n  markupQueue.length = 0;                                                                                              // 13371\n}                                                                                                                      // 13372\n                                                                                                                       // 13373\n/**                                                                                                                    // 13374\n * ReactMultiChild are capable of reconciling multiple children.                                                       // 13375\n *                                                                                                                     // 13376\n * @class ReactMultiChild                                                                                              // 13377\n * @internal                                                                                                           // 13378\n */                                                                                                                    // 13379\nvar ReactMultiChild = {                                                                                                // 13380\n                                                                                                                       // 13381\n  /**                                                                                                                  // 13382\n   * Provides common functionality for components that must reconcile multiple                                         // 13383\n   * children. This is used by `ReactDOMComponent` to mount, update, and                                               // 13384\n   * unmount child components.                                                                                         // 13385\n   *                                                                                                                   // 13386\n   * @lends {ReactMultiChild.prototype}                                                                                // 13387\n   */                                                                                                                  // 13388\n  Mixin: {                                                                                                             // 13389\n                                                                                                                       // 13390\n    /**                                                                                                                // 13391\n     * Generates a \"mount image\" for each of the supplied children. In the case                                        // 13392\n     * of `ReactDOMComponent`, a mount image is a string of markup.                                                    // 13393\n     *                                                                                                                 // 13394\n     * @param {?object} nestedChildren Nested child maps.                                                              // 13395\n     * @return {array} An array of mounted representations.                                                            // 13396\n     * @internal                                                                                                       // 13397\n     */                                                                                                                // 13398\n    mountChildren: function(nestedChildren, transaction, context) {                                                    // 13399\n      var children = ReactChildReconciler.instantiateChildren(                                                         // 13400\n        nestedChildren, transaction, context                                                                           // 13401\n      );                                                                                                               // 13402\n      this._renderedChildren = children;                                                                               // 13403\n      var mountImages = [];                                                                                            // 13404\n      var index = 0;                                                                                                   // 13405\n      for (var name in children) {                                                                                     // 13406\n        if (children.hasOwnProperty(name)) {                                                                           // 13407\n          var child = children[name];                                                                                  // 13408\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.                                        // 13409\n          var rootID = this._rootNodeID + name;                                                                        // 13410\n          var mountImage = ReactReconciler.mountComponent(                                                             // 13411\n            child,                                                                                                     // 13412\n            rootID,                                                                                                    // 13413\n            transaction,                                                                                               // 13414\n            context                                                                                                    // 13415\n          );                                                                                                           // 13416\n          child._mountIndex = index;                                                                                   // 13417\n          mountImages.push(mountImage);                                                                                // 13418\n          index++;                                                                                                     // 13419\n        }                                                                                                              // 13420\n      }                                                                                                                // 13421\n      return mountImages;                                                                                              // 13422\n    },                                                                                                                 // 13423\n                                                                                                                       // 13424\n    /**                                                                                                                // 13425\n     * Replaces any rendered children with a text content string.                                                      // 13426\n     *                                                                                                                 // 13427\n     * @param {string} nextContent String of content.                                                                  // 13428\n     * @internal                                                                                                       // 13429\n     */                                                                                                                // 13430\n    updateTextContent: function(nextContent) {                                                                         // 13431\n      updateDepth++;                                                                                                   // 13432\n      var errorThrown = true;                                                                                          // 13433\n      try {                                                                                                            // 13434\n        var prevChildren = this._renderedChildren;                                                                     // 13435\n        // Remove any rendered children.                                                                               // 13436\n        ReactChildReconciler.unmountChildren(prevChildren);                                                            // 13437\n        // TODO: The setTextContent operation should be enough                                                         // 13438\n        for (var name in prevChildren) {                                                                               // 13439\n          if (prevChildren.hasOwnProperty(name)) {                                                                     // 13440\n            this._unmountChildByName(prevChildren[name], name);                                                        // 13441\n          }                                                                                                            // 13442\n        }                                                                                                              // 13443\n        // Set new text content.                                                                                       // 13444\n        this.setTextContent(nextContent);                                                                              // 13445\n        errorThrown = false;                                                                                           // 13446\n      } finally {                                                                                                      // 13447\n        updateDepth--;                                                                                                 // 13448\n        if (!updateDepth) {                                                                                            // 13449\n          if (errorThrown) {                                                                                           // 13450\n            clearQueue();                                                                                              // 13451\n          } else {                                                                                                     // 13452\n            processQueue();                                                                                            // 13453\n          }                                                                                                            // 13454\n        }                                                                                                              // 13455\n      }                                                                                                                // 13456\n    },                                                                                                                 // 13457\n                                                                                                                       // 13458\n    /**                                                                                                                // 13459\n     * Updates the rendered children with new children.                                                                // 13460\n     *                                                                                                                 // 13461\n     * @param {?object} nextNestedChildren Nested child maps.                                                          // 13462\n     * @param {ReactReconcileTransaction} transaction                                                                  // 13463\n     * @internal                                                                                                       // 13464\n     */                                                                                                                // 13465\n    updateChildren: function(nextNestedChildren, transaction, context) {                                               // 13466\n      updateDepth++;                                                                                                   // 13467\n      var errorThrown = true;                                                                                          // 13468\n      try {                                                                                                            // 13469\n        this._updateChildren(nextNestedChildren, transaction, context);                                                // 13470\n        errorThrown = false;                                                                                           // 13471\n      } finally {                                                                                                      // 13472\n        updateDepth--;                                                                                                 // 13473\n        if (!updateDepth) {                                                                                            // 13474\n          if (errorThrown) {                                                                                           // 13475\n            clearQueue();                                                                                              // 13476\n          } else {                                                                                                     // 13477\n            processQueue();                                                                                            // 13478\n          }                                                                                                            // 13479\n        }                                                                                                              // 13480\n                                                                                                                       // 13481\n      }                                                                                                                // 13482\n    },                                                                                                                 // 13483\n                                                                                                                       // 13484\n    /**                                                                                                                // 13485\n     * Improve performance by isolating this hot code path from the try/catch                                          // 13486\n     * block in `updateChildren`.                                                                                      // 13487\n     *                                                                                                                 // 13488\n     * @param {?object} nextNestedChildren Nested child maps.                                                          // 13489\n     * @param {ReactReconcileTransaction} transaction                                                                  // 13490\n     * @final                                                                                                          // 13491\n     * @protected                                                                                                      // 13492\n     */                                                                                                                // 13493\n    _updateChildren: function(nextNestedChildren, transaction, context) {                                              // 13494\n      var prevChildren = this._renderedChildren;                                                                       // 13495\n      var nextChildren = ReactChildReconciler.updateChildren(                                                          // 13496\n        prevChildren, nextNestedChildren, transaction, context                                                         // 13497\n      );                                                                                                               // 13498\n      this._renderedChildren = nextChildren;                                                                           // 13499\n      if (!nextChildren && !prevChildren) {                                                                            // 13500\n        return;                                                                                                        // 13501\n      }                                                                                                                // 13502\n      var name;                                                                                                        // 13503\n      // `nextIndex` will increment for each child in `nextChildren`, but                                              // 13504\n      // `lastIndex` will be the last index visited in `prevChildren`.                                                 // 13505\n      var lastIndex = 0;                                                                                               // 13506\n      var nextIndex = 0;                                                                                               // 13507\n      for (name in nextChildren) {                                                                                     // 13508\n        if (!nextChildren.hasOwnProperty(name)) {                                                                      // 13509\n          continue;                                                                                                    // 13510\n        }                                                                                                              // 13511\n        var prevChild = prevChildren && prevChildren[name];                                                            // 13512\n        var nextChild = nextChildren[name];                                                                            // 13513\n        if (prevChild === nextChild) {                                                                                 // 13514\n          this.moveChild(prevChild, nextIndex, lastIndex);                                                             // 13515\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                      // 13516\n          prevChild._mountIndex = nextIndex;                                                                           // 13517\n        } else {                                                                                                       // 13518\n          if (prevChild) {                                                                                             // 13519\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.                                       // 13520\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);                                                    // 13521\n            this._unmountChildByName(prevChild, name);                                                                 // 13522\n          }                                                                                                            // 13523\n          // The child must be instantiated before it's mounted.                                                       // 13524\n          this._mountChildByNameAtIndex(                                                                               // 13525\n            nextChild, name, nextIndex, transaction, context                                                           // 13526\n          );                                                                                                           // 13527\n        }                                                                                                              // 13528\n        nextIndex++;                                                                                                   // 13529\n      }                                                                                                                // 13530\n      // Remove children that are no longer present.                                                                   // 13531\n      for (name in prevChildren) {                                                                                     // 13532\n        if (prevChildren.hasOwnProperty(name) &&                                                                       // 13533\n            !(nextChildren && nextChildren.hasOwnProperty(name))) {                                                    // 13534\n          this._unmountChildByName(prevChildren[name], name);                                                          // 13535\n        }                                                                                                              // 13536\n      }                                                                                                                // 13537\n    },                                                                                                                 // 13538\n                                                                                                                       // 13539\n    /**                                                                                                                // 13540\n     * Unmounts all rendered children. This should be used to clean up children                                        // 13541\n     * when this component is unmounted.                                                                               // 13542\n     *                                                                                                                 // 13543\n     * @internal                                                                                                       // 13544\n     */                                                                                                                // 13545\n    unmountChildren: function() {                                                                                      // 13546\n      var renderedChildren = this._renderedChildren;                                                                   // 13547\n      ReactChildReconciler.unmountChildren(renderedChildren);                                                          // 13548\n      this._renderedChildren = null;                                                                                   // 13549\n    },                                                                                                                 // 13550\n                                                                                                                       // 13551\n    /**                                                                                                                // 13552\n     * Moves a child component to the supplied index.                                                                  // 13553\n     *                                                                                                                 // 13554\n     * @param {ReactComponent} child Component to move.                                                                // 13555\n     * @param {number} toIndex Destination index of the element.                                                       // 13556\n     * @param {number} lastIndex Last index visited of the siblings of `child`.                                        // 13557\n     * @protected                                                                                                      // 13558\n     */                                                                                                                // 13559\n    moveChild: function(child, toIndex, lastIndex) {                                                                   // 13560\n      // If the index of `child` is less than `lastIndex`, then it needs to                                            // 13561\n      // be moved. Otherwise, we do not need to move it because a child will be                                        // 13562\n      // inserted or moved before `child`.                                                                             // 13563\n      if (child._mountIndex < lastIndex) {                                                                             // 13564\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);                                                     // 13565\n      }                                                                                                                // 13566\n    },                                                                                                                 // 13567\n                                                                                                                       // 13568\n    /**                                                                                                                // 13569\n     * Creates a child component.                                                                                      // 13570\n     *                                                                                                                 // 13571\n     * @param {ReactComponent} child Component to create.                                                              // 13572\n     * @param {string} mountImage Markup to insert.                                                                    // 13573\n     * @protected                                                                                                      // 13574\n     */                                                                                                                // 13575\n    createChild: function(child, mountImage) {                                                                         // 13576\n      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);                                                  // 13577\n    },                                                                                                                 // 13578\n                                                                                                                       // 13579\n    /**                                                                                                                // 13580\n     * Removes a child component.                                                                                      // 13581\n     *                                                                                                                 // 13582\n     * @param {ReactComponent} child Child to remove.                                                                  // 13583\n     * @protected                                                                                                      // 13584\n     */                                                                                                                // 13585\n    removeChild: function(child) {                                                                                     // 13586\n      enqueueRemove(this._rootNodeID, child._mountIndex);                                                              // 13587\n    },                                                                                                                 // 13588\n                                                                                                                       // 13589\n    /**                                                                                                                // 13590\n     * Sets this text content string.                                                                                  // 13591\n     *                                                                                                                 // 13592\n     * @param {string} textContent Text content to set.                                                                // 13593\n     * @protected                                                                                                      // 13594\n     */                                                                                                                // 13595\n    setTextContent: function(textContent) {                                                                            // 13596\n      enqueueTextContent(this._rootNodeID, textContent);                                                               // 13597\n    },                                                                                                                 // 13598\n                                                                                                                       // 13599\n    /**                                                                                                                // 13600\n     * Mounts a child with the supplied name.                                                                          // 13601\n     *                                                                                                                 // 13602\n     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 13603\n     *                                                                                                                 // 13604\n     * @param {ReactComponent} child Component to mount.                                                               // 13605\n     * @param {string} name Name of the child.                                                                         // 13606\n     * @param {number} index Index at which to insert the child.                                                       // 13607\n     * @param {ReactReconcileTransaction} transaction                                                                  // 13608\n     * @private                                                                                                        // 13609\n     */                                                                                                                // 13610\n    _mountChildByNameAtIndex: function(                                                                                // 13611\n      child,                                                                                                           // 13612\n      name,                                                                                                            // 13613\n      index,                                                                                                           // 13614\n      transaction,                                                                                                     // 13615\n      context) {                                                                                                       // 13616\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.                                            // 13617\n      var rootID = this._rootNodeID + name;                                                                            // 13618\n      var mountImage = ReactReconciler.mountComponent(                                                                 // 13619\n        child,                                                                                                         // 13620\n        rootID,                                                                                                        // 13621\n        transaction,                                                                                                   // 13622\n        context                                                                                                        // 13623\n      );                                                                                                               // 13624\n      child._mountIndex = index;                                                                                       // 13625\n      this.createChild(child, mountImage);                                                                             // 13626\n    },                                                                                                                 // 13627\n                                                                                                                       // 13628\n    /**                                                                                                                // 13629\n     * Unmounts a rendered child by name.                                                                              // 13630\n     *                                                                                                                 // 13631\n     * NOTE: This is part of `updateChildren` and is here for readability.                                             // 13632\n     *                                                                                                                 // 13633\n     * @param {ReactComponent} child Component to unmount.                                                             // 13634\n     * @param {string} name Name of the child in `this._renderedChildren`.                                             // 13635\n     * @private                                                                                                        // 13636\n     */                                                                                                                // 13637\n    _unmountChildByName: function(child, name) {                                                                       // 13638\n      this.removeChild(child);                                                                                         // 13639\n      child._mountIndex = null;                                                                                        // 13640\n    }                                                                                                                  // 13641\n                                                                                                                       // 13642\n  }                                                                                                                    // 13643\n                                                                                                                       // 13644\n};                                                                                                                     // 13645\n                                                                                                                       // 13646\nmodule.exports = ReactMultiChild;                                                                                      // 13647\n                                                                                                                       // 13648\n},{\"./ReactChildReconciler\":\"react/lib/ReactChildReconciler\",\"./ReactComponentEnvironment\":\"react/lib/ReactComponentEnvironment\",\"./ReactMultiChildUpdateTypes\":\"react/lib/ReactMultiChildUpdateTypes\",\"./ReactReconciler\":\"react/lib/ReactReconciler\"}],\"react/lib/ReactNativeComponent\":[function(require,module,exports){\n(function (process){                                                                                                   // 13650\n/**                                                                                                                    // 13651\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 13652\n * All rights reserved.                                                                                                // 13653\n *                                                                                                                     // 13654\n * This source code is licensed under the BSD-style license found in the                                               // 13655\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 13656\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 13657\n *                                                                                                                     // 13658\n * @providesModule ReactNativeComponent                                                                                // 13659\n */                                                                                                                    // 13660\n                                                                                                                       // 13661\n'use strict';                                                                                                          // 13662\n                                                                                                                       // 13663\nvar assign = require(\"./Object.assign\");                                                                               // 13664\nvar invariant = require(\"./invariant\");                                                                                // 13665\n                                                                                                                       // 13666\nvar autoGenerateWrapperClass = null;                                                                                   // 13667\nvar genericComponentClass = null;                                                                                      // 13668\n// This registry keeps track of wrapper classes around native tags                                                     // 13669\nvar tagToComponentClass = {};                                                                                          // 13670\nvar textComponentClass = null;                                                                                         // 13671\n                                                                                                                       // 13672\nvar ReactNativeComponentInjection = {                                                                                  // 13673\n  // This accepts a class that receives the tag string. This is a catch all                                            // 13674\n  // that can render any kind of tag.                                                                                  // 13675\n  injectGenericComponentClass: function(componentClass) {                                                              // 13676\n    genericComponentClass = componentClass;                                                                            // 13677\n  },                                                                                                                   // 13678\n  // This accepts a text component class that takes the text string to be                                              // 13679\n  // rendered as props.                                                                                                // 13680\n  injectTextComponentClass: function(componentClass) {                                                                 // 13681\n    textComponentClass = componentClass;                                                                               // 13682\n  },                                                                                                                   // 13683\n  // This accepts a keyed object with classes as values. Each key represents a                                         // 13684\n  // tag. That particular tag will use this class instead of the generic one.                                          // 13685\n  injectComponentClasses: function(componentClasses) {                                                                 // 13686\n    assign(tagToComponentClass, componentClasses);                                                                     // 13687\n  },                                                                                                                   // 13688\n  // Temporary hack since we expect DOM refs to behave like composites,                                                // 13689\n  // for this release.                                                                                                 // 13690\n  injectAutoWrapper: function(wrapperFactory) {                                                                        // 13691\n    autoGenerateWrapperClass = wrapperFactory;                                                                         // 13692\n  }                                                                                                                    // 13693\n};                                                                                                                     // 13694\n                                                                                                                       // 13695\n/**                                                                                                                    // 13696\n * Get a composite component wrapper class for a specific tag.                                                         // 13697\n *                                                                                                                     // 13698\n * @param {ReactElement} element The tag for which to get the class.                                                   // 13699\n * @return {function} The React class constructor function.                                                            // 13700\n */                                                                                                                    // 13701\nfunction getComponentClassForElement(element) {                                                                        // 13702\n  if (typeof element.type === 'function') {                                                                            // 13703\n    return element.type;                                                                                               // 13704\n  }                                                                                                                    // 13705\n  var tag = element.type;                                                                                              // 13706\n  var componentClass = tagToComponentClass[tag];                                                                       // 13707\n  if (componentClass == null) {                                                                                        // 13708\n    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);                                         // 13709\n  }                                                                                                                    // 13710\n  return componentClass;                                                                                               // 13711\n}                                                                                                                      // 13712\n                                                                                                                       // 13713\n/**                                                                                                                    // 13714\n * Get a native internal component class for a specific tag.                                                           // 13715\n *                                                                                                                     // 13716\n * @param {ReactElement} element The element to create.                                                                // 13717\n * @return {function} The internal class constructor function.                                                         // 13718\n */                                                                                                                    // 13719\nfunction createInternalComponent(element) {                                                                            // 13720\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 13721\n    genericComponentClass,                                                                                             // 13722\n    'There is no registered component for the tag %s',                                                                 // 13723\n    element.type                                                                                                       // 13724\n  ) : invariant(genericComponentClass));                                                                               // 13725\n  return new genericComponentClass(element.type, element.props);                                                       // 13726\n}                                                                                                                      // 13727\n                                                                                                                       // 13728\n/**                                                                                                                    // 13729\n * @param {ReactText} text                                                                                             // 13730\n * @return {ReactComponent}                                                                                            // 13731\n */                                                                                                                    // 13732\nfunction createInstanceForText(text) {                                                                                 // 13733\n  return new textComponentClass(text);                                                                                 // 13734\n}                                                                                                                      // 13735\n                                                                                                                       // 13736\n/**                                                                                                                    // 13737\n * @param {ReactComponent} component                                                                                   // 13738\n * @return {boolean}                                                                                                   // 13739\n */                                                                                                                    // 13740\nfunction isTextComponent(component) {                                                                                  // 13741\n  return component instanceof textComponentClass;                                                                      // 13742\n}                                                                                                                      // 13743\n                                                                                                                       // 13744\nvar ReactNativeComponent = {                                                                                           // 13745\n  getComponentClassForElement: getComponentClassForElement,                                                            // 13746\n  createInternalComponent: createInternalComponent,                                                                    // 13747\n  createInstanceForText: createInstanceForText,                                                                        // 13748\n  isTextComponent: isTextComponent,                                                                                    // 13749\n  injection: ReactNativeComponentInjection                                                                             // 13750\n};                                                                                                                     // 13751\n                                                                                                                       // 13752\nmodule.exports = ReactNativeComponent;                                                                                 // 13753\n                                                                                                                       // 13754\n}).call(this,require('_process'))                                                                                      // 13755\n                                                                                                                       // 13756\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactOwner\":[function(require,module,exports){\n(function (process){                                                                                                   // 13758\n/**                                                                                                                    // 13759\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 13760\n * All rights reserved.                                                                                                // 13761\n *                                                                                                                     // 13762\n * This source code is licensed under the BSD-style license found in the                                               // 13763\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 13764\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 13765\n *                                                                                                                     // 13766\n * @providesModule ReactOwner                                                                                          // 13767\n */                                                                                                                    // 13768\n                                                                                                                       // 13769\n'use strict';                                                                                                          // 13770\n                                                                                                                       // 13771\nvar invariant = require(\"./invariant\");                                                                                // 13772\n                                                                                                                       // 13773\n/**                                                                                                                    // 13774\n * ReactOwners are capable of storing references to owned components.                                                  // 13775\n *                                                                                                                     // 13776\n * All components are capable of //being// referenced by owner components, but                                         // 13777\n * only ReactOwner components are capable of //referencing// owned components.                                         // 13778\n * The named reference is known as a \"ref\".                                                                            // 13779\n *                                                                                                                     // 13780\n * Refs are available when mounted and updated during reconciliation.                                                  // 13781\n *                                                                                                                     // 13782\n *   var MyComponent = React.createClass({                                                                             // 13783\n *     render: function() {                                                                                            // 13784\n *       return (                                                                                                      // 13785\n *         <div onClick={this.handleClick}>                                                                            // 13786\n *           <CustomComponent ref=\"custom\" />                                                                          // 13787\n *         </div>                                                                                                      // 13788\n *       );                                                                                                            // 13789\n *     },                                                                                                              // 13790\n *     handleClick: function() {                                                                                       // 13791\n *       this.refs.custom.handleClick();                                                                               // 13792\n *     },                                                                                                              // 13793\n *     componentDidMount: function() {                                                                                 // 13794\n *       this.refs.custom.initialize();                                                                                // 13795\n *     }                                                                                                               // 13796\n *   });                                                                                                               // 13797\n *                                                                                                                     // 13798\n * Refs should rarely be used. When refs are used, they should only be done to                                         // 13799\n * control data that is not handled by React's data flow.                                                              // 13800\n *                                                                                                                     // 13801\n * @class ReactOwner                                                                                                   // 13802\n */                                                                                                                    // 13803\nvar ReactOwner = {                                                                                                     // 13804\n                                                                                                                       // 13805\n  /**                                                                                                                  // 13806\n   * @param {?object} object                                                                                           // 13807\n   * @return {boolean} True if `object` is a valid owner.                                                              // 13808\n   * @final                                                                                                            // 13809\n   */                                                                                                                  // 13810\n  isValidOwner: function(object) {                                                                                     // 13811\n    return !!(                                                                                                         // 13812\n      (object &&                                                                                                       // 13813\n      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')                                // 13814\n    );                                                                                                                 // 13815\n  },                                                                                                                   // 13816\n                                                                                                                       // 13817\n  /**                                                                                                                  // 13818\n   * Adds a component by ref to an owner component.                                                                    // 13819\n   *                                                                                                                   // 13820\n   * @param {ReactComponent} component Component to reference.                                                         // 13821\n   * @param {string} ref Name by which to refer to the component.                                                      // 13822\n   * @param {ReactOwner} owner Component on which to record the ref.                                                   // 13823\n   * @final                                                                                                            // 13824\n   * @internal                                                                                                         // 13825\n   */                                                                                                                  // 13826\n  addComponentAsRefTo: function(component, ref, owner) {                                                               // 13827\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 13828\n      ReactOwner.isValidOwner(owner),                                                                                  // 13829\n      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +                                             // 13830\n      'usually means that you\\'re trying to add a ref to a component that ' +                                          // 13831\n      'doesn\\'t have an owner (that is, was not created inside of another ' +                                          // 13832\n      'component\\'s `render` method). Try rendering this component inside of ' +                                       // 13833\n      'a new top-level component which will hold the ref.'                                                             // 13834\n    ) : invariant(ReactOwner.isValidOwner(owner)));                                                                    // 13835\n    owner.attachRef(ref, component);                                                                                   // 13836\n  },                                                                                                                   // 13837\n                                                                                                                       // 13838\n  /**                                                                                                                  // 13839\n   * Removes a component by ref from an owner component.                                                               // 13840\n   *                                                                                                                   // 13841\n   * @param {ReactComponent} component Component to dereference.                                                       // 13842\n   * @param {string} ref Name of the ref to remove.                                                                    // 13843\n   * @param {ReactOwner} owner Component on which the ref is recorded.                                                 // 13844\n   * @final                                                                                                            // 13845\n   * @internal                                                                                                         // 13846\n   */                                                                                                                  // 13847\n  removeComponentAsRefFrom: function(component, ref, owner) {                                                          // 13848\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 13849\n      ReactOwner.isValidOwner(owner),                                                                                  // 13850\n      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +                                        // 13851\n      'usually means that you\\'re trying to remove a ref to a component that ' +                                       // 13852\n      'doesn\\'t have an owner (that is, was not created inside of another ' +                                          // 13853\n      'component\\'s `render` method). Try rendering this component inside of ' +                                       // 13854\n      'a new top-level component which will hold the ref.'                                                             // 13855\n    ) : invariant(ReactOwner.isValidOwner(owner)));                                                                    // 13856\n    // Check that `component` is still the current ref because we do not want to                                       // 13857\n    // detach the ref if another component stole it.                                                                   // 13858\n    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {                                       // 13859\n      owner.detachRef(ref);                                                                                            // 13860\n    }                                                                                                                  // 13861\n  }                                                                                                                    // 13862\n                                                                                                                       // 13863\n};                                                                                                                     // 13864\n                                                                                                                       // 13865\nmodule.exports = ReactOwner;                                                                                           // 13866\n                                                                                                                       // 13867\n}).call(this,require('_process'))                                                                                      // 13868\n                                                                                                                       // 13869\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactPerf\":[function(require,module,exports){         // 13870\n(function (process){                                                                                                   // 13871\n/**                                                                                                                    // 13872\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 13873\n * All rights reserved.                                                                                                // 13874\n *                                                                                                                     // 13875\n * This source code is licensed under the BSD-style license found in the                                               // 13876\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 13877\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 13878\n *                                                                                                                     // 13879\n * @providesModule ReactPerf                                                                                           // 13880\n * @typechecks static-only                                                                                             // 13881\n */                                                                                                                    // 13882\n                                                                                                                       // 13883\n'use strict';                                                                                                          // 13884\n                                                                                                                       // 13885\n/**                                                                                                                    // 13886\n * ReactPerf is a general AOP system designed to measure performance. This                                             // 13887\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.                                              // 13888\n */                                                                                                                    // 13889\nvar ReactPerf = {                                                                                                      // 13890\n  /**                                                                                                                  // 13891\n   * Boolean to enable/disable measurement. Set to false by default to prevent                                         // 13892\n   * accidental logging and perf loss.                                                                                 // 13893\n   */                                                                                                                  // 13894\n  enableMeasure: false,                                                                                                // 13895\n                                                                                                                       // 13896\n  /**                                                                                                                  // 13897\n   * Holds onto the measure function in use. By default, don't measure                                                 // 13898\n   * anything, but we'll override this if we inject a measure function.                                                // 13899\n   */                                                                                                                  // 13900\n  storedMeasure: _noMeasure,                                                                                           // 13901\n                                                                                                                       // 13902\n  /**                                                                                                                  // 13903\n   * @param {object} object                                                                                            // 13904\n   * @param {string} objectName                                                                                        // 13905\n   * @param {object<string>} methodNames                                                                               // 13906\n   */                                                                                                                  // 13907\n  measureMethods: function(object, objectName, methodNames) {                                                          // 13908\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 13909\n      for (var key in methodNames) {                                                                                   // 13910\n        if (!methodNames.hasOwnProperty(key)) {                                                                        // 13911\n          continue;                                                                                                    // 13912\n        }                                                                                                              // 13913\n        object[key] = ReactPerf.measure(                                                                               // 13914\n          objectName,                                                                                                  // 13915\n          methodNames[key],                                                                                            // 13916\n          object[key]                                                                                                  // 13917\n        );                                                                                                             // 13918\n      }                                                                                                                // 13919\n    }                                                                                                                  // 13920\n  },                                                                                                                   // 13921\n                                                                                                                       // 13922\n  /**                                                                                                                  // 13923\n   * Use this to wrap methods you want to measure. Zero overhead in production.                                        // 13924\n   *                                                                                                                   // 13925\n   * @param {string} objName                                                                                           // 13926\n   * @param {string} fnName                                                                                            // 13927\n   * @param {function} func                                                                                            // 13928\n   * @return {function}                                                                                                // 13929\n   */                                                                                                                  // 13930\n  measure: function(objName, fnName, func) {                                                                           // 13931\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 13932\n      var measuredFunc = null;                                                                                         // 13933\n      var wrapper = function() {                                                                                       // 13934\n        if (ReactPerf.enableMeasure) {                                                                                 // 13935\n          if (!measuredFunc) {                                                                                         // 13936\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);                                             // 13937\n          }                                                                                                            // 13938\n          return measuredFunc.apply(this, arguments);                                                                  // 13939\n        }                                                                                                              // 13940\n        return func.apply(this, arguments);                                                                            // 13941\n      };                                                                                                               // 13942\n      wrapper.displayName = objName + '_' + fnName;                                                                    // 13943\n      return wrapper;                                                                                                  // 13944\n    }                                                                                                                  // 13945\n    return func;                                                                                                       // 13946\n  },                                                                                                                   // 13947\n                                                                                                                       // 13948\n  injection: {                                                                                                         // 13949\n    /**                                                                                                                // 13950\n     * @param {function} measure                                                                                       // 13951\n     */                                                                                                                // 13952\n    injectMeasure: function(measure) {                                                                                 // 13953\n      ReactPerf.storedMeasure = measure;                                                                               // 13954\n    }                                                                                                                  // 13955\n  }                                                                                                                    // 13956\n};                                                                                                                     // 13957\n                                                                                                                       // 13958\n/**                                                                                                                    // 13959\n * Simply passes through the measured function, without measuring it.                                                  // 13960\n *                                                                                                                     // 13961\n * @param {string} objName                                                                                             // 13962\n * @param {string} fnName                                                                                              // 13963\n * @param {function} func                                                                                              // 13964\n * @return {function}                                                                                                  // 13965\n */                                                                                                                    // 13966\nfunction _noMeasure(objName, fnName, func) {                                                                           // 13967\n  return func;                                                                                                         // 13968\n}                                                                                                                      // 13969\n                                                                                                                       // 13970\nmodule.exports = ReactPerf;                                                                                            // 13971\n                                                                                                                       // 13972\n}).call(this,require('_process'))                                                                                      // 13973\n                                                                                                                       // 13974\n},{\"_process\":1}],\"react/lib/ReactPropTransferer\":[function(require,module,exports){                                   // 13975\n/**                                                                                                                    // 13976\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 13977\n * All rights reserved.                                                                                                // 13978\n *                                                                                                                     // 13979\n * This source code is licensed under the BSD-style license found in the                                               // 13980\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 13981\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 13982\n *                                                                                                                     // 13983\n * @providesModule ReactPropTransferer                                                                                 // 13984\n */                                                                                                                    // 13985\n                                                                                                                       // 13986\n'use strict';                                                                                                          // 13987\n                                                                                                                       // 13988\nvar assign = require(\"./Object.assign\");                                                                               // 13989\nvar emptyFunction = require(\"./emptyFunction\");                                                                        // 13990\nvar joinClasses = require(\"./joinClasses\");                                                                            // 13991\n                                                                                                                       // 13992\n/**                                                                                                                    // 13993\n * Creates a transfer strategy that will merge prop values using the supplied                                          // 13994\n * `mergeStrategy`. If a prop was previously unset, this just sets it.                                                 // 13995\n *                                                                                                                     // 13996\n * @param {function} mergeStrategy                                                                                     // 13997\n * @return {function}                                                                                                  // 13998\n */                                                                                                                    // 13999\nfunction createTransferStrategy(mergeStrategy) {                                                                       // 14000\n  return function(props, key, value) {                                                                                 // 14001\n    if (!props.hasOwnProperty(key)) {                                                                                  // 14002\n      props[key] = value;                                                                                              // 14003\n    } else {                                                                                                           // 14004\n      props[key] = mergeStrategy(props[key], value);                                                                   // 14005\n    }                                                                                                                  // 14006\n  };                                                                                                                   // 14007\n}                                                                                                                      // 14008\n                                                                                                                       // 14009\nvar transferStrategyMerge = createTransferStrategy(function(a, b) {                                                    // 14010\n  // `merge` overrides the first object's (`props[key]` above) keys using the                                          // 14011\n  // second object's (`value`) keys. An object's style's existing `propA` would                                        // 14012\n  // get overridden. Flip the order here.                                                                              // 14013\n  return assign({}, b, a);                                                                                             // 14014\n});                                                                                                                    // 14015\n                                                                                                                       // 14016\n/**                                                                                                                    // 14017\n * Transfer strategies dictate how props are transferred by `transferPropsTo`.                                         // 14018\n * NOTE: if you add any more exceptions to this list you should be sure to                                             // 14019\n * update `cloneWithProps()` accordingly.                                                                              // 14020\n */                                                                                                                    // 14021\nvar TransferStrategies = {                                                                                             // 14022\n  /**                                                                                                                  // 14023\n   * Never transfer `children`.                                                                                        // 14024\n   */                                                                                                                  // 14025\n  children: emptyFunction,                                                                                             // 14026\n  /**                                                                                                                  // 14027\n   * Transfer the `className` prop by merging them.                                                                    // 14028\n   */                                                                                                                  // 14029\n  className: createTransferStrategy(joinClasses),                                                                      // 14030\n  /**                                                                                                                  // 14031\n   * Transfer the `style` prop (which is an object) by merging them.                                                   // 14032\n   */                                                                                                                  // 14033\n  style: transferStrategyMerge                                                                                         // 14034\n};                                                                                                                     // 14035\n                                                                                                                       // 14036\n/**                                                                                                                    // 14037\n * Mutates the first argument by transferring the properties from the second                                           // 14038\n * argument.                                                                                                           // 14039\n *                                                                                                                     // 14040\n * @param {object} props                                                                                               // 14041\n * @param {object} newProps                                                                                            // 14042\n * @return {object}                                                                                                    // 14043\n */                                                                                                                    // 14044\nfunction transferInto(props, newProps) {                                                                               // 14045\n  for (var thisKey in newProps) {                                                                                      // 14046\n    if (!newProps.hasOwnProperty(thisKey)) {                                                                           // 14047\n      continue;                                                                                                        // 14048\n    }                                                                                                                  // 14049\n                                                                                                                       // 14050\n    var transferStrategy = TransferStrategies[thisKey];                                                                // 14051\n                                                                                                                       // 14052\n    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {                                              // 14053\n      transferStrategy(props, thisKey, newProps[thisKey]);                                                             // 14054\n    } else if (!props.hasOwnProperty(thisKey)) {                                                                       // 14055\n      props[thisKey] = newProps[thisKey];                                                                              // 14056\n    }                                                                                                                  // 14057\n  }                                                                                                                    // 14058\n  return props;                                                                                                        // 14059\n}                                                                                                                      // 14060\n                                                                                                                       // 14061\n/**                                                                                                                    // 14062\n * ReactPropTransferer are capable of transferring props to another component                                          // 14063\n * using a `transferPropsTo` method.                                                                                   // 14064\n *                                                                                                                     // 14065\n * @class ReactPropTransferer                                                                                          // 14066\n */                                                                                                                    // 14067\nvar ReactPropTransferer = {                                                                                            // 14068\n                                                                                                                       // 14069\n  /**                                                                                                                  // 14070\n   * Merge two props objects using TransferStrategies.                                                                 // 14071\n   *                                                                                                                   // 14072\n   * @param {object} oldProps original props (they take precedence)                                                    // 14073\n   * @param {object} newProps new props to merge in                                                                    // 14074\n   * @return {object} a new object containing both sets of props merged.                                               // 14075\n   */                                                                                                                  // 14076\n  mergeProps: function(oldProps, newProps) {                                                                           // 14077\n    return transferInto(assign({}, oldProps), newProps);                                                               // 14078\n  }                                                                                                                    // 14079\n                                                                                                                       // 14080\n};                                                                                                                     // 14081\n                                                                                                                       // 14082\nmodule.exports = ReactPropTransferer;                                                                                  // 14083\n                                                                                                                       // 14084\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./emptyFunction\":\"react/lib/emptyFunction\",\"./joinClasses\":\"react/lib/joinClasses\"}],\"react/lib/ReactPropTypeLocationNames\":[function(require,module,exports){\n(function (process){                                                                                                   // 14086\n/**                                                                                                                    // 14087\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14088\n * All rights reserved.                                                                                                // 14089\n *                                                                                                                     // 14090\n * This source code is licensed under the BSD-style license found in the                                               // 14091\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 14092\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 14093\n *                                                                                                                     // 14094\n * @providesModule ReactPropTypeLocationNames                                                                          // 14095\n */                                                                                                                    // 14096\n                                                                                                                       // 14097\n'use strict';                                                                                                          // 14098\n                                                                                                                       // 14099\nvar ReactPropTypeLocationNames = {};                                                                                   // 14100\n                                                                                                                       // 14101\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 14102\n  ReactPropTypeLocationNames = {                                                                                       // 14103\n    prop: 'prop',                                                                                                      // 14104\n    context: 'context',                                                                                                // 14105\n    childContext: 'child context'                                                                                      // 14106\n  };                                                                                                                   // 14107\n}                                                                                                                      // 14108\n                                                                                                                       // 14109\nmodule.exports = ReactPropTypeLocationNames;                                                                           // 14110\n                                                                                                                       // 14111\n}).call(this,require('_process'))                                                                                      // 14112\n                                                                                                                       // 14113\n},{\"_process\":1}],\"react/lib/ReactPropTypeLocations\":[function(require,module,exports){                                // 14114\n/**                                                                                                                    // 14115\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14116\n * All rights reserved.                                                                                                // 14117\n *                                                                                                                     // 14118\n * This source code is licensed under the BSD-style license found in the                                               // 14119\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 14120\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 14121\n *                                                                                                                     // 14122\n * @providesModule ReactPropTypeLocations                                                                              // 14123\n */                                                                                                                    // 14124\n                                                                                                                       // 14125\n'use strict';                                                                                                          // 14126\n                                                                                                                       // 14127\nvar keyMirror = require(\"./keyMirror\");                                                                                // 14128\n                                                                                                                       // 14129\nvar ReactPropTypeLocations = keyMirror({                                                                               // 14130\n  prop: null,                                                                                                          // 14131\n  context: null,                                                                                                       // 14132\n  childContext: null                                                                                                   // 14133\n});                                                                                                                    // 14134\n                                                                                                                       // 14135\nmodule.exports = ReactPropTypeLocations;                                                                               // 14136\n                                                                                                                       // 14137\n},{\"./keyMirror\":\"react/lib/keyMirror\"}],\"react/lib/ReactPropTypes\":[function(require,module,exports){                 // 14138\n/**                                                                                                                    // 14139\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14140\n * All rights reserved.                                                                                                // 14141\n *                                                                                                                     // 14142\n * This source code is licensed under the BSD-style license found in the                                               // 14143\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 14144\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 14145\n *                                                                                                                     // 14146\n * @providesModule ReactPropTypes                                                                                      // 14147\n */                                                                                                                    // 14148\n                                                                                                                       // 14149\n'use strict';                                                                                                          // 14150\n                                                                                                                       // 14151\nvar ReactElement = require(\"./ReactElement\");                                                                          // 14152\nvar ReactFragment = require(\"./ReactFragment\");                                                                        // 14153\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");                                              // 14154\n                                                                                                                       // 14155\nvar emptyFunction = require(\"./emptyFunction\");                                                                        // 14156\n                                                                                                                       // 14157\n/**                                                                                                                    // 14158\n * Collection of methods that allow declaration and validation of props that are                                       // 14159\n * supplied to React components. Example usage:                                                                        // 14160\n *                                                                                                                     // 14161\n *   var Props = require('ReactPropTypes');                                                                            // 14162\n *   var MyArticle = React.createClass({                                                                               // 14163\n *     propTypes: {                                                                                                    // 14164\n *       // An optional string prop named \"description\".                                                               // 14165\n *       description: Props.string,                                                                                    // 14166\n *                                                                                                                     // 14167\n *       // A required enum prop named \"category\".                                                                     // 14168\n *       category: Props.oneOf(['News','Photos']).isRequired,                                                          // 14169\n *                                                                                                                     // 14170\n *       // A prop named \"dialog\" that requires an instance of Dialog.                                                 // 14171\n *       dialog: Props.instanceOf(Dialog).isRequired                                                                   // 14172\n *     },                                                                                                              // 14173\n *     render: function() { ... }                                                                                      // 14174\n *   });                                                                                                               // 14175\n *                                                                                                                     // 14176\n * A more formal specification of how these methods are used:                                                          // 14177\n *                                                                                                                     // 14178\n *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)                                         // 14179\n *   decl := ReactPropTypes.{type}(.isRequired)?                                                                       // 14180\n *                                                                                                                     // 14181\n * Each and every declaration produces a function with the same signature. This                                        // 14182\n * allows the creation of custom validation functions. For example:                                                    // 14183\n *                                                                                                                     // 14184\n *  var MyLink = React.createClass({                                                                                   // 14185\n *    propTypes: {                                                                                                     // 14186\n *      // An optional string or URI prop named \"href\".                                                                // 14187\n *      href: function(props, propName, componentName) {                                                               // 14188\n *        var propValue = props[propName];                                                                             // 14189\n *        if (propValue != null && typeof propValue !== 'string' &&                                                    // 14190\n *            !(propValue instanceof URI)) {                                                                           // 14191\n *          return new Error(                                                                                          // 14192\n *            'Expected a string or an URI for ' + propName + ' in ' +                                                 // 14193\n *            componentName                                                                                            // 14194\n *          );                                                                                                         // 14195\n *        }                                                                                                            // 14196\n *      }                                                                                                              // 14197\n *    },                                                                                                               // 14198\n *    render: function() {...}                                                                                         // 14199\n *  });                                                                                                                // 14200\n *                                                                                                                     // 14201\n * @internal                                                                                                           // 14202\n */                                                                                                                    // 14203\n                                                                                                                       // 14204\nvar ANONYMOUS = '<<anonymous>>';                                                                                       // 14205\n                                                                                                                       // 14206\nvar elementTypeChecker = createElementTypeChecker();                                                                   // 14207\nvar nodeTypeChecker = createNodeChecker();                                                                             // 14208\n                                                                                                                       // 14209\nvar ReactPropTypes = {                                                                                                 // 14210\n  array: createPrimitiveTypeChecker('array'),                                                                          // 14211\n  bool: createPrimitiveTypeChecker('boolean'),                                                                         // 14212\n  func: createPrimitiveTypeChecker('function'),                                                                        // 14213\n  number: createPrimitiveTypeChecker('number'),                                                                        // 14214\n  object: createPrimitiveTypeChecker('object'),                                                                        // 14215\n  string: createPrimitiveTypeChecker('string'),                                                                        // 14216\n                                                                                                                       // 14217\n  any: createAnyTypeChecker(),                                                                                         // 14218\n  arrayOf: createArrayOfTypeChecker,                                                                                   // 14219\n  element: elementTypeChecker,                                                                                         // 14220\n  instanceOf: createInstanceTypeChecker,                                                                               // 14221\n  node: nodeTypeChecker,                                                                                               // 14222\n  objectOf: createObjectOfTypeChecker,                                                                                 // 14223\n  oneOf: createEnumTypeChecker,                                                                                        // 14224\n  oneOfType: createUnionTypeChecker,                                                                                   // 14225\n  shape: createShapeTypeChecker                                                                                        // 14226\n};                                                                                                                     // 14227\n                                                                                                                       // 14228\nfunction createChainableTypeChecker(validate) {                                                                        // 14229\n  function checkType(isRequired, props, propName, componentName, location) {                                           // 14230\n    componentName = componentName || ANONYMOUS;                                                                        // 14231\n    if (props[propName] == null) {                                                                                     // 14232\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 14233\n      if (isRequired) {                                                                                                // 14234\n        return new Error(                                                                                              // 14235\n          (\"Required \" + locationName + \" `\" + propName + \"` was not specified in \") +                                 // 14236\n          (\"`\" + componentName + \"`.\")                                                                                 // 14237\n        );                                                                                                             // 14238\n      }                                                                                                                // 14239\n      return null;                                                                                                     // 14240\n    } else {                                                                                                           // 14241\n      return validate(props, propName, componentName, location);                                                       // 14242\n    }                                                                                                                  // 14243\n  }                                                                                                                    // 14244\n                                                                                                                       // 14245\n  var chainedCheckType = checkType.bind(null, false);                                                                  // 14246\n  chainedCheckType.isRequired = checkType.bind(null, true);                                                            // 14247\n                                                                                                                       // 14248\n  return chainedCheckType;                                                                                             // 14249\n}                                                                                                                      // 14250\n                                                                                                                       // 14251\nfunction createPrimitiveTypeChecker(expectedType) {                                                                    // 14252\n  function validate(props, propName, componentName, location) {                                                        // 14253\n    var propValue = props[propName];                                                                                   // 14254\n    var propType = getPropType(propValue);                                                                             // 14255\n    if (propType !== expectedType) {                                                                                   // 14256\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 14257\n      // `propValue` being instance of, say, date/regexp, pass the 'object'                                            // 14258\n      // check, but we can offer a more precise error message here rather than                                         // 14259\n      // 'of type `object`'.                                                                                           // 14260\n      var preciseType = getPreciseType(propValue);                                                                     // 14261\n                                                                                                                       // 14262\n      return new Error(                                                                                                // 14263\n        (\"Invalid \" + locationName + \" `\" + propName + \"` of type `\" + preciseType + \"` \") +                           // 14264\n        (\"supplied to `\" + componentName + \"`, expected `\" + expectedType + \"`.\")                                      // 14265\n      );                                                                                                               // 14266\n    }                                                                                                                  // 14267\n    return null;                                                                                                       // 14268\n  }                                                                                                                    // 14269\n  return createChainableTypeChecker(validate);                                                                         // 14270\n}                                                                                                                      // 14271\n                                                                                                                       // 14272\nfunction createAnyTypeChecker() {                                                                                      // 14273\n  return createChainableTypeChecker(emptyFunction.thatReturns(null));                                                  // 14274\n}                                                                                                                      // 14275\n                                                                                                                       // 14276\nfunction createArrayOfTypeChecker(typeChecker) {                                                                       // 14277\n  function validate(props, propName, componentName, location) {                                                        // 14278\n    var propValue = props[propName];                                                                                   // 14279\n    if (!Array.isArray(propValue)) {                                                                                   // 14280\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 14281\n      var propType = getPropType(propValue);                                                                           // 14282\n      return new Error(                                                                                                // 14283\n        (\"Invalid \" + locationName + \" `\" + propName + \"` of type \") +                                                 // 14284\n        (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected an array.\")                                 // 14285\n      );                                                                                                               // 14286\n    }                                                                                                                  // 14287\n    for (var i = 0; i < propValue.length; i++) {                                                                       // 14288\n      var error = typeChecker(propValue, i, componentName, location);                                                  // 14289\n      if (error instanceof Error) {                                                                                    // 14290\n        return error;                                                                                                  // 14291\n      }                                                                                                                // 14292\n    }                                                                                                                  // 14293\n    return null;                                                                                                       // 14294\n  }                                                                                                                    // 14295\n  return createChainableTypeChecker(validate);                                                                         // 14296\n}                                                                                                                      // 14297\n                                                                                                                       // 14298\nfunction createElementTypeChecker() {                                                                                  // 14299\n  function validate(props, propName, componentName, location) {                                                        // 14300\n    if (!ReactElement.isValidElement(props[propName])) {                                                               // 14301\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 14302\n      return new Error(                                                                                                // 14303\n        (\"Invalid \" + locationName + \" `\" + propName + \"` supplied to \") +                                             // 14304\n        (\"`\" + componentName + \"`, expected a ReactElement.\")                                                          // 14305\n      );                                                                                                               // 14306\n    }                                                                                                                  // 14307\n    return null;                                                                                                       // 14308\n  }                                                                                                                    // 14309\n  return createChainableTypeChecker(validate);                                                                         // 14310\n}                                                                                                                      // 14311\n                                                                                                                       // 14312\nfunction createInstanceTypeChecker(expectedClass) {                                                                    // 14313\n  function validate(props, propName, componentName, location) {                                                        // 14314\n    if (!(props[propName] instanceof expectedClass)) {                                                                 // 14315\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 14316\n      var expectedClassName = expectedClass.name || ANONYMOUS;                                                         // 14317\n      return new Error(                                                                                                // 14318\n        (\"Invalid \" + locationName + \" `\" + propName + \"` supplied to \") +                                             // 14319\n        (\"`\" + componentName + \"`, expected instance of `\" + expectedClassName + \"`.\")                                 // 14320\n      );                                                                                                               // 14321\n    }                                                                                                                  // 14322\n    return null;                                                                                                       // 14323\n  }                                                                                                                    // 14324\n  return createChainableTypeChecker(validate);                                                                         // 14325\n}                                                                                                                      // 14326\n                                                                                                                       // 14327\nfunction createEnumTypeChecker(expectedValues) {                                                                       // 14328\n  function validate(props, propName, componentName, location) {                                                        // 14329\n    var propValue = props[propName];                                                                                   // 14330\n    for (var i = 0; i < expectedValues.length; i++) {                                                                  // 14331\n      if (propValue === expectedValues[i]) {                                                                           // 14332\n        return null;                                                                                                   // 14333\n      }                                                                                                                // 14334\n    }                                                                                                                  // 14335\n                                                                                                                       // 14336\n    var locationName = ReactPropTypeLocationNames[location];                                                           // 14337\n    var valuesString = JSON.stringify(expectedValues);                                                                 // 14338\n    return new Error(                                                                                                  // 14339\n      (\"Invalid \" + locationName + \" `\" + propName + \"` of value `\" + propValue + \"` \") +                              // 14340\n      (\"supplied to `\" + componentName + \"`, expected one of \" + valuesString + \".\")                                   // 14341\n    );                                                                                                                 // 14342\n  }                                                                                                                    // 14343\n  return createChainableTypeChecker(validate);                                                                         // 14344\n}                                                                                                                      // 14345\n                                                                                                                       // 14346\nfunction createObjectOfTypeChecker(typeChecker) {                                                                      // 14347\n  function validate(props, propName, componentName, location) {                                                        // 14348\n    var propValue = props[propName];                                                                                   // 14349\n    var propType = getPropType(propValue);                                                                             // 14350\n    if (propType !== 'object') {                                                                                       // 14351\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 14352\n      return new Error(                                                                                                // 14353\n        (\"Invalid \" + locationName + \" `\" + propName + \"` of type \") +                                                 // 14354\n        (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected an object.\")                                // 14355\n      );                                                                                                               // 14356\n    }                                                                                                                  // 14357\n    for (var key in propValue) {                                                                                       // 14358\n      if (propValue.hasOwnProperty(key)) {                                                                             // 14359\n        var error = typeChecker(propValue, key, componentName, location);                                              // 14360\n        if (error instanceof Error) {                                                                                  // 14361\n          return error;                                                                                                // 14362\n        }                                                                                                              // 14363\n      }                                                                                                                // 14364\n    }                                                                                                                  // 14365\n    return null;                                                                                                       // 14366\n  }                                                                                                                    // 14367\n  return createChainableTypeChecker(validate);                                                                         // 14368\n}                                                                                                                      // 14369\n                                                                                                                       // 14370\nfunction createUnionTypeChecker(arrayOfTypeCheckers) {                                                                 // 14371\n  function validate(props, propName, componentName, location) {                                                        // 14372\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {                                                             // 14373\n      var checker = arrayOfTypeCheckers[i];                                                                            // 14374\n      if (checker(props, propName, componentName, location) == null) {                                                 // 14375\n        return null;                                                                                                   // 14376\n      }                                                                                                                // 14377\n    }                                                                                                                  // 14378\n                                                                                                                       // 14379\n    var locationName = ReactPropTypeLocationNames[location];                                                           // 14380\n    return new Error(                                                                                                  // 14381\n      (\"Invalid \" + locationName + \" `\" + propName + \"` supplied to \") +                                               // 14382\n      (\"`\" + componentName + \"`.\")                                                                                     // 14383\n    );                                                                                                                 // 14384\n  }                                                                                                                    // 14385\n  return createChainableTypeChecker(validate);                                                                         // 14386\n}                                                                                                                      // 14387\n                                                                                                                       // 14388\nfunction createNodeChecker() {                                                                                         // 14389\n  function validate(props, propName, componentName, location) {                                                        // 14390\n    if (!isNode(props[propName])) {                                                                                    // 14391\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 14392\n      return new Error(                                                                                                // 14393\n        (\"Invalid \" + locationName + \" `\" + propName + \"` supplied to \") +                                             // 14394\n        (\"`\" + componentName + \"`, expected a ReactNode.\")                                                             // 14395\n      );                                                                                                               // 14396\n    }                                                                                                                  // 14397\n    return null;                                                                                                       // 14398\n  }                                                                                                                    // 14399\n  return createChainableTypeChecker(validate);                                                                         // 14400\n}                                                                                                                      // 14401\n                                                                                                                       // 14402\nfunction createShapeTypeChecker(shapeTypes) {                                                                          // 14403\n  function validate(props, propName, componentName, location) {                                                        // 14404\n    var propValue = props[propName];                                                                                   // 14405\n    var propType = getPropType(propValue);                                                                             // 14406\n    if (propType !== 'object') {                                                                                       // 14407\n      var locationName = ReactPropTypeLocationNames[location];                                                         // 14408\n      return new Error(                                                                                                // 14409\n        (\"Invalid \" + locationName + \" `\" + propName + \"` of type `\" + propType + \"` \") +                              // 14410\n        (\"supplied to `\" + componentName + \"`, expected `object`.\")                                                    // 14411\n      );                                                                                                               // 14412\n    }                                                                                                                  // 14413\n    for (var key in shapeTypes) {                                                                                      // 14414\n      var checker = shapeTypes[key];                                                                                   // 14415\n      if (!checker) {                                                                                                  // 14416\n        continue;                                                                                                      // 14417\n      }                                                                                                                // 14418\n      var error = checker(propValue, key, componentName, location);                                                    // 14419\n      if (error) {                                                                                                     // 14420\n        return error;                                                                                                  // 14421\n      }                                                                                                                // 14422\n    }                                                                                                                  // 14423\n    return null;                                                                                                       // 14424\n  }                                                                                                                    // 14425\n  return createChainableTypeChecker(validate);                                                                         // 14426\n}                                                                                                                      // 14427\n                                                                                                                       // 14428\nfunction isNode(propValue) {                                                                                           // 14429\n  switch (typeof propValue) {                                                                                          // 14430\n    case 'number':                                                                                                     // 14431\n    case 'string':                                                                                                     // 14432\n    case 'undefined':                                                                                                  // 14433\n      return true;                                                                                                     // 14434\n    case 'boolean':                                                                                                    // 14435\n      return !propValue;                                                                                               // 14436\n    case 'object':                                                                                                     // 14437\n      if (Array.isArray(propValue)) {                                                                                  // 14438\n        return propValue.every(isNode);                                                                                // 14439\n      }                                                                                                                // 14440\n      if (propValue === null || ReactElement.isValidElement(propValue)) {                                              // 14441\n        return true;                                                                                                   // 14442\n      }                                                                                                                // 14443\n      propValue = ReactFragment.extractIfFragment(propValue);                                                          // 14444\n      for (var k in propValue) {                                                                                       // 14445\n        if (!isNode(propValue[k])) {                                                                                   // 14446\n          return false;                                                                                                // 14447\n        }                                                                                                              // 14448\n      }                                                                                                                // 14449\n      return true;                                                                                                     // 14450\n    default:                                                                                                           // 14451\n      return false;                                                                                                    // 14452\n  }                                                                                                                    // 14453\n}                                                                                                                      // 14454\n                                                                                                                       // 14455\n// Equivalent of `typeof` but with special handling for array and regexp.                                              // 14456\nfunction getPropType(propValue) {                                                                                      // 14457\n  var propType = typeof propValue;                                                                                     // 14458\n  if (Array.isArray(propValue)) {                                                                                      // 14459\n    return 'array';                                                                                                    // 14460\n  }                                                                                                                    // 14461\n  if (propValue instanceof RegExp) {                                                                                   // 14462\n    // Old webkits (at least until Android 4.0) return 'function' rather than                                          // 14463\n    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/                                           // 14464\n    // passes PropTypes.object.                                                                                        // 14465\n    return 'object';                                                                                                   // 14466\n  }                                                                                                                    // 14467\n  return propType;                                                                                                     // 14468\n}                                                                                                                      // 14469\n                                                                                                                       // 14470\n// This handles more types than `getPropType`. Only used for error messages.                                           // 14471\n// See `createPrimitiveTypeChecker`.                                                                                   // 14472\nfunction getPreciseType(propValue) {                                                                                   // 14473\n  var propType = getPropType(propValue);                                                                               // 14474\n  if (propType === 'object') {                                                                                         // 14475\n    if (propValue instanceof Date) {                                                                                   // 14476\n      return 'date';                                                                                                   // 14477\n    } else if (propValue instanceof RegExp) {                                                                          // 14478\n      return 'regexp';                                                                                                 // 14479\n    }                                                                                                                  // 14480\n  }                                                                                                                    // 14481\n  return propType;                                                                                                     // 14482\n}                                                                                                                      // 14483\n                                                                                                                       // 14484\nmodule.exports = ReactPropTypes;                                                                                       // 14485\n                                                                                                                       // 14486\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactFragment\":\"react/lib/ReactFragment\",\"./ReactPropTypeLocationNames\":\"react/lib/ReactPropTypeLocationNames\",\"./emptyFunction\":\"react/lib/emptyFunction\"}],\"react/lib/ReactPutListenerQueue\":[function(require,module,exports){\n/**                                                                                                                    // 14488\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14489\n * All rights reserved.                                                                                                // 14490\n *                                                                                                                     // 14491\n * This source code is licensed under the BSD-style license found in the                                               // 14492\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 14493\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 14494\n *                                                                                                                     // 14495\n * @providesModule ReactPutListenerQueue                                                                               // 14496\n */                                                                                                                    // 14497\n                                                                                                                       // 14498\n'use strict';                                                                                                          // 14499\n                                                                                                                       // 14500\nvar PooledClass = require(\"./PooledClass\");                                                                            // 14501\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");                                                  // 14502\n                                                                                                                       // 14503\nvar assign = require(\"./Object.assign\");                                                                               // 14504\n                                                                                                                       // 14505\nfunction ReactPutListenerQueue() {                                                                                     // 14506\n  this.listenersToPut = [];                                                                                            // 14507\n}                                                                                                                      // 14508\n                                                                                                                       // 14509\nassign(ReactPutListenerQueue.prototype, {                                                                              // 14510\n  enqueuePutListener: function(rootNodeID, propKey, propValue) {                                                       // 14511\n    this.listenersToPut.push({                                                                                         // 14512\n      rootNodeID: rootNodeID,                                                                                          // 14513\n      propKey: propKey,                                                                                                // 14514\n      propValue: propValue                                                                                             // 14515\n    });                                                                                                                // 14516\n  },                                                                                                                   // 14517\n                                                                                                                       // 14518\n  putListeners: function() {                                                                                           // 14519\n    for (var i = 0; i < this.listenersToPut.length; i++) {                                                             // 14520\n      var listenerToPut = this.listenersToPut[i];                                                                      // 14521\n      ReactBrowserEventEmitter.putListener(                                                                            // 14522\n        listenerToPut.rootNodeID,                                                                                      // 14523\n        listenerToPut.propKey,                                                                                         // 14524\n        listenerToPut.propValue                                                                                        // 14525\n      );                                                                                                               // 14526\n    }                                                                                                                  // 14527\n  },                                                                                                                   // 14528\n                                                                                                                       // 14529\n  reset: function() {                                                                                                  // 14530\n    this.listenersToPut.length = 0;                                                                                    // 14531\n  },                                                                                                                   // 14532\n                                                                                                                       // 14533\n  destructor: function() {                                                                                             // 14534\n    this.reset();                                                                                                      // 14535\n  }                                                                                                                    // 14536\n});                                                                                                                    // 14537\n                                                                                                                       // 14538\nPooledClass.addPoolingTo(ReactPutListenerQueue);                                                                       // 14539\n                                                                                                                       // 14540\nmodule.exports = ReactPutListenerQueue;                                                                                // 14541\n                                                                                                                       // 14542\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\"}],\"react/lib/ReactReconcileTransaction\":[function(require,module,exports){\n/**                                                                                                                    // 14544\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14545\n * All rights reserved.                                                                                                // 14546\n *                                                                                                                     // 14547\n * This source code is licensed under the BSD-style license found in the                                               // 14548\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 14549\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 14550\n *                                                                                                                     // 14551\n * @providesModule ReactReconcileTransaction                                                                           // 14552\n * @typechecks static-only                                                                                             // 14553\n */                                                                                                                    // 14554\n                                                                                                                       // 14555\n'use strict';                                                                                                          // 14556\n                                                                                                                       // 14557\nvar CallbackQueue = require(\"./CallbackQueue\");                                                                        // 14558\nvar PooledClass = require(\"./PooledClass\");                                                                            // 14559\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");                                                  // 14560\nvar ReactInputSelection = require(\"./ReactInputSelection\");                                                            // 14561\nvar ReactPutListenerQueue = require(\"./ReactPutListenerQueue\");                                                        // 14562\nvar Transaction = require(\"./Transaction\");                                                                            // 14563\n                                                                                                                       // 14564\nvar assign = require(\"./Object.assign\");                                                                               // 14565\n                                                                                                                       // 14566\n/**                                                                                                                    // 14567\n * Ensures that, when possible, the selection range (currently selected text                                           // 14568\n * input) is not disturbed by performing the transaction.                                                              // 14569\n */                                                                                                                    // 14570\nvar SELECTION_RESTORATION = {                                                                                          // 14571\n  /**                                                                                                                  // 14572\n   * @return {Selection} Selection information.                                                                        // 14573\n   */                                                                                                                  // 14574\n  initialize: ReactInputSelection.getSelectionInformation,                                                             // 14575\n  /**                                                                                                                  // 14576\n   * @param {Selection} sel Selection information returned from `initialize`.                                          // 14577\n   */                                                                                                                  // 14578\n  close: ReactInputSelection.restoreSelection                                                                          // 14579\n};                                                                                                                     // 14580\n                                                                                                                       // 14581\n/**                                                                                                                    // 14582\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to                                        // 14583\n * high level DOM manipulations (like temporarily removing a text input from the                                       // 14584\n * DOM).                                                                                                               // 14585\n */                                                                                                                    // 14586\nvar EVENT_SUPPRESSION = {                                                                                              // 14587\n  /**                                                                                                                  // 14588\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before                                         // 14589\n   * the reconciliation.                                                                                               // 14590\n   */                                                                                                                  // 14591\n  initialize: function() {                                                                                             // 14592\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();                                                       // 14593\n    ReactBrowserEventEmitter.setEnabled(false);                                                                        // 14594\n    return currentlyEnabled;                                                                                           // 14595\n  },                                                                                                                   // 14596\n                                                                                                                       // 14597\n  /**                                                                                                                  // 14598\n   * @param {boolean} previouslyEnabled Enabled status of                                                              // 14599\n   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`                                           // 14600\n   *   restores the previous value.                                                                                    // 14601\n   */                                                                                                                  // 14602\n  close: function(previouslyEnabled) {                                                                                 // 14603\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);                                                            // 14604\n  }                                                                                                                    // 14605\n};                                                                                                                     // 14606\n                                                                                                                       // 14607\n/**                                                                                                                    // 14608\n * Provides a queue for collecting `componentDidMount` and                                                             // 14609\n * `componentDidUpdate` callbacks during the the transaction.                                                          // 14610\n */                                                                                                                    // 14611\nvar ON_DOM_READY_QUEUEING = {                                                                                          // 14612\n  /**                                                                                                                  // 14613\n   * Initializes the internal `onDOMReady` queue.                                                                      // 14614\n   */                                                                                                                  // 14615\n  initialize: function() {                                                                                             // 14616\n    this.reactMountReady.reset();                                                                                      // 14617\n  },                                                                                                                   // 14618\n                                                                                                                       // 14619\n  /**                                                                                                                  // 14620\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.                                               // 14621\n   */                                                                                                                  // 14622\n  close: function() {                                                                                                  // 14623\n    this.reactMountReady.notifyAll();                                                                                  // 14624\n  }                                                                                                                    // 14625\n};                                                                                                                     // 14626\n                                                                                                                       // 14627\nvar PUT_LISTENER_QUEUEING = {                                                                                          // 14628\n  initialize: function() {                                                                                             // 14629\n    this.putListenerQueue.reset();                                                                                     // 14630\n  },                                                                                                                   // 14631\n                                                                                                                       // 14632\n  close: function() {                                                                                                  // 14633\n    this.putListenerQueue.putListeners();                                                                              // 14634\n  }                                                                                                                    // 14635\n};                                                                                                                     // 14636\n                                                                                                                       // 14637\n/**                                                                                                                    // 14638\n * Executed within the scope of the `Transaction` instance. Consider these as                                          // 14639\n * being member methods, but with an implied ordering while being isolated from                                        // 14640\n * each other.                                                                                                         // 14641\n */                                                                                                                    // 14642\nvar TRANSACTION_WRAPPERS = [                                                                                           // 14643\n  PUT_LISTENER_QUEUEING,                                                                                               // 14644\n  SELECTION_RESTORATION,                                                                                               // 14645\n  EVENT_SUPPRESSION,                                                                                                   // 14646\n  ON_DOM_READY_QUEUEING                                                                                                // 14647\n];                                                                                                                     // 14648\n                                                                                                                       // 14649\n/**                                                                                                                    // 14650\n * Currently:                                                                                                          // 14651\n * - The order that these are listed in the transaction is critical:                                                   // 14652\n * - Suppresses events.                                                                                                // 14653\n * - Restores selection range.                                                                                         // 14654\n *                                                                                                                     // 14655\n * Future:                                                                                                             // 14656\n * - Restore document/overflow scroll positions that were unintentionally                                              // 14657\n *   modified via DOM insertions above the top viewport boundary.                                                      // 14658\n * - Implement/integrate with customized constraint based layout system and keep                                       // 14659\n *   track of which dimensions must be remeasured.                                                                     // 14660\n *                                                                                                                     // 14661\n * @class ReactReconcileTransaction                                                                                    // 14662\n */                                                                                                                    // 14663\nfunction ReactReconcileTransaction() {                                                                                 // 14664\n  this.reinitializeTransaction();                                                                                      // 14665\n  // Only server-side rendering really needs this option (see                                                          // 14666\n  // `ReactServerRendering`), but server-side uses                                                                     // 14667\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's                                       // 14668\n  // accessible and defaults to false when `ReactDOMComponent` and                                                     // 14669\n  // `ReactTextComponent` checks it in `mountComponent`.`                                                              // 14670\n  this.renderToStaticMarkup = false;                                                                                   // 14671\n  this.reactMountReady = CallbackQueue.getPooled(null);                                                                // 14672\n  this.putListenerQueue = ReactPutListenerQueue.getPooled();                                                           // 14673\n}                                                                                                                      // 14674\n                                                                                                                       // 14675\nvar Mixin = {                                                                                                          // 14676\n  /**                                                                                                                  // 14677\n   * @see Transaction                                                                                                  // 14678\n   * @abstract                                                                                                         // 14679\n   * @final                                                                                                            // 14680\n   * @return {array<object>} List of operation wrap proceedures.                                                       // 14681\n   *   TODO: convert to array<TransactionWrapper>                                                                      // 14682\n   */                                                                                                                  // 14683\n  getTransactionWrappers: function() {                                                                                 // 14684\n    return TRANSACTION_WRAPPERS;                                                                                       // 14685\n  },                                                                                                                   // 14686\n                                                                                                                       // 14687\n  /**                                                                                                                  // 14688\n   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 14689\n   */                                                                                                                  // 14690\n  getReactMountReady: function() {                                                                                     // 14691\n    return this.reactMountReady;                                                                                       // 14692\n  },                                                                                                                   // 14693\n                                                                                                                       // 14694\n  getPutListenerQueue: function() {                                                                                    // 14695\n    return this.putListenerQueue;                                                                                      // 14696\n  },                                                                                                                   // 14697\n                                                                                                                       // 14698\n  /**                                                                                                                  // 14699\n   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 14700\n   * instance to be resused.                                                                                           // 14701\n   */                                                                                                                  // 14702\n  destructor: function() {                                                                                             // 14703\n    CallbackQueue.release(this.reactMountReady);                                                                       // 14704\n    this.reactMountReady = null;                                                                                       // 14705\n                                                                                                                       // 14706\n    ReactPutListenerQueue.release(this.putListenerQueue);                                                              // 14707\n    this.putListenerQueue = null;                                                                                      // 14708\n  }                                                                                                                    // 14709\n};                                                                                                                     // 14710\n                                                                                                                       // 14711\n                                                                                                                       // 14712\nassign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);                                                 // 14713\n                                                                                                                       // 14714\nPooledClass.addPoolingTo(ReactReconcileTransaction);                                                                   // 14715\n                                                                                                                       // 14716\nmodule.exports = ReactReconcileTransaction;                                                                            // 14717\n                                                                                                                       // 14718\n},{\"./CallbackQueue\":\"react/lib/CallbackQueue\",\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\",\"./ReactInputSelection\":\"react/lib/ReactInputSelection\",\"./ReactPutListenerQueue\":\"react/lib/ReactPutListenerQueue\",\"./Transaction\":\"react/lib/Transaction\"}],\"react/lib/ReactReconciler\":[function(require,module,exports){\n(function (process){                                                                                                   // 14720\n/**                                                                                                                    // 14721\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14722\n * All rights reserved.                                                                                                // 14723\n *                                                                                                                     // 14724\n * This source code is licensed under the BSD-style license found in the                                               // 14725\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 14726\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 14727\n *                                                                                                                     // 14728\n * @providesModule ReactReconciler                                                                                     // 14729\n */                                                                                                                    // 14730\n                                                                                                                       // 14731\n'use strict';                                                                                                          // 14732\n                                                                                                                       // 14733\nvar ReactRef = require(\"./ReactRef\");                                                                                  // 14734\nvar ReactElementValidator = require(\"./ReactElementValidator\");                                                        // 14735\n                                                                                                                       // 14736\n/**                                                                                                                    // 14737\n * Helper to call ReactRef.attachRefs with this composite component, split out                                         // 14738\n * to avoid allocations in the transaction mount-ready queue.                                                          // 14739\n */                                                                                                                    // 14740\nfunction attachRefs() {                                                                                                // 14741\n  ReactRef.attachRefs(this, this._currentElement);                                                                     // 14742\n}                                                                                                                      // 14743\n                                                                                                                       // 14744\nvar ReactReconciler = {                                                                                                // 14745\n                                                                                                                       // 14746\n  /**                                                                                                                  // 14747\n   * Initializes the component, renders markup, and registers event listeners.                                         // 14748\n   *                                                                                                                   // 14749\n   * @param {ReactComponent} internalInstance                                                                          // 14750\n   * @param {string} rootID DOM ID of the root node.                                                                   // 14751\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction                                    // 14752\n   * @return {?string} Rendered markup to be inserted into the DOM.                                                    // 14753\n   * @final                                                                                                            // 14754\n   * @internal                                                                                                         // 14755\n   */                                                                                                                  // 14756\n  mountComponent: function(internalInstance, rootID, transaction, context) {                                           // 14757\n    var markup = internalInstance.mountComponent(rootID, transaction, context);                                        // 14758\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 14759\n      ReactElementValidator.checkAndWarnForMutatedProps(                                                               // 14760\n        internalInstance._currentElement                                                                               // 14761\n      );                                                                                                               // 14762\n    }                                                                                                                  // 14763\n    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);                                            // 14764\n    return markup;                                                                                                     // 14765\n  },                                                                                                                   // 14766\n                                                                                                                       // 14767\n  /**                                                                                                                  // 14768\n   * Releases any resources allocated by `mountComponent`.                                                             // 14769\n   *                                                                                                                   // 14770\n   * @final                                                                                                            // 14771\n   * @internal                                                                                                         // 14772\n   */                                                                                                                  // 14773\n  unmountComponent: function(internalInstance) {                                                                       // 14774\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);                                           // 14775\n    internalInstance.unmountComponent();                                                                               // 14776\n  },                                                                                                                   // 14777\n                                                                                                                       // 14778\n  /**                                                                                                                  // 14779\n   * Update a component using a new element.                                                                           // 14780\n   *                                                                                                                   // 14781\n   * @param {ReactComponent} internalInstance                                                                          // 14782\n   * @param {ReactElement} nextElement                                                                                 // 14783\n   * @param {ReactReconcileTransaction} transaction                                                                    // 14784\n   * @param {object} context                                                                                           // 14785\n   * @internal                                                                                                         // 14786\n   */                                                                                                                  // 14787\n  receiveComponent: function(                                                                                          // 14788\n    internalInstance, nextElement, transaction, context                                                                // 14789\n  ) {                                                                                                                  // 14790\n    var prevElement = internalInstance._currentElement;                                                                // 14791\n                                                                                                                       // 14792\n    if (nextElement === prevElement && nextElement._owner != null) {                                                   // 14793\n      // Since elements are immutable after the owner is rendered,                                                     // 14794\n      // we can do a cheap identity compare here to determine if this is a                                             // 14795\n      // superfluous reconcile. It's possible for state to be mutable but such                                         // 14796\n      // change should trigger an update of the owner which would recreate                                             // 14797\n      // the element. We explicitly check for the existence of an owner since                                          // 14798\n      // it's possible for an element created outside a composite to be                                                // 14799\n      // deeply mutated and reused.                                                                                    // 14800\n      return;                                                                                                          // 14801\n    }                                                                                                                  // 14802\n                                                                                                                       // 14803\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 14804\n      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);                                                  // 14805\n    }                                                                                                                  // 14806\n                                                                                                                       // 14807\n    var refsChanged = ReactRef.shouldUpdateRefs(                                                                       // 14808\n      prevElement,                                                                                                     // 14809\n      nextElement                                                                                                      // 14810\n    );                                                                                                                 // 14811\n                                                                                                                       // 14812\n    if (refsChanged) {                                                                                                 // 14813\n      ReactRef.detachRefs(internalInstance, prevElement);                                                              // 14814\n    }                                                                                                                  // 14815\n                                                                                                                       // 14816\n    internalInstance.receiveComponent(nextElement, transaction, context);                                              // 14817\n                                                                                                                       // 14818\n    if (refsChanged) {                                                                                                 // 14819\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);                                          // 14820\n    }                                                                                                                  // 14821\n  },                                                                                                                   // 14822\n                                                                                                                       // 14823\n  /**                                                                                                                  // 14824\n   * Flush any dirty changes in a component.                                                                           // 14825\n   *                                                                                                                   // 14826\n   * @param {ReactComponent} internalInstance                                                                          // 14827\n   * @param {ReactReconcileTransaction} transaction                                                                    // 14828\n   * @internal                                                                                                         // 14829\n   */                                                                                                                  // 14830\n  performUpdateIfNecessary: function(                                                                                  // 14831\n    internalInstance,                                                                                                  // 14832\n    transaction                                                                                                        // 14833\n  ) {                                                                                                                  // 14834\n    internalInstance.performUpdateIfNecessary(transaction);                                                            // 14835\n  }                                                                                                                    // 14836\n                                                                                                                       // 14837\n};                                                                                                                     // 14838\n                                                                                                                       // 14839\nmodule.exports = ReactReconciler;                                                                                      // 14840\n                                                                                                                       // 14841\n}).call(this,require('_process'))                                                                                      // 14842\n                                                                                                                       // 14843\n},{\"./ReactElementValidator\":\"react/lib/ReactElementValidator\",\"./ReactRef\":\"react/lib/ReactRef\",\"_process\":1}],\"react/lib/ReactRef\":[function(require,module,exports){\n/**                                                                                                                    // 14845\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14846\n * All rights reserved.                                                                                                // 14847\n *                                                                                                                     // 14848\n * This source code is licensed under the BSD-style license found in the                                               // 14849\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 14850\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 14851\n *                                                                                                                     // 14852\n * @providesModule ReactRef                                                                                            // 14853\n */                                                                                                                    // 14854\n                                                                                                                       // 14855\n'use strict';                                                                                                          // 14856\n                                                                                                                       // 14857\nvar ReactOwner = require(\"./ReactOwner\");                                                                              // 14858\n                                                                                                                       // 14859\nvar ReactRef = {};                                                                                                     // 14860\n                                                                                                                       // 14861\nfunction attachRef(ref, component, owner) {                                                                            // 14862\n  if (typeof ref === 'function') {                                                                                     // 14863\n    ref(component.getPublicInstance());                                                                                // 14864\n  } else {                                                                                                             // 14865\n    // Legacy ref                                                                                                      // 14866\n    ReactOwner.addComponentAsRefTo(component, ref, owner);                                                             // 14867\n  }                                                                                                                    // 14868\n}                                                                                                                      // 14869\n                                                                                                                       // 14870\nfunction detachRef(ref, component, owner) {                                                                            // 14871\n  if (typeof ref === 'function') {                                                                                     // 14872\n    ref(null);                                                                                                         // 14873\n  } else {                                                                                                             // 14874\n    // Legacy ref                                                                                                      // 14875\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);                                                        // 14876\n  }                                                                                                                    // 14877\n}                                                                                                                      // 14878\n                                                                                                                       // 14879\nReactRef.attachRefs = function(instance, element) {                                                                    // 14880\n  var ref = element.ref;                                                                                               // 14881\n  if (ref != null) {                                                                                                   // 14882\n    attachRef(ref, instance, element._owner);                                                                          // 14883\n  }                                                                                                                    // 14884\n};                                                                                                                     // 14885\n                                                                                                                       // 14886\nReactRef.shouldUpdateRefs = function(prevElement, nextElement) {                                                       // 14887\n  // If either the owner or a `ref` has changed, make sure the newest owner                                            // 14888\n  // has stored a reference to `this`, and the previous owner (if different)                                           // 14889\n  // has forgotten the reference to `this`. We use the element instead                                                 // 14890\n  // of the public this.props because the post processing cannot determine                                             // 14891\n  // a ref. The ref conceptually lives on the element.                                                                 // 14892\n                                                                                                                       // 14893\n  // TODO: Should this even be possible? The owner cannot change because                                               // 14894\n  // it's forbidden by shouldUpdateReactComponent. The ref can change                                                  // 14895\n  // if you swap the keys of but not the refs. Reconsider where this check                                             // 14896\n  // is made. It probably belongs where the key checking and                                                           // 14897\n  // instantiateReactComponent is done.                                                                                // 14898\n                                                                                                                       // 14899\n  return (                                                                                                             // 14900\n    nextElement._owner !== prevElement._owner ||                                                                       // 14901\n    nextElement.ref !== prevElement.ref                                                                                // 14902\n  );                                                                                                                   // 14903\n};                                                                                                                     // 14904\n                                                                                                                       // 14905\nReactRef.detachRefs = function(instance, element) {                                                                    // 14906\n  var ref = element.ref;                                                                                               // 14907\n  if (ref != null) {                                                                                                   // 14908\n    detachRef(ref, instance, element._owner);                                                                          // 14909\n  }                                                                                                                    // 14910\n};                                                                                                                     // 14911\n                                                                                                                       // 14912\nmodule.exports = ReactRef;                                                                                             // 14913\n                                                                                                                       // 14914\n},{\"./ReactOwner\":\"react/lib/ReactOwner\"}],\"react/lib/ReactRootIndex\":[function(require,module,exports){               // 14915\n/**                                                                                                                    // 14916\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 14917\n * All rights reserved.                                                                                                // 14918\n *                                                                                                                     // 14919\n * This source code is licensed under the BSD-style license found in the                                               // 14920\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 14921\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 14922\n *                                                                                                                     // 14923\n * @providesModule ReactRootIndex                                                                                      // 14924\n * @typechecks                                                                                                         // 14925\n */                                                                                                                    // 14926\n                                                                                                                       // 14927\n'use strict';                                                                                                          // 14928\n                                                                                                                       // 14929\nvar ReactRootIndexInjection = {                                                                                        // 14930\n  /**                                                                                                                  // 14931\n   * @param {function} _createReactRootIndex                                                                           // 14932\n   */                                                                                                                  // 14933\n  injectCreateReactRootIndex: function(_createReactRootIndex) {                                                        // 14934\n    ReactRootIndex.createReactRootIndex = _createReactRootIndex;                                                       // 14935\n  }                                                                                                                    // 14936\n};                                                                                                                     // 14937\n                                                                                                                       // 14938\nvar ReactRootIndex = {                                                                                                 // 14939\n  createReactRootIndex: null,                                                                                          // 14940\n  injection: ReactRootIndexInjection                                                                                   // 14941\n};                                                                                                                     // 14942\n                                                                                                                       // 14943\nmodule.exports = ReactRootIndex;                                                                                       // 14944\n                                                                                                                       // 14945\n},{}],\"react/lib/ReactServerRenderingTransaction\":[function(require,module,exports){                                   // 14946\n/**                                                                                                                    // 14947\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 14948\n * All rights reserved.                                                                                                // 14949\n *                                                                                                                     // 14950\n * This source code is licensed under the BSD-style license found in the                                               // 14951\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 14952\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 14953\n *                                                                                                                     // 14954\n * @providesModule ReactServerRenderingTransaction                                                                     // 14955\n * @typechecks                                                                                                         // 14956\n */                                                                                                                    // 14957\n                                                                                                                       // 14958\n'use strict';                                                                                                          // 14959\n                                                                                                                       // 14960\nvar PooledClass = require(\"./PooledClass\");                                                                            // 14961\nvar CallbackQueue = require(\"./CallbackQueue\");                                                                        // 14962\nvar ReactPutListenerQueue = require(\"./ReactPutListenerQueue\");                                                        // 14963\nvar Transaction = require(\"./Transaction\");                                                                            // 14964\n                                                                                                                       // 14965\nvar assign = require(\"./Object.assign\");                                                                               // 14966\nvar emptyFunction = require(\"./emptyFunction\");                                                                        // 14967\n                                                                                                                       // 14968\n/**                                                                                                                    // 14969\n * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks                                              // 14970\n * during the performing of the transaction.                                                                           // 14971\n */                                                                                                                    // 14972\nvar ON_DOM_READY_QUEUEING = {                                                                                          // 14973\n  /**                                                                                                                  // 14974\n   * Initializes the internal `onDOMReady` queue.                                                                      // 14975\n   */                                                                                                                  // 14976\n  initialize: function() {                                                                                             // 14977\n    this.reactMountReady.reset();                                                                                      // 14978\n  },                                                                                                                   // 14979\n                                                                                                                       // 14980\n  close: emptyFunction                                                                                                 // 14981\n};                                                                                                                     // 14982\n                                                                                                                       // 14983\nvar PUT_LISTENER_QUEUEING = {                                                                                          // 14984\n  initialize: function() {                                                                                             // 14985\n    this.putListenerQueue.reset();                                                                                     // 14986\n  },                                                                                                                   // 14987\n                                                                                                                       // 14988\n  close: emptyFunction                                                                                                 // 14989\n};                                                                                                                     // 14990\n                                                                                                                       // 14991\n/**                                                                                                                    // 14992\n * Executed within the scope of the `Transaction` instance. Consider these as                                          // 14993\n * being member methods, but with an implied ordering while being isolated from                                        // 14994\n * each other.                                                                                                         // 14995\n */                                                                                                                    // 14996\nvar TRANSACTION_WRAPPERS = [                                                                                           // 14997\n  PUT_LISTENER_QUEUEING,                                                                                               // 14998\n  ON_DOM_READY_QUEUEING                                                                                                // 14999\n];                                                                                                                     // 15000\n                                                                                                                       // 15001\n/**                                                                                                                    // 15002\n * @class ReactServerRenderingTransaction                                                                              // 15003\n * @param {boolean} renderToStaticMarkup                                                                               // 15004\n */                                                                                                                    // 15005\nfunction ReactServerRenderingTransaction(renderToStaticMarkup) {                                                       // 15006\n  this.reinitializeTransaction();                                                                                      // 15007\n  this.renderToStaticMarkup = renderToStaticMarkup;                                                                    // 15008\n  this.reactMountReady = CallbackQueue.getPooled(null);                                                                // 15009\n  this.putListenerQueue = ReactPutListenerQueue.getPooled();                                                           // 15010\n}                                                                                                                      // 15011\n                                                                                                                       // 15012\nvar Mixin = {                                                                                                          // 15013\n  /**                                                                                                                  // 15014\n   * @see Transaction                                                                                                  // 15015\n   * @abstract                                                                                                         // 15016\n   * @final                                                                                                            // 15017\n   * @return {array} Empty list of operation wrap proceedures.                                                         // 15018\n   */                                                                                                                  // 15019\n  getTransactionWrappers: function() {                                                                                 // 15020\n    return TRANSACTION_WRAPPERS;                                                                                       // 15021\n  },                                                                                                                   // 15022\n                                                                                                                       // 15023\n  /**                                                                                                                  // 15024\n   * @return {object} The queue to collect `onDOMReady` callbacks with.                                                // 15025\n   */                                                                                                                  // 15026\n  getReactMountReady: function() {                                                                                     // 15027\n    return this.reactMountReady;                                                                                       // 15028\n  },                                                                                                                   // 15029\n                                                                                                                       // 15030\n  getPutListenerQueue: function() {                                                                                    // 15031\n    return this.putListenerQueue;                                                                                      // 15032\n  },                                                                                                                   // 15033\n                                                                                                                       // 15034\n  /**                                                                                                                  // 15035\n   * `PooledClass` looks for this, and will invoke this before allowing this                                           // 15036\n   * instance to be resused.                                                                                           // 15037\n   */                                                                                                                  // 15038\n  destructor: function() {                                                                                             // 15039\n    CallbackQueue.release(this.reactMountReady);                                                                       // 15040\n    this.reactMountReady = null;                                                                                       // 15041\n                                                                                                                       // 15042\n    ReactPutListenerQueue.release(this.putListenerQueue);                                                              // 15043\n    this.putListenerQueue = null;                                                                                      // 15044\n  }                                                                                                                    // 15045\n};                                                                                                                     // 15046\n                                                                                                                       // 15047\n                                                                                                                       // 15048\nassign(                                                                                                                // 15049\n  ReactServerRenderingTransaction.prototype,                                                                           // 15050\n  Transaction.Mixin,                                                                                                   // 15051\n  Mixin                                                                                                                // 15052\n);                                                                                                                     // 15053\n                                                                                                                       // 15054\nPooledClass.addPoolingTo(ReactServerRenderingTransaction);                                                             // 15055\n                                                                                                                       // 15056\nmodule.exports = ReactServerRenderingTransaction;                                                                      // 15057\n                                                                                                                       // 15058\n},{\"./CallbackQueue\":\"react/lib/CallbackQueue\",\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./ReactPutListenerQueue\":\"react/lib/ReactPutListenerQueue\",\"./Transaction\":\"react/lib/Transaction\",\"./emptyFunction\":\"react/lib/emptyFunction\"}],\"react/lib/ReactServerRendering\":[function(require,module,exports){\n(function (process){                                                                                                   // 15060\n/**                                                                                                                    // 15061\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 15062\n * All rights reserved.                                                                                                // 15063\n *                                                                                                                     // 15064\n * This source code is licensed under the BSD-style license found in the                                               // 15065\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 15066\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 15067\n *                                                                                                                     // 15068\n * @typechecks static-only                                                                                             // 15069\n * @providesModule ReactServerRendering                                                                                // 15070\n */                                                                                                                    // 15071\n'use strict';                                                                                                          // 15072\n                                                                                                                       // 15073\nvar ReactElement = require(\"./ReactElement\");                                                                          // 15074\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");                                                          // 15075\nvar ReactMarkupChecksum = require(\"./ReactMarkupChecksum\");                                                            // 15076\nvar ReactServerRenderingTransaction =                                                                                  // 15077\n  require(\"./ReactServerRenderingTransaction\");                                                                        // 15078\n                                                                                                                       // 15079\nvar emptyObject = require(\"./emptyObject\");                                                                            // 15080\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");                                                // 15081\nvar invariant = require(\"./invariant\");                                                                                // 15082\n                                                                                                                       // 15083\n/**                                                                                                                    // 15084\n * @param {ReactElement} element                                                                                       // 15085\n * @return {string} the HTML markup                                                                                    // 15086\n */                                                                                                                    // 15087\nfunction renderToString(element) {                                                                                     // 15088\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 15089\n    ReactElement.isValidElement(element),                                                                              // 15090\n    'renderToString(): You must pass a valid ReactElement.'                                                            // 15091\n  ) : invariant(ReactElement.isValidElement(element)));                                                                // 15092\n                                                                                                                       // 15093\n  var transaction;                                                                                                     // 15094\n  try {                                                                                                                // 15095\n    var id = ReactInstanceHandles.createReactRootID();                                                                 // 15096\n    transaction = ReactServerRenderingTransaction.getPooled(false);                                                    // 15097\n                                                                                                                       // 15098\n    return transaction.perform(function() {                                                                            // 15099\n      var componentInstance = instantiateReactComponent(element, null);                                                // 15100\n      var markup =                                                                                                     // 15101\n        componentInstance.mountComponent(id, transaction, emptyObject);                                                // 15102\n      return ReactMarkupChecksum.addChecksumToMarkup(markup);                                                          // 15103\n    }, null);                                                                                                          // 15104\n  } finally {                                                                                                          // 15105\n    ReactServerRenderingTransaction.release(transaction);                                                              // 15106\n  }                                                                                                                    // 15107\n}                                                                                                                      // 15108\n                                                                                                                       // 15109\n/**                                                                                                                    // 15110\n * @param {ReactElement} element                                                                                       // 15111\n * @return {string} the HTML markup, without the extra React ID and checksum                                           // 15112\n * (for generating static pages)                                                                                       // 15113\n */                                                                                                                    // 15114\nfunction renderToStaticMarkup(element) {                                                                               // 15115\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 15116\n    ReactElement.isValidElement(element),                                                                              // 15117\n    'renderToStaticMarkup(): You must pass a valid ReactElement.'                                                      // 15118\n  ) : invariant(ReactElement.isValidElement(element)));                                                                // 15119\n                                                                                                                       // 15120\n  var transaction;                                                                                                     // 15121\n  try {                                                                                                                // 15122\n    var id = ReactInstanceHandles.createReactRootID();                                                                 // 15123\n    transaction = ReactServerRenderingTransaction.getPooled(true);                                                     // 15124\n                                                                                                                       // 15125\n    return transaction.perform(function() {                                                                            // 15126\n      var componentInstance = instantiateReactComponent(element, null);                                                // 15127\n      return componentInstance.mountComponent(id, transaction, emptyObject);                                           // 15128\n    }, null);                                                                                                          // 15129\n  } finally {                                                                                                          // 15130\n    ReactServerRenderingTransaction.release(transaction);                                                              // 15131\n  }                                                                                                                    // 15132\n}                                                                                                                      // 15133\n                                                                                                                       // 15134\nmodule.exports = {                                                                                                     // 15135\n  renderToString: renderToString,                                                                                      // 15136\n  renderToStaticMarkup: renderToStaticMarkup                                                                           // 15137\n};                                                                                                                     // 15138\n                                                                                                                       // 15139\n}).call(this,require('_process'))                                                                                      // 15140\n                                                                                                                       // 15141\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./ReactMarkupChecksum\":\"react/lib/ReactMarkupChecksum\",\"./ReactServerRenderingTransaction\":\"react/lib/ReactServerRenderingTransaction\",\"./emptyObject\":\"react/lib/emptyObject\",\"./instantiateReactComponent\":\"react/lib/instantiateReactComponent\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactStateSetters\":[function(require,module,exports){\n/**                                                                                                                    // 15143\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 15144\n * All rights reserved.                                                                                                // 15145\n *                                                                                                                     // 15146\n * This source code is licensed under the BSD-style license found in the                                               // 15147\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 15148\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 15149\n *                                                                                                                     // 15150\n * @providesModule ReactStateSetters                                                                                   // 15151\n */                                                                                                                    // 15152\n                                                                                                                       // 15153\n'use strict';                                                                                                          // 15154\n                                                                                                                       // 15155\nvar ReactStateSetters = {                                                                                              // 15156\n  /**                                                                                                                  // 15157\n   * Returns a function that calls the provided function, and uses the result                                          // 15158\n   * of that to set the component's state.                                                                             // 15159\n   *                                                                                                                   // 15160\n   * @param {ReactCompositeComponent} component                                                                        // 15161\n   * @param {function} funcReturningState Returned callback uses this to                                               // 15162\n   *                                      determine how to update state.                                               // 15163\n   * @return {function} callback that when invoked uses funcReturningState to                                          // 15164\n   *                    determined the object literal to setState.                                                     // 15165\n   */                                                                                                                  // 15166\n  createStateSetter: function(component, funcReturningState) {                                                         // 15167\n    return function(a, b, c, d, e, f) {                                                                                // 15168\n      var partialState = funcReturningState.call(component, a, b, c, d, e, f);                                         // 15169\n      if (partialState) {                                                                                              // 15170\n        component.setState(partialState);                                                                              // 15171\n      }                                                                                                                // 15172\n    };                                                                                                                 // 15173\n  },                                                                                                                   // 15174\n                                                                                                                       // 15175\n  /**                                                                                                                  // 15176\n   * Returns a single-argument callback that can be used to update a single                                            // 15177\n   * key in the component's state.                                                                                     // 15178\n   *                                                                                                                   // 15179\n   * Note: this is memoized function, which makes it inexpensive to call.                                              // 15180\n   *                                                                                                                   // 15181\n   * @param {ReactCompositeComponent} component                                                                        // 15182\n   * @param {string} key The key in the state that you should update.                                                  // 15183\n   * @return {function} callback of 1 argument which calls setState() with                                             // 15184\n   *                    the provided keyName and callback argument.                                                    // 15185\n   */                                                                                                                  // 15186\n  createStateKeySetter: function(component, key) {                                                                     // 15187\n    // Memoize the setters.                                                                                            // 15188\n    var cache = component.__keySetters || (component.__keySetters = {});                                               // 15189\n    return cache[key] || (cache[key] = createStateKeySetter(component, key));                                          // 15190\n  }                                                                                                                    // 15191\n};                                                                                                                     // 15192\n                                                                                                                       // 15193\nfunction createStateKeySetter(component, key) {                                                                        // 15194\n  // Partial state is allocated outside of the function closure so it can be                                           // 15195\n  // reused with every call, avoiding memory allocation when this function                                             // 15196\n  // is called.                                                                                                        // 15197\n  var partialState = {};                                                                                               // 15198\n  return function stateKeySetter(value) {                                                                              // 15199\n    partialState[key] = value;                                                                                         // 15200\n    component.setState(partialState);                                                                                  // 15201\n  };                                                                                                                   // 15202\n}                                                                                                                      // 15203\n                                                                                                                       // 15204\nReactStateSetters.Mixin = {                                                                                            // 15205\n  /**                                                                                                                  // 15206\n   * Returns a function that calls the provided function, and uses the result                                          // 15207\n   * of that to set the component's state.                                                                             // 15208\n   *                                                                                                                   // 15209\n   * For example, these statements are equivalent:                                                                     // 15210\n   *                                                                                                                   // 15211\n   *   this.setState({x: 1});                                                                                          // 15212\n   *   this.createStateSetter(function(xValue) {                                                                       // 15213\n   *     return {x: xValue};                                                                                           // 15214\n   *   })(1);                                                                                                          // 15215\n   *                                                                                                                   // 15216\n   * @param {function} funcReturningState Returned callback uses this to                                               // 15217\n   *                                      determine how to update state.                                               // 15218\n   * @return {function} callback that when invoked uses funcReturningState to                                          // 15219\n   *                    determined the object literal to setState.                                                     // 15220\n   */                                                                                                                  // 15221\n  createStateSetter: function(funcReturningState) {                                                                    // 15222\n    return ReactStateSetters.createStateSetter(this, funcReturningState);                                              // 15223\n  },                                                                                                                   // 15224\n                                                                                                                       // 15225\n  /**                                                                                                                  // 15226\n   * Returns a single-argument callback that can be used to update a single                                            // 15227\n   * key in the component's state.                                                                                     // 15228\n   *                                                                                                                   // 15229\n   * For example, these statements are equivalent:                                                                     // 15230\n   *                                                                                                                   // 15231\n   *   this.setState({x: 1});                                                                                          // 15232\n   *   this.createStateKeySetter('x')(1);                                                                              // 15233\n   *                                                                                                                   // 15234\n   * Note: this is memoized function, which makes it inexpensive to call.                                              // 15235\n   *                                                                                                                   // 15236\n   * @param {string} key The key in the state that you should update.                                                  // 15237\n   * @return {function} callback of 1 argument which calls setState() with                                             // 15238\n   *                    the provided keyName and callback argument.                                                    // 15239\n   */                                                                                                                  // 15240\n  createStateKeySetter: function(key) {                                                                                // 15241\n    return ReactStateSetters.createStateKeySetter(this, key);                                                          // 15242\n  }                                                                                                                    // 15243\n};                                                                                                                     // 15244\n                                                                                                                       // 15245\nmodule.exports = ReactStateSetters;                                                                                    // 15246\n                                                                                                                       // 15247\n},{}],\"react/lib/ReactTestUtils\":[function(require,module,exports){                                                    // 15248\n/**                                                                                                                    // 15249\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 15250\n * All rights reserved.                                                                                                // 15251\n *                                                                                                                     // 15252\n * This source code is licensed under the BSD-style license found in the                                               // 15253\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 15254\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 15255\n *                                                                                                                     // 15256\n * @providesModule ReactTestUtils                                                                                      // 15257\n */                                                                                                                    // 15258\n                                                                                                                       // 15259\n'use strict';                                                                                                          // 15260\n                                                                                                                       // 15261\nvar EventConstants = require(\"./EventConstants\");                                                                      // 15262\nvar EventPluginHub = require(\"./EventPluginHub\");                                                                      // 15263\nvar EventPropagators = require(\"./EventPropagators\");                                                                  // 15264\nvar React = require(\"./React\");                                                                                        // 15265\nvar ReactElement = require(\"./ReactElement\");                                                                          // 15266\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");                                                            // 15267\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");                                                  // 15268\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");                                                    // 15269\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");                                                          // 15270\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");                                                                  // 15271\nvar ReactMount = require(\"./ReactMount\");                                                                              // 15272\nvar ReactUpdates = require(\"./ReactUpdates\");                                                                          // 15273\nvar SyntheticEvent = require(\"./SyntheticEvent\");                                                                      // 15274\n                                                                                                                       // 15275\nvar assign = require(\"./Object.assign\");                                                                               // 15276\nvar emptyObject = require(\"./emptyObject\");                                                                            // 15277\n                                                                                                                       // 15278\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 15279\n                                                                                                                       // 15280\nfunction Event(suffix) {}                                                                                              // 15281\n                                                                                                                       // 15282\n/**                                                                                                                    // 15283\n * @class ReactTestUtils                                                                                               // 15284\n */                                                                                                                    // 15285\n                                                                                                                       // 15286\n/**                                                                                                                    // 15287\n * Todo: Support the entire DOM.scry query syntax. For now, these simple                                               // 15288\n * utilities will suffice for testing purposes.                                                                        // 15289\n * @lends ReactTestUtils                                                                                               // 15290\n */                                                                                                                    // 15291\nvar ReactTestUtils = {                                                                                                 // 15292\n  renderIntoDocument: function(instance) {                                                                             // 15293\n    var div = document.createElement('div');                                                                           // 15294\n    // None of our tests actually require attaching the container to the                                               // 15295\n    // DOM, and doing so creates a mess that we rely on test isolation to                                              // 15296\n    // clean up, so we're going to stop honoring the name of this method                                               // 15297\n    // (and probably rename it eventually) if no problems arise.                                                       // 15298\n    // document.documentElement.appendChild(div);                                                                      // 15299\n    return React.render(instance, div);                                                                                // 15300\n  },                                                                                                                   // 15301\n                                                                                                                       // 15302\n  isElement: function(element) {                                                                                       // 15303\n    return ReactElement.isValidElement(element);                                                                       // 15304\n  },                                                                                                                   // 15305\n                                                                                                                       // 15306\n  isElementOfType: function(inst, convenienceConstructor) {                                                            // 15307\n    return (                                                                                                           // 15308\n      ReactElement.isValidElement(inst) &&                                                                             // 15309\n      inst.type === convenienceConstructor                                                                             // 15310\n    );                                                                                                                 // 15311\n  },                                                                                                                   // 15312\n                                                                                                                       // 15313\n  isDOMComponent: function(inst) {                                                                                     // 15314\n    // TODO: Fix this heuristic. It's just here because composites can currently                                       // 15315\n    // pretend to be DOM components.                                                                                   // 15316\n    return !!(inst && inst.tagName && inst.getDOMNode);                                                                // 15317\n  },                                                                                                                   // 15318\n                                                                                                                       // 15319\n  isDOMComponentElement: function(inst) {                                                                              // 15320\n    return !!(inst &&                                                                                                  // 15321\n              ReactElement.isValidElement(inst) &&                                                                     // 15322\n              !!inst.tagName);                                                                                         // 15323\n  },                                                                                                                   // 15324\n                                                                                                                       // 15325\n  isCompositeComponent: function(inst) {                                                                               // 15326\n    return typeof inst.render === 'function' &&                                                                        // 15327\n           typeof inst.setState === 'function';                                                                        // 15328\n  },                                                                                                                   // 15329\n                                                                                                                       // 15330\n  isCompositeComponentWithType: function(inst, type) {                                                                 // 15331\n    return !!(ReactTestUtils.isCompositeComponent(inst) &&                                                             // 15332\n             (inst.constructor === type));                                                                             // 15333\n  },                                                                                                                   // 15334\n                                                                                                                       // 15335\n  isCompositeComponentElement: function(inst) {                                                                        // 15336\n    if (!ReactElement.isValidElement(inst)) {                                                                          // 15337\n      return false;                                                                                                    // 15338\n    }                                                                                                                  // 15339\n    // We check the prototype of the type that will get mounted, not the                                               // 15340\n    // instance itself. This is a future proof way of duck typing.                                                     // 15341\n    var prototype = inst.type.prototype;                                                                               // 15342\n    return (                                                                                                           // 15343\n      typeof prototype.render === 'function' &&                                                                        // 15344\n      typeof prototype.setState === 'function'                                                                         // 15345\n    );                                                                                                                 // 15346\n  },                                                                                                                   // 15347\n                                                                                                                       // 15348\n  isCompositeComponentElementWithType: function(inst, type) {                                                          // 15349\n    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&                                                      // 15350\n             (inst.constructor === type));                                                                             // 15351\n  },                                                                                                                   // 15352\n                                                                                                                       // 15353\n  getRenderedChildOfCompositeComponent: function(inst) {                                                               // 15354\n    if (!ReactTestUtils.isCompositeComponent(inst)) {                                                                  // 15355\n      return null;                                                                                                     // 15356\n    }                                                                                                                  // 15357\n    var internalInstance = ReactInstanceMap.get(inst);                                                                 // 15358\n    return internalInstance._renderedComponent.getPublicInstance();                                                    // 15359\n  },                                                                                                                   // 15360\n                                                                                                                       // 15361\n  findAllInRenderedTree: function(inst, test) {                                                                        // 15362\n    if (!inst) {                                                                                                       // 15363\n      return [];                                                                                                       // 15364\n    }                                                                                                                  // 15365\n    var ret = test(inst) ? [inst] : [];                                                                                // 15366\n    if (ReactTestUtils.isDOMComponent(inst)) {                                                                         // 15367\n      var internalInstance = ReactInstanceMap.get(inst);                                                               // 15368\n      var renderedChildren = internalInstance                                                                          // 15369\n        ._renderedComponent                                                                                            // 15370\n        ._renderedChildren;                                                                                            // 15371\n      var key;                                                                                                         // 15372\n      for (key in renderedChildren) {                                                                                  // 15373\n        if (!renderedChildren.hasOwnProperty(key)) {                                                                   // 15374\n          continue;                                                                                                    // 15375\n        }                                                                                                              // 15376\n        if (!renderedChildren[key].getPublicInstance) {                                                                // 15377\n          continue;                                                                                                    // 15378\n        }                                                                                                              // 15379\n        ret = ret.concat(                                                                                              // 15380\n          ReactTestUtils.findAllInRenderedTree(                                                                        // 15381\n            renderedChildren[key].getPublicInstance(),                                                                 // 15382\n            test                                                                                                       // 15383\n          )                                                                                                            // 15384\n        );                                                                                                             // 15385\n      }                                                                                                                // 15386\n    } else if (ReactTestUtils.isCompositeComponent(inst)) {                                                            // 15387\n      ret = ret.concat(                                                                                                // 15388\n        ReactTestUtils.findAllInRenderedTree(                                                                          // 15389\n          ReactTestUtils.getRenderedChildOfCompositeComponent(inst),                                                   // 15390\n          test                                                                                                         // 15391\n        )                                                                                                              // 15392\n      );                                                                                                               // 15393\n    }                                                                                                                  // 15394\n    return ret;                                                                                                        // 15395\n  },                                                                                                                   // 15396\n                                                                                                                       // 15397\n  /**                                                                                                                  // 15398\n   * Finds all instance of components in the rendered tree that are DOM                                                // 15399\n   * components with the class name matching `className`.                                                              // 15400\n   * @return an array of all the matches.                                                                              // 15401\n   */                                                                                                                  // 15402\n  scryRenderedDOMComponentsWithClass: function(root, className) {                                                      // 15403\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {                                                 // 15404\n      var instClassName = inst.props.className;                                                                        // 15405\n      return ReactTestUtils.isDOMComponent(inst) && (                                                                  // 15406\n        (instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1)                           // 15407\n      );                                                                                                               // 15408\n    });                                                                                                                // 15409\n  },                                                                                                                   // 15410\n                                                                                                                       // 15411\n  /**                                                                                                                  // 15412\n   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,                                       // 15413\n   * and returns that one result, or throws exception if there is any other                                            // 15414\n   * number of matches besides one.                                                                                    // 15415\n   * @return {!ReactDOMComponent} The one match.                                                                       // 15416\n   */                                                                                                                  // 15417\n  findRenderedDOMComponentWithClass: function(root, className) {                                                       // 15418\n    var all =                                                                                                          // 15419\n      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);                                              // 15420\n    if (all.length !== 1) {                                                                                            // 15421\n      throw new Error('Did not find exactly one match ' +                                                              // 15422\n        '(found: ' + all.length + ') for class:' + className                                                           // 15423\n      );                                                                                                               // 15424\n    }                                                                                                                  // 15425\n    return all[0];                                                                                                     // 15426\n  },                                                                                                                   // 15427\n                                                                                                                       // 15428\n                                                                                                                       // 15429\n  /**                                                                                                                  // 15430\n   * Finds all instance of components in the rendered tree that are DOM                                                // 15431\n   * components with the tag name matching `tagName`.                                                                  // 15432\n   * @return an array of all the matches.                                                                              // 15433\n   */                                                                                                                  // 15434\n  scryRenderedDOMComponentsWithTag: function(root, tagName) {                                                          // 15435\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {                                                 // 15436\n      return ReactTestUtils.isDOMComponent(inst) &&                                                                    // 15437\n            inst.tagName === tagName.toUpperCase();                                                                    // 15438\n    });                                                                                                                // 15439\n  },                                                                                                                   // 15440\n                                                                                                                       // 15441\n  /**                                                                                                                  // 15442\n   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,                                         // 15443\n   * and returns that one result, or throws exception if there is any other                                            // 15444\n   * number of matches besides one.                                                                                    // 15445\n   * @return {!ReactDOMComponent} The one match.                                                                       // 15446\n   */                                                                                                                  // 15447\n  findRenderedDOMComponentWithTag: function(root, tagName) {                                                           // 15448\n    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);                                          // 15449\n    if (all.length !== 1) {                                                                                            // 15450\n      throw new Error('Did not find exactly one match for tag:' + tagName);                                            // 15451\n    }                                                                                                                  // 15452\n    return all[0];                                                                                                     // 15453\n  },                                                                                                                   // 15454\n                                                                                                                       // 15455\n                                                                                                                       // 15456\n  /**                                                                                                                  // 15457\n   * Finds all instances of components with type equal to `componentType`.                                             // 15458\n   * @return an array of all the matches.                                                                              // 15459\n   */                                                                                                                  // 15460\n  scryRenderedComponentsWithType: function(root, componentType) {                                                      // 15461\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {                                                 // 15462\n      return ReactTestUtils.isCompositeComponentWithType(                                                              // 15463\n        inst,                                                                                                          // 15464\n        componentType                                                                                                  // 15465\n      );                                                                                                               // 15466\n    });                                                                                                                // 15467\n  },                                                                                                                   // 15468\n                                                                                                                       // 15469\n  /**                                                                                                                  // 15470\n   * Same as `scryRenderedComponentsWithType` but expects there to be one result                                       // 15471\n   * and returns that one result, or throws exception if there is any other                                            // 15472\n   * number of matches besides one.                                                                                    // 15473\n   * @return {!ReactComponent} The one match.                                                                          // 15474\n   */                                                                                                                  // 15475\n  findRenderedComponentWithType: function(root, componentType) {                                                       // 15476\n    var all = ReactTestUtils.scryRenderedComponentsWithType(                                                           // 15477\n      root,                                                                                                            // 15478\n      componentType                                                                                                    // 15479\n    );                                                                                                                 // 15480\n    if (all.length !== 1) {                                                                                            // 15481\n      throw new Error(                                                                                                 // 15482\n        'Did not find exactly one match for componentType:' + componentType                                            // 15483\n      );                                                                                                               // 15484\n    }                                                                                                                  // 15485\n    return all[0];                                                                                                     // 15486\n  },                                                                                                                   // 15487\n                                                                                                                       // 15488\n  /**                                                                                                                  // 15489\n   * Pass a mocked component module to this method to augment it with                                                  // 15490\n   * useful methods that allow it to be used as a dummy React component.                                               // 15491\n   * Instead of rendering as usual, the component will become a simple                                                 // 15492\n   * <div> containing any provided children.                                                                           // 15493\n   *                                                                                                                   // 15494\n   * @param {object} module the mock function object exported from a                                                   // 15495\n   *                        module that defines the component to be mocked                                             // 15496\n   * @param {?string} mockTagName optional dummy root tag name to return                                               // 15497\n   *                              from render method (overrides                                                        // 15498\n   *                              module.mockTagName if provided)                                                      // 15499\n   * @return {object} the ReactTestUtils object (for chaining)                                                         // 15500\n   */                                                                                                                  // 15501\n  mockComponent: function(module, mockTagName) {                                                                       // 15502\n    mockTagName = mockTagName || module.mockTagName || \"div\";                                                          // 15503\n                                                                                                                       // 15504\n    module.prototype.render.mockImplementation(function() {                                                            // 15505\n      return React.createElement(                                                                                      // 15506\n        mockTagName,                                                                                                   // 15507\n        null,                                                                                                          // 15508\n        this.props.children                                                                                            // 15509\n      );                                                                                                               // 15510\n    });                                                                                                                // 15511\n                                                                                                                       // 15512\n    return this;                                                                                                       // 15513\n  },                                                                                                                   // 15514\n                                                                                                                       // 15515\n  /**                                                                                                                  // 15516\n   * Simulates a top level event being dispatched from a raw event that occured                                        // 15517\n   * on an `Element` node.                                                                                             // 15518\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`                                           // 15519\n   * @param {!Element} node The dom to simulate an event occurring on.                                                 // 15520\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.                                       // 15521\n   */                                                                                                                  // 15522\n  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {                                           // 15523\n    fakeNativeEvent.target = node;                                                                                     // 15524\n    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(                                                         // 15525\n      topLevelType,                                                                                                    // 15526\n      fakeNativeEvent                                                                                                  // 15527\n    );                                                                                                                 // 15528\n  },                                                                                                                   // 15529\n                                                                                                                       // 15530\n  /**                                                                                                                  // 15531\n   * Simulates a top level event being dispatched from a raw event that occured                                        // 15532\n   * on the `ReactDOMComponent` `comp`.                                                                                // 15533\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.                                          // 15534\n   * @param comp {!ReactDOMComponent}                                                                                  // 15535\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.                                       // 15536\n   */                                                                                                                  // 15537\n  simulateNativeEventOnDOMComponent: function(                                                                         // 15538\n      topLevelType,                                                                                                    // 15539\n      comp,                                                                                                            // 15540\n      fakeNativeEvent) {                                                                                               // 15541\n    ReactTestUtils.simulateNativeEventOnNode(                                                                          // 15542\n      topLevelType,                                                                                                    // 15543\n      comp.getDOMNode(),                                                                                               // 15544\n      fakeNativeEvent                                                                                                  // 15545\n    );                                                                                                                 // 15546\n  },                                                                                                                   // 15547\n                                                                                                                       // 15548\n  nativeTouchData: function(x, y) {                                                                                    // 15549\n    return {                                                                                                           // 15550\n      touches: [                                                                                                       // 15551\n        {pageX: x, pageY: y}                                                                                           // 15552\n      ]                                                                                                                // 15553\n    };                                                                                                                 // 15554\n  },                                                                                                                   // 15555\n                                                                                                                       // 15556\n  createRenderer: function() {                                                                                         // 15557\n    return new ReactShallowRenderer();                                                                                 // 15558\n  },                                                                                                                   // 15559\n                                                                                                                       // 15560\n  Simulate: null,                                                                                                      // 15561\n  SimulateNative: {}                                                                                                   // 15562\n};                                                                                                                     // 15563\n                                                                                                                       // 15564\n/**                                                                                                                    // 15565\n * @class ReactShallowRenderer                                                                                         // 15566\n */                                                                                                                    // 15567\nvar ReactShallowRenderer = function() {                                                                                // 15568\n  this._instance = null;                                                                                               // 15569\n};                                                                                                                     // 15570\n                                                                                                                       // 15571\nReactShallowRenderer.prototype.getRenderOutput = function() {                                                          // 15572\n  return (                                                                                                             // 15573\n    (this._instance && this._instance._renderedComponent &&                                                            // 15574\n     this._instance._renderedComponent._renderedOutput)                                                                // 15575\n    || null                                                                                                            // 15576\n  );                                                                                                                   // 15577\n};                                                                                                                     // 15578\n                                                                                                                       // 15579\nvar NoopInternalComponent = function(element) {                                                                        // 15580\n  this._renderedOutput = element;                                                                                      // 15581\n  this._currentElement = element === null || element === false ?                                                       // 15582\n    ReactEmptyComponent.emptyElement :                                                                                 // 15583\n    element;                                                                                                           // 15584\n};                                                                                                                     // 15585\n                                                                                                                       // 15586\nNoopInternalComponent.prototype = {                                                                                    // 15587\n                                                                                                                       // 15588\n  mountComponent: function() {                                                                                         // 15589\n  },                                                                                                                   // 15590\n                                                                                                                       // 15591\n  receiveComponent: function(element) {                                                                                // 15592\n    this._renderedOutput = element;                                                                                    // 15593\n    this._currentElement = element === null || element === false ?                                                     // 15594\n      ReactEmptyComponent.emptyElement :                                                                               // 15595\n      element;                                                                                                         // 15596\n  },                                                                                                                   // 15597\n                                                                                                                       // 15598\n  unmountComponent: function() {                                                                                       // 15599\n  }                                                                                                                    // 15600\n                                                                                                                       // 15601\n};                                                                                                                     // 15602\n                                                                                                                       // 15603\nvar ShallowComponentWrapper = function() { };                                                                          // 15604\nassign(                                                                                                                // 15605\n  ShallowComponentWrapper.prototype,                                                                                   // 15606\n  ReactCompositeComponent.Mixin, {                                                                                     // 15607\n    _instantiateReactComponent: function(element) {                                                                    // 15608\n      return new NoopInternalComponent(element);                                                                       // 15609\n    },                                                                                                                 // 15610\n    _replaceNodeWithMarkupByID: function() {},                                                                         // 15611\n    _renderValidatedComponent:                                                                                         // 15612\n      ReactCompositeComponent.Mixin.                                                                                   // 15613\n        _renderValidatedComponentWithoutOwnerOrContext                                                                 // 15614\n  }                                                                                                                    // 15615\n);                                                                                                                     // 15616\n                                                                                                                       // 15617\nReactShallowRenderer.prototype.render = function(element, context) {                                                   // 15618\n  if (!context) {                                                                                                      // 15619\n    context = emptyObject;                                                                                             // 15620\n  }                                                                                                                    // 15621\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();                                                // 15622\n  this._render(element, transaction, context);                                                                         // 15623\n  ReactUpdates.ReactReconcileTransaction.release(transaction);                                                         // 15624\n};                                                                                                                     // 15625\n                                                                                                                       // 15626\nReactShallowRenderer.prototype.unmount = function() {                                                                  // 15627\n  if (this._instance) {                                                                                                // 15628\n    this._instance.unmountComponent();                                                                                 // 15629\n  }                                                                                                                    // 15630\n};                                                                                                                     // 15631\n                                                                                                                       // 15632\nReactShallowRenderer.prototype._render = function(element, transaction, context) {                                     // 15633\n  if (!this._instance) {                                                                                               // 15634\n    var rootID = ReactInstanceHandles.createReactRootID();                                                             // 15635\n    var instance = new ShallowComponentWrapper(element.type);                                                          // 15636\n    instance.construct(element);                                                                                       // 15637\n                                                                                                                       // 15638\n    instance.mountComponent(rootID, transaction, context);                                                             // 15639\n                                                                                                                       // 15640\n    this._instance = instance;                                                                                         // 15641\n  } else {                                                                                                             // 15642\n    this._instance.receiveComponent(element, transaction, context);                                                    // 15643\n  }                                                                                                                    // 15644\n};                                                                                                                     // 15645\n                                                                                                                       // 15646\n/**                                                                                                                    // 15647\n * Exports:                                                                                                            // 15648\n *                                                                                                                     // 15649\n * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`                                                        // 15650\n * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`                                                    // 15651\n * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`                                                       // 15652\n * - ... (All keys from event plugin `eventTypes` objects)                                                             // 15653\n */                                                                                                                    // 15654\nfunction makeSimulator(eventType) {                                                                                    // 15655\n  return function(domComponentOrNode, eventData) {                                                                     // 15656\n    var node;                                                                                                          // 15657\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {                                                           // 15658\n      node = domComponentOrNode.getDOMNode();                                                                          // 15659\n    } else if (domComponentOrNode.tagName) {                                                                           // 15660\n      node = domComponentOrNode;                                                                                       // 15661\n    }                                                                                                                  // 15662\n                                                                                                                       // 15663\n    var fakeNativeEvent = new Event();                                                                                 // 15664\n    fakeNativeEvent.target = node;                                                                                     // 15665\n    // We don't use SyntheticEvent.getPooled in order to not have to worry about                                       // 15666\n    // properly destroying any properties assigned from `eventData` upon release                                       // 15667\n    var event = new SyntheticEvent(                                                                                    // 15668\n      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],                                                    // 15669\n      ReactMount.getID(node),                                                                                          // 15670\n      fakeNativeEvent                                                                                                  // 15671\n    );                                                                                                                 // 15672\n    assign(event, eventData);                                                                                          // 15673\n    EventPropagators.accumulateTwoPhaseDispatches(event);                                                              // 15674\n                                                                                                                       // 15675\n    ReactUpdates.batchedUpdates(function() {                                                                           // 15676\n      EventPluginHub.enqueueEvents(event);                                                                             // 15677\n      EventPluginHub.processEventQueue();                                                                              // 15678\n    });                                                                                                                // 15679\n  };                                                                                                                   // 15680\n}                                                                                                                      // 15681\n                                                                                                                       // 15682\nfunction buildSimulators() {                                                                                           // 15683\n  ReactTestUtils.Simulate = {};                                                                                        // 15684\n                                                                                                                       // 15685\n  var eventType;                                                                                                       // 15686\n  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {                                               // 15687\n    /**                                                                                                                // 15688\n     * @param {!Element || ReactDOMComponent} domComponentOrNode                                                       // 15689\n     * @param {?object} eventData Fake event data to use in SyntheticEvent.                                            // 15690\n     */                                                                                                                // 15691\n    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);                                                     // 15692\n  }                                                                                                                    // 15693\n}                                                                                                                      // 15694\n                                                                                                                       // 15695\n// Rebuild ReactTestUtils.Simulate whenever event plugins are injected                                                 // 15696\nvar oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;                                       // 15697\nEventPluginHub.injection.injectEventPluginOrder = function() {                                                         // 15698\n  oldInjectEventPluginOrder.apply(this, arguments);                                                                    // 15699\n  buildSimulators();                                                                                                   // 15700\n};                                                                                                                     // 15701\nvar oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;                                         // 15702\nEventPluginHub.injection.injectEventPluginsByName = function() {                                                       // 15703\n  oldInjectEventPlugins.apply(this, arguments);                                                                        // 15704\n  buildSimulators();                                                                                                   // 15705\n};                                                                                                                     // 15706\n                                                                                                                       // 15707\nbuildSimulators();                                                                                                     // 15708\n                                                                                                                       // 15709\n/**                                                                                                                    // 15710\n * Exports:                                                                                                            // 15711\n *                                                                                                                     // 15712\n * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`                                                  // 15713\n * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`                                              // 15714\n * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`                                                        // 15715\n * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`                                               // 15716\n * - ... (All keys from `EventConstants.topLevelTypes`)                                                                // 15717\n *                                                                                                                     // 15718\n * Note: Top level event types are a subset of the entire set of handler types                                         // 15719\n * (which include a broader set of \"synthetic\" events). For example, onDragDone                                        // 15720\n * is a synthetic event. Except when testing an event plugin or React's event                                          // 15721\n * handling code specifically, you probably want to use ReactTestUtils.Simulate                                        // 15722\n * to dispatch synthetic events.                                                                                       // 15723\n */                                                                                                                    // 15724\n                                                                                                                       // 15725\nfunction makeNativeSimulator(eventType) {                                                                              // 15726\n  return function(domComponentOrNode, nativeEventData) {                                                               // 15727\n    var fakeNativeEvent = new Event(eventType);                                                                        // 15728\n    assign(fakeNativeEvent, nativeEventData);                                                                          // 15729\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {                                                           // 15730\n      ReactTestUtils.simulateNativeEventOnDOMComponent(                                                                // 15731\n        eventType,                                                                                                     // 15732\n        domComponentOrNode,                                                                                            // 15733\n        fakeNativeEvent                                                                                                // 15734\n      );                                                                                                               // 15735\n    } else if (!!domComponentOrNode.tagName) {                                                                         // 15736\n      // Will allow on actual dom nodes.                                                                               // 15737\n      ReactTestUtils.simulateNativeEventOnNode(                                                                        // 15738\n        eventType,                                                                                                     // 15739\n        domComponentOrNode,                                                                                            // 15740\n        fakeNativeEvent                                                                                                // 15741\n      );                                                                                                               // 15742\n    }                                                                                                                  // 15743\n  };                                                                                                                   // 15744\n}                                                                                                                      // 15745\n                                                                                                                       // 15746\nvar eventType;                                                                                                         // 15747\nfor (eventType in topLevelTypes) {                                                                                     // 15748\n  // Event type is stored as 'topClick' - we transform that to 'click'                                                 // 15749\n  var convenienceName = eventType.indexOf('top') === 0 ?                                                               // 15750\n    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;                                               // 15751\n  /**                                                                                                                  // 15752\n   * @param {!Element || ReactDOMComponent} domComponentOrNode                                                         // 15753\n   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.                                       // 15754\n   */                                                                                                                  // 15755\n  ReactTestUtils.SimulateNative[convenienceName] =                                                                     // 15756\n    makeNativeSimulator(eventType);                                                                                    // 15757\n}                                                                                                                      // 15758\n                                                                                                                       // 15759\nmodule.exports = ReactTestUtils;                                                                                       // 15760\n                                                                                                                       // 15761\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPluginHub\":\"react/lib/EventPluginHub\",\"./EventPropagators\":\"react/lib/EventPropagators\",\"./Object.assign\":\"react/lib/Object.assign\",\"./React\":\"react/lib/React\",\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\",\"./ReactCompositeComponent\":\"react/lib/ReactCompositeComponent\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactEmptyComponent\":\"react/lib/ReactEmptyComponent\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./SyntheticEvent\":\"react/lib/SyntheticEvent\",\"./emptyObject\":\"react/lib/emptyObject\"}],\"react/lib/ReactTransitionChildMapping\":[function(require,module,exports){\n/**                                                                                                                    // 15763\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 15764\n * All rights reserved.                                                                                                // 15765\n *                                                                                                                     // 15766\n * This source code is licensed under the BSD-style license found in the                                               // 15767\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 15768\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 15769\n *                                                                                                                     // 15770\n * @typechecks static-only                                                                                             // 15771\n * @providesModule ReactTransitionChildMapping                                                                         // 15772\n */                                                                                                                    // 15773\n                                                                                                                       // 15774\n'use strict';                                                                                                          // 15775\n                                                                                                                       // 15776\nvar ReactChildren = require(\"./ReactChildren\");                                                                        // 15777\nvar ReactFragment = require(\"./ReactFragment\");                                                                        // 15778\n                                                                                                                       // 15779\nvar ReactTransitionChildMapping = {                                                                                    // 15780\n  /**                                                                                                                  // 15781\n   * Given `this.props.children`, return an object mapping key to child. Just                                          // 15782\n   * simple syntactic sugar around ReactChildren.map().                                                                // 15783\n   *                                                                                                                   // 15784\n   * @param {*} children `this.props.children`                                                                         // 15785\n   * @return {object} Mapping of key to child                                                                          // 15786\n   */                                                                                                                  // 15787\n  getChildMapping: function(children) {                                                                                // 15788\n    if (!children) {                                                                                                   // 15789\n      return children;                                                                                                 // 15790\n    }                                                                                                                  // 15791\n    return ReactFragment.extract(ReactChildren.map(children, function(child) {                                         // 15792\n      return child;                                                                                                    // 15793\n    }));                                                                                                               // 15794\n  },                                                                                                                   // 15795\n                                                                                                                       // 15796\n  /**                                                                                                                  // 15797\n   * When you're adding or removing children some may be added or removed in the                                       // 15798\n   * same render pass. We want to show *both* since we want to simultaneously                                          // 15799\n   * animate elements in and out. This function takes a previous set of keys                                           // 15800\n   * and a new set of keys and merges them with its best guess of the correct                                          // 15801\n   * ordering. In the future we may expose some of the utilities in                                                    // 15802\n   * ReactMultiChild to make this easy, but for now React itself does not                                              // 15803\n   * directly have this concept of the union of prevChildren and nextChildren                                          // 15804\n   * so we implement it here.                                                                                          // 15805\n   *                                                                                                                   // 15806\n   * @param {object} prev prev children as returned from                                                               // 15807\n   * `ReactTransitionChildMapping.getChildMapping()`.                                                                  // 15808\n   * @param {object} next next children as returned from                                                               // 15809\n   * `ReactTransitionChildMapping.getChildMapping()`.                                                                  // 15810\n   * @return {object} a key set that contains all keys in `prev` and all keys                                          // 15811\n   * in `next` in a reasonable order.                                                                                  // 15812\n   */                                                                                                                  // 15813\n  mergeChildMappings: function(prev, next) {                                                                           // 15814\n    prev = prev || {};                                                                                                 // 15815\n    next = next || {};                                                                                                 // 15816\n                                                                                                                       // 15817\n    function getValueForKey(key) {                                                                                     // 15818\n      if (next.hasOwnProperty(key)) {                                                                                  // 15819\n        return next[key];                                                                                              // 15820\n      } else {                                                                                                         // 15821\n        return prev[key];                                                                                              // 15822\n      }                                                                                                                // 15823\n    }                                                                                                                  // 15824\n                                                                                                                       // 15825\n    // For each key of `next`, the list of keys to insert before that key in                                           // 15826\n    // the combined list                                                                                               // 15827\n    var nextKeysPending = {};                                                                                          // 15828\n                                                                                                                       // 15829\n    var pendingKeys = [];                                                                                              // 15830\n    for (var prevKey in prev) {                                                                                        // 15831\n      if (next.hasOwnProperty(prevKey)) {                                                                              // 15832\n        if (pendingKeys.length) {                                                                                      // 15833\n          nextKeysPending[prevKey] = pendingKeys;                                                                      // 15834\n          pendingKeys = [];                                                                                            // 15835\n        }                                                                                                              // 15836\n      } else {                                                                                                         // 15837\n        pendingKeys.push(prevKey);                                                                                     // 15838\n      }                                                                                                                // 15839\n    }                                                                                                                  // 15840\n                                                                                                                       // 15841\n    var i;                                                                                                             // 15842\n    var childMapping = {};                                                                                             // 15843\n    for (var nextKey in next) {                                                                                        // 15844\n      if (nextKeysPending.hasOwnProperty(nextKey)) {                                                                   // 15845\n        for (i = 0; i < nextKeysPending[nextKey].length; i++) {                                                        // 15846\n          var pendingNextKey = nextKeysPending[nextKey][i];                                                            // 15847\n          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(                                                  // 15848\n            pendingNextKey                                                                                             // 15849\n          );                                                                                                           // 15850\n        }                                                                                                              // 15851\n      }                                                                                                                // 15852\n      childMapping[nextKey] = getValueForKey(nextKey);                                                                 // 15853\n    }                                                                                                                  // 15854\n                                                                                                                       // 15855\n    // Finally, add the keys which didn't appear before any key in `next`                                              // 15856\n    for (i = 0; i < pendingKeys.length; i++) {                                                                         // 15857\n      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);                                                   // 15858\n    }                                                                                                                  // 15859\n                                                                                                                       // 15860\n    return childMapping;                                                                                               // 15861\n  }                                                                                                                    // 15862\n};                                                                                                                     // 15863\n                                                                                                                       // 15864\nmodule.exports = ReactTransitionChildMapping;                                                                          // 15865\n                                                                                                                       // 15866\n},{\"./ReactChildren\":\"react/lib/ReactChildren\",\"./ReactFragment\":\"react/lib/ReactFragment\"}],\"react/lib/ReactTransitionEvents\":[function(require,module,exports){\n/**                                                                                                                    // 15868\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 15869\n * All rights reserved.                                                                                                // 15870\n *                                                                                                                     // 15871\n * This source code is licensed under the BSD-style license found in the                                               // 15872\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 15873\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 15874\n *                                                                                                                     // 15875\n * @providesModule ReactTransitionEvents                                                                               // 15876\n */                                                                                                                    // 15877\n                                                                                                                       // 15878\n'use strict';                                                                                                          // 15879\n                                                                                                                       // 15880\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 15881\n                                                                                                                       // 15882\n/**                                                                                                                    // 15883\n * EVENT_NAME_MAP is used to determine which event fired when a                                                        // 15884\n * transition/animation ends, based on the style property used to                                                      // 15885\n * define that event.                                                                                                  // 15886\n */                                                                                                                    // 15887\nvar EVENT_NAME_MAP = {                                                                                                 // 15888\n  transitionend: {                                                                                                     // 15889\n    'transition': 'transitionend',                                                                                     // 15890\n    'WebkitTransition': 'webkitTransitionEnd',                                                                         // 15891\n    'MozTransition': 'mozTransitionEnd',                                                                               // 15892\n    'OTransition': 'oTransitionEnd',                                                                                   // 15893\n    'msTransition': 'MSTransitionEnd'                                                                                  // 15894\n  },                                                                                                                   // 15895\n                                                                                                                       // 15896\n  animationend: {                                                                                                      // 15897\n    'animation': 'animationend',                                                                                       // 15898\n    'WebkitAnimation': 'webkitAnimationEnd',                                                                           // 15899\n    'MozAnimation': 'mozAnimationEnd',                                                                                 // 15900\n    'OAnimation': 'oAnimationEnd',                                                                                     // 15901\n    'msAnimation': 'MSAnimationEnd'                                                                                    // 15902\n  }                                                                                                                    // 15903\n};                                                                                                                     // 15904\n                                                                                                                       // 15905\nvar endEvents = [];                                                                                                    // 15906\n                                                                                                                       // 15907\nfunction detectEvents() {                                                                                              // 15908\n  var testEl = document.createElement('div');                                                                          // 15909\n  var style = testEl.style;                                                                                            // 15910\n                                                                                                                       // 15911\n  // On some platforms, in particular some releases of Android 4.x,                                                    // 15912\n  // the un-prefixed \"animation\" and \"transition\" properties are defined on the                                        // 15913\n  // style object but the events that fire will still be prefixed, so we need                                          // 15914\n  // to check if the un-prefixed events are useable, and if not remove them                                            // 15915\n  // from the map                                                                                                      // 15916\n  if (!('AnimationEvent' in window)) {                                                                                 // 15917\n    delete EVENT_NAME_MAP.animationend.animation;                                                                      // 15918\n  }                                                                                                                    // 15919\n                                                                                                                       // 15920\n  if (!('TransitionEvent' in window)) {                                                                                // 15921\n    delete EVENT_NAME_MAP.transitionend.transition;                                                                    // 15922\n  }                                                                                                                    // 15923\n                                                                                                                       // 15924\n  for (var baseEventName in EVENT_NAME_MAP) {                                                                          // 15925\n    var baseEvents = EVENT_NAME_MAP[baseEventName];                                                                    // 15926\n    for (var styleName in baseEvents) {                                                                                // 15927\n      if (styleName in style) {                                                                                        // 15928\n        endEvents.push(baseEvents[styleName]);                                                                         // 15929\n        break;                                                                                                         // 15930\n      }                                                                                                                // 15931\n    }                                                                                                                  // 15932\n  }                                                                                                                    // 15933\n}                                                                                                                      // 15934\n                                                                                                                       // 15935\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 15936\n  detectEvents();                                                                                                      // 15937\n}                                                                                                                      // 15938\n                                                                                                                       // 15939\n// We use the raw {add|remove}EventListener() call because EventListener                                               // 15940\n// does not know how to remove event listeners and we really should                                                    // 15941\n// clean up. Also, these events are not triggered in older browsers                                                    // 15942\n// so we should be A-OK here.                                                                                          // 15943\n                                                                                                                       // 15944\nfunction addEventListener(node, eventName, eventListener) {                                                            // 15945\n  node.addEventListener(eventName, eventListener, false);                                                              // 15946\n}                                                                                                                      // 15947\n                                                                                                                       // 15948\nfunction removeEventListener(node, eventName, eventListener) {                                                         // 15949\n  node.removeEventListener(eventName, eventListener, false);                                                           // 15950\n}                                                                                                                      // 15951\n                                                                                                                       // 15952\nvar ReactTransitionEvents = {                                                                                          // 15953\n  addEndEventListener: function(node, eventListener) {                                                                 // 15954\n    if (endEvents.length === 0) {                                                                                      // 15955\n      // If CSS transitions are not supported, trigger an \"end animation\"                                              // 15956\n      // event immediately.                                                                                            // 15957\n      window.setTimeout(eventListener, 0);                                                                             // 15958\n      return;                                                                                                          // 15959\n    }                                                                                                                  // 15960\n    endEvents.forEach(function(endEvent) {                                                                             // 15961\n      addEventListener(node, endEvent, eventListener);                                                                 // 15962\n    });                                                                                                                // 15963\n  },                                                                                                                   // 15964\n                                                                                                                       // 15965\n  removeEndEventListener: function(node, eventListener) {                                                              // 15966\n    if (endEvents.length === 0) {                                                                                      // 15967\n      return;                                                                                                          // 15968\n    }                                                                                                                  // 15969\n    endEvents.forEach(function(endEvent) {                                                                             // 15970\n      removeEventListener(node, endEvent, eventListener);                                                              // 15971\n    });                                                                                                                // 15972\n  }                                                                                                                    // 15973\n};                                                                                                                     // 15974\n                                                                                                                       // 15975\nmodule.exports = ReactTransitionEvents;                                                                                // 15976\n                                                                                                                       // 15977\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\"}],\"react/lib/ReactTransitionGroup\":[function(require,module,exports){\n/**                                                                                                                    // 15979\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 15980\n * All rights reserved.                                                                                                // 15981\n *                                                                                                                     // 15982\n * This source code is licensed under the BSD-style license found in the                                               // 15983\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 15984\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 15985\n *                                                                                                                     // 15986\n * @providesModule ReactTransitionGroup                                                                                // 15987\n */                                                                                                                    // 15988\n                                                                                                                       // 15989\n'use strict';                                                                                                          // 15990\n                                                                                                                       // 15991\nvar React = require(\"./React\");                                                                                        // 15992\nvar ReactTransitionChildMapping = require(\"./ReactTransitionChildMapping\");                                            // 15993\n                                                                                                                       // 15994\nvar assign = require(\"./Object.assign\");                                                                               // 15995\nvar cloneWithProps = require(\"./cloneWithProps\");                                                                      // 15996\nvar emptyFunction = require(\"./emptyFunction\");                                                                        // 15997\n                                                                                                                       // 15998\nvar ReactTransitionGroup = React.createClass({                                                                         // 15999\n  displayName: 'ReactTransitionGroup',                                                                                 // 16000\n                                                                                                                       // 16001\n  propTypes: {                                                                                                         // 16002\n    component: React.PropTypes.any,                                                                                    // 16003\n    childFactory: React.PropTypes.func                                                                                 // 16004\n  },                                                                                                                   // 16005\n                                                                                                                       // 16006\n  getDefaultProps: function() {                                                                                        // 16007\n    return {                                                                                                           // 16008\n      component: 'span',                                                                                               // 16009\n      childFactory: emptyFunction.thatReturnsArgument                                                                  // 16010\n    };                                                                                                                 // 16011\n  },                                                                                                                   // 16012\n                                                                                                                       // 16013\n  getInitialState: function() {                                                                                        // 16014\n    return {                                                                                                           // 16015\n      children: ReactTransitionChildMapping.getChildMapping(this.props.children)                                       // 16016\n    };                                                                                                                 // 16017\n  },                                                                                                                   // 16018\n                                                                                                                       // 16019\n  componentWillMount: function() {                                                                                     // 16020\n    this.currentlyTransitioningKeys = {};                                                                              // 16021\n    this.keysToEnter = [];                                                                                             // 16022\n    this.keysToLeave = [];                                                                                             // 16023\n  },                                                                                                                   // 16024\n                                                                                                                       // 16025\n  componentDidMount: function() {                                                                                      // 16026\n    var initialChildMapping = this.state.children;                                                                     // 16027\n    for (var key in initialChildMapping) {                                                                             // 16028\n      if (initialChildMapping[key]) {                                                                                  // 16029\n        this.performAppear(key);                                                                                       // 16030\n      }                                                                                                                // 16031\n    }                                                                                                                  // 16032\n  },                                                                                                                   // 16033\n                                                                                                                       // 16034\n  componentWillReceiveProps: function(nextProps) {                                                                     // 16035\n    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(                                                // 16036\n      nextProps.children                                                                                               // 16037\n    );                                                                                                                 // 16038\n    var prevChildMapping = this.state.children;                                                                        // 16039\n                                                                                                                       // 16040\n    this.setState({                                                                                                    // 16041\n      children: ReactTransitionChildMapping.mergeChildMappings(                                                        // 16042\n        prevChildMapping,                                                                                              // 16043\n        nextChildMapping                                                                                               // 16044\n      )                                                                                                                // 16045\n    });                                                                                                                // 16046\n                                                                                                                       // 16047\n    var key;                                                                                                           // 16048\n                                                                                                                       // 16049\n    for (key in nextChildMapping) {                                                                                    // 16050\n      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);                                          // 16051\n      if (nextChildMapping[key] && !hasPrev &&                                                                         // 16052\n          !this.currentlyTransitioningKeys[key]) {                                                                     // 16053\n        this.keysToEnter.push(key);                                                                                    // 16054\n      }                                                                                                                // 16055\n    }                                                                                                                  // 16056\n                                                                                                                       // 16057\n    for (key in prevChildMapping) {                                                                                    // 16058\n      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);                                          // 16059\n      if (prevChildMapping[key] && !hasNext &&                                                                         // 16060\n          !this.currentlyTransitioningKeys[key]) {                                                                     // 16061\n        this.keysToLeave.push(key);                                                                                    // 16062\n      }                                                                                                                // 16063\n    }                                                                                                                  // 16064\n                                                                                                                       // 16065\n    // If we want to someday check for reordering, we could do it here.                                                // 16066\n  },                                                                                                                   // 16067\n                                                                                                                       // 16068\n  componentDidUpdate: function() {                                                                                     // 16069\n    var keysToEnter = this.keysToEnter;                                                                                // 16070\n    this.keysToEnter = [];                                                                                             // 16071\n    keysToEnter.forEach(this.performEnter);                                                                            // 16072\n                                                                                                                       // 16073\n    var keysToLeave = this.keysToLeave;                                                                                // 16074\n    this.keysToLeave = [];                                                                                             // 16075\n    keysToLeave.forEach(this.performLeave);                                                                            // 16076\n  },                                                                                                                   // 16077\n                                                                                                                       // 16078\n  performAppear: function(key) {                                                                                       // 16079\n    this.currentlyTransitioningKeys[key] = true;                                                                       // 16080\n                                                                                                                       // 16081\n    var component = this.refs[key];                                                                                    // 16082\n                                                                                                                       // 16083\n    if (component.componentWillAppear) {                                                                               // 16084\n      component.componentWillAppear(                                                                                   // 16085\n        this._handleDoneAppearing.bind(this, key)                                                                      // 16086\n      );                                                                                                               // 16087\n    } else {                                                                                                           // 16088\n      this._handleDoneAppearing(key);                                                                                  // 16089\n    }                                                                                                                  // 16090\n  },                                                                                                                   // 16091\n                                                                                                                       // 16092\n  _handleDoneAppearing: function(key) {                                                                                // 16093\n    var component = this.refs[key];                                                                                    // 16094\n    if (component.componentDidAppear) {                                                                                // 16095\n      component.componentDidAppear();                                                                                  // 16096\n    }                                                                                                                  // 16097\n                                                                                                                       // 16098\n    delete this.currentlyTransitioningKeys[key];                                                                       // 16099\n                                                                                                                       // 16100\n    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(                                             // 16101\n      this.props.children                                                                                              // 16102\n    );                                                                                                                 // 16103\n                                                                                                                       // 16104\n    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {                                            // 16105\n      // This was removed before it had fully appeared. Remove it.                                                     // 16106\n      this.performLeave(key);                                                                                          // 16107\n    }                                                                                                                  // 16108\n  },                                                                                                                   // 16109\n                                                                                                                       // 16110\n  performEnter: function(key) {                                                                                        // 16111\n    this.currentlyTransitioningKeys[key] = true;                                                                       // 16112\n                                                                                                                       // 16113\n    var component = this.refs[key];                                                                                    // 16114\n                                                                                                                       // 16115\n    if (component.componentWillEnter) {                                                                                // 16116\n      component.componentWillEnter(                                                                                    // 16117\n        this._handleDoneEntering.bind(this, key)                                                                       // 16118\n      );                                                                                                               // 16119\n    } else {                                                                                                           // 16120\n      this._handleDoneEntering(key);                                                                                   // 16121\n    }                                                                                                                  // 16122\n  },                                                                                                                   // 16123\n                                                                                                                       // 16124\n  _handleDoneEntering: function(key) {                                                                                 // 16125\n    var component = this.refs[key];                                                                                    // 16126\n    if (component.componentDidEnter) {                                                                                 // 16127\n      component.componentDidEnter();                                                                                   // 16128\n    }                                                                                                                  // 16129\n                                                                                                                       // 16130\n    delete this.currentlyTransitioningKeys[key];                                                                       // 16131\n                                                                                                                       // 16132\n    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(                                             // 16133\n      this.props.children                                                                                              // 16134\n    );                                                                                                                 // 16135\n                                                                                                                       // 16136\n    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {                                            // 16137\n      // This was removed before it had fully entered. Remove it.                                                      // 16138\n      this.performLeave(key);                                                                                          // 16139\n    }                                                                                                                  // 16140\n  },                                                                                                                   // 16141\n                                                                                                                       // 16142\n  performLeave: function(key) {                                                                                        // 16143\n    this.currentlyTransitioningKeys[key] = true;                                                                       // 16144\n                                                                                                                       // 16145\n    var component = this.refs[key];                                                                                    // 16146\n    if (component.componentWillLeave) {                                                                                // 16147\n      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));                                           // 16148\n    } else {                                                                                                           // 16149\n      // Note that this is somewhat dangerous b/c it calls setState()                                                  // 16150\n      // again, effectively mutating the component before all the work                                                 // 16151\n      // is done.                                                                                                      // 16152\n      this._handleDoneLeaving(key);                                                                                    // 16153\n    }                                                                                                                  // 16154\n  },                                                                                                                   // 16155\n                                                                                                                       // 16156\n  _handleDoneLeaving: function(key) {                                                                                  // 16157\n    var component = this.refs[key];                                                                                    // 16158\n                                                                                                                       // 16159\n    if (component.componentDidLeave) {                                                                                 // 16160\n      component.componentDidLeave();                                                                                   // 16161\n    }                                                                                                                  // 16162\n                                                                                                                       // 16163\n    delete this.currentlyTransitioningKeys[key];                                                                       // 16164\n                                                                                                                       // 16165\n    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(                                             // 16166\n      this.props.children                                                                                              // 16167\n    );                                                                                                                 // 16168\n                                                                                                                       // 16169\n    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {                                              // 16170\n      // This entered again before it fully left. Add it again.                                                        // 16171\n      this.performEnter(key);                                                                                          // 16172\n    } else {                                                                                                           // 16173\n      var newChildren = assign({}, this.state.children);                                                               // 16174\n      delete newChildren[key];                                                                                         // 16175\n      this.setState({children: newChildren});                                                                          // 16176\n    }                                                                                                                  // 16177\n  },                                                                                                                   // 16178\n                                                                                                                       // 16179\n  render: function() {                                                                                                 // 16180\n    // TODO: we could get rid of the need for the wrapper node                                                         // 16181\n    // by cloning a single child                                                                                       // 16182\n    var childrenToRender = [];                                                                                         // 16183\n    for (var key in this.state.children) {                                                                             // 16184\n      var child = this.state.children[key];                                                                            // 16185\n      if (child) {                                                                                                     // 16186\n        // You may need to apply reactive updates to a child as it is leaving.                                         // 16187\n        // The normal React way to do it won't work since the child will have                                          // 16188\n        // already been removed. In case you need this behavior you can provide                                        // 16189\n        // a childFactory function to wrap every child, even the ones that are                                         // 16190\n        // leaving.                                                                                                    // 16191\n        childrenToRender.push(cloneWithProps(                                                                          // 16192\n          this.props.childFactory(child),                                                                              // 16193\n          {ref: key, key: key}                                                                                         // 16194\n        ));                                                                                                            // 16195\n      }                                                                                                                // 16196\n    }                                                                                                                  // 16197\n    return React.createElement(                                                                                        // 16198\n      this.props.component,                                                                                            // 16199\n      this.props,                                                                                                      // 16200\n      childrenToRender                                                                                                 // 16201\n    );                                                                                                                 // 16202\n  }                                                                                                                    // 16203\n});                                                                                                                    // 16204\n                                                                                                                       // 16205\nmodule.exports = ReactTransitionGroup;                                                                                 // 16206\n                                                                                                                       // 16207\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./React\":\"react/lib/React\",\"./ReactTransitionChildMapping\":\"react/lib/ReactTransitionChildMapping\",\"./cloneWithProps\":\"react/lib/cloneWithProps\",\"./emptyFunction\":\"react/lib/emptyFunction\"}],\"react/lib/ReactUpdateQueue\":[function(require,module,exports){\n(function (process){                                                                                                   // 16209\n/**                                                                                                                    // 16210\n * Copyright 2015, Facebook, Inc.                                                                                      // 16211\n * All rights reserved.                                                                                                // 16212\n *                                                                                                                     // 16213\n * This source code is licensed under the BSD-style license found in the                                               // 16214\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 16215\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 16216\n *                                                                                                                     // 16217\n * @providesModule ReactUpdateQueue                                                                                    // 16218\n */                                                                                                                    // 16219\n                                                                                                                       // 16220\n'use strict';                                                                                                          // 16221\n                                                                                                                       // 16222\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");                                                                      // 16223\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");                                                                // 16224\nvar ReactElement = require(\"./ReactElement\");                                                                          // 16225\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");                                                                  // 16226\nvar ReactUpdates = require(\"./ReactUpdates\");                                                                          // 16227\n                                                                                                                       // 16228\nvar assign = require(\"./Object.assign\");                                                                               // 16229\nvar invariant = require(\"./invariant\");                                                                                // 16230\nvar warning = require(\"./warning\");                                                                                    // 16231\n                                                                                                                       // 16232\nfunction enqueueUpdate(internalInstance) {                                                                             // 16233\n  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {                                                 // 16234\n    // If we're in a componentWillMount handler, don't enqueue a rerender                                              // 16235\n    // because ReactUpdates assumes we're in a browser context (which is                                               // 16236\n    // wrong for server rendering) and we're about to do a render anyway.                                              // 16237\n    // See bug in #1740.                                                                                               // 16238\n    ReactUpdates.enqueueUpdate(internalInstance);                                                                      // 16239\n  }                                                                                                                    // 16240\n}                                                                                                                      // 16241\n                                                                                                                       // 16242\nfunction getInternalInstanceReadyForUpdate(publicInstance, callerName) {                                               // 16243\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 16244\n    ReactCurrentOwner.current == null,                                                                                 // 16245\n    '%s(...): Cannot update during an existing state transition ' +                                                    // 16246\n    '(such as within `render`). Render methods should be a pure function ' +                                           // 16247\n    'of props and state.',                                                                                             // 16248\n    callerName                                                                                                         // 16249\n  ) : invariant(ReactCurrentOwner.current == null));                                                                   // 16250\n                                                                                                                       // 16251\n  var internalInstance = ReactInstanceMap.get(publicInstance);                                                         // 16252\n  if (!internalInstance) {                                                                                             // 16253\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 16254\n      // Only warn when we have a callerName. Otherwise we should be silent.                                           // 16255\n      // We're probably calling from enqueueCallback. We don't want to warn                                            // 16256\n      // there because we already warned for the corresponding lifecycle method.                                       // 16257\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 16258\n        !callerName,                                                                                                   // 16259\n        '%s(...): Can only update a mounted or mounting component. ' +                                                 // 16260\n        'This usually means you called %s() on an unmounted ' +                                                        // 16261\n        'component. This is a no-op.',                                                                                 // 16262\n        callerName,                                                                                                    // 16263\n        callerName                                                                                                     // 16264\n      ) : null);                                                                                                       // 16265\n    }                                                                                                                  // 16266\n    return null;                                                                                                       // 16267\n  }                                                                                                                    // 16268\n                                                                                                                       // 16269\n  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {                                               // 16270\n    return null;                                                                                                       // 16271\n  }                                                                                                                    // 16272\n                                                                                                                       // 16273\n  return internalInstance;                                                                                             // 16274\n}                                                                                                                      // 16275\n                                                                                                                       // 16276\n/**                                                                                                                    // 16277\n * ReactUpdateQueue allows for state updates to be scheduled into a later                                              // 16278\n * reconciliation step.                                                                                                // 16279\n */                                                                                                                    // 16280\nvar ReactUpdateQueue = {                                                                                               // 16281\n                                                                                                                       // 16282\n  /**                                                                                                                  // 16283\n   * Enqueue a callback that will be executed after all the pending updates                                            // 16284\n   * have processed.                                                                                                   // 16285\n   *                                                                                                                   // 16286\n   * @param {ReactClass} publicInstance The instance to use as `this` context.                                         // 16287\n   * @param {?function} callback Called after state is updated.                                                        // 16288\n   * @internal                                                                                                         // 16289\n   */                                                                                                                  // 16290\n  enqueueCallback: function(publicInstance, callback) {                                                                // 16291\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 16292\n      typeof callback === 'function',                                                                                  // 16293\n      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +                                                // 16294\n      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +                                           // 16295\n      'isn\\'t callable.'                                                                                               // 16296\n    ) : invariant(typeof callback === 'function'));                                                                    // 16297\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);                                          // 16298\n                                                                                                                       // 16299\n    // Previously we would throw an error if we didn't have an internal                                                // 16300\n    // instance. Since we want to make it a no-op instead, we mirror the same                                          // 16301\n    // behavior we have in other enqueue* methods.                                                                     // 16302\n    // We also need to ignore callbacks in componentWillMount. See                                                     // 16303\n    // enqueueUpdates.                                                                                                 // 16304\n    if (!internalInstance ||                                                                                           // 16305\n        internalInstance === ReactLifeCycle.currentlyMountingInstance) {                                               // 16306\n      return null;                                                                                                     // 16307\n    }                                                                                                                  // 16308\n                                                                                                                       // 16309\n    if (internalInstance._pendingCallbacks) {                                                                          // 16310\n      internalInstance._pendingCallbacks.push(callback);                                                               // 16311\n    } else {                                                                                                           // 16312\n      internalInstance._pendingCallbacks = [callback];                                                                 // 16313\n    }                                                                                                                  // 16314\n    // TODO: The callback here is ignored when setState is called from                                                 // 16315\n    // componentWillMount. Either fix it or disallow doing so completely in                                            // 16316\n    // favor of getInitialState. Alternatively, we can disallow                                                        // 16317\n    // componentWillMount during server-side rendering.                                                                // 16318\n    enqueueUpdate(internalInstance);                                                                                   // 16319\n  },                                                                                                                   // 16320\n                                                                                                                       // 16321\n  enqueueCallbackInternal: function(internalInstance, callback) {                                                      // 16322\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 16323\n      typeof callback === 'function',                                                                                  // 16324\n      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +                                                // 16325\n      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +                                           // 16326\n      'isn\\'t callable.'                                                                                               // 16327\n    ) : invariant(typeof callback === 'function'));                                                                    // 16328\n    if (internalInstance._pendingCallbacks) {                                                                          // 16329\n      internalInstance._pendingCallbacks.push(callback);                                                               // 16330\n    } else {                                                                                                           // 16331\n      internalInstance._pendingCallbacks = [callback];                                                                 // 16332\n    }                                                                                                                  // 16333\n    enqueueUpdate(internalInstance);                                                                                   // 16334\n  },                                                                                                                   // 16335\n                                                                                                                       // 16336\n  /**                                                                                                                  // 16337\n   * Forces an update. This should only be invoked when it is known with                                               // 16338\n   * certainty that we are **not** in a DOM transaction.                                                               // 16339\n   *                                                                                                                   // 16340\n   * You may want to call this when you know that some deeper aspect of the                                            // 16341\n   * component's state has changed but `setState` was not called.                                                      // 16342\n   *                                                                                                                   // 16343\n   * This will not invoke `shouldUpdateComponent`, but it will invoke                                                  // 16344\n   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 16345\n   *                                                                                                                   // 16346\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 16347\n   * @internal                                                                                                         // 16348\n   */                                                                                                                  // 16349\n  enqueueForceUpdate: function(publicInstance) {                                                                       // 16350\n    var internalInstance = getInternalInstanceReadyForUpdate(                                                          // 16351\n      publicInstance,                                                                                                  // 16352\n      'forceUpdate'                                                                                                    // 16353\n    );                                                                                                                 // 16354\n                                                                                                                       // 16355\n    if (!internalInstance) {                                                                                           // 16356\n      return;                                                                                                          // 16357\n    }                                                                                                                  // 16358\n                                                                                                                       // 16359\n    internalInstance._pendingForceUpdate = true;                                                                       // 16360\n                                                                                                                       // 16361\n    enqueueUpdate(internalInstance);                                                                                   // 16362\n  },                                                                                                                   // 16363\n                                                                                                                       // 16364\n  /**                                                                                                                  // 16365\n   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 16366\n   * You should treat `this.state` as immutable.                                                                       // 16367\n   *                                                                                                                   // 16368\n   * There is no guarantee that `this.state` will be immediately updated, so                                           // 16369\n   * accessing `this.state` after calling this method may return the old value.                                        // 16370\n   *                                                                                                                   // 16371\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 16372\n   * @param {object} completeState Next state.                                                                         // 16373\n   * @internal                                                                                                         // 16374\n   */                                                                                                                  // 16375\n  enqueueReplaceState: function(publicInstance, completeState) {                                                       // 16376\n    var internalInstance = getInternalInstanceReadyForUpdate(                                                          // 16377\n      publicInstance,                                                                                                  // 16378\n      'replaceState'                                                                                                   // 16379\n    );                                                                                                                 // 16380\n                                                                                                                       // 16381\n    if (!internalInstance) {                                                                                           // 16382\n      return;                                                                                                          // 16383\n    }                                                                                                                  // 16384\n                                                                                                                       // 16385\n    internalInstance._pendingStateQueue = [completeState];                                                             // 16386\n    internalInstance._pendingReplaceState = true;                                                                      // 16387\n                                                                                                                       // 16388\n    enqueueUpdate(internalInstance);                                                                                   // 16389\n  },                                                                                                                   // 16390\n                                                                                                                       // 16391\n  /**                                                                                                                  // 16392\n   * Sets a subset of the state. This only exists because _pendingState is                                             // 16393\n   * internal. This provides a merging strategy that is not available to deep                                          // 16394\n   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 16395\n   * during the merge.                                                                                                 // 16396\n   *                                                                                                                   // 16397\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 16398\n   * @param {object} partialState Next partial state to be merged with state.                                          // 16399\n   * @internal                                                                                                         // 16400\n   */                                                                                                                  // 16401\n  enqueueSetState: function(publicInstance, partialState) {                                                            // 16402\n    var internalInstance = getInternalInstanceReadyForUpdate(                                                          // 16403\n      publicInstance,                                                                                                  // 16404\n      'setState'                                                                                                       // 16405\n    );                                                                                                                 // 16406\n                                                                                                                       // 16407\n    if (!internalInstance) {                                                                                           // 16408\n      return;                                                                                                          // 16409\n    }                                                                                                                  // 16410\n                                                                                                                       // 16411\n    var queue =                                                                                                        // 16412\n      internalInstance._pendingStateQueue ||                                                                           // 16413\n      (internalInstance._pendingStateQueue = []);                                                                      // 16414\n    queue.push(partialState);                                                                                          // 16415\n                                                                                                                       // 16416\n    enqueueUpdate(internalInstance);                                                                                   // 16417\n  },                                                                                                                   // 16418\n                                                                                                                       // 16419\n  /**                                                                                                                  // 16420\n   * Sets a subset of the props.                                                                                       // 16421\n   *                                                                                                                   // 16422\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 16423\n   * @param {object} partialProps Subset of the next props.                                                            // 16424\n   * @internal                                                                                                         // 16425\n   */                                                                                                                  // 16426\n  enqueueSetProps: function(publicInstance, partialProps) {                                                            // 16427\n    var internalInstance = getInternalInstanceReadyForUpdate(                                                          // 16428\n      publicInstance,                                                                                                  // 16429\n      'setProps'                                                                                                       // 16430\n    );                                                                                                                 // 16431\n                                                                                                                       // 16432\n    if (!internalInstance) {                                                                                           // 16433\n      return;                                                                                                          // 16434\n    }                                                                                                                  // 16435\n                                                                                                                       // 16436\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 16437\n      internalInstance._isTopLevel,                                                                                    // 16438\n      'setProps(...): You called `setProps` on a ' +                                                                   // 16439\n      'component with a parent. This is an anti-pattern since props will ' +                                           // 16440\n      'get reactively updated when rendered. Instead, change the owner\\'s ' +                                          // 16441\n      '`render` method to pass the correct value as props to the component ' +                                         // 16442\n      'where it is created.'                                                                                           // 16443\n    ) : invariant(internalInstance._isTopLevel));                                                                      // 16444\n                                                                                                                       // 16445\n    // Merge with the pending element if it exists, otherwise with existing                                            // 16446\n    // element props.                                                                                                  // 16447\n    var element = internalInstance._pendingElement ||                                                                  // 16448\n                  internalInstance._currentElement;                                                                    // 16449\n    var props = assign({}, element.props, partialProps);                                                               // 16450\n    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(                                              // 16451\n      element,                                                                                                         // 16452\n      props                                                                                                            // 16453\n    );                                                                                                                 // 16454\n                                                                                                                       // 16455\n    enqueueUpdate(internalInstance);                                                                                   // 16456\n  },                                                                                                                   // 16457\n                                                                                                                       // 16458\n  /**                                                                                                                  // 16459\n   * Replaces all of the props.                                                                                        // 16460\n   *                                                                                                                   // 16461\n   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 16462\n   * @param {object} props New props.                                                                                  // 16463\n   * @internal                                                                                                         // 16464\n   */                                                                                                                  // 16465\n  enqueueReplaceProps: function(publicInstance, props) {                                                               // 16466\n    var internalInstance = getInternalInstanceReadyForUpdate(                                                          // 16467\n      publicInstance,                                                                                                  // 16468\n      'replaceProps'                                                                                                   // 16469\n    );                                                                                                                 // 16470\n                                                                                                                       // 16471\n    if (!internalInstance) {                                                                                           // 16472\n      return;                                                                                                          // 16473\n    }                                                                                                                  // 16474\n                                                                                                                       // 16475\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 16476\n      internalInstance._isTopLevel,                                                                                    // 16477\n      'replaceProps(...): You called `replaceProps` on a ' +                                                           // 16478\n      'component with a parent. This is an anti-pattern since props will ' +                                           // 16479\n      'get reactively updated when rendered. Instead, change the owner\\'s ' +                                          // 16480\n      '`render` method to pass the correct value as props to the component ' +                                         // 16481\n      'where it is created.'                                                                                           // 16482\n    ) : invariant(internalInstance._isTopLevel));                                                                      // 16483\n                                                                                                                       // 16484\n    // Merge with the pending element if it exists, otherwise with existing                                            // 16485\n    // element props.                                                                                                  // 16486\n    var element = internalInstance._pendingElement ||                                                                  // 16487\n                  internalInstance._currentElement;                                                                    // 16488\n    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(                                              // 16489\n      element,                                                                                                         // 16490\n      props                                                                                                            // 16491\n    );                                                                                                                 // 16492\n                                                                                                                       // 16493\n    enqueueUpdate(internalInstance);                                                                                   // 16494\n  },                                                                                                                   // 16495\n                                                                                                                       // 16496\n  enqueueElementInternal: function(internalInstance, newElement) {                                                     // 16497\n    internalInstance._pendingElement = newElement;                                                                     // 16498\n    enqueueUpdate(internalInstance);                                                                                   // 16499\n  }                                                                                                                    // 16500\n                                                                                                                       // 16501\n};                                                                                                                     // 16502\n                                                                                                                       // 16503\nmodule.exports = ReactUpdateQueue;                                                                                     // 16504\n                                                                                                                       // 16505\n}).call(this,require('_process'))                                                                                      // 16506\n                                                                                                                       // 16507\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./ReactLifeCycle\":\"react/lib/ReactLifeCycle\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactUpdates\":[function(require,module,exports){\n(function (process){                                                                                                   // 16509\n/**                                                                                                                    // 16510\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 16511\n * All rights reserved.                                                                                                // 16512\n *                                                                                                                     // 16513\n * This source code is licensed under the BSD-style license found in the                                               // 16514\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 16515\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 16516\n *                                                                                                                     // 16517\n * @providesModule ReactUpdates                                                                                        // 16518\n */                                                                                                                    // 16519\n                                                                                                                       // 16520\n'use strict';                                                                                                          // 16521\n                                                                                                                       // 16522\nvar CallbackQueue = require(\"./CallbackQueue\");                                                                        // 16523\nvar PooledClass = require(\"./PooledClass\");                                                                            // 16524\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");                                                                // 16525\nvar ReactPerf = require(\"./ReactPerf\");                                                                                // 16526\nvar ReactReconciler = require(\"./ReactReconciler\");                                                                    // 16527\nvar Transaction = require(\"./Transaction\");                                                                            // 16528\n                                                                                                                       // 16529\nvar assign = require(\"./Object.assign\");                                                                               // 16530\nvar invariant = require(\"./invariant\");                                                                                // 16531\nvar warning = require(\"./warning\");                                                                                    // 16532\n                                                                                                                       // 16533\nvar dirtyComponents = [];                                                                                              // 16534\nvar asapCallbackQueue = CallbackQueue.getPooled();                                                                     // 16535\nvar asapEnqueued = false;                                                                                              // 16536\n                                                                                                                       // 16537\nvar batchingStrategy = null;                                                                                           // 16538\n                                                                                                                       // 16539\nfunction ensureInjected() {                                                                                            // 16540\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 16541\n    ReactUpdates.ReactReconcileTransaction && batchingStrategy,                                                        // 16542\n    'ReactUpdates: must inject a reconcile transaction class and batching ' +                                          // 16543\n    'strategy'                                                                                                         // 16544\n  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));                                          // 16545\n}                                                                                                                      // 16546\n                                                                                                                       // 16547\nvar NESTED_UPDATES = {                                                                                                 // 16548\n  initialize: function() {                                                                                             // 16549\n    this.dirtyComponentsLength = dirtyComponents.length;                                                               // 16550\n  },                                                                                                                   // 16551\n  close: function() {                                                                                                  // 16552\n    if (this.dirtyComponentsLength !== dirtyComponents.length) {                                                       // 16553\n      // Additional updates were enqueued by componentDidUpdate handlers or                                            // 16554\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run                                        // 16555\n      // these new updates so that if A's componentDidUpdate calls setState on                                         // 16556\n      // B, B will update before the callback A's updater provided when calling                                        // 16557\n      // setState.                                                                                                     // 16558\n      dirtyComponents.splice(0, this.dirtyComponentsLength);                                                           // 16559\n      flushBatchedUpdates();                                                                                           // 16560\n    } else {                                                                                                           // 16561\n      dirtyComponents.length = 0;                                                                                      // 16562\n    }                                                                                                                  // 16563\n  }                                                                                                                    // 16564\n};                                                                                                                     // 16565\n                                                                                                                       // 16566\nvar UPDATE_QUEUEING = {                                                                                                // 16567\n  initialize: function() {                                                                                             // 16568\n    this.callbackQueue.reset();                                                                                        // 16569\n  },                                                                                                                   // 16570\n  close: function() {                                                                                                  // 16571\n    this.callbackQueue.notifyAll();                                                                                    // 16572\n  }                                                                                                                    // 16573\n};                                                                                                                     // 16574\n                                                                                                                       // 16575\nvar TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];                                                          // 16576\n                                                                                                                       // 16577\nfunction ReactUpdatesFlushTransaction() {                                                                              // 16578\n  this.reinitializeTransaction();                                                                                      // 16579\n  this.dirtyComponentsLength = null;                                                                                   // 16580\n  this.callbackQueue = CallbackQueue.getPooled();                                                                      // 16581\n  this.reconcileTransaction =                                                                                          // 16582\n    ReactUpdates.ReactReconcileTransaction.getPooled();                                                                // 16583\n}                                                                                                                      // 16584\n                                                                                                                       // 16585\nassign(                                                                                                                // 16586\n  ReactUpdatesFlushTransaction.prototype,                                                                              // 16587\n  Transaction.Mixin, {                                                                                                 // 16588\n  getTransactionWrappers: function() {                                                                                 // 16589\n    return TRANSACTION_WRAPPERS;                                                                                       // 16590\n  },                                                                                                                   // 16591\n                                                                                                                       // 16592\n  destructor: function() {                                                                                             // 16593\n    this.dirtyComponentsLength = null;                                                                                 // 16594\n    CallbackQueue.release(this.callbackQueue);                                                                         // 16595\n    this.callbackQueue = null;                                                                                         // 16596\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);                                         // 16597\n    this.reconcileTransaction = null;                                                                                  // 16598\n  },                                                                                                                   // 16599\n                                                                                                                       // 16600\n  perform: function(method, scope, a) {                                                                                // 16601\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`                                         // 16602\n    // with this transaction's wrappers around it.                                                                     // 16603\n    return Transaction.Mixin.perform.call(                                                                             // 16604\n      this,                                                                                                            // 16605\n      this.reconcileTransaction.perform,                                                                               // 16606\n      this.reconcileTransaction,                                                                                       // 16607\n      method,                                                                                                          // 16608\n      scope,                                                                                                           // 16609\n      a                                                                                                                // 16610\n    );                                                                                                                 // 16611\n  }                                                                                                                    // 16612\n});                                                                                                                    // 16613\n                                                                                                                       // 16614\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);                                                                // 16615\n                                                                                                                       // 16616\nfunction batchedUpdates(callback, a, b, c, d) {                                                                        // 16617\n  ensureInjected();                                                                                                    // 16618\n  batchingStrategy.batchedUpdates(callback, a, b, c, d);                                                               // 16619\n}                                                                                                                      // 16620\n                                                                                                                       // 16621\n/**                                                                                                                    // 16622\n * Array comparator for ReactComponents by mount ordering.                                                             // 16623\n *                                                                                                                     // 16624\n * @param {ReactComponent} c1 first component you're comparing                                                         // 16625\n * @param {ReactComponent} c2 second component you're comparing                                                        // 16626\n * @return {number} Return value usable by Array.prototype.sort().                                                     // 16627\n */                                                                                                                    // 16628\nfunction mountOrderComparator(c1, c2) {                                                                                // 16629\n  return c1._mountOrder - c2._mountOrder;                                                                              // 16630\n}                                                                                                                      // 16631\n                                                                                                                       // 16632\nfunction runBatchedUpdates(transaction) {                                                                              // 16633\n  var len = transaction.dirtyComponentsLength;                                                                         // 16634\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 16635\n    len === dirtyComponents.length,                                                                                    // 16636\n    'Expected flush transaction\\'s stored dirty-components length (%s) to ' +                                          // 16637\n    'match dirty-components array length (%s).',                                                                       // 16638\n    len,                                                                                                               // 16639\n    dirtyComponents.length                                                                                             // 16640\n  ) : invariant(len === dirtyComponents.length));                                                                      // 16641\n                                                                                                                       // 16642\n  // Since reconciling a component higher in the owner hierarchy usually (not                                          // 16643\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile                                         // 16644\n  // them before their children by sorting the array.                                                                  // 16645\n  dirtyComponents.sort(mountOrderComparator);                                                                          // 16646\n                                                                                                                       // 16647\n  for (var i = 0; i < len; i++) {                                                                                      // 16648\n    // If a component is unmounted before pending changes apply, it will still                                         // 16649\n    // be here, but we assume that it has cleared its _pendingCallbacks and                                            // 16650\n    // that performUpdateIfNecessary is a noop.                                                                        // 16651\n    var component = dirtyComponents[i];                                                                                // 16652\n                                                                                                                       // 16653\n    // If performUpdateIfNecessary happens to enqueue any new updates, we                                              // 16654\n    // shouldn't execute the callbacks until the next render happens, so                                               // 16655\n    // stash the callbacks first                                                                                       // 16656\n    var callbacks = component._pendingCallbacks;                                                                       // 16657\n    component._pendingCallbacks = null;                                                                                // 16658\n                                                                                                                       // 16659\n    ReactReconciler.performUpdateIfNecessary(                                                                          // 16660\n      component,                                                                                                       // 16661\n      transaction.reconcileTransaction                                                                                 // 16662\n    );                                                                                                                 // 16663\n                                                                                                                       // 16664\n    if (callbacks) {                                                                                                   // 16665\n      for (var j = 0; j < callbacks.length; j++) {                                                                     // 16666\n        transaction.callbackQueue.enqueue(                                                                             // 16667\n          callbacks[j],                                                                                                // 16668\n          component.getPublicInstance()                                                                                // 16669\n        );                                                                                                             // 16670\n      }                                                                                                                // 16671\n    }                                                                                                                  // 16672\n  }                                                                                                                    // 16673\n}                                                                                                                      // 16674\n                                                                                                                       // 16675\nvar flushBatchedUpdates = function() {                                                                                 // 16676\n  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents                                            // 16677\n  // array and perform any updates enqueued by mount-ready handlers (i.e.,                                             // 16678\n  // componentDidUpdate) but we need to check here too in order to catch                                               // 16679\n  // updates enqueued by setState callbacks and asap calls.                                                            // 16680\n  while (dirtyComponents.length || asapEnqueued) {                                                                     // 16681\n    if (dirtyComponents.length) {                                                                                      // 16682\n      var transaction = ReactUpdatesFlushTransaction.getPooled();                                                      // 16683\n      transaction.perform(runBatchedUpdates, null, transaction);                                                       // 16684\n      ReactUpdatesFlushTransaction.release(transaction);                                                               // 16685\n    }                                                                                                                  // 16686\n                                                                                                                       // 16687\n    if (asapEnqueued) {                                                                                                // 16688\n      asapEnqueued = false;                                                                                            // 16689\n      var queue = asapCallbackQueue;                                                                                   // 16690\n      asapCallbackQueue = CallbackQueue.getPooled();                                                                   // 16691\n      queue.notifyAll();                                                                                               // 16692\n      CallbackQueue.release(queue);                                                                                    // 16693\n    }                                                                                                                  // 16694\n  }                                                                                                                    // 16695\n};                                                                                                                     // 16696\nflushBatchedUpdates = ReactPerf.measure(                                                                               // 16697\n  'ReactUpdates',                                                                                                      // 16698\n  'flushBatchedUpdates',                                                                                               // 16699\n  flushBatchedUpdates                                                                                                  // 16700\n);                                                                                                                     // 16701\n                                                                                                                       // 16702\n/**                                                                                                                    // 16703\n * Mark a component as needing a rerender, adding an optional callback to a                                            // 16704\n * list of functions which will be executed once the rerender occurs.                                                  // 16705\n */                                                                                                                    // 16706\nfunction enqueueUpdate(component) {                                                                                    // 16707\n  ensureInjected();                                                                                                    // 16708\n                                                                                                                       // 16709\n  // Various parts of our code (such as ReactCompositeComponent's                                                      // 16710\n  // _renderValidatedComponent) assume that calls to render aren't nested;                                             // 16711\n  // verify that that's the case. (This is called by each top-level update                                             // 16712\n  // function, like setProps, setState, forceUpdate, etc.; creation and                                                // 16713\n  // destruction of top-level components is guarded in ReactMount.)                                                    // 16714\n  (\"production\" !== process.env.NODE_ENV ? warning(                                                                    // 16715\n    ReactCurrentOwner.current == null,                                                                                 // 16716\n    'enqueueUpdate(): Render methods should be a pure function of props ' +                                            // 16717\n    'and state; triggering nested component updates from render is not ' +                                             // 16718\n    'allowed. If necessary, trigger nested updates in ' +                                                              // 16719\n    'componentDidUpdate.'                                                                                              // 16720\n  ) : null);                                                                                                           // 16721\n                                                                                                                       // 16722\n  if (!batchingStrategy.isBatchingUpdates) {                                                                           // 16723\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);                                                         // 16724\n    return;                                                                                                            // 16725\n  }                                                                                                                    // 16726\n                                                                                                                       // 16727\n  dirtyComponents.push(component);                                                                                     // 16728\n}                                                                                                                      // 16729\n                                                                                                                       // 16730\n/**                                                                                                                    // 16731\n * Enqueue a callback to be run at the end of the current batching cycle. Throws                                       // 16732\n * if no updates are currently being performed.                                                                        // 16733\n */                                                                                                                    // 16734\nfunction asap(callback, context) {                                                                                     // 16735\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 16736\n    batchingStrategy.isBatchingUpdates,                                                                                // 16737\n    'ReactUpdates.asap: Can\\'t enqueue an asap callback in a context where' +                                          // 16738\n    'updates are not being batched.'                                                                                   // 16739\n  ) : invariant(batchingStrategy.isBatchingUpdates));                                                                  // 16740\n  asapCallbackQueue.enqueue(callback, context);                                                                        // 16741\n  asapEnqueued = true;                                                                                                 // 16742\n}                                                                                                                      // 16743\n                                                                                                                       // 16744\nvar ReactUpdatesInjection = {                                                                                          // 16745\n  injectReconcileTransaction: function(ReconcileTransaction) {                                                         // 16746\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 16747\n      ReconcileTransaction,                                                                                            // 16748\n      'ReactUpdates: must provide a reconcile transaction class'                                                       // 16749\n    ) : invariant(ReconcileTransaction));                                                                              // 16750\n    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;                                                     // 16751\n  },                                                                                                                   // 16752\n                                                                                                                       // 16753\n  injectBatchingStrategy: function(_batchingStrategy) {                                                                // 16754\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 16755\n      _batchingStrategy,                                                                                               // 16756\n      'ReactUpdates: must provide a batching strategy'                                                                 // 16757\n    ) : invariant(_batchingStrategy));                                                                                 // 16758\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 16759\n      typeof _batchingStrategy.batchedUpdates === 'function',                                                          // 16760\n      'ReactUpdates: must provide a batchedUpdates() function'                                                         // 16761\n    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));                                            // 16762\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 16763\n      typeof _batchingStrategy.isBatchingUpdates === 'boolean',                                                        // 16764\n      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'                                              // 16765\n    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));                                          // 16766\n    batchingStrategy = _batchingStrategy;                                                                              // 16767\n  }                                                                                                                    // 16768\n};                                                                                                                     // 16769\n                                                                                                                       // 16770\nvar ReactUpdates = {                                                                                                   // 16771\n  /**                                                                                                                  // 16772\n   * React references `ReactReconcileTransaction` using this property in order                                         // 16773\n   * to allow dependency injection.                                                                                    // 16774\n   *                                                                                                                   // 16775\n   * @internal                                                                                                         // 16776\n   */                                                                                                                  // 16777\n  ReactReconcileTransaction: null,                                                                                     // 16778\n                                                                                                                       // 16779\n  batchedUpdates: batchedUpdates,                                                                                      // 16780\n  enqueueUpdate: enqueueUpdate,                                                                                        // 16781\n  flushBatchedUpdates: flushBatchedUpdates,                                                                            // 16782\n  injection: ReactUpdatesInjection,                                                                                    // 16783\n  asap: asap                                                                                                           // 16784\n};                                                                                                                     // 16785\n                                                                                                                       // 16786\nmodule.exports = ReactUpdates;                                                                                         // 16787\n                                                                                                                       // 16788\n}).call(this,require('_process'))                                                                                      // 16789\n                                                                                                                       // 16790\n},{\"./CallbackQueue\":\"react/lib/CallbackQueue\",\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./ReactReconciler\":\"react/lib/ReactReconciler\",\"./Transaction\":\"react/lib/Transaction\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactWithAddons\":[function(require,module,exports){\n(function (process){                                                                                                   // 16792\n/**                                                                                                                    // 16793\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 16794\n * All rights reserved.                                                                                                // 16795\n *                                                                                                                     // 16796\n * This source code is licensed under the BSD-style license found in the                                               // 16797\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 16798\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 16799\n *                                                                                                                     // 16800\n * @providesModule ReactWithAddons                                                                                     // 16801\n */                                                                                                                    // 16802\n                                                                                                                       // 16803\n/**                                                                                                                    // 16804\n * This module exists purely in the open source project, and is meant as a way                                         // 16805\n * to create a separate standalone build of React. This build has \"addons\", or                                         // 16806\n * functionality we've built and think might be useful but doesn't have a good                                         // 16807\n * place to live inside React core.                                                                                    // 16808\n */                                                                                                                    // 16809\n                                                                                                                       // 16810\n'use strict';                                                                                                          // 16811\n                                                                                                                       // 16812\nvar LinkedStateMixin = require(\"./LinkedStateMixin\");                                                                  // 16813\nvar React = require(\"./React\");                                                                                        // 16814\nvar ReactComponentWithPureRenderMixin =                                                                                // 16815\n  require(\"./ReactComponentWithPureRenderMixin\");                                                                      // 16816\nvar ReactCSSTransitionGroup = require(\"./ReactCSSTransitionGroup\");                                                    // 16817\nvar ReactFragment = require(\"./ReactFragment\");                                                                        // 16818\nvar ReactTransitionGroup = require(\"./ReactTransitionGroup\");                                                          // 16819\nvar ReactUpdates = require(\"./ReactUpdates\");                                                                          // 16820\n                                                                                                                       // 16821\nvar cx = require(\"./cx\");                                                                                              // 16822\nvar cloneWithProps = require(\"./cloneWithProps\");                                                                      // 16823\nvar update = require(\"./update\");                                                                                      // 16824\n                                                                                                                       // 16825\nReact.addons = {                                                                                                       // 16826\n  CSSTransitionGroup: ReactCSSTransitionGroup,                                                                         // 16827\n  LinkedStateMixin: LinkedStateMixin,                                                                                  // 16828\n  PureRenderMixin: ReactComponentWithPureRenderMixin,                                                                  // 16829\n  TransitionGroup: ReactTransitionGroup,                                                                               // 16830\n                                                                                                                       // 16831\n  batchedUpdates: ReactUpdates.batchedUpdates,                                                                         // 16832\n  classSet: cx,                                                                                                        // 16833\n  cloneWithProps: cloneWithProps,                                                                                      // 16834\n  createFragment: ReactFragment.create,                                                                                // 16835\n  update: update                                                                                                       // 16836\n};                                                                                                                     // 16837\n                                                                                                                       // 16838\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 16839\n  React.addons.Perf = require(\"./ReactDefaultPerf\");                                                                   // 16840\n  React.addons.TestUtils = require(\"./ReactTestUtils\");                                                                // 16841\n}                                                                                                                      // 16842\n                                                                                                                       // 16843\nmodule.exports = React;                                                                                                // 16844\n                                                                                                                       // 16845\n}).call(this,require('_process'))                                                                                      // 16846\n                                                                                                                       // 16847\n},{\"./LinkedStateMixin\":\"react/lib/LinkedStateMixin\",\"./React\":\"react/lib/React\",\"./ReactCSSTransitionGroup\":\"react/lib/ReactCSSTransitionGroup\",\"./ReactComponentWithPureRenderMixin\":\"react/lib/ReactComponentWithPureRenderMixin\",\"./ReactDefaultPerf\":\"react/lib/ReactDefaultPerf\",\"./ReactFragment\":\"react/lib/ReactFragment\",\"./ReactTestUtils\":\"react/lib/ReactTestUtils\",\"./ReactTransitionGroup\":\"react/lib/ReactTransitionGroup\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./cloneWithProps\":\"react/lib/cloneWithProps\",\"./cx\":\"react/lib/cx\",\"./update\":\"react/lib/update\",\"_process\":1}],\"react/lib/React\":[function(require,module,exports){\n(function (process){                                                                                                   // 16849\n/**                                                                                                                    // 16850\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 16851\n * All rights reserved.                                                                                                // 16852\n *                                                                                                                     // 16853\n * This source code is licensed under the BSD-style license found in the                                               // 16854\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 16855\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 16856\n *                                                                                                                     // 16857\n * @providesModule React                                                                                               // 16858\n */                                                                                                                    // 16859\n                                                                                                                       // 16860\n/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/                                                                            // 16861\n                                                                                                                       // 16862\n'use strict';                                                                                                          // 16863\n                                                                                                                       // 16864\nvar EventPluginUtils = require(\"./EventPluginUtils\");                                                                  // 16865\nvar ReactChildren = require(\"./ReactChildren\");                                                                        // 16866\nvar ReactComponent = require(\"./ReactComponent\");                                                                      // 16867\nvar ReactClass = require(\"./ReactClass\");                                                                              // 16868\nvar ReactContext = require(\"./ReactContext\");                                                                          // 16869\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");                                                                // 16870\nvar ReactElement = require(\"./ReactElement\");                                                                          // 16871\nvar ReactElementValidator = require(\"./ReactElementValidator\");                                                        // 16872\nvar ReactDOM = require(\"./ReactDOM\");                                                                                  // 16873\nvar ReactDOMTextComponent = require(\"./ReactDOMTextComponent\");                                                        // 16874\nvar ReactDefaultInjection = require(\"./ReactDefaultInjection\");                                                        // 16875\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");                                                          // 16876\nvar ReactMount = require(\"./ReactMount\");                                                                              // 16877\nvar ReactPerf = require(\"./ReactPerf\");                                                                                // 16878\nvar ReactPropTypes = require(\"./ReactPropTypes\");                                                                      // 16879\nvar ReactReconciler = require(\"./ReactReconciler\");                                                                    // 16880\nvar ReactServerRendering = require(\"./ReactServerRendering\");                                                          // 16881\n                                                                                                                       // 16882\nvar assign = require(\"./Object.assign\");                                                                               // 16883\nvar findDOMNode = require(\"./findDOMNode\");                                                                            // 16884\nvar onlyChild = require(\"./onlyChild\");                                                                                // 16885\n                                                                                                                       // 16886\nReactDefaultInjection.inject();                                                                                        // 16887\n                                                                                                                       // 16888\nvar createElement = ReactElement.createElement;                                                                        // 16889\nvar createFactory = ReactElement.createFactory;                                                                        // 16890\nvar cloneElement = ReactElement.cloneElement;                                                                          // 16891\n                                                                                                                       // 16892\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 16893\n  createElement = ReactElementValidator.createElement;                                                                 // 16894\n  createFactory = ReactElementValidator.createFactory;                                                                 // 16895\n  cloneElement = ReactElementValidator.cloneElement;                                                                   // 16896\n}                                                                                                                      // 16897\n                                                                                                                       // 16898\nvar render = ReactPerf.measure('React', 'render', ReactMount.render);                                                  // 16899\n                                                                                                                       // 16900\nvar React = {                                                                                                          // 16901\n  Children: {                                                                                                          // 16902\n    map: ReactChildren.map,                                                                                            // 16903\n    forEach: ReactChildren.forEach,                                                                                    // 16904\n    count: ReactChildren.count,                                                                                        // 16905\n    only: onlyChild                                                                                                    // 16906\n  },                                                                                                                   // 16907\n  Component: ReactComponent,                                                                                           // 16908\n  DOM: ReactDOM,                                                                                                       // 16909\n  PropTypes: ReactPropTypes,                                                                                           // 16910\n  initializeTouchEvents: function(shouldUseTouch) {                                                                    // 16911\n    EventPluginUtils.useTouchEvents = shouldUseTouch;                                                                  // 16912\n  },                                                                                                                   // 16913\n  createClass: ReactClass.createClass,                                                                                 // 16914\n  createElement: createElement,                                                                                        // 16915\n  cloneElement: cloneElement,                                                                                          // 16916\n  createFactory: createFactory,                                                                                        // 16917\n  createMixin: function(mixin) {                                                                                       // 16918\n    // Currently a noop. Will be used to validate and trace mixins.                                                    // 16919\n    return mixin;                                                                                                      // 16920\n  },                                                                                                                   // 16921\n  constructAndRenderComponent: ReactMount.constructAndRenderComponent,                                                 // 16922\n  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,                                         // 16923\n  findDOMNode: findDOMNode,                                                                                            // 16924\n  render: render,                                                                                                      // 16925\n  renderToString: ReactServerRendering.renderToString,                                                                 // 16926\n  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,                                                     // 16927\n  unmountComponentAtNode: ReactMount.unmountComponentAtNode,                                                           // 16928\n  isValidElement: ReactElement.isValidElement,                                                                         // 16929\n  withContext: ReactContext.withContext,                                                                               // 16930\n                                                                                                                       // 16931\n  // Hook for JSX spread, don't use this for anything else.                                                            // 16932\n  __spread: assign                                                                                                     // 16933\n};                                                                                                                     // 16934\n                                                                                                                       // 16935\n// Inject the runtime into a devtools global hook regardless of browser.                                               // 16936\n// Allows for debugging when the hook is injected on the page.                                                         // 16937\nif (                                                                                                                   // 16938\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&                                                             // 16939\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {                                                       // 16940\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({                                                                              // 16941\n    CurrentOwner: ReactCurrentOwner,                                                                                   // 16942\n    InstanceHandles: ReactInstanceHandles,                                                                             // 16943\n    Mount: ReactMount,                                                                                                 // 16944\n    Reconciler: ReactReconciler,                                                                                       // 16945\n    TextComponent: ReactDOMTextComponent                                                                               // 16946\n  });                                                                                                                  // 16947\n}                                                                                                                      // 16948\n                                                                                                                       // 16949\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 16950\n  var ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                        // 16951\n  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {                                                  // 16952\n                                                                                                                       // 16953\n    // If we're in Chrome, look for the devtools marker and provide a download                                         // 16954\n    // link if not installed.                                                                                          // 16955\n    if (navigator.userAgent.indexOf('Chrome') > -1) {                                                                  // 16956\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {                                                     // 16957\n        console.debug(                                                                                                 // 16958\n          'Download the React DevTools for a better development experience: ' +                                        // 16959\n          'https://fb.me/react-devtools'                                                                               // 16960\n        );                                                                                                             // 16961\n      }                                                                                                                // 16962\n    }                                                                                                                  // 16963\n                                                                                                                       // 16964\n    var expectedFeatures = [                                                                                           // 16965\n      // shims                                                                                                         // 16966\n      Array.isArray,                                                                                                   // 16967\n      Array.prototype.every,                                                                                           // 16968\n      Array.prototype.forEach,                                                                                         // 16969\n      Array.prototype.indexOf,                                                                                         // 16970\n      Array.prototype.map,                                                                                             // 16971\n      Date.now,                                                                                                        // 16972\n      Function.prototype.bind,                                                                                         // 16973\n      Object.keys,                                                                                                     // 16974\n      String.prototype.split,                                                                                          // 16975\n      String.prototype.trim,                                                                                           // 16976\n                                                                                                                       // 16977\n      // shams                                                                                                         // 16978\n      Object_create,                                                                                                   // 16979\n      Object_freeze                                                                                                    // 16980\n    ];                                                                                                                 // 16981\n                                                                                                                       // 16982\n    for (var i = 0; i < expectedFeatures.length; i++) {                                                                // 16983\n      if (!expectedFeatures[i]) {                                                                                      // 16984\n        console.error(                                                                                                 // 16985\n          'One or more ES5 shims expected by React are not available: ' +                                              // 16986\n          'Add the es5-shim package with `meteor add es5-shim`'                                                        // 16987\n        );                                                                                                             // 16988\n        break;                                                                                                         // 16989\n      }                                                                                                                // 16990\n    }                                                                                                                  // 16991\n  }                                                                                                                    // 16992\n}                                                                                                                      // 16993\n                                                                                                                       // 16994\nReact.version = '0.13.3';                                                                                              // 16995\n                                                                                                                       // 16996\nmodule.exports = React;                                                                                                // 16997\n                                                                                                                       // 16998\n}).call(this,require('_process'))                                                                                      // 16999\n                                                                                                                       // 17000\n},{\"./EventPluginUtils\":\"react/lib/EventPluginUtils\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactChildren\":\"react/lib/ReactChildren\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactComponent\":\"react/lib/ReactComponent\",\"./ReactContext\":\"react/lib/ReactContext\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactDOM\":\"react/lib/ReactDOM\",\"./ReactDOMTextComponent\":\"react/lib/ReactDOMTextComponent\",\"./ReactDefaultInjection\":\"react/lib/ReactDefaultInjection\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactElementValidator\":\"react/lib/ReactElementValidator\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./ReactPropTypes\":\"react/lib/ReactPropTypes\",\"./ReactReconciler\":\"react/lib/ReactReconciler\",\"./ReactServerRendering\":\"react/lib/ReactServerRendering\",\"./findDOMNode\":\"react/lib/findDOMNode\",\"./onlyChild\":\"react/lib/onlyChild\",\"_process\":1}],\"react/lib/SVGDOMPropertyConfig\":[function(require,module,exports){\n/**                                                                                                                    // 17002\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17003\n * All rights reserved.                                                                                                // 17004\n *                                                                                                                     // 17005\n * This source code is licensed under the BSD-style license found in the                                               // 17006\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 17007\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 17008\n *                                                                                                                     // 17009\n * @providesModule SVGDOMPropertyConfig                                                                                // 17010\n */                                                                                                                    // 17011\n                                                                                                                       // 17012\n/*jslint bitwise: true*/                                                                                               // 17013\n                                                                                                                       // 17014\n'use strict';                                                                                                          // 17015\n                                                                                                                       // 17016\nvar DOMProperty = require(\"./DOMProperty\");                                                                            // 17017\n                                                                                                                       // 17018\nvar MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;                                                     // 17019\n                                                                                                                       // 17020\nvar SVGDOMPropertyConfig = {                                                                                           // 17021\n  Properties: {                                                                                                        // 17022\n    clipPath: MUST_USE_ATTRIBUTE,                                                                                      // 17023\n    cx: MUST_USE_ATTRIBUTE,                                                                                            // 17024\n    cy: MUST_USE_ATTRIBUTE,                                                                                            // 17025\n    d: MUST_USE_ATTRIBUTE,                                                                                             // 17026\n    dx: MUST_USE_ATTRIBUTE,                                                                                            // 17027\n    dy: MUST_USE_ATTRIBUTE,                                                                                            // 17028\n    fill: MUST_USE_ATTRIBUTE,                                                                                          // 17029\n    fillOpacity: MUST_USE_ATTRIBUTE,                                                                                   // 17030\n    fontFamily: MUST_USE_ATTRIBUTE,                                                                                    // 17031\n    fontSize: MUST_USE_ATTRIBUTE,                                                                                      // 17032\n    fx: MUST_USE_ATTRIBUTE,                                                                                            // 17033\n    fy: MUST_USE_ATTRIBUTE,                                                                                            // 17034\n    gradientTransform: MUST_USE_ATTRIBUTE,                                                                             // 17035\n    gradientUnits: MUST_USE_ATTRIBUTE,                                                                                 // 17036\n    markerEnd: MUST_USE_ATTRIBUTE,                                                                                     // 17037\n    markerMid: MUST_USE_ATTRIBUTE,                                                                                     // 17038\n    markerStart: MUST_USE_ATTRIBUTE,                                                                                   // 17039\n    offset: MUST_USE_ATTRIBUTE,                                                                                        // 17040\n    opacity: MUST_USE_ATTRIBUTE,                                                                                       // 17041\n    patternContentUnits: MUST_USE_ATTRIBUTE,                                                                           // 17042\n    patternUnits: MUST_USE_ATTRIBUTE,                                                                                  // 17043\n    points: MUST_USE_ATTRIBUTE,                                                                                        // 17044\n    preserveAspectRatio: MUST_USE_ATTRIBUTE,                                                                           // 17045\n    r: MUST_USE_ATTRIBUTE,                                                                                             // 17046\n    rx: MUST_USE_ATTRIBUTE,                                                                                            // 17047\n    ry: MUST_USE_ATTRIBUTE,                                                                                            // 17048\n    spreadMethod: MUST_USE_ATTRIBUTE,                                                                                  // 17049\n    stopColor: MUST_USE_ATTRIBUTE,                                                                                     // 17050\n    stopOpacity: MUST_USE_ATTRIBUTE,                                                                                   // 17051\n    stroke: MUST_USE_ATTRIBUTE,                                                                                        // 17052\n    strokeDasharray: MUST_USE_ATTRIBUTE,                                                                               // 17053\n    strokeLinecap: MUST_USE_ATTRIBUTE,                                                                                 // 17054\n    strokeOpacity: MUST_USE_ATTRIBUTE,                                                                                 // 17055\n    strokeWidth: MUST_USE_ATTRIBUTE,                                                                                   // 17056\n    textAnchor: MUST_USE_ATTRIBUTE,                                                                                    // 17057\n    transform: MUST_USE_ATTRIBUTE,                                                                                     // 17058\n    version: MUST_USE_ATTRIBUTE,                                                                                       // 17059\n    viewBox: MUST_USE_ATTRIBUTE,                                                                                       // 17060\n    x1: MUST_USE_ATTRIBUTE,                                                                                            // 17061\n    x2: MUST_USE_ATTRIBUTE,                                                                                            // 17062\n    x: MUST_USE_ATTRIBUTE,                                                                                             // 17063\n    y1: MUST_USE_ATTRIBUTE,                                                                                            // 17064\n    y2: MUST_USE_ATTRIBUTE,                                                                                            // 17065\n    y: MUST_USE_ATTRIBUTE                                                                                              // 17066\n  },                                                                                                                   // 17067\n  DOMAttributeNames: {                                                                                                 // 17068\n    clipPath: 'clip-path',                                                                                             // 17069\n    fillOpacity: 'fill-opacity',                                                                                       // 17070\n    fontFamily: 'font-family',                                                                                         // 17071\n    fontSize: 'font-size',                                                                                             // 17072\n    gradientTransform: 'gradientTransform',                                                                            // 17073\n    gradientUnits: 'gradientUnits',                                                                                    // 17074\n    markerEnd: 'marker-end',                                                                                           // 17075\n    markerMid: 'marker-mid',                                                                                           // 17076\n    markerStart: 'marker-start',                                                                                       // 17077\n    patternContentUnits: 'patternContentUnits',                                                                        // 17078\n    patternUnits: 'patternUnits',                                                                                      // 17079\n    preserveAspectRatio: 'preserveAspectRatio',                                                                        // 17080\n    spreadMethod: 'spreadMethod',                                                                                      // 17081\n    stopColor: 'stop-color',                                                                                           // 17082\n    stopOpacity: 'stop-opacity',                                                                                       // 17083\n    strokeDasharray: 'stroke-dasharray',                                                                               // 17084\n    strokeLinecap: 'stroke-linecap',                                                                                   // 17085\n    strokeOpacity: 'stroke-opacity',                                                                                   // 17086\n    strokeWidth: 'stroke-width',                                                                                       // 17087\n    textAnchor: 'text-anchor',                                                                                         // 17088\n    viewBox: 'viewBox'                                                                                                 // 17089\n  }                                                                                                                    // 17090\n};                                                                                                                     // 17091\n                                                                                                                       // 17092\nmodule.exports = SVGDOMPropertyConfig;                                                                                 // 17093\n                                                                                                                       // 17094\n},{\"./DOMProperty\":\"react/lib/DOMProperty\"}],\"react/lib/SelectEventPlugin\":[function(require,module,exports){          // 17095\n/**                                                                                                                    // 17096\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17097\n * All rights reserved.                                                                                                // 17098\n *                                                                                                                     // 17099\n * This source code is licensed under the BSD-style license found in the                                               // 17100\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 17101\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 17102\n *                                                                                                                     // 17103\n * @providesModule SelectEventPlugin                                                                                   // 17104\n */                                                                                                                    // 17105\n                                                                                                                       // 17106\n'use strict';                                                                                                          // 17107\n                                                                                                                       // 17108\nvar EventConstants = require(\"./EventConstants\");                                                                      // 17109\nvar EventPropagators = require(\"./EventPropagators\");                                                                  // 17110\nvar ReactInputSelection = require(\"./ReactInputSelection\");                                                            // 17111\nvar SyntheticEvent = require(\"./SyntheticEvent\");                                                                      // 17112\n                                                                                                                       // 17113\nvar getActiveElement = require(\"./getActiveElement\");                                                                  // 17114\nvar isTextInputElement = require(\"./isTextInputElement\");                                                              // 17115\nvar keyOf = require(\"./keyOf\");                                                                                        // 17116\nvar shallowEqual = require(\"./shallowEqual\");                                                                          // 17117\n                                                                                                                       // 17118\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 17119\n                                                                                                                       // 17120\nvar eventTypes = {                                                                                                     // 17121\n  select: {                                                                                                            // 17122\n    phasedRegistrationNames: {                                                                                         // 17123\n      bubbled: keyOf({onSelect: null}),                                                                                // 17124\n      captured: keyOf({onSelectCapture: null})                                                                         // 17125\n    },                                                                                                                 // 17126\n    dependencies: [                                                                                                    // 17127\n      topLevelTypes.topBlur,                                                                                           // 17128\n      topLevelTypes.topContextMenu,                                                                                    // 17129\n      topLevelTypes.topFocus,                                                                                          // 17130\n      topLevelTypes.topKeyDown,                                                                                        // 17131\n      topLevelTypes.topMouseDown,                                                                                      // 17132\n      topLevelTypes.topMouseUp,                                                                                        // 17133\n      topLevelTypes.topSelectionChange                                                                                 // 17134\n    ]                                                                                                                  // 17135\n  }                                                                                                                    // 17136\n};                                                                                                                     // 17137\n                                                                                                                       // 17138\nvar activeElement = null;                                                                                              // 17139\nvar activeElementID = null;                                                                                            // 17140\nvar lastSelection = null;                                                                                              // 17141\nvar mouseDown = false;                                                                                                 // 17142\n                                                                                                                       // 17143\n/**                                                                                                                    // 17144\n * Get an object which is a unique representation of the current selection.                                            // 17145\n *                                                                                                                     // 17146\n * The return value will not be consistent across nodes or browsers, but                                               // 17147\n * two identical selections on the same node will return identical objects.                                            // 17148\n *                                                                                                                     // 17149\n * @param {DOMElement} node                                                                                            // 17150\n * @param {object}                                                                                                     // 17151\n */                                                                                                                    // 17152\nfunction getSelection(node) {                                                                                          // 17153\n  if ('selectionStart' in node &&                                                                                      // 17154\n      ReactInputSelection.hasSelectionCapabilities(node)) {                                                            // 17155\n    return {                                                                                                           // 17156\n      start: node.selectionStart,                                                                                      // 17157\n      end: node.selectionEnd                                                                                           // 17158\n    };                                                                                                                 // 17159\n  } else if (window.getSelection) {                                                                                    // 17160\n    var selection = window.getSelection();                                                                             // 17161\n    return {                                                                                                           // 17162\n      anchorNode: selection.anchorNode,                                                                                // 17163\n      anchorOffset: selection.anchorOffset,                                                                            // 17164\n      focusNode: selection.focusNode,                                                                                  // 17165\n      focusOffset: selection.focusOffset                                                                               // 17166\n    };                                                                                                                 // 17167\n  } else if (document.selection) {                                                                                     // 17168\n    var range = document.selection.createRange();                                                                      // 17169\n    return {                                                                                                           // 17170\n      parentElement: range.parentElement(),                                                                            // 17171\n      text: range.text,                                                                                                // 17172\n      top: range.boundingTop,                                                                                          // 17173\n      left: range.boundingLeft                                                                                         // 17174\n    };                                                                                                                 // 17175\n  }                                                                                                                    // 17176\n}                                                                                                                      // 17177\n                                                                                                                       // 17178\n/**                                                                                                                    // 17179\n * Poll selection to see whether it's changed.                                                                         // 17180\n *                                                                                                                     // 17181\n * @param {object} nativeEvent                                                                                         // 17182\n * @return {?SyntheticEvent}                                                                                           // 17183\n */                                                                                                                    // 17184\nfunction constructSelectEvent(nativeEvent) {                                                                           // 17185\n  // Ensure we have the right element, and that the user is not dragging a                                             // 17186\n  // selection (this matches native `select` event behavior). In HTML5, select                                         // 17187\n  // fires only on input and textarea thus if there's no focused element we                                            // 17188\n  // won't dispatch.                                                                                                   // 17189\n  if (mouseDown ||                                                                                                     // 17190\n      activeElement == null ||                                                                                         // 17191\n      activeElement !== getActiveElement()) {                                                                          // 17192\n    return null;                                                                                                       // 17193\n  }                                                                                                                    // 17194\n                                                                                                                       // 17195\n  // Only fire when selection has actually changed.                                                                    // 17196\n  var currentSelection = getSelection(activeElement);                                                                  // 17197\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {                                              // 17198\n    lastSelection = currentSelection;                                                                                  // 17199\n                                                                                                                       // 17200\n    var syntheticEvent = SyntheticEvent.getPooled(                                                                     // 17201\n      eventTypes.select,                                                                                               // 17202\n      activeElementID,                                                                                                 // 17203\n      nativeEvent                                                                                                      // 17204\n    );                                                                                                                 // 17205\n                                                                                                                       // 17206\n    syntheticEvent.type = 'select';                                                                                    // 17207\n    syntheticEvent.target = activeElement;                                                                             // 17208\n                                                                                                                       // 17209\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);                                                     // 17210\n                                                                                                                       // 17211\n    return syntheticEvent;                                                                                             // 17212\n  }                                                                                                                    // 17213\n}                                                                                                                      // 17214\n                                                                                                                       // 17215\n/**                                                                                                                    // 17216\n * This plugin creates an `onSelect` event that normalizes select events                                               // 17217\n * across form elements.                                                                                               // 17218\n *                                                                                                                     // 17219\n * Supported elements are:                                                                                             // 17220\n * - input (see `isTextInputElement`)                                                                                  // 17221\n * - textarea                                                                                                          // 17222\n * - contentEditable                                                                                                   // 17223\n *                                                                                                                     // 17224\n * This differs from native browser implementations in the following ways:                                             // 17225\n * - Fires on contentEditable fields as well as inputs.                                                                // 17226\n * - Fires for collapsed selection.                                                                                    // 17227\n * - Fires after user input.                                                                                           // 17228\n */                                                                                                                    // 17229\nvar SelectEventPlugin = {                                                                                              // 17230\n                                                                                                                       // 17231\n  eventTypes: eventTypes,                                                                                              // 17232\n                                                                                                                       // 17233\n  /**                                                                                                                  // 17234\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 17235\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 17236\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 17237\n   * @param {object} nativeEvent Native browser event.                                                                 // 17238\n   * @return {*} An accumulation of synthetic events.                                                                  // 17239\n   * @see {EventPluginHub.extractEvents}                                                                               // 17240\n   */                                                                                                                  // 17241\n  extractEvents: function(                                                                                             // 17242\n      topLevelType,                                                                                                    // 17243\n      topLevelTarget,                                                                                                  // 17244\n      topLevelTargetID,                                                                                                // 17245\n      nativeEvent) {                                                                                                   // 17246\n                                                                                                                       // 17247\n    switch (topLevelType) {                                                                                            // 17248\n      // Track the input node that has focus.                                                                          // 17249\n      case topLevelTypes.topFocus:                                                                                     // 17250\n        if (isTextInputElement(topLevelTarget) ||                                                                      // 17251\n            topLevelTarget.contentEditable === 'true') {                                                               // 17252\n          activeElement = topLevelTarget;                                                                              // 17253\n          activeElementID = topLevelTargetID;                                                                          // 17254\n          lastSelection = null;                                                                                        // 17255\n        }                                                                                                              // 17256\n        break;                                                                                                         // 17257\n      case topLevelTypes.topBlur:                                                                                      // 17258\n        activeElement = null;                                                                                          // 17259\n        activeElementID = null;                                                                                        // 17260\n        lastSelection = null;                                                                                          // 17261\n        break;                                                                                                         // 17262\n                                                                                                                       // 17263\n      // Don't fire the event while the user is dragging. This matches the                                             // 17264\n      // semantics of the native select event.                                                                         // 17265\n      case topLevelTypes.topMouseDown:                                                                                 // 17266\n        mouseDown = true;                                                                                              // 17267\n        break;                                                                                                         // 17268\n      case topLevelTypes.topContextMenu:                                                                               // 17269\n      case topLevelTypes.topMouseUp:                                                                                   // 17270\n        mouseDown = false;                                                                                             // 17271\n        return constructSelectEvent(nativeEvent);                                                                      // 17272\n                                                                                                                       // 17273\n      // Chrome and IE fire non-standard event when selection is changed (and                                          // 17274\n      // sometimes when it hasn't).                                                                                    // 17275\n      // Firefox doesn't support selectionchange, so check selection status                                            // 17276\n      // after each key entry. The selection changes after keydown and before                                          // 17277\n      // keyup, but we check on keydown as well in the case of holding down a                                          // 17278\n      // key, when multiple keydown events are fired but only one keyup is.                                            // 17279\n      case topLevelTypes.topSelectionChange:                                                                           // 17280\n      case topLevelTypes.topKeyDown:                                                                                   // 17281\n      case topLevelTypes.topKeyUp:                                                                                     // 17282\n        return constructSelectEvent(nativeEvent);                                                                      // 17283\n    }                                                                                                                  // 17284\n  }                                                                                                                    // 17285\n};                                                                                                                     // 17286\n                                                                                                                       // 17287\nmodule.exports = SelectEventPlugin;                                                                                    // 17288\n                                                                                                                       // 17289\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPropagators\":\"react/lib/EventPropagators\",\"./ReactInputSelection\":\"react/lib/ReactInputSelection\",\"./SyntheticEvent\":\"react/lib/SyntheticEvent\",\"./getActiveElement\":\"react/lib/getActiveElement\",\"./isTextInputElement\":\"react/lib/isTextInputElement\",\"./keyOf\":\"react/lib/keyOf\",\"./shallowEqual\":\"react/lib/shallowEqual\"}],\"react/lib/ServerReactRootIndex\":[function(require,module,exports){\n/**                                                                                                                    // 17291\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17292\n * All rights reserved.                                                                                                // 17293\n *                                                                                                                     // 17294\n * This source code is licensed under the BSD-style license found in the                                               // 17295\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 17296\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 17297\n *                                                                                                                     // 17298\n * @providesModule ServerReactRootIndex                                                                                // 17299\n * @typechecks                                                                                                         // 17300\n */                                                                                                                    // 17301\n                                                                                                                       // 17302\n'use strict';                                                                                                          // 17303\n                                                                                                                       // 17304\n/**                                                                                                                    // 17305\n * Size of the reactRoot ID space. We generate random numbers for React root                                           // 17306\n * IDs and if there's a collision the events and DOM update system will                                                // 17307\n * get confused. In the future we need a way to generate GUIDs but for                                                 // 17308\n * now this will work on a smaller scale.                                                                              // 17309\n */                                                                                                                    // 17310\nvar GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);                                                                          // 17311\n                                                                                                                       // 17312\nvar ServerReactRootIndex = {                                                                                           // 17313\n  createReactRootIndex: function() {                                                                                   // 17314\n    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);                                                          // 17315\n  }                                                                                                                    // 17316\n};                                                                                                                     // 17317\n                                                                                                                       // 17318\nmodule.exports = ServerReactRootIndex;                                                                                 // 17319\n                                                                                                                       // 17320\n},{}],\"react/lib/SimpleEventPlugin\":[function(require,module,exports){                                                 // 17321\n(function (process){                                                                                                   // 17322\n/**                                                                                                                    // 17323\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17324\n * All rights reserved.                                                                                                // 17325\n *                                                                                                                     // 17326\n * This source code is licensed under the BSD-style license found in the                                               // 17327\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 17328\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 17329\n *                                                                                                                     // 17330\n * @providesModule SimpleEventPlugin                                                                                   // 17331\n */                                                                                                                    // 17332\n                                                                                                                       // 17333\n'use strict';                                                                                                          // 17334\n                                                                                                                       // 17335\nvar EventConstants = require(\"./EventConstants\");                                                                      // 17336\nvar EventPluginUtils = require(\"./EventPluginUtils\");                                                                  // 17337\nvar EventPropagators = require(\"./EventPropagators\");                                                                  // 17338\nvar SyntheticClipboardEvent = require(\"./SyntheticClipboardEvent\");                                                    // 17339\nvar SyntheticEvent = require(\"./SyntheticEvent\");                                                                      // 17340\nvar SyntheticFocusEvent = require(\"./SyntheticFocusEvent\");                                                            // 17341\nvar SyntheticKeyboardEvent = require(\"./SyntheticKeyboardEvent\");                                                      // 17342\nvar SyntheticMouseEvent = require(\"./SyntheticMouseEvent\");                                                            // 17343\nvar SyntheticDragEvent = require(\"./SyntheticDragEvent\");                                                              // 17344\nvar SyntheticTouchEvent = require(\"./SyntheticTouchEvent\");                                                            // 17345\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");                                                                  // 17346\nvar SyntheticWheelEvent = require(\"./SyntheticWheelEvent\");                                                            // 17347\n                                                                                                                       // 17348\nvar getEventCharCode = require(\"./getEventCharCode\");                                                                  // 17349\n                                                                                                                       // 17350\nvar invariant = require(\"./invariant\");                                                                                // 17351\nvar keyOf = require(\"./keyOf\");                                                                                        // 17352\nvar warning = require(\"./warning\");                                                                                    // 17353\n                                                                                                                       // 17354\nvar topLevelTypes = EventConstants.topLevelTypes;                                                                      // 17355\n                                                                                                                       // 17356\nvar eventTypes = {                                                                                                     // 17357\n  blur: {                                                                                                              // 17358\n    phasedRegistrationNames: {                                                                                         // 17359\n      bubbled: keyOf({onBlur: true}),                                                                                  // 17360\n      captured: keyOf({onBlurCapture: true})                                                                           // 17361\n    }                                                                                                                  // 17362\n  },                                                                                                                   // 17363\n  click: {                                                                                                             // 17364\n    phasedRegistrationNames: {                                                                                         // 17365\n      bubbled: keyOf({onClick: true}),                                                                                 // 17366\n      captured: keyOf({onClickCapture: true})                                                                          // 17367\n    }                                                                                                                  // 17368\n  },                                                                                                                   // 17369\n  contextMenu: {                                                                                                       // 17370\n    phasedRegistrationNames: {                                                                                         // 17371\n      bubbled: keyOf({onContextMenu: true}),                                                                           // 17372\n      captured: keyOf({onContextMenuCapture: true})                                                                    // 17373\n    }                                                                                                                  // 17374\n  },                                                                                                                   // 17375\n  copy: {                                                                                                              // 17376\n    phasedRegistrationNames: {                                                                                         // 17377\n      bubbled: keyOf({onCopy: true}),                                                                                  // 17378\n      captured: keyOf({onCopyCapture: true})                                                                           // 17379\n    }                                                                                                                  // 17380\n  },                                                                                                                   // 17381\n  cut: {                                                                                                               // 17382\n    phasedRegistrationNames: {                                                                                         // 17383\n      bubbled: keyOf({onCut: true}),                                                                                   // 17384\n      captured: keyOf({onCutCapture: true})                                                                            // 17385\n    }                                                                                                                  // 17386\n  },                                                                                                                   // 17387\n  doubleClick: {                                                                                                       // 17388\n    phasedRegistrationNames: {                                                                                         // 17389\n      bubbled: keyOf({onDoubleClick: true}),                                                                           // 17390\n      captured: keyOf({onDoubleClickCapture: true})                                                                    // 17391\n    }                                                                                                                  // 17392\n  },                                                                                                                   // 17393\n  drag: {                                                                                                              // 17394\n    phasedRegistrationNames: {                                                                                         // 17395\n      bubbled: keyOf({onDrag: true}),                                                                                  // 17396\n      captured: keyOf({onDragCapture: true})                                                                           // 17397\n    }                                                                                                                  // 17398\n  },                                                                                                                   // 17399\n  dragEnd: {                                                                                                           // 17400\n    phasedRegistrationNames: {                                                                                         // 17401\n      bubbled: keyOf({onDragEnd: true}),                                                                               // 17402\n      captured: keyOf({onDragEndCapture: true})                                                                        // 17403\n    }                                                                                                                  // 17404\n  },                                                                                                                   // 17405\n  dragEnter: {                                                                                                         // 17406\n    phasedRegistrationNames: {                                                                                         // 17407\n      bubbled: keyOf({onDragEnter: true}),                                                                             // 17408\n      captured: keyOf({onDragEnterCapture: true})                                                                      // 17409\n    }                                                                                                                  // 17410\n  },                                                                                                                   // 17411\n  dragExit: {                                                                                                          // 17412\n    phasedRegistrationNames: {                                                                                         // 17413\n      bubbled: keyOf({onDragExit: true}),                                                                              // 17414\n      captured: keyOf({onDragExitCapture: true})                                                                       // 17415\n    }                                                                                                                  // 17416\n  },                                                                                                                   // 17417\n  dragLeave: {                                                                                                         // 17418\n    phasedRegistrationNames: {                                                                                         // 17419\n      bubbled: keyOf({onDragLeave: true}),                                                                             // 17420\n      captured: keyOf({onDragLeaveCapture: true})                                                                      // 17421\n    }                                                                                                                  // 17422\n  },                                                                                                                   // 17423\n  dragOver: {                                                                                                          // 17424\n    phasedRegistrationNames: {                                                                                         // 17425\n      bubbled: keyOf({onDragOver: true}),                                                                              // 17426\n      captured: keyOf({onDragOverCapture: true})                                                                       // 17427\n    }                                                                                                                  // 17428\n  },                                                                                                                   // 17429\n  dragStart: {                                                                                                         // 17430\n    phasedRegistrationNames: {                                                                                         // 17431\n      bubbled: keyOf({onDragStart: true}),                                                                             // 17432\n      captured: keyOf({onDragStartCapture: true})                                                                      // 17433\n    }                                                                                                                  // 17434\n  },                                                                                                                   // 17435\n  drop: {                                                                                                              // 17436\n    phasedRegistrationNames: {                                                                                         // 17437\n      bubbled: keyOf({onDrop: true}),                                                                                  // 17438\n      captured: keyOf({onDropCapture: true})                                                                           // 17439\n    }                                                                                                                  // 17440\n  },                                                                                                                   // 17441\n  focus: {                                                                                                             // 17442\n    phasedRegistrationNames: {                                                                                         // 17443\n      bubbled: keyOf({onFocus: true}),                                                                                 // 17444\n      captured: keyOf({onFocusCapture: true})                                                                          // 17445\n    }                                                                                                                  // 17446\n  },                                                                                                                   // 17447\n  input: {                                                                                                             // 17448\n    phasedRegistrationNames: {                                                                                         // 17449\n      bubbled: keyOf({onInput: true}),                                                                                 // 17450\n      captured: keyOf({onInputCapture: true})                                                                          // 17451\n    }                                                                                                                  // 17452\n  },                                                                                                                   // 17453\n  keyDown: {                                                                                                           // 17454\n    phasedRegistrationNames: {                                                                                         // 17455\n      bubbled: keyOf({onKeyDown: true}),                                                                               // 17456\n      captured: keyOf({onKeyDownCapture: true})                                                                        // 17457\n    }                                                                                                                  // 17458\n  },                                                                                                                   // 17459\n  keyPress: {                                                                                                          // 17460\n    phasedRegistrationNames: {                                                                                         // 17461\n      bubbled: keyOf({onKeyPress: true}),                                                                              // 17462\n      captured: keyOf({onKeyPressCapture: true})                                                                       // 17463\n    }                                                                                                                  // 17464\n  },                                                                                                                   // 17465\n  keyUp: {                                                                                                             // 17466\n    phasedRegistrationNames: {                                                                                         // 17467\n      bubbled: keyOf({onKeyUp: true}),                                                                                 // 17468\n      captured: keyOf({onKeyUpCapture: true})                                                                          // 17469\n    }                                                                                                                  // 17470\n  },                                                                                                                   // 17471\n  load: {                                                                                                              // 17472\n    phasedRegistrationNames: {                                                                                         // 17473\n      bubbled: keyOf({onLoad: true}),                                                                                  // 17474\n      captured: keyOf({onLoadCapture: true})                                                                           // 17475\n    }                                                                                                                  // 17476\n  },                                                                                                                   // 17477\n  error: {                                                                                                             // 17478\n    phasedRegistrationNames: {                                                                                         // 17479\n      bubbled: keyOf({onError: true}),                                                                                 // 17480\n      captured: keyOf({onErrorCapture: true})                                                                          // 17481\n    }                                                                                                                  // 17482\n  },                                                                                                                   // 17483\n  // Note: We do not allow listening to mouseOver events. Instead, use the                                             // 17484\n  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.                                                     // 17485\n  mouseDown: {                                                                                                         // 17486\n    phasedRegistrationNames: {                                                                                         // 17487\n      bubbled: keyOf({onMouseDown: true}),                                                                             // 17488\n      captured: keyOf({onMouseDownCapture: true})                                                                      // 17489\n    }                                                                                                                  // 17490\n  },                                                                                                                   // 17491\n  mouseMove: {                                                                                                         // 17492\n    phasedRegistrationNames: {                                                                                         // 17493\n      bubbled: keyOf({onMouseMove: true}),                                                                             // 17494\n      captured: keyOf({onMouseMoveCapture: true})                                                                      // 17495\n    }                                                                                                                  // 17496\n  },                                                                                                                   // 17497\n  mouseOut: {                                                                                                          // 17498\n    phasedRegistrationNames: {                                                                                         // 17499\n      bubbled: keyOf({onMouseOut: true}),                                                                              // 17500\n      captured: keyOf({onMouseOutCapture: true})                                                                       // 17501\n    }                                                                                                                  // 17502\n  },                                                                                                                   // 17503\n  mouseOver: {                                                                                                         // 17504\n    phasedRegistrationNames: {                                                                                         // 17505\n      bubbled: keyOf({onMouseOver: true}),                                                                             // 17506\n      captured: keyOf({onMouseOverCapture: true})                                                                      // 17507\n    }                                                                                                                  // 17508\n  },                                                                                                                   // 17509\n  mouseUp: {                                                                                                           // 17510\n    phasedRegistrationNames: {                                                                                         // 17511\n      bubbled: keyOf({onMouseUp: true}),                                                                               // 17512\n      captured: keyOf({onMouseUpCapture: true})                                                                        // 17513\n    }                                                                                                                  // 17514\n  },                                                                                                                   // 17515\n  paste: {                                                                                                             // 17516\n    phasedRegistrationNames: {                                                                                         // 17517\n      bubbled: keyOf({onPaste: true}),                                                                                 // 17518\n      captured: keyOf({onPasteCapture: true})                                                                          // 17519\n    }                                                                                                                  // 17520\n  },                                                                                                                   // 17521\n  reset: {                                                                                                             // 17522\n    phasedRegistrationNames: {                                                                                         // 17523\n      bubbled: keyOf({onReset: true}),                                                                                 // 17524\n      captured: keyOf({onResetCapture: true})                                                                          // 17525\n    }                                                                                                                  // 17526\n  },                                                                                                                   // 17527\n  scroll: {                                                                                                            // 17528\n    phasedRegistrationNames: {                                                                                         // 17529\n      bubbled: keyOf({onScroll: true}),                                                                                // 17530\n      captured: keyOf({onScrollCapture: true})                                                                         // 17531\n    }                                                                                                                  // 17532\n  },                                                                                                                   // 17533\n  submit: {                                                                                                            // 17534\n    phasedRegistrationNames: {                                                                                         // 17535\n      bubbled: keyOf({onSubmit: true}),                                                                                // 17536\n      captured: keyOf({onSubmitCapture: true})                                                                         // 17537\n    }                                                                                                                  // 17538\n  },                                                                                                                   // 17539\n  touchCancel: {                                                                                                       // 17540\n    phasedRegistrationNames: {                                                                                         // 17541\n      bubbled: keyOf({onTouchCancel: true}),                                                                           // 17542\n      captured: keyOf({onTouchCancelCapture: true})                                                                    // 17543\n    }                                                                                                                  // 17544\n  },                                                                                                                   // 17545\n  touchEnd: {                                                                                                          // 17546\n    phasedRegistrationNames: {                                                                                         // 17547\n      bubbled: keyOf({onTouchEnd: true}),                                                                              // 17548\n      captured: keyOf({onTouchEndCapture: true})                                                                       // 17549\n    }                                                                                                                  // 17550\n  },                                                                                                                   // 17551\n  touchMove: {                                                                                                         // 17552\n    phasedRegistrationNames: {                                                                                         // 17553\n      bubbled: keyOf({onTouchMove: true}),                                                                             // 17554\n      captured: keyOf({onTouchMoveCapture: true})                                                                      // 17555\n    }                                                                                                                  // 17556\n  },                                                                                                                   // 17557\n  touchStart: {                                                                                                        // 17558\n    phasedRegistrationNames: {                                                                                         // 17559\n      bubbled: keyOf({onTouchStart: true}),                                                                            // 17560\n      captured: keyOf({onTouchStartCapture: true})                                                                     // 17561\n    }                                                                                                                  // 17562\n  },                                                                                                                   // 17563\n  wheel: {                                                                                                             // 17564\n    phasedRegistrationNames: {                                                                                         // 17565\n      bubbled: keyOf({onWheel: true}),                                                                                 // 17566\n      captured: keyOf({onWheelCapture: true})                                                                          // 17567\n    }                                                                                                                  // 17568\n  }                                                                                                                    // 17569\n};                                                                                                                     // 17570\n                                                                                                                       // 17571\nvar topLevelEventsToDispatchConfig = {                                                                                 // 17572\n  topBlur:        eventTypes.blur,                                                                                     // 17573\n  topClick:       eventTypes.click,                                                                                    // 17574\n  topContextMenu: eventTypes.contextMenu,                                                                              // 17575\n  topCopy:        eventTypes.copy,                                                                                     // 17576\n  topCut:         eventTypes.cut,                                                                                      // 17577\n  topDoubleClick: eventTypes.doubleClick,                                                                              // 17578\n  topDrag:        eventTypes.drag,                                                                                     // 17579\n  topDragEnd:     eventTypes.dragEnd,                                                                                  // 17580\n  topDragEnter:   eventTypes.dragEnter,                                                                                // 17581\n  topDragExit:    eventTypes.dragExit,                                                                                 // 17582\n  topDragLeave:   eventTypes.dragLeave,                                                                                // 17583\n  topDragOver:    eventTypes.dragOver,                                                                                 // 17584\n  topDragStart:   eventTypes.dragStart,                                                                                // 17585\n  topDrop:        eventTypes.drop,                                                                                     // 17586\n  topError:       eventTypes.error,                                                                                    // 17587\n  topFocus:       eventTypes.focus,                                                                                    // 17588\n  topInput:       eventTypes.input,                                                                                    // 17589\n  topKeyDown:     eventTypes.keyDown,                                                                                  // 17590\n  topKeyPress:    eventTypes.keyPress,                                                                                 // 17591\n  topKeyUp:       eventTypes.keyUp,                                                                                    // 17592\n  topLoad:        eventTypes.load,                                                                                     // 17593\n  topMouseDown:   eventTypes.mouseDown,                                                                                // 17594\n  topMouseMove:   eventTypes.mouseMove,                                                                                // 17595\n  topMouseOut:    eventTypes.mouseOut,                                                                                 // 17596\n  topMouseOver:   eventTypes.mouseOver,                                                                                // 17597\n  topMouseUp:     eventTypes.mouseUp,                                                                                  // 17598\n  topPaste:       eventTypes.paste,                                                                                    // 17599\n  topReset:       eventTypes.reset,                                                                                    // 17600\n  topScroll:      eventTypes.scroll,                                                                                   // 17601\n  topSubmit:      eventTypes.submit,                                                                                   // 17602\n  topTouchCancel: eventTypes.touchCancel,                                                                              // 17603\n  topTouchEnd:    eventTypes.touchEnd,                                                                                 // 17604\n  topTouchMove:   eventTypes.touchMove,                                                                                // 17605\n  topTouchStart:  eventTypes.touchStart,                                                                               // 17606\n  topWheel:       eventTypes.wheel                                                                                     // 17607\n};                                                                                                                     // 17608\n                                                                                                                       // 17609\nfor (var type in topLevelEventsToDispatchConfig) {                                                                     // 17610\n  topLevelEventsToDispatchConfig[type].dependencies = [type];                                                          // 17611\n}                                                                                                                      // 17612\n                                                                                                                       // 17613\nvar SimpleEventPlugin = {                                                                                              // 17614\n                                                                                                                       // 17615\n  eventTypes: eventTypes,                                                                                              // 17616\n                                                                                                                       // 17617\n  /**                                                                                                                  // 17618\n   * Same as the default implementation, except cancels the event when return                                          // 17619\n   * value is false. This behavior will be disabled in a future release.                                               // 17620\n   *                                                                                                                   // 17621\n   * @param {object} Event to be dispatched.                                                                           // 17622\n   * @param {function} Application-level callback.                                                                     // 17623\n   * @param {string} domID DOM ID to pass to the callback.                                                             // 17624\n   */                                                                                                                  // 17625\n  executeDispatch: function(event, listener, domID) {                                                                  // 17626\n    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);                                        // 17627\n                                                                                                                       // 17628\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 17629\n      typeof returnValue !== 'boolean',                                                                                // 17630\n      'Returning `false` from an event handler is deprecated and will be ' +                                           // 17631\n      'ignored in a future release. Instead, manually call ' +                                                         // 17632\n      'e.stopPropagation() or e.preventDefault(), as appropriate.'                                                     // 17633\n    ) : null);                                                                                                         // 17634\n                                                                                                                       // 17635\n    if (returnValue === false) {                                                                                       // 17636\n      event.stopPropagation();                                                                                         // 17637\n      event.preventDefault();                                                                                          // 17638\n    }                                                                                                                  // 17639\n  },                                                                                                                   // 17640\n                                                                                                                       // 17641\n  /**                                                                                                                  // 17642\n   * @param {string} topLevelType Record from `EventConstants`.                                                        // 17643\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.                                         // 17644\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.                                                          // 17645\n   * @param {object} nativeEvent Native browser event.                                                                 // 17646\n   * @return {*} An accumulation of synthetic events.                                                                  // 17647\n   * @see {EventPluginHub.extractEvents}                                                                               // 17648\n   */                                                                                                                  // 17649\n  extractEvents: function(                                                                                             // 17650\n      topLevelType,                                                                                                    // 17651\n      topLevelTarget,                                                                                                  // 17652\n      topLevelTargetID,                                                                                                // 17653\n      nativeEvent) {                                                                                                   // 17654\n    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];                                                 // 17655\n    if (!dispatchConfig) {                                                                                             // 17656\n      return null;                                                                                                     // 17657\n    }                                                                                                                  // 17658\n    var EventConstructor;                                                                                              // 17659\n    switch (topLevelType) {                                                                                            // 17660\n      case topLevelTypes.topInput:                                                                                     // 17661\n      case topLevelTypes.topLoad:                                                                                      // 17662\n      case topLevelTypes.topError:                                                                                     // 17663\n      case topLevelTypes.topReset:                                                                                     // 17664\n      case topLevelTypes.topSubmit:                                                                                    // 17665\n        // HTML Events                                                                                                 // 17666\n        // @see http://www.w3.org/TR/html5/index.html#events-0                                                         // 17667\n        EventConstructor = SyntheticEvent;                                                                             // 17668\n        break;                                                                                                         // 17669\n      case topLevelTypes.topKeyPress:                                                                                  // 17670\n        // FireFox creates a keypress event for function keys too. This removes                                        // 17671\n        // the unwanted keypress events. Enter is however both printable and                                           // 17672\n        // non-printable. One would expect Tab to be as well (but it isn't).                                           // 17673\n        if (getEventCharCode(nativeEvent) === 0) {                                                                     // 17674\n          return null;                                                                                                 // 17675\n        }                                                                                                              // 17676\n        /* falls through */                                                                                            // 17677\n      case topLevelTypes.topKeyDown:                                                                                   // 17678\n      case topLevelTypes.topKeyUp:                                                                                     // 17679\n        EventConstructor = SyntheticKeyboardEvent;                                                                     // 17680\n        break;                                                                                                         // 17681\n      case topLevelTypes.topBlur:                                                                                      // 17682\n      case topLevelTypes.topFocus:                                                                                     // 17683\n        EventConstructor = SyntheticFocusEvent;                                                                        // 17684\n        break;                                                                                                         // 17685\n      case topLevelTypes.topClick:                                                                                     // 17686\n        // Firefox creates a click event on right mouse clicks. This removes the                                       // 17687\n        // unwanted click events.                                                                                      // 17688\n        if (nativeEvent.button === 2) {                                                                                // 17689\n          return null;                                                                                                 // 17690\n        }                                                                                                              // 17691\n        /* falls through */                                                                                            // 17692\n      case topLevelTypes.topContextMenu:                                                                               // 17693\n      case topLevelTypes.topDoubleClick:                                                                               // 17694\n      case topLevelTypes.topMouseDown:                                                                                 // 17695\n      case topLevelTypes.topMouseMove:                                                                                 // 17696\n      case topLevelTypes.topMouseOut:                                                                                  // 17697\n      case topLevelTypes.topMouseOver:                                                                                 // 17698\n      case topLevelTypes.topMouseUp:                                                                                   // 17699\n        EventConstructor = SyntheticMouseEvent;                                                                        // 17700\n        break;                                                                                                         // 17701\n      case topLevelTypes.topDrag:                                                                                      // 17702\n      case topLevelTypes.topDragEnd:                                                                                   // 17703\n      case topLevelTypes.topDragEnter:                                                                                 // 17704\n      case topLevelTypes.topDragExit:                                                                                  // 17705\n      case topLevelTypes.topDragLeave:                                                                                 // 17706\n      case topLevelTypes.topDragOver:                                                                                  // 17707\n      case topLevelTypes.topDragStart:                                                                                 // 17708\n      case topLevelTypes.topDrop:                                                                                      // 17709\n        EventConstructor = SyntheticDragEvent;                                                                         // 17710\n        break;                                                                                                         // 17711\n      case topLevelTypes.topTouchCancel:                                                                               // 17712\n      case topLevelTypes.topTouchEnd:                                                                                  // 17713\n      case topLevelTypes.topTouchMove:                                                                                 // 17714\n      case topLevelTypes.topTouchStart:                                                                                // 17715\n        EventConstructor = SyntheticTouchEvent;                                                                        // 17716\n        break;                                                                                                         // 17717\n      case topLevelTypes.topScroll:                                                                                    // 17718\n        EventConstructor = SyntheticUIEvent;                                                                           // 17719\n        break;                                                                                                         // 17720\n      case topLevelTypes.topWheel:                                                                                     // 17721\n        EventConstructor = SyntheticWheelEvent;                                                                        // 17722\n        break;                                                                                                         // 17723\n      case topLevelTypes.topCopy:                                                                                      // 17724\n      case topLevelTypes.topCut:                                                                                       // 17725\n      case topLevelTypes.topPaste:                                                                                     // 17726\n        EventConstructor = SyntheticClipboardEvent;                                                                    // 17727\n        break;                                                                                                         // 17728\n    }                                                                                                                  // 17729\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 17730\n      EventConstructor,                                                                                                // 17731\n      'SimpleEventPlugin: Unhandled event type, `%s`.',                                                                // 17732\n      topLevelType                                                                                                     // 17733\n    ) : invariant(EventConstructor));                                                                                  // 17734\n    var event = EventConstructor.getPooled(                                                                            // 17735\n      dispatchConfig,                                                                                                  // 17736\n      topLevelTargetID,                                                                                                // 17737\n      nativeEvent                                                                                                      // 17738\n    );                                                                                                                 // 17739\n    EventPropagators.accumulateTwoPhaseDispatches(event);                                                              // 17740\n    return event;                                                                                                      // 17741\n  }                                                                                                                    // 17742\n                                                                                                                       // 17743\n};                                                                                                                     // 17744\n                                                                                                                       // 17745\nmodule.exports = SimpleEventPlugin;                                                                                    // 17746\n                                                                                                                       // 17747\n}).call(this,require('_process'))                                                                                      // 17748\n                                                                                                                       // 17749\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPluginUtils\":\"react/lib/EventPluginUtils\",\"./EventPropagators\":\"react/lib/EventPropagators\",\"./SyntheticClipboardEvent\":\"react/lib/SyntheticClipboardEvent\",\"./SyntheticDragEvent\":\"react/lib/SyntheticDragEvent\",\"./SyntheticEvent\":\"react/lib/SyntheticEvent\",\"./SyntheticFocusEvent\":\"react/lib/SyntheticFocusEvent\",\"./SyntheticKeyboardEvent\":\"react/lib/SyntheticKeyboardEvent\",\"./SyntheticMouseEvent\":\"react/lib/SyntheticMouseEvent\",\"./SyntheticTouchEvent\":\"react/lib/SyntheticTouchEvent\",\"./SyntheticUIEvent\":\"react/lib/SyntheticUIEvent\",\"./SyntheticWheelEvent\":\"react/lib/SyntheticWheelEvent\",\"./getEventCharCode\":\"react/lib/getEventCharCode\",\"./invariant\":\"react/lib/invariant\",\"./keyOf\":\"react/lib/keyOf\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/SyntheticClipboardEvent\":[function(require,module,exports){\n/**                                                                                                                    // 17751\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17752\n * All rights reserved.                                                                                                // 17753\n *                                                                                                                     // 17754\n * This source code is licensed under the BSD-style license found in the                                               // 17755\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 17756\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 17757\n *                                                                                                                     // 17758\n * @providesModule SyntheticClipboardEvent                                                                             // 17759\n * @typechecks static-only                                                                                             // 17760\n */                                                                                                                    // 17761\n                                                                                                                       // 17762\n'use strict';                                                                                                          // 17763\n                                                                                                                       // 17764\nvar SyntheticEvent = require(\"./SyntheticEvent\");                                                                      // 17765\n                                                                                                                       // 17766\n/**                                                                                                                    // 17767\n * @interface Event                                                                                                    // 17768\n * @see http://www.w3.org/TR/clipboard-apis/                                                                           // 17769\n */                                                                                                                    // 17770\nvar ClipboardEventInterface = {                                                                                        // 17771\n  clipboardData: function(event) {                                                                                     // 17772\n    return (                                                                                                           // 17773\n      'clipboardData' in event ?                                                                                       // 17774\n        event.clipboardData :                                                                                          // 17775\n        window.clipboardData                                                                                           // 17776\n    );                                                                                                                 // 17777\n  }                                                                                                                    // 17778\n};                                                                                                                     // 17779\n                                                                                                                       // 17780\n/**                                                                                                                    // 17781\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 17782\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 17783\n * @param {object} nativeEvent Native browser event.                                                                   // 17784\n * @extends {SyntheticUIEvent}                                                                                         // 17785\n */                                                                                                                    // 17786\nfunction SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                        // 17787\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 17788\n}                                                                                                                      // 17789\n                                                                                                                       // 17790\nSyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);                                         // 17791\n                                                                                                                       // 17792\nmodule.exports = SyntheticClipboardEvent;                                                                              // 17793\n                                                                                                                       // 17794\n},{\"./SyntheticEvent\":\"react/lib/SyntheticEvent\"}],\"react/lib/SyntheticCompositionEvent\":[function(require,module,exports){\n/**                                                                                                                    // 17796\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17797\n * All rights reserved.                                                                                                // 17798\n *                                                                                                                     // 17799\n * This source code is licensed under the BSD-style license found in the                                               // 17800\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 17801\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 17802\n *                                                                                                                     // 17803\n * @providesModule SyntheticCompositionEvent                                                                           // 17804\n * @typechecks static-only                                                                                             // 17805\n */                                                                                                                    // 17806\n                                                                                                                       // 17807\n'use strict';                                                                                                          // 17808\n                                                                                                                       // 17809\nvar SyntheticEvent = require(\"./SyntheticEvent\");                                                                      // 17810\n                                                                                                                       // 17811\n/**                                                                                                                    // 17812\n * @interface Event                                                                                                    // 17813\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents                                              // 17814\n */                                                                                                                    // 17815\nvar CompositionEventInterface = {                                                                                      // 17816\n  data: null                                                                                                           // 17817\n};                                                                                                                     // 17818\n                                                                                                                       // 17819\n/**                                                                                                                    // 17820\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 17821\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 17822\n * @param {object} nativeEvent Native browser event.                                                                   // 17823\n * @extends {SyntheticUIEvent}                                                                                         // 17824\n */                                                                                                                    // 17825\nfunction SyntheticCompositionEvent(                                                                                    // 17826\n  dispatchConfig,                                                                                                      // 17827\n  dispatchMarker,                                                                                                      // 17828\n  nativeEvent) {                                                                                                       // 17829\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 17830\n}                                                                                                                      // 17831\n                                                                                                                       // 17832\nSyntheticEvent.augmentClass(                                                                                           // 17833\n  SyntheticCompositionEvent,                                                                                           // 17834\n  CompositionEventInterface                                                                                            // 17835\n);                                                                                                                     // 17836\n                                                                                                                       // 17837\nmodule.exports = SyntheticCompositionEvent;                                                                            // 17838\n                                                                                                                       // 17839\n},{\"./SyntheticEvent\":\"react/lib/SyntheticEvent\"}],\"react/lib/SyntheticDragEvent\":[function(require,module,exports){   // 17840\n/**                                                                                                                    // 17841\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17842\n * All rights reserved.                                                                                                // 17843\n *                                                                                                                     // 17844\n * This source code is licensed under the BSD-style license found in the                                               // 17845\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 17846\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 17847\n *                                                                                                                     // 17848\n * @providesModule SyntheticDragEvent                                                                                  // 17849\n * @typechecks static-only                                                                                             // 17850\n */                                                                                                                    // 17851\n                                                                                                                       // 17852\n'use strict';                                                                                                          // 17853\n                                                                                                                       // 17854\nvar SyntheticMouseEvent = require(\"./SyntheticMouseEvent\");                                                            // 17855\n                                                                                                                       // 17856\n/**                                                                                                                    // 17857\n * @interface DragEvent                                                                                                // 17858\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 17859\n */                                                                                                                    // 17860\nvar DragEventInterface = {                                                                                             // 17861\n  dataTransfer: null                                                                                                   // 17862\n};                                                                                                                     // 17863\n                                                                                                                       // 17864\n/**                                                                                                                    // 17865\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 17866\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 17867\n * @param {object} nativeEvent Native browser event.                                                                   // 17868\n * @extends {SyntheticUIEvent}                                                                                         // 17869\n */                                                                                                                    // 17870\nfunction SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                             // 17871\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                         // 17872\n}                                                                                                                      // 17873\n                                                                                                                       // 17874\nSyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);                                              // 17875\n                                                                                                                       // 17876\nmodule.exports = SyntheticDragEvent;                                                                                   // 17877\n                                                                                                                       // 17878\n},{\"./SyntheticMouseEvent\":\"react/lib/SyntheticMouseEvent\"}],\"react/lib/SyntheticEvent\":[function(require,module,exports){\n/**                                                                                                                    // 17880\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 17881\n * All rights reserved.                                                                                                // 17882\n *                                                                                                                     // 17883\n * This source code is licensed under the BSD-style license found in the                                               // 17884\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 17885\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 17886\n *                                                                                                                     // 17887\n * @providesModule SyntheticEvent                                                                                      // 17888\n * @typechecks static-only                                                                                             // 17889\n */                                                                                                                    // 17890\n                                                                                                                       // 17891\n'use strict';                                                                                                          // 17892\n                                                                                                                       // 17893\nvar PooledClass = require(\"./PooledClass\");                                                                            // 17894\n                                                                                                                       // 17895\nvar assign = require(\"./Object.assign\");                                                                               // 17896\nvar emptyFunction = require(\"./emptyFunction\");                                                                        // 17897\nvar getEventTarget = require(\"./getEventTarget\");                                                                      // 17898\n                                                                                                                       // 17899\n/**                                                                                                                    // 17900\n * @interface Event                                                                                                    // 17901\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 17902\n */                                                                                                                    // 17903\nvar EventInterface = {                                                                                                 // 17904\n  type: null,                                                                                                          // 17905\n  target: getEventTarget,                                                                                              // 17906\n  // currentTarget is set when dispatching; no use in copying it here                                                  // 17907\n  currentTarget: emptyFunction.thatReturnsNull,                                                                        // 17908\n  eventPhase: null,                                                                                                    // 17909\n  bubbles: null,                                                                                                       // 17910\n  cancelable: null,                                                                                                    // 17911\n  timeStamp: function(event) {                                                                                         // 17912\n    return event.timeStamp || Date.now();                                                                              // 17913\n  },                                                                                                                   // 17914\n  defaultPrevented: null,                                                                                              // 17915\n  isTrusted: null                                                                                                      // 17916\n};                                                                                                                     // 17917\n                                                                                                                       // 17918\n/**                                                                                                                    // 17919\n * Synthetic events are dispatched by event plugins, typically in response to a                                        // 17920\n * top-level event delegation handler.                                                                                 // 17921\n *                                                                                                                     // 17922\n * These systems should generally use pooling to reduce the frequency of garbage                                       // 17923\n * collection. The system should check `isPersistent` to determine whether the                                         // 17924\n * event should be released into the pool after being dispatched. Users that                                           // 17925\n * need a persisted event should invoke `persist`.                                                                     // 17926\n *                                                                                                                     // 17927\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by                                           // 17928\n * normalizing browser quirks. Subclasses do not necessarily have to implement a                                       // 17929\n * DOM interface; custom application-specific events can also subclass this.                                           // 17930\n *                                                                                                                     // 17931\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 17932\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 17933\n * @param {object} nativeEvent Native browser event.                                                                   // 17934\n */                                                                                                                    // 17935\nfunction SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                                 // 17936\n  this.dispatchConfig = dispatchConfig;                                                                                // 17937\n  this.dispatchMarker = dispatchMarker;                                                                                // 17938\n  this.nativeEvent = nativeEvent;                                                                                      // 17939\n                                                                                                                       // 17940\n  var Interface = this.constructor.Interface;                                                                          // 17941\n  for (var propName in Interface) {                                                                                    // 17942\n    if (!Interface.hasOwnProperty(propName)) {                                                                         // 17943\n      continue;                                                                                                        // 17944\n    }                                                                                                                  // 17945\n    var normalize = Interface[propName];                                                                               // 17946\n    if (normalize) {                                                                                                   // 17947\n      this[propName] = normalize(nativeEvent);                                                                         // 17948\n    } else {                                                                                                           // 17949\n      this[propName] = nativeEvent[propName];                                                                          // 17950\n    }                                                                                                                  // 17951\n  }                                                                                                                    // 17952\n                                                                                                                       // 17953\n  var defaultPrevented = nativeEvent.defaultPrevented != null ?                                                        // 17954\n    nativeEvent.defaultPrevented :                                                                                     // 17955\n    nativeEvent.returnValue === false;                                                                                 // 17956\n  if (defaultPrevented) {                                                                                              // 17957\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 17958\n  } else {                                                                                                             // 17959\n    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;                                                          // 17960\n  }                                                                                                                    // 17961\n  this.isPropagationStopped = emptyFunction.thatReturnsFalse;                                                          // 17962\n}                                                                                                                      // 17963\n                                                                                                                       // 17964\nassign(SyntheticEvent.prototype, {                                                                                     // 17965\n                                                                                                                       // 17966\n  preventDefault: function() {                                                                                         // 17967\n    this.defaultPrevented = true;                                                                                      // 17968\n    var event = this.nativeEvent;                                                                                      // 17969\n    if (event.preventDefault) {                                                                                        // 17970\n      event.preventDefault();                                                                                          // 17971\n    } else {                                                                                                           // 17972\n      event.returnValue = false;                                                                                       // 17973\n    }                                                                                                                  // 17974\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;                                                           // 17975\n  },                                                                                                                   // 17976\n                                                                                                                       // 17977\n  stopPropagation: function() {                                                                                        // 17978\n    var event = this.nativeEvent;                                                                                      // 17979\n    if (event.stopPropagation) {                                                                                       // 17980\n      event.stopPropagation();                                                                                         // 17981\n    } else {                                                                                                           // 17982\n      event.cancelBubble = true;                                                                                       // 17983\n    }                                                                                                                  // 17984\n    this.isPropagationStopped = emptyFunction.thatReturnsTrue;                                                         // 17985\n  },                                                                                                                   // 17986\n                                                                                                                       // 17987\n  /**                                                                                                                  // 17988\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding                                         // 17989\n   * them back into the pool. This allows a way to hold onto a reference that                                          // 17990\n   * won't be added back into the pool.                                                                                // 17991\n   */                                                                                                                  // 17992\n  persist: function() {                                                                                                // 17993\n    this.isPersistent = emptyFunction.thatReturnsTrue;                                                                 // 17994\n  },                                                                                                                   // 17995\n                                                                                                                       // 17996\n  /**                                                                                                                  // 17997\n   * Checks if this event should be released back into the pool.                                                       // 17998\n   *                                                                                                                   // 17999\n   * @return {boolean} True if this should not be released, false otherwise.                                           // 18000\n   */                                                                                                                  // 18001\n  isPersistent: emptyFunction.thatReturnsFalse,                                                                        // 18002\n                                                                                                                       // 18003\n  /**                                                                                                                  // 18004\n   * `PooledClass` looks for `destructor` on each instance it releases.                                                // 18005\n   */                                                                                                                  // 18006\n  destructor: function() {                                                                                             // 18007\n    var Interface = this.constructor.Interface;                                                                        // 18008\n    for (var propName in Interface) {                                                                                  // 18009\n      this[propName] = null;                                                                                           // 18010\n    }                                                                                                                  // 18011\n    this.dispatchConfig = null;                                                                                        // 18012\n    this.dispatchMarker = null;                                                                                        // 18013\n    this.nativeEvent = null;                                                                                           // 18014\n  }                                                                                                                    // 18015\n                                                                                                                       // 18016\n});                                                                                                                    // 18017\n                                                                                                                       // 18018\nSyntheticEvent.Interface = EventInterface;                                                                             // 18019\n                                                                                                                       // 18020\n/**                                                                                                                    // 18021\n * Helper to reduce boilerplate when creating subclasses.                                                              // 18022\n *                                                                                                                     // 18023\n * @param {function} Class                                                                                             // 18024\n * @param {?object} Interface                                                                                          // 18025\n */                                                                                                                    // 18026\nSyntheticEvent.augmentClass = function(Class, Interface) {                                                             // 18027\n  var Super = this;                                                                                                    // 18028\n                                                                                                                       // 18029\n  var prototype = Object_create(Super.prototype);                                                                      // 18030\n  assign(prototype, Class.prototype);                                                                                  // 18031\n  Class.prototype = prototype;                                                                                         // 18032\n  Class.prototype.constructor = Class;                                                                                 // 18033\n                                                                                                                       // 18034\n  Class.Interface = assign({}, Super.Interface, Interface);                                                            // 18035\n  Class.augmentClass = Super.augmentClass;                                                                             // 18036\n                                                                                                                       // 18037\n  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);                                                    // 18038\n};                                                                                                                     // 18039\n                                                                                                                       // 18040\nPooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);                                             // 18041\n                                                                                                                       // 18042\nmodule.exports = SyntheticEvent;                                                                                       // 18043\n                                                                                                                       // 18044\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./emptyFunction\":\"react/lib/emptyFunction\",\"./getEventTarget\":\"react/lib/getEventTarget\"}],\"react/lib/SyntheticFocusEvent\":[function(require,module,exports){\n/**                                                                                                                    // 18046\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18047\n * All rights reserved.                                                                                                // 18048\n *                                                                                                                     // 18049\n * This source code is licensed under the BSD-style license found in the                                               // 18050\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18051\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18052\n *                                                                                                                     // 18053\n * @providesModule SyntheticFocusEvent                                                                                 // 18054\n * @typechecks static-only                                                                                             // 18055\n */                                                                                                                    // 18056\n                                                                                                                       // 18057\n'use strict';                                                                                                          // 18058\n                                                                                                                       // 18059\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");                                                                  // 18060\n                                                                                                                       // 18061\n/**                                                                                                                    // 18062\n * @interface FocusEvent                                                                                               // 18063\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 18064\n */                                                                                                                    // 18065\nvar FocusEventInterface = {                                                                                            // 18066\n  relatedTarget: null                                                                                                  // 18067\n};                                                                                                                     // 18068\n                                                                                                                       // 18069\n/**                                                                                                                    // 18070\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18071\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18072\n * @param {object} nativeEvent Native browser event.                                                                   // 18073\n * @extends {SyntheticUIEvent}                                                                                         // 18074\n */                                                                                                                    // 18075\nfunction SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 18076\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 18077\n}                                                                                                                      // 18078\n                                                                                                                       // 18079\nSyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);                                               // 18080\n                                                                                                                       // 18081\nmodule.exports = SyntheticFocusEvent;                                                                                  // 18082\n                                                                                                                       // 18083\n},{\"./SyntheticUIEvent\":\"react/lib/SyntheticUIEvent\"}],\"react/lib/SyntheticInputEvent\":[function(require,module,exports){\n/**                                                                                                                    // 18085\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18086\n * All rights reserved.                                                                                                // 18087\n *                                                                                                                     // 18088\n * This source code is licensed under the BSD-style license found in the                                               // 18089\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18090\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18091\n *                                                                                                                     // 18092\n * @providesModule SyntheticInputEvent                                                                                 // 18093\n * @typechecks static-only                                                                                             // 18094\n */                                                                                                                    // 18095\n                                                                                                                       // 18096\n'use strict';                                                                                                          // 18097\n                                                                                                                       // 18098\nvar SyntheticEvent = require(\"./SyntheticEvent\");                                                                      // 18099\n                                                                                                                       // 18100\n/**                                                                                                                    // 18101\n * @interface Event                                                                                                    // 18102\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105                                                       // 18103\n *      /#events-inputevents                                                                                           // 18104\n */                                                                                                                    // 18105\nvar InputEventInterface = {                                                                                            // 18106\n  data: null                                                                                                           // 18107\n};                                                                                                                     // 18108\n                                                                                                                       // 18109\n/**                                                                                                                    // 18110\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18111\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18112\n * @param {object} nativeEvent Native browser event.                                                                   // 18113\n * @extends {SyntheticUIEvent}                                                                                         // 18114\n */                                                                                                                    // 18115\nfunction SyntheticInputEvent(                                                                                          // 18116\n  dispatchConfig,                                                                                                      // 18117\n  dispatchMarker,                                                                                                      // 18118\n  nativeEvent) {                                                                                                       // 18119\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 18120\n}                                                                                                                      // 18121\n                                                                                                                       // 18122\nSyntheticEvent.augmentClass(                                                                                           // 18123\n  SyntheticInputEvent,                                                                                                 // 18124\n  InputEventInterface                                                                                                  // 18125\n);                                                                                                                     // 18126\n                                                                                                                       // 18127\nmodule.exports = SyntheticInputEvent;                                                                                  // 18128\n                                                                                                                       // 18129\n},{\"./SyntheticEvent\":\"react/lib/SyntheticEvent\"}],\"react/lib/SyntheticKeyboardEvent\":[function(require,module,exports){\n/**                                                                                                                    // 18131\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18132\n * All rights reserved.                                                                                                // 18133\n *                                                                                                                     // 18134\n * This source code is licensed under the BSD-style license found in the                                               // 18135\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18136\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18137\n *                                                                                                                     // 18138\n * @providesModule SyntheticKeyboardEvent                                                                              // 18139\n * @typechecks static-only                                                                                             // 18140\n */                                                                                                                    // 18141\n                                                                                                                       // 18142\n'use strict';                                                                                                          // 18143\n                                                                                                                       // 18144\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");                                                                  // 18145\n                                                                                                                       // 18146\nvar getEventCharCode = require(\"./getEventCharCode\");                                                                  // 18147\nvar getEventKey = require(\"./getEventKey\");                                                                            // 18148\nvar getEventModifierState = require(\"./getEventModifierState\");                                                        // 18149\n                                                                                                                       // 18150\n/**                                                                                                                    // 18151\n * @interface KeyboardEvent                                                                                            // 18152\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 18153\n */                                                                                                                    // 18154\nvar KeyboardEventInterface = {                                                                                         // 18155\n  key: getEventKey,                                                                                                    // 18156\n  location: null,                                                                                                      // 18157\n  ctrlKey: null,                                                                                                       // 18158\n  shiftKey: null,                                                                                                      // 18159\n  altKey: null,                                                                                                        // 18160\n  metaKey: null,                                                                                                       // 18161\n  repeat: null,                                                                                                        // 18162\n  locale: null,                                                                                                        // 18163\n  getModifierState: getEventModifierState,                                                                             // 18164\n  // Legacy Interface                                                                                                  // 18165\n  charCode: function(event) {                                                                                          // 18166\n    // `charCode` is the result of a KeyPress event and represents the value of                                        // 18167\n    // the actual printable character.                                                                                 // 18168\n                                                                                                                       // 18169\n    // KeyPress is deprecated, but its replacement is not yet final and not                                            // 18170\n    // implemented in any major browser. Only KeyPress has charCode.                                                   // 18171\n    if (event.type === 'keypress') {                                                                                   // 18172\n      return getEventCharCode(event);                                                                                  // 18173\n    }                                                                                                                  // 18174\n    return 0;                                                                                                          // 18175\n  },                                                                                                                   // 18176\n  keyCode: function(event) {                                                                                           // 18177\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of                                       // 18178\n    // physical keyboard key.                                                                                          // 18179\n                                                                                                                       // 18180\n    // The actual meaning of the value depends on the users' keyboard layout                                           // 18181\n    // which cannot be detected. Assuming that it is a US keyboard layout                                              // 18182\n    // provides a surprisingly accurate mapping for US and European users.                                             // 18183\n    // Due to this, it is left to the user to implement at this time.                                                  // 18184\n    if (event.type === 'keydown' || event.type === 'keyup') {                                                          // 18185\n      return event.keyCode;                                                                                            // 18186\n    }                                                                                                                  // 18187\n    return 0;                                                                                                          // 18188\n  },                                                                                                                   // 18189\n  which: function(event) {                                                                                             // 18190\n    // `which` is an alias for either `keyCode` or `charCode` depending on the                                         // 18191\n    // type of the event.                                                                                              // 18192\n    if (event.type === 'keypress') {                                                                                   // 18193\n      return getEventCharCode(event);                                                                                  // 18194\n    }                                                                                                                  // 18195\n    if (event.type === 'keydown' || event.type === 'keyup') {                                                          // 18196\n      return event.keyCode;                                                                                            // 18197\n    }                                                                                                                  // 18198\n    return 0;                                                                                                          // 18199\n  }                                                                                                                    // 18200\n};                                                                                                                     // 18201\n                                                                                                                       // 18202\n/**                                                                                                                    // 18203\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18204\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18205\n * @param {object} nativeEvent Native browser event.                                                                   // 18206\n * @extends {SyntheticUIEvent}                                                                                         // 18207\n */                                                                                                                    // 18208\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                         // 18209\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 18210\n}                                                                                                                      // 18211\n                                                                                                                       // 18212\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);                                         // 18213\n                                                                                                                       // 18214\nmodule.exports = SyntheticKeyboardEvent;                                                                               // 18215\n                                                                                                                       // 18216\n},{\"./SyntheticUIEvent\":\"react/lib/SyntheticUIEvent\",\"./getEventCharCode\":\"react/lib/getEventCharCode\",\"./getEventKey\":\"react/lib/getEventKey\",\"./getEventModifierState\":\"react/lib/getEventModifierState\"}],\"react/lib/SyntheticMouseEvent\":[function(require,module,exports){\n/**                                                                                                                    // 18218\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18219\n * All rights reserved.                                                                                                // 18220\n *                                                                                                                     // 18221\n * This source code is licensed under the BSD-style license found in the                                               // 18222\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18223\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18224\n *                                                                                                                     // 18225\n * @providesModule SyntheticMouseEvent                                                                                 // 18226\n * @typechecks static-only                                                                                             // 18227\n */                                                                                                                    // 18228\n                                                                                                                       // 18229\n'use strict';                                                                                                          // 18230\n                                                                                                                       // 18231\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");                                                                  // 18232\nvar ViewportMetrics = require(\"./ViewportMetrics\");                                                                    // 18233\n                                                                                                                       // 18234\nvar getEventModifierState = require(\"./getEventModifierState\");                                                        // 18235\n                                                                                                                       // 18236\n/**                                                                                                                    // 18237\n * @interface MouseEvent                                                                                               // 18238\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 18239\n */                                                                                                                    // 18240\nvar MouseEventInterface = {                                                                                            // 18241\n  screenX: null,                                                                                                       // 18242\n  screenY: null,                                                                                                       // 18243\n  clientX: null,                                                                                                       // 18244\n  clientY: null,                                                                                                       // 18245\n  ctrlKey: null,                                                                                                       // 18246\n  shiftKey: null,                                                                                                      // 18247\n  altKey: null,                                                                                                        // 18248\n  metaKey: null,                                                                                                       // 18249\n  getModifierState: getEventModifierState,                                                                             // 18250\n  button: function(event) {                                                                                            // 18251\n    // Webkit, Firefox, IE9+                                                                                           // 18252\n    // which:  1 2 3                                                                                                   // 18253\n    // button: 0 1 2 (standard)                                                                                        // 18254\n    var button = event.button;                                                                                         // 18255\n    if ('which' in event) {                                                                                            // 18256\n      return button;                                                                                                   // 18257\n    }                                                                                                                  // 18258\n    // IE<9                                                                                                            // 18259\n    // which:  undefined                                                                                               // 18260\n    // button: 0 0 0                                                                                                   // 18261\n    // button: 1 4 2 (onmouseup)                                                                                       // 18262\n    return button === 2 ? 2 : button === 4 ? 1 : 0;                                                                    // 18263\n  },                                                                                                                   // 18264\n  buttons: null,                                                                                                       // 18265\n  relatedTarget: function(event) {                                                                                     // 18266\n    return event.relatedTarget || (                                                                                    // 18267\n      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))                                 // 18268\n    );                                                                                                                 // 18269\n  },                                                                                                                   // 18270\n  // \"Proprietary\" Interface.                                                                                          // 18271\n  pageX: function(event) {                                                                                             // 18272\n    return 'pageX' in event ?                                                                                          // 18273\n      event.pageX :                                                                                                    // 18274\n      event.clientX + ViewportMetrics.currentScrollLeft;                                                               // 18275\n  },                                                                                                                   // 18276\n  pageY: function(event) {                                                                                             // 18277\n    return 'pageY' in event ?                                                                                          // 18278\n      event.pageY :                                                                                                    // 18279\n      event.clientY + ViewportMetrics.currentScrollTop;                                                                // 18280\n  }                                                                                                                    // 18281\n};                                                                                                                     // 18282\n                                                                                                                       // 18283\n/**                                                                                                                    // 18284\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18285\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18286\n * @param {object} nativeEvent Native browser event.                                                                   // 18287\n * @extends {SyntheticUIEvent}                                                                                         // 18288\n */                                                                                                                    // 18289\nfunction SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 18290\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 18291\n}                                                                                                                      // 18292\n                                                                                                                       // 18293\nSyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);                                               // 18294\n                                                                                                                       // 18295\nmodule.exports = SyntheticMouseEvent;                                                                                  // 18296\n                                                                                                                       // 18297\n},{\"./SyntheticUIEvent\":\"react/lib/SyntheticUIEvent\",\"./ViewportMetrics\":\"react/lib/ViewportMetrics\",\"./getEventModifierState\":\"react/lib/getEventModifierState\"}],\"react/lib/SyntheticTouchEvent\":[function(require,module,exports){\n/**                                                                                                                    // 18299\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18300\n * All rights reserved.                                                                                                // 18301\n *                                                                                                                     // 18302\n * This source code is licensed under the BSD-style license found in the                                               // 18303\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18304\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18305\n *                                                                                                                     // 18306\n * @providesModule SyntheticTouchEvent                                                                                 // 18307\n * @typechecks static-only                                                                                             // 18308\n */                                                                                                                    // 18309\n                                                                                                                       // 18310\n'use strict';                                                                                                          // 18311\n                                                                                                                       // 18312\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");                                                                  // 18313\n                                                                                                                       // 18314\nvar getEventModifierState = require(\"./getEventModifierState\");                                                        // 18315\n                                                                                                                       // 18316\n/**                                                                                                                    // 18317\n * @interface TouchEvent                                                                                               // 18318\n * @see http://www.w3.org/TR/touch-events/                                                                             // 18319\n */                                                                                                                    // 18320\nvar TouchEventInterface = {                                                                                            // 18321\n  touches: null,                                                                                                       // 18322\n  targetTouches: null,                                                                                                 // 18323\n  changedTouches: null,                                                                                                // 18324\n  altKey: null,                                                                                                        // 18325\n  metaKey: null,                                                                                                       // 18326\n  ctrlKey: null,                                                                                                       // 18327\n  shiftKey: null,                                                                                                      // 18328\n  getModifierState: getEventModifierState                                                                              // 18329\n};                                                                                                                     // 18330\n                                                                                                                       // 18331\n/**                                                                                                                    // 18332\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18333\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18334\n * @param {object} nativeEvent Native browser event.                                                                   // 18335\n * @extends {SyntheticUIEvent}                                                                                         // 18336\n */                                                                                                                    // 18337\nfunction SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 18338\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                            // 18339\n}                                                                                                                      // 18340\n                                                                                                                       // 18341\nSyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);                                               // 18342\n                                                                                                                       // 18343\nmodule.exports = SyntheticTouchEvent;                                                                                  // 18344\n                                                                                                                       // 18345\n},{\"./SyntheticUIEvent\":\"react/lib/SyntheticUIEvent\",\"./getEventModifierState\":\"react/lib/getEventModifierState\"}],\"react/lib/SyntheticUIEvent\":[function(require,module,exports){\n/**                                                                                                                    // 18347\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18348\n * All rights reserved.                                                                                                // 18349\n *                                                                                                                     // 18350\n * This source code is licensed under the BSD-style license found in the                                               // 18351\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18352\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18353\n *                                                                                                                     // 18354\n * @providesModule SyntheticUIEvent                                                                                    // 18355\n * @typechecks static-only                                                                                             // 18356\n */                                                                                                                    // 18357\n                                                                                                                       // 18358\n'use strict';                                                                                                          // 18359\n                                                                                                                       // 18360\nvar SyntheticEvent = require(\"./SyntheticEvent\");                                                                      // 18361\n                                                                                                                       // 18362\nvar getEventTarget = require(\"./getEventTarget\");                                                                      // 18363\n                                                                                                                       // 18364\n/**                                                                                                                    // 18365\n * @interface UIEvent                                                                                                  // 18366\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 18367\n */                                                                                                                    // 18368\nvar UIEventInterface = {                                                                                               // 18369\n  view: function(event) {                                                                                              // 18370\n    if (event.view) {                                                                                                  // 18371\n      return event.view;                                                                                               // 18372\n    }                                                                                                                  // 18373\n                                                                                                                       // 18374\n    var target = getEventTarget(event);                                                                                // 18375\n    if (target != null && target.window === target) {                                                                  // 18376\n      // target is a window object                                                                                     // 18377\n      return target;                                                                                                   // 18378\n    }                                                                                                                  // 18379\n                                                                                                                       // 18380\n    var doc = target.ownerDocument;                                                                                    // 18381\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.                                             // 18382\n    if (doc) {                                                                                                         // 18383\n      return doc.defaultView || doc.parentWindow;                                                                      // 18384\n    } else {                                                                                                           // 18385\n      return window;                                                                                                   // 18386\n    }                                                                                                                  // 18387\n  },                                                                                                                   // 18388\n  detail: function(event) {                                                                                            // 18389\n    return event.detail || 0;                                                                                          // 18390\n  }                                                                                                                    // 18391\n};                                                                                                                     // 18392\n                                                                                                                       // 18393\n/**                                                                                                                    // 18394\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18395\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18396\n * @param {object} nativeEvent Native browser event.                                                                   // 18397\n * @extends {SyntheticEvent}                                                                                           // 18398\n */                                                                                                                    // 18399\nfunction SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                               // 18400\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                              // 18401\n}                                                                                                                      // 18402\n                                                                                                                       // 18403\nSyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);                                                       // 18404\n                                                                                                                       // 18405\nmodule.exports = SyntheticUIEvent;                                                                                     // 18406\n                                                                                                                       // 18407\n},{\"./SyntheticEvent\":\"react/lib/SyntheticEvent\",\"./getEventTarget\":\"react/lib/getEventTarget\"}],\"react/lib/SyntheticWheelEvent\":[function(require,module,exports){\n/**                                                                                                                    // 18409\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18410\n * All rights reserved.                                                                                                // 18411\n *                                                                                                                     // 18412\n * This source code is licensed under the BSD-style license found in the                                               // 18413\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18414\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18415\n *                                                                                                                     // 18416\n * @providesModule SyntheticWheelEvent                                                                                 // 18417\n * @typechecks static-only                                                                                             // 18418\n */                                                                                                                    // 18419\n                                                                                                                       // 18420\n'use strict';                                                                                                          // 18421\n                                                                                                                       // 18422\nvar SyntheticMouseEvent = require(\"./SyntheticMouseEvent\");                                                            // 18423\n                                                                                                                       // 18424\n/**                                                                                                                    // 18425\n * @interface WheelEvent                                                                                               // 18426\n * @see http://www.w3.org/TR/DOM-Level-3-Events/                                                                       // 18427\n */                                                                                                                    // 18428\nvar WheelEventInterface = {                                                                                            // 18429\n  deltaX: function(event) {                                                                                            // 18430\n    return (                                                                                                           // 18431\n      'deltaX' in event ? event.deltaX :                                                                               // 18432\n      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).                                       // 18433\n      'wheelDeltaX' in event ? -event.wheelDeltaX : 0                                                                  // 18434\n    );                                                                                                                 // 18435\n  },                                                                                                                   // 18436\n  deltaY: function(event) {                                                                                            // 18437\n    return (                                                                                                           // 18438\n      'deltaY' in event ? event.deltaY :                                                                               // 18439\n      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).                                        // 18440\n      'wheelDeltaY' in event ? -event.wheelDeltaY :                                                                    // 18441\n      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).                                           // 18442\n      'wheelDelta' in event ? -event.wheelDelta : 0                                                                    // 18443\n    );                                                                                                                 // 18444\n  },                                                                                                                   // 18445\n  deltaZ: null,                                                                                                        // 18446\n                                                                                                                       // 18447\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one                                            // 18448\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.                                              // 18449\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or                                              // 18450\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.                                                // 18451\n  deltaMode: null                                                                                                      // 18452\n};                                                                                                                     // 18453\n                                                                                                                       // 18454\n/**                                                                                                                    // 18455\n * @param {object} dispatchConfig Configuration used to dispatch this event.                                           // 18456\n * @param {string} dispatchMarker Marker identifying the event target.                                                 // 18457\n * @param {object} nativeEvent Native browser event.                                                                   // 18458\n * @extends {SyntheticMouseEvent}                                                                                      // 18459\n */                                                                                                                    // 18460\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {                                            // 18461\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);                                         // 18462\n}                                                                                                                      // 18463\n                                                                                                                       // 18464\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);                                            // 18465\n                                                                                                                       // 18466\nmodule.exports = SyntheticWheelEvent;                                                                                  // 18467\n                                                                                                                       // 18468\n},{\"./SyntheticMouseEvent\":\"react/lib/SyntheticMouseEvent\"}],\"react/lib/Transaction\":[function(require,module,exports){\n(function (process){                                                                                                   // 18470\n/**                                                                                                                    // 18471\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18472\n * All rights reserved.                                                                                                // 18473\n *                                                                                                                     // 18474\n * This source code is licensed under the BSD-style license found in the                                               // 18475\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18476\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18477\n *                                                                                                                     // 18478\n * @providesModule Transaction                                                                                         // 18479\n */                                                                                                                    // 18480\n                                                                                                                       // 18481\n'use strict';                                                                                                          // 18482\n                                                                                                                       // 18483\nvar invariant = require(\"./invariant\");                                                                                // 18484\n                                                                                                                       // 18485\n/**                                                                                                                    // 18486\n * `Transaction` creates a black box that is able to wrap any method such that                                         // 18487\n * certain invariants are maintained before and after the method is invoked                                            // 18488\n * (Even if an exception is thrown while invoking the wrapped method). Whoever                                         // 18489\n * instantiates a transaction can provide enforcers of the invariants at                                               // 18490\n * creation time. The `Transaction` class itself will supply one additional                                            // 18491\n * automatic invariant for you - the invariant that any transaction instance                                           // 18492\n * should not be run while it is already being run. You would typically create a                                       // 18493\n * single instance of a `Transaction` for reuse multiple times, that potentially                                       // 18494\n * is used to wrap several different methods. Wrappers are extremely simple -                                          // 18495\n * they only require implementing two methods.                                                                         // 18496\n *                                                                                                                     // 18497\n * <pre>                                                                                                               // 18498\n *                       wrappers (injected at creation time)                                                          // 18499\n *                                      +        +                                                                     // 18500\n *                                      |        |                                                                     // 18501\n *                    +-----------------|--------|--------------+                                                      // 18502\n *                    |                 v        |              |                                                      // 18503\n *                    |      +---------------+   |              |                                                      // 18504\n *                    |   +--|    wrapper1   |---|----+         |                                                      // 18505\n *                    |   |  +---------------+   v    |         |                                                      // 18506\n *                    |   |          +-------------+  |         |                                                      // 18507\n *                    |   |     +----|   wrapper2  |--------+   |                                                      // 18508\n *                    |   |     |    +-------------+  |     |   |                                                      // 18509\n *                    |   |     |                     |     |   |                                                      // 18510\n *                    |   v     v                     v     v   | wrapper                                              // 18511\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants                                           // 18512\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained                                           // 18513\n * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->                                             // 18514\n *                    | |   | |   |   |         |   |   | |   | |                                                      // 18515\n *                    | |   | |   |   |         |   |   | |   | |                                                      // 18516\n *                    | |   | |   |   |         |   |   | |   | |                                                      // 18517\n *                    | +---+ +---+   +---------+   +---+ +---+ |                                                      // 18518\n *                    |  initialize                    close    |                                                      // 18519\n *                    +-----------------------------------------+                                                      // 18520\n * </pre>                                                                                                              // 18521\n *                                                                                                                     // 18522\n * Use cases:                                                                                                          // 18523\n * - Preserving the input selection ranges before/after reconciliation.                                                // 18524\n *   Restoring selection even in the event of an unexpected error.                                                     // 18525\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,                                          // 18526\n *   while guaranteeing that afterwards, the event system is reactivated.                                              // 18527\n * - Flushing a queue of collected DOM mutations to the main UI thread after a                                         // 18528\n *   reconciliation takes place in a worker thread.                                                                    // 18529\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new                                         // 18530\n *   content.                                                                                                          // 18531\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue                                         // 18532\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).                                                      // 18533\n * - (Future use case): Layout calculations before and after DOM updates.                                              // 18534\n *                                                                                                                     // 18535\n * Transactional plugin API:                                                                                           // 18536\n * - A module that has an `initialize` method that returns any precomputation.                                         // 18537\n * - and a `close` method that accepts the precomputation. `close` is invoked                                          // 18538\n *   when the wrapped process is completed, or has failed.                                                             // 18539\n *                                                                                                                     // 18540\n * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules                                             // 18541\n * that implement `initialize` and `close`.                                                                            // 18542\n * @return {Transaction} Single transaction for reuse in thread.                                                       // 18543\n *                                                                                                                     // 18544\n * @class Transaction                                                                                                  // 18545\n */                                                                                                                    // 18546\nvar Mixin = {                                                                                                          // 18547\n  /**                                                                                                                  // 18548\n   * Sets up this instance so that it is prepared for collecting metrics. Does                                         // 18549\n   * so such that this setup method may be used on an instance that is already                                         // 18550\n   * initialized, in a way that does not consume additional memory upon reuse.                                         // 18551\n   * That can be useful if you decide to make your subclass of this mixin a                                            // 18552\n   * \"PooledClass\".                                                                                                    // 18553\n   */                                                                                                                  // 18554\n  reinitializeTransaction: function() {                                                                                // 18555\n    this.transactionWrappers = this.getTransactionWrappers();                                                          // 18556\n    if (!this.wrapperInitData) {                                                                                       // 18557\n      this.wrapperInitData = [];                                                                                       // 18558\n    } else {                                                                                                           // 18559\n      this.wrapperInitData.length = 0;                                                                                 // 18560\n    }                                                                                                                  // 18561\n    this._isInTransaction = false;                                                                                     // 18562\n  },                                                                                                                   // 18563\n                                                                                                                       // 18564\n  _isInTransaction: false,                                                                                             // 18565\n                                                                                                                       // 18566\n  /**                                                                                                                  // 18567\n   * @abstract                                                                                                         // 18568\n   * @return {Array<TransactionWrapper>} Array of transaction wrappers.                                                // 18569\n   */                                                                                                                  // 18570\n  getTransactionWrappers: null,                                                                                        // 18571\n                                                                                                                       // 18572\n  isInTransaction: function() {                                                                                        // 18573\n    return !!this._isInTransaction;                                                                                    // 18574\n  },                                                                                                                   // 18575\n                                                                                                                       // 18576\n  /**                                                                                                                  // 18577\n   * Executes the function within a safety window. Use this for the top level                                          // 18578\n   * methods that result in large amounts of computation/mutations that would                                          // 18579\n   * need to be safety checked.                                                                                        // 18580\n   *                                                                                                                   // 18581\n   * @param {function} method Member of scope to call.                                                                 // 18582\n   * @param {Object} scope Scope to invoke from.                                                                       // 18583\n   * @param {Object?=} args... Arguments to pass to the method (optional).                                             // 18584\n   *                           Helps prevent need to bind in many cases.                                               // 18585\n   * @return Return value from `method`.                                                                               // 18586\n   */                                                                                                                  // 18587\n  perform: function(method, scope, a, b, c, d, e, f) {                                                                 // 18588\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 18589\n      !this.isInTransaction(),                                                                                         // 18590\n      'Transaction.perform(...): Cannot initialize a transaction when there ' +                                        // 18591\n      'is already an outstanding transaction.'                                                                         // 18592\n    ) : invariant(!this.isInTransaction()));                                                                           // 18593\n    var errorThrown;                                                                                                   // 18594\n    var ret;                                                                                                           // 18595\n    try {                                                                                                              // 18596\n      this._isInTransaction = true;                                                                                    // 18597\n      // Catching errors makes debugging more difficult, so we start with                                              // 18598\n      // errorThrown set to true before setting it to false after calling                                              // 18599\n      // close -- if it's still set to true in the finally block, it means                                             // 18600\n      // one of these calls threw.                                                                                     // 18601\n      errorThrown = true;                                                                                              // 18602\n      this.initializeAll(0);                                                                                           // 18603\n      ret = method.call(scope, a, b, c, d, e, f);                                                                      // 18604\n      errorThrown = false;                                                                                             // 18605\n    } finally {                                                                                                        // 18606\n      try {                                                                                                            // 18607\n        if (errorThrown) {                                                                                             // 18608\n          // If `method` throws, prefer to show that stack trace over any thrown                                       // 18609\n          // by invoking `closeAll`.                                                                                   // 18610\n          try {                                                                                                        // 18611\n            this.closeAll(0);                                                                                          // 18612\n          } catch (err) {                                                                                              // 18613\n          }                                                                                                            // 18614\n        } else {                                                                                                       // 18615\n          // Since `method` didn't throw, we don't want to silence the exception                                       // 18616\n          // here.                                                                                                     // 18617\n          this.closeAll(0);                                                                                            // 18618\n        }                                                                                                              // 18619\n      } finally {                                                                                                      // 18620\n        this._isInTransaction = false;                                                                                 // 18621\n      }                                                                                                                // 18622\n    }                                                                                                                  // 18623\n    return ret;                                                                                                        // 18624\n  },                                                                                                                   // 18625\n                                                                                                                       // 18626\n  initializeAll: function(startIndex) {                                                                                // 18627\n    var transactionWrappers = this.transactionWrappers;                                                                // 18628\n    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 18629\n      var wrapper = transactionWrappers[i];                                                                            // 18630\n      try {                                                                                                            // 18631\n        // Catching errors makes debugging more difficult, so we start with the                                        // 18632\n        // OBSERVED_ERROR state before overwriting it with the real return value                                       // 18633\n        // of initialize -- if it's still set to OBSERVED_ERROR in the finally                                         // 18634\n        // block, it means wrapper.initialize threw.                                                                   // 18635\n        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;                                                          // 18636\n        this.wrapperInitData[i] = wrapper.initialize ?                                                                 // 18637\n          wrapper.initialize.call(this) :                                                                              // 18638\n          null;                                                                                                        // 18639\n      } finally {                                                                                                      // 18640\n        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {                                                  // 18641\n          // The initializer for wrapper i threw an error; initialize the                                              // 18642\n          // remaining wrappers but silence any exceptions from them to ensure                                         // 18643\n          // that the first error is the one to bubble up.                                                             // 18644\n          try {                                                                                                        // 18645\n            this.initializeAll(i + 1);                                                                                 // 18646\n          } catch (err) {                                                                                              // 18647\n          }                                                                                                            // 18648\n        }                                                                                                              // 18649\n      }                                                                                                                // 18650\n    }                                                                                                                  // 18651\n  },                                                                                                                   // 18652\n                                                                                                                       // 18653\n  /**                                                                                                                  // 18654\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into                                       // 18655\n   * them the respective return values of `this.transactionWrappers.init[i]`                                           // 18656\n   * (`close`rs that correspond to initializers that failed will not be                                                // 18657\n   * invoked).                                                                                                         // 18658\n   */                                                                                                                  // 18659\n  closeAll: function(startIndex) {                                                                                     // 18660\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 18661\n      this.isInTransaction(),                                                                                          // 18662\n      'Transaction.closeAll(): Cannot close transaction when none are open.'                                           // 18663\n    ) : invariant(this.isInTransaction()));                                                                            // 18664\n    var transactionWrappers = this.transactionWrappers;                                                                // 18665\n    for (var i = startIndex; i < transactionWrappers.length; i++) {                                                    // 18666\n      var wrapper = transactionWrappers[i];                                                                            // 18667\n      var initData = this.wrapperInitData[i];                                                                          // 18668\n      var errorThrown;                                                                                                 // 18669\n      try {                                                                                                            // 18670\n        // Catching errors makes debugging more difficult, so we start with                                            // 18671\n        // errorThrown set to true before setting it to false after calling                                            // 18672\n        // close -- if it's still set to true in the finally block, it means                                           // 18673\n        // wrapper.close threw.                                                                                        // 18674\n        errorThrown = true;                                                                                            // 18675\n        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {                                                // 18676\n          wrapper.close.call(this, initData);                                                                          // 18677\n        }                                                                                                              // 18678\n        errorThrown = false;                                                                                           // 18679\n      } finally {                                                                                                      // 18680\n        if (errorThrown) {                                                                                             // 18681\n          // The closer for wrapper i threw an error; close the remaining                                              // 18682\n          // wrappers but silence any exceptions from them to ensure that the                                          // 18683\n          // first error is the one to bubble up.                                                                      // 18684\n          try {                                                                                                        // 18685\n            this.closeAll(i + 1);                                                                                      // 18686\n          } catch (e) {                                                                                                // 18687\n          }                                                                                                            // 18688\n        }                                                                                                              // 18689\n      }                                                                                                                // 18690\n    }                                                                                                                  // 18691\n    this.wrapperInitData.length = 0;                                                                                   // 18692\n  }                                                                                                                    // 18693\n};                                                                                                                     // 18694\n                                                                                                                       // 18695\nvar Transaction = {                                                                                                    // 18696\n                                                                                                                       // 18697\n  Mixin: Mixin,                                                                                                        // 18698\n                                                                                                                       // 18699\n  /**                                                                                                                  // 18700\n   * Token to look for to determine if an error occured.                                                               // 18701\n   */                                                                                                                  // 18702\n  OBSERVED_ERROR: {}                                                                                                   // 18703\n                                                                                                                       // 18704\n};                                                                                                                     // 18705\n                                                                                                                       // 18706\nmodule.exports = Transaction;                                                                                          // 18707\n                                                                                                                       // 18708\n}).call(this,require('_process'))                                                                                      // 18709\n                                                                                                                       // 18710\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ViewportMetrics\":[function(require,module,exports){   // 18711\n/**                                                                                                                    // 18712\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18713\n * All rights reserved.                                                                                                // 18714\n *                                                                                                                     // 18715\n * This source code is licensed under the BSD-style license found in the                                               // 18716\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18717\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18718\n *                                                                                                                     // 18719\n * @providesModule ViewportMetrics                                                                                     // 18720\n */                                                                                                                    // 18721\n                                                                                                                       // 18722\n'use strict';                                                                                                          // 18723\n                                                                                                                       // 18724\nvar ViewportMetrics = {                                                                                                // 18725\n                                                                                                                       // 18726\n  currentScrollLeft: 0,                                                                                                // 18727\n                                                                                                                       // 18728\n  currentScrollTop: 0,                                                                                                 // 18729\n                                                                                                                       // 18730\n  refreshScrollValues: function(scrollPosition) {                                                                      // 18731\n    ViewportMetrics.currentScrollLeft = scrollPosition.x;                                                              // 18732\n    ViewportMetrics.currentScrollTop = scrollPosition.y;                                                               // 18733\n  }                                                                                                                    // 18734\n                                                                                                                       // 18735\n};                                                                                                                     // 18736\n                                                                                                                       // 18737\nmodule.exports = ViewportMetrics;                                                                                      // 18738\n                                                                                                                       // 18739\n},{}],\"react/lib/accumulateInto\":[function(require,module,exports){                                                    // 18740\n(function (process){                                                                                                   // 18741\n/**                                                                                                                    // 18742\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 18743\n * All rights reserved.                                                                                                // 18744\n *                                                                                                                     // 18745\n * This source code is licensed under the BSD-style license found in the                                               // 18746\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18747\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18748\n *                                                                                                                     // 18749\n * @providesModule accumulateInto                                                                                      // 18750\n */                                                                                                                    // 18751\n                                                                                                                       // 18752\n'use strict';                                                                                                          // 18753\n                                                                                                                       // 18754\nvar invariant = require(\"./invariant\");                                                                                // 18755\n                                                                                                                       // 18756\n/**                                                                                                                    // 18757\n *                                                                                                                     // 18758\n * Accumulates items that must not be null or undefined into the first one. This                                       // 18759\n * is used to conserve memory by avoiding array allocations, and thus sacrifices                                       // 18760\n * API cleanness. Since `current` can be null before being passed in and not                                           // 18761\n * null after this function, make sure to assign it back to `current`:                                                 // 18762\n *                                                                                                                     // 18763\n * `a = accumulateInto(a, b);`                                                                                         // 18764\n *                                                                                                                     // 18765\n * This API should be sparingly used. Try `accumulate` for something cleaner.                                          // 18766\n *                                                                                                                     // 18767\n * @return {*|array<*>} An accumulation of items.                                                                      // 18768\n */                                                                                                                    // 18769\n                                                                                                                       // 18770\nfunction accumulateInto(current, next) {                                                                               // 18771\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 18772\n    next != null,                                                                                                      // 18773\n    'accumulateInto(...): Accumulated items must not be null or undefined.'                                            // 18774\n  ) : invariant(next != null));                                                                                        // 18775\n  if (current == null) {                                                                                               // 18776\n    return next;                                                                                                       // 18777\n  }                                                                                                                    // 18778\n                                                                                                                       // 18779\n  // Both are not empty. Warning: Never call x.concat(y) when you are not                                              // 18780\n  // certain that x is an Array (x could be a string with concat method).                                              // 18781\n  var currentIsArray = Array.isArray(current);                                                                         // 18782\n  var nextIsArray = Array.isArray(next);                                                                               // 18783\n                                                                                                                       // 18784\n  if (currentIsArray && nextIsArray) {                                                                                 // 18785\n    current.push.apply(current, next);                                                                                 // 18786\n    return current;                                                                                                    // 18787\n  }                                                                                                                    // 18788\n                                                                                                                       // 18789\n  if (currentIsArray) {                                                                                                // 18790\n    current.push(next);                                                                                                // 18791\n    return current;                                                                                                    // 18792\n  }                                                                                                                    // 18793\n                                                                                                                       // 18794\n  if (nextIsArray) {                                                                                                   // 18795\n    // A bit too dangerous to mutate `next`.                                                                           // 18796\n    return [current].concat(next);                                                                                     // 18797\n  }                                                                                                                    // 18798\n                                                                                                                       // 18799\n  return [current, next];                                                                                              // 18800\n}                                                                                                                      // 18801\n                                                                                                                       // 18802\nmodule.exports = accumulateInto;                                                                                       // 18803\n                                                                                                                       // 18804\n}).call(this,require('_process'))                                                                                      // 18805\n                                                                                                                       // 18806\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/adler32\":[function(require,module,exports){           // 18807\n/**                                                                                                                    // 18808\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18809\n * All rights reserved.                                                                                                // 18810\n *                                                                                                                     // 18811\n * This source code is licensed under the BSD-style license found in the                                               // 18812\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18813\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18814\n *                                                                                                                     // 18815\n * @providesModule adler32                                                                                             // 18816\n */                                                                                                                    // 18817\n                                                                                                                       // 18818\n/* jslint bitwise:true */                                                                                              // 18819\n                                                                                                                       // 18820\n'use strict';                                                                                                          // 18821\n                                                                                                                       // 18822\nvar MOD = 65521;                                                                                                       // 18823\n                                                                                                                       // 18824\n// This is a clean-room implementation of adler32 designed for detecting                                               // 18825\n// if markup is not what we expect it to be. It does not need to be                                                    // 18826\n// cryptographically strong, only reasonably good at detecting if markup                                               // 18827\n// generated on the server is different than that on the client.                                                       // 18828\nfunction adler32(data) {                                                                                               // 18829\n  var a = 1;                                                                                                           // 18830\n  var b = 0;                                                                                                           // 18831\n  for (var i = 0; i < data.length; i++) {                                                                              // 18832\n    a = (a + data.charCodeAt(i)) % MOD;                                                                                // 18833\n    b = (b + a) % MOD;                                                                                                 // 18834\n  }                                                                                                                    // 18835\n  return a | (b << 16);                                                                                                // 18836\n}                                                                                                                      // 18837\n                                                                                                                       // 18838\nmodule.exports = adler32;                                                                                              // 18839\n                                                                                                                       // 18840\n},{}],\"react/lib/camelizeStyleName\":[function(require,module,exports){                                                 // 18841\n/**                                                                                                                    // 18842\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 18843\n * All rights reserved.                                                                                                // 18844\n *                                                                                                                     // 18845\n * This source code is licensed under the BSD-style license found in the                                               // 18846\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18847\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18848\n *                                                                                                                     // 18849\n * @providesModule camelizeStyleName                                                                                   // 18850\n * @typechecks                                                                                                         // 18851\n */                                                                                                                    // 18852\n                                                                                                                       // 18853\n\"use strict\";                                                                                                          // 18854\n                                                                                                                       // 18855\nvar camelize = require(\"./camelize\");                                                                                  // 18856\n                                                                                                                       // 18857\nvar msPattern = /^-ms-/;                                                                                               // 18858\n                                                                                                                       // 18859\n/**                                                                                                                    // 18860\n * Camelcases a hyphenated CSS property name, for example:                                                             // 18861\n *                                                                                                                     // 18862\n *   > camelizeStyleName('background-color')                                                                           // 18863\n *   < \"backgroundColor\"                                                                                               // 18864\n *   > camelizeStyleName('-moz-transition')                                                                            // 18865\n *   < \"MozTransition\"                                                                                                 // 18866\n *   > camelizeStyleName('-ms-transition')                                                                             // 18867\n *   < \"msTransition\"                                                                                                  // 18868\n *                                                                                                                     // 18869\n * As Andi Smith suggests                                                                                              // 18870\n * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix                                        // 18871\n * is converted to lowercase `ms`.                                                                                     // 18872\n *                                                                                                                     // 18873\n * @param {string} string                                                                                              // 18874\n * @return {string}                                                                                                    // 18875\n */                                                                                                                    // 18876\nfunction camelizeStyleName(string) {                                                                                   // 18877\n  return camelize(string.replace(msPattern, 'ms-'));                                                                   // 18878\n}                                                                                                                      // 18879\n                                                                                                                       // 18880\nmodule.exports = camelizeStyleName;                                                                                    // 18881\n                                                                                                                       // 18882\n},{\"./camelize\":\"react/lib/camelize\"}],\"react/lib/camelize\":[function(require,module,exports){                         // 18883\n/**                                                                                                                    // 18884\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18885\n * All rights reserved.                                                                                                // 18886\n *                                                                                                                     // 18887\n * This source code is licensed under the BSD-style license found in the                                               // 18888\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18889\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18890\n *                                                                                                                     // 18891\n * @providesModule camelize                                                                                            // 18892\n * @typechecks                                                                                                         // 18893\n */                                                                                                                    // 18894\n                                                                                                                       // 18895\nvar _hyphenPattern = /-(.)/g;                                                                                          // 18896\n                                                                                                                       // 18897\n/**                                                                                                                    // 18898\n * Camelcases a hyphenated string, for example:                                                                        // 18899\n *                                                                                                                     // 18900\n *   > camelize('background-color')                                                                                    // 18901\n *   < \"backgroundColor\"                                                                                               // 18902\n *                                                                                                                     // 18903\n * @param {string} string                                                                                              // 18904\n * @return {string}                                                                                                    // 18905\n */                                                                                                                    // 18906\nfunction camelize(string) {                                                                                            // 18907\n  return string.replace(_hyphenPattern, function(_, character) {                                                       // 18908\n    return character.toUpperCase();                                                                                    // 18909\n  });                                                                                                                  // 18910\n}                                                                                                                      // 18911\n                                                                                                                       // 18912\nmodule.exports = camelize;                                                                                             // 18913\n                                                                                                                       // 18914\n},{}],\"react/lib/cloneWithProps\":[function(require,module,exports){                                                    // 18915\n(function (process){                                                                                                   // 18916\n/**                                                                                                                    // 18917\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18918\n * All rights reserved.                                                                                                // 18919\n *                                                                                                                     // 18920\n * This source code is licensed under the BSD-style license found in the                                               // 18921\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18922\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18923\n *                                                                                                                     // 18924\n * @typechecks static-only                                                                                             // 18925\n * @providesModule cloneWithProps                                                                                      // 18926\n */                                                                                                                    // 18927\n                                                                                                                       // 18928\n'use strict';                                                                                                          // 18929\n                                                                                                                       // 18930\nvar ReactElement = require(\"./ReactElement\");                                                                          // 18931\nvar ReactPropTransferer = require(\"./ReactPropTransferer\");                                                            // 18932\n                                                                                                                       // 18933\nvar keyOf = require(\"./keyOf\");                                                                                        // 18934\nvar warning = require(\"./warning\");                                                                                    // 18935\n                                                                                                                       // 18936\nvar CHILDREN_PROP = keyOf({children: null});                                                                           // 18937\n                                                                                                                       // 18938\n/**                                                                                                                    // 18939\n * Sometimes you want to change the props of a child passed to you. Usually                                            // 18940\n * this is to add a CSS class.                                                                                         // 18941\n *                                                                                                                     // 18942\n * @param {ReactElement} child child element you'd like to clone                                                       // 18943\n * @param {object} props props you'd like to modify. className and style will be                                       // 18944\n * merged automatically.                                                                                               // 18945\n * @return {ReactElement} a clone of child with props merged in.                                                       // 18946\n */                                                                                                                    // 18947\nfunction cloneWithProps(child, props) {                                                                                // 18948\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 18949\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 18950\n      !child.ref,                                                                                                      // 18951\n      'You are calling cloneWithProps() on a child with a ref. This is ' +                                             // 18952\n      'dangerous because you\\'re creating a new child which will not be ' +                                            // 18953\n      'added as a ref to its parent.'                                                                                  // 18954\n    ) : null);                                                                                                         // 18955\n  }                                                                                                                    // 18956\n                                                                                                                       // 18957\n  var newProps = ReactPropTransferer.mergeProps(props, child.props);                                                   // 18958\n                                                                                                                       // 18959\n  // Use `child.props.children` if it is provided.                                                                     // 18960\n  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&                                                                       // 18961\n      child.props.hasOwnProperty(CHILDREN_PROP)) {                                                                     // 18962\n    newProps.children = child.props.children;                                                                          // 18963\n  }                                                                                                                    // 18964\n                                                                                                                       // 18965\n  // The current API doesn't retain _owner and _context, which is why this                                             // 18966\n  // doesn't use ReactElement.cloneAndReplaceProps.                                                                    // 18967\n  return ReactElement.createElement(child.type, newProps);                                                             // 18968\n}                                                                                                                      // 18969\n                                                                                                                       // 18970\nmodule.exports = cloneWithProps;                                                                                       // 18971\n                                                                                                                       // 18972\n}).call(this,require('_process'))                                                                                      // 18973\n                                                                                                                       // 18974\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactPropTransferer\":\"react/lib/ReactPropTransferer\",\"./keyOf\":\"react/lib/keyOf\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/containsNode\":[function(require,module,exports){\n/**                                                                                                                    // 18976\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 18977\n * All rights reserved.                                                                                                // 18978\n *                                                                                                                     // 18979\n * This source code is licensed under the BSD-style license found in the                                               // 18980\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 18981\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 18982\n *                                                                                                                     // 18983\n * @providesModule containsNode                                                                                        // 18984\n * @typechecks                                                                                                         // 18985\n */                                                                                                                    // 18986\n                                                                                                                       // 18987\nvar isTextNode = require(\"./isTextNode\");                                                                              // 18988\n                                                                                                                       // 18989\n/*jslint bitwise:true */                                                                                               // 18990\n                                                                                                                       // 18991\n/**                                                                                                                    // 18992\n * Checks if a given DOM node contains or is another DOM node.                                                         // 18993\n *                                                                                                                     // 18994\n * @param {?DOMNode} outerNode Outer DOM node.                                                                         // 18995\n * @param {?DOMNode} innerNode Inner DOM node.                                                                         // 18996\n * @return {boolean} True if `outerNode` contains or is `innerNode`.                                                   // 18997\n */                                                                                                                    // 18998\nfunction containsNode(outerNode, innerNode) {                                                                          // 18999\n  if (!outerNode || !innerNode) {                                                                                      // 19000\n    return false;                                                                                                      // 19001\n  } else if (outerNode === innerNode) {                                                                                // 19002\n    return true;                                                                                                       // 19003\n  } else if (isTextNode(outerNode)) {                                                                                  // 19004\n    return false;                                                                                                      // 19005\n  } else if (isTextNode(innerNode)) {                                                                                  // 19006\n    return containsNode(outerNode, innerNode.parentNode);                                                              // 19007\n  } else if (outerNode.contains) {                                                                                     // 19008\n    return outerNode.contains(innerNode);                                                                              // 19009\n  } else if (outerNode.compareDocumentPosition) {                                                                      // 19010\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);                                                      // 19011\n  } else {                                                                                                             // 19012\n    return false;                                                                                                      // 19013\n  }                                                                                                                    // 19014\n}                                                                                                                      // 19015\n                                                                                                                       // 19016\nmodule.exports = containsNode;                                                                                         // 19017\n                                                                                                                       // 19018\n},{\"./isTextNode\":\"react/lib/isTextNode\"}],\"react/lib/createArrayFromMixed\":[function(require,module,exports){         // 19019\n/**                                                                                                                    // 19020\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19021\n * All rights reserved.                                                                                                // 19022\n *                                                                                                                     // 19023\n * This source code is licensed under the BSD-style license found in the                                               // 19024\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19025\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19026\n *                                                                                                                     // 19027\n * @providesModule createArrayFromMixed                                                                                // 19028\n * @typechecks                                                                                                         // 19029\n */                                                                                                                    // 19030\n                                                                                                                       // 19031\nvar toArray = require(\"./toArray\");                                                                                    // 19032\n                                                                                                                       // 19033\n/**                                                                                                                    // 19034\n * Perform a heuristic test to determine if an object is \"array-like\".                                                 // 19035\n *                                                                                                                     // 19036\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"                                                      // 19037\n *   Joshu replied: \"Mu.\"                                                                                              // 19038\n *                                                                                                                     // 19039\n * This function determines if its argument has \"array nature\": it returns                                             // 19040\n * true if the argument is an actual array, an `arguments' object, or an                                               // 19041\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).                                               // 19042\n *                                                                                                                     // 19043\n * It will return false for other array-like objects like Filelist.                                                    // 19044\n *                                                                                                                     // 19045\n * @param {*} obj                                                                                                      // 19046\n * @return {boolean}                                                                                                   // 19047\n */                                                                                                                    // 19048\nfunction hasArrayNature(obj) {                                                                                         // 19049\n  return (                                                                                                             // 19050\n    // not null/false                                                                                                  // 19051\n    !!obj &&                                                                                                           // 19052\n    // arrays are objects, NodeLists are functions in Safari                                                           // 19053\n    (typeof obj == 'object' || typeof obj == 'function') &&                                                            // 19054\n    // quacks like an array                                                                                            // 19055\n    ('length' in obj) &&                                                                                               // 19056\n    // not window                                                                                                      // 19057\n    !('setInterval' in obj) &&                                                                                         // 19058\n    // no DOM node should be considered an array-like                                                                  // 19059\n    // a 'select' element has 'length' and 'item' properties on IE8                                                    // 19060\n    (typeof obj.nodeType != 'number') &&                                                                               // 19061\n    (                                                                                                                  // 19062\n      // a real array                                                                                                  // 19063\n      (// HTMLCollection/NodeList                                                                                      // 19064\n      (Array.isArray(obj) ||                                                                                           // 19065\n      // arguments                                                                                                     // 19066\n      ('callee' in obj) || 'item' in obj))                                                                             // 19067\n    )                                                                                                                  // 19068\n  );                                                                                                                   // 19069\n}                                                                                                                      // 19070\n                                                                                                                       // 19071\n/**                                                                                                                    // 19072\n * Ensure that the argument is an array by wrapping it in an array if it is not.                                       // 19073\n * Creates a copy of the argument if it is already an array.                                                           // 19074\n *                                                                                                                     // 19075\n * This is mostly useful idiomatically:                                                                                // 19076\n *                                                                                                                     // 19077\n *   var createArrayFromMixed = require('createArrayFromMixed');                                                       // 19078\n *                                                                                                                     // 19079\n *   function takesOneOrMoreThings(things) {                                                                           // 19080\n *     things = createArrayFromMixed(things);                                                                          // 19081\n *     ...                                                                                                             // 19082\n *   }                                                                                                                 // 19083\n *                                                                                                                     // 19084\n * This allows you to treat `things' as an array, but accept scalars in the API.                                       // 19085\n *                                                                                                                     // 19086\n * If you need to convert an array-like object, like `arguments`, into an array                                        // 19087\n * use toArray instead.                                                                                                // 19088\n *                                                                                                                     // 19089\n * @param {*} obj                                                                                                      // 19090\n * @return {array}                                                                                                     // 19091\n */                                                                                                                    // 19092\nfunction createArrayFromMixed(obj) {                                                                                   // 19093\n  if (!hasArrayNature(obj)) {                                                                                          // 19094\n    return [obj];                                                                                                      // 19095\n  } else if (Array.isArray(obj)) {                                                                                     // 19096\n    return obj.slice();                                                                                                // 19097\n  } else {                                                                                                             // 19098\n    return toArray(obj);                                                                                               // 19099\n  }                                                                                                                    // 19100\n}                                                                                                                      // 19101\n                                                                                                                       // 19102\nmodule.exports = createArrayFromMixed;                                                                                 // 19103\n                                                                                                                       // 19104\n},{\"./toArray\":\"react/lib/toArray\"}],\"react/lib/createFullPageComponent\":[function(require,module,exports){            // 19105\n(function (process){                                                                                                   // 19106\n/**                                                                                                                    // 19107\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19108\n * All rights reserved.                                                                                                // 19109\n *                                                                                                                     // 19110\n * This source code is licensed under the BSD-style license found in the                                               // 19111\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19112\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19113\n *                                                                                                                     // 19114\n * @providesModule createFullPageComponent                                                                             // 19115\n * @typechecks                                                                                                         // 19116\n */                                                                                                                    // 19117\n                                                                                                                       // 19118\n'use strict';                                                                                                          // 19119\n                                                                                                                       // 19120\n// Defeat circular references by requiring this directly.                                                              // 19121\nvar ReactClass = require(\"./ReactClass\");                                                                              // 19122\nvar ReactElement = require(\"./ReactElement\");                                                                          // 19123\n                                                                                                                       // 19124\nvar invariant = require(\"./invariant\");                                                                                // 19125\n                                                                                                                       // 19126\n/**                                                                                                                    // 19127\n * Create a component that will throw an exception when unmounted.                                                     // 19128\n *                                                                                                                     // 19129\n * Components like <html> <head> and <body> can't be removed or added                                                  // 19130\n * easily in a cross-browser way, however it's valuable to be able to                                                  // 19131\n * take advantage of React's reconciliation for styling and <title>                                                    // 19132\n * management. So we just document it and throw in dangerous cases.                                                    // 19133\n *                                                                                                                     // 19134\n * @param {string} tag The tag to wrap                                                                                 // 19135\n * @return {function} convenience constructor of new component                                                         // 19136\n */                                                                                                                    // 19137\nfunction createFullPageComponent(tag) {                                                                                // 19138\n  var elementFactory = ReactElement.createFactory(tag);                                                                // 19139\n                                                                                                                       // 19140\n  var FullPageComponent = ReactClass.createClass({                                                                     // 19141\n    tagName: tag.toUpperCase(),                                                                                        // 19142\n    displayName: 'ReactFullPageComponent' + tag,                                                                       // 19143\n                                                                                                                       // 19144\n    componentWillUnmount: function() {                                                                                 // 19145\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 19146\n        false,                                                                                                         // 19147\n        '%s tried to unmount. Because of cross-browser quirks it is ' +                                                // 19148\n        'impossible to unmount some top-level components (eg <html>, <head>, ' +                                       // 19149\n        'and <body>) reliably and efficiently. To fix this, have a single ' +                                          // 19150\n        'top-level component that never unmounts render these elements.',                                              // 19151\n        this.constructor.displayName                                                                                   // 19152\n      ) : invariant(false));                                                                                           // 19153\n    },                                                                                                                 // 19154\n                                                                                                                       // 19155\n    render: function() {                                                                                               // 19156\n      return elementFactory(this.props);                                                                               // 19157\n    }                                                                                                                  // 19158\n  });                                                                                                                  // 19159\n                                                                                                                       // 19160\n  return FullPageComponent;                                                                                            // 19161\n}                                                                                                                      // 19162\n                                                                                                                       // 19163\nmodule.exports = createFullPageComponent;                                                                              // 19164\n                                                                                                                       // 19165\n}).call(this,require('_process'))                                                                                      // 19166\n                                                                                                                       // 19167\n},{\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/createNodesFromMarkup\":[function(require,module,exports){\n(function (process){                                                                                                   // 19169\n/**                                                                                                                    // 19170\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19171\n * All rights reserved.                                                                                                // 19172\n *                                                                                                                     // 19173\n * This source code is licensed under the BSD-style license found in the                                               // 19174\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19175\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19176\n *                                                                                                                     // 19177\n * @providesModule createNodesFromMarkup                                                                               // 19178\n * @typechecks                                                                                                         // 19179\n */                                                                                                                    // 19180\n                                                                                                                       // 19181\n/*jslint evil: true, sub: true */                                                                                      // 19182\n                                                                                                                       // 19183\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 19184\n                                                                                                                       // 19185\nvar createArrayFromMixed = require(\"./createArrayFromMixed\");                                                          // 19186\nvar getMarkupWrap = require(\"./getMarkupWrap\");                                                                        // 19187\nvar invariant = require(\"./invariant\");                                                                                // 19188\n                                                                                                                       // 19189\n/**                                                                                                                    // 19190\n * Dummy container used to render all markup.                                                                          // 19191\n */                                                                                                                    // 19192\nvar dummyNode =                                                                                                        // 19193\n  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                               // 19194\n                                                                                                                       // 19195\n/**                                                                                                                    // 19196\n * Pattern used by `getNodeName`.                                                                                      // 19197\n */                                                                                                                    // 19198\nvar nodeNamePattern = /^\\s*<(\\w+)/;                                                                                    // 19199\n                                                                                                                       // 19200\n/**                                                                                                                    // 19201\n * Extracts the `nodeName` of the first element in a string of markup.                                                 // 19202\n *                                                                                                                     // 19203\n * @param {string} markup String of markup.                                                                            // 19204\n * @return {?string} Node name of the supplied markup.                                                                 // 19205\n */                                                                                                                    // 19206\nfunction getNodeName(markup) {                                                                                         // 19207\n  var nodeNameMatch = markup.match(nodeNamePattern);                                                                   // 19208\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();                                                              // 19209\n}                                                                                                                      // 19210\n                                                                                                                       // 19211\n/**                                                                                                                    // 19212\n * Creates an array containing the nodes rendered from the supplied markup. The                                        // 19213\n * optionally supplied `handleScript` function will be invoked once for each                                           // 19214\n * <script> element that is rendered. If no `handleScript` function is supplied,                                       // 19215\n * an exception is thrown if any <script> elements are rendered.                                                       // 19216\n *                                                                                                                     // 19217\n * @param {string} markup A string of valid HTML markup.                                                               // 19218\n * @param {?function} handleScript Invoked once for each rendered <script>.                                            // 19219\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.                                                 // 19220\n */                                                                                                                    // 19221\nfunction createNodesFromMarkup(markup, handleScript) {                                                                 // 19222\n  var node = dummyNode;                                                                                                // 19223\n  (\"production\" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));\n  var nodeName = getNodeName(markup);                                                                                  // 19225\n                                                                                                                       // 19226\n  var wrap = nodeName && getMarkupWrap(nodeName);                                                                      // 19227\n  if (wrap) {                                                                                                          // 19228\n    node.innerHTML = wrap[1] + markup + wrap[2];                                                                       // 19229\n                                                                                                                       // 19230\n    var wrapDepth = wrap[0];                                                                                           // 19231\n    while (wrapDepth--) {                                                                                              // 19232\n      node = node.lastChild;                                                                                           // 19233\n    }                                                                                                                  // 19234\n  } else {                                                                                                             // 19235\n    node.innerHTML = markup;                                                                                           // 19236\n  }                                                                                                                    // 19237\n                                                                                                                       // 19238\n  var scripts = node.getElementsByTagName('script');                                                                   // 19239\n  if (scripts.length) {                                                                                                // 19240\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 19241\n      handleScript,                                                                                                    // 19242\n      'createNodesFromMarkup(...): Unexpected <script> element rendered.'                                              // 19243\n    ) : invariant(handleScript));                                                                                      // 19244\n    createArrayFromMixed(scripts).forEach(handleScript);                                                               // 19245\n  }                                                                                                                    // 19246\n                                                                                                                       // 19247\n  var nodes = createArrayFromMixed(node.childNodes);                                                                   // 19248\n  while (node.lastChild) {                                                                                             // 19249\n    node.removeChild(node.lastChild);                                                                                  // 19250\n  }                                                                                                                    // 19251\n  return nodes;                                                                                                        // 19252\n}                                                                                                                      // 19253\n                                                                                                                       // 19254\nmodule.exports = createNodesFromMarkup;                                                                                // 19255\n                                                                                                                       // 19256\n}).call(this,require('_process'))                                                                                      // 19257\n                                                                                                                       // 19258\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./createArrayFromMixed\":\"react/lib/createArrayFromMixed\",\"./getMarkupWrap\":\"react/lib/getMarkupWrap\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/cx\":[function(require,module,exports){\n(function (process){                                                                                                   // 19260\n/**                                                                                                                    // 19261\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19262\n * All rights reserved.                                                                                                // 19263\n *                                                                                                                     // 19264\n * This source code is licensed under the BSD-style license found in the                                               // 19265\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19266\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19267\n *                                                                                                                     // 19268\n * @providesModule cx                                                                                                  // 19269\n */                                                                                                                    // 19270\n                                                                                                                       // 19271\n/**                                                                                                                    // 19272\n * This function is used to mark string literals representing CSS class names                                          // 19273\n * so that they can be transformed statically. This allows for modularization                                          // 19274\n * and minification of CSS class names.                                                                                // 19275\n *                                                                                                                     // 19276\n * In static_upstream, this function is actually implemented, but it should                                            // 19277\n * eventually be replaced with something more descriptive, and the transform                                           // 19278\n * that is used in the main stack should be ported for use elsewhere.                                                  // 19279\n *                                                                                                                     // 19280\n * @param string|object className to modularize, or an object of key/values.                                           // 19281\n *                      In the object case, the values are conditions that                                             // 19282\n *                      determine if the className keys should be included.                                            // 19283\n * @param [string ...]  Variable list of classNames in the string case.                                                // 19284\n * @return string       Renderable space-separated CSS className.                                                      // 19285\n */                                                                                                                    // 19286\n                                                                                                                       // 19287\n'use strict';                                                                                                          // 19288\nvar warning = require(\"./warning\");                                                                                    // 19289\n                                                                                                                       // 19290\nvar warned = false;                                                                                                    // 19291\n                                                                                                                       // 19292\nfunction cx(classNames) {                                                                                              // 19293\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 19294\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 19295\n      warned,                                                                                                          // 19296\n      'React.addons.classSet will be deprecated in a future version. See ' +                                           // 19297\n      'http://fb.me/react-addons-classset'                                                                             // 19298\n    ) : null);                                                                                                         // 19299\n    warned = true;                                                                                                     // 19300\n  }                                                                                                                    // 19301\n                                                                                                                       // 19302\n  if (typeof classNames == 'object') {                                                                                 // 19303\n    return Object.keys(classNames).filter(function(className) {                                                        // 19304\n      return classNames[className];                                                                                    // 19305\n    }).join(' ');                                                                                                      // 19306\n  } else {                                                                                                             // 19307\n    return Array.prototype.join.call(arguments, ' ');                                                                  // 19308\n  }                                                                                                                    // 19309\n}                                                                                                                      // 19310\n                                                                                                                       // 19311\nmodule.exports = cx;                                                                                                   // 19312\n                                                                                                                       // 19313\n}).call(this,require('_process'))                                                                                      // 19314\n                                                                                                                       // 19315\n},{\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/dangerousStyleValue\":[function(require,module,exports){   // 19316\n/**                                                                                                                    // 19317\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19318\n * All rights reserved.                                                                                                // 19319\n *                                                                                                                     // 19320\n * This source code is licensed under the BSD-style license found in the                                               // 19321\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19322\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19323\n *                                                                                                                     // 19324\n * @providesModule dangerousStyleValue                                                                                 // 19325\n * @typechecks static-only                                                                                             // 19326\n */                                                                                                                    // 19327\n                                                                                                                       // 19328\n'use strict';                                                                                                          // 19329\n                                                                                                                       // 19330\nvar CSSProperty = require(\"./CSSProperty\");                                                                            // 19331\n                                                                                                                       // 19332\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;                                                                   // 19333\n                                                                                                                       // 19334\n/**                                                                                                                    // 19335\n * Convert a value into the proper css writable value. The style name `name`                                           // 19336\n * should be logical (no hyphens), as specified                                                                        // 19337\n * in `CSSProperty.isUnitlessNumber`.                                                                                  // 19338\n *                                                                                                                     // 19339\n * @param {string} name CSS property name such as `topMargin`.                                                         // 19340\n * @param {*} value CSS property value such as `10px`.                                                                 // 19341\n * @return {string} Normalized style value with dimensions applied.                                                    // 19342\n */                                                                                                                    // 19343\nfunction dangerousStyleValue(name, value) {                                                                            // 19344\n  // Note that we've removed escapeTextForBrowser() calls here since the                                               // 19345\n  // whole string will be escaped when the attribute is injected into                                                  // 19346\n  // the markup. If you provide unsafe user data here they can inject                                                  // 19347\n  // arbitrary CSS which may be problematic (I couldn't repro this):                                                   // 19348\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet                                                    // 19349\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/                                                // 19350\n  // This is not an XSS hole but instead a potential CSS injection issue                                               // 19351\n  // which has lead to a greater discussion about how we're going to                                                   // 19352\n  // trust URLs moving forward. See #2115901                                                                           // 19353\n                                                                                                                       // 19354\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';                                           // 19355\n  if (isEmpty) {                                                                                                       // 19356\n    return '';                                                                                                         // 19357\n  }                                                                                                                    // 19358\n                                                                                                                       // 19359\n  var isNonNumeric = isNaN(value);                                                                                     // 19360\n  if (isNonNumeric || value === 0 ||                                                                                   // 19361\n      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {                                               // 19362\n    return '' + value; // cast to string                                                                               // 19363\n  }                                                                                                                    // 19364\n                                                                                                                       // 19365\n  if (typeof value === 'string') {                                                                                     // 19366\n    value = value.trim();                                                                                              // 19367\n  }                                                                                                                    // 19368\n  return value + 'px';                                                                                                 // 19369\n}                                                                                                                      // 19370\n                                                                                                                       // 19371\nmodule.exports = dangerousStyleValue;                                                                                  // 19372\n                                                                                                                       // 19373\n},{\"./CSSProperty\":\"react/lib/CSSProperty\"}],\"react/lib/emptyFunction\":[function(require,module,exports){              // 19374\n/**                                                                                                                    // 19375\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19376\n * All rights reserved.                                                                                                // 19377\n *                                                                                                                     // 19378\n * This source code is licensed under the BSD-style license found in the                                               // 19379\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19380\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19381\n *                                                                                                                     // 19382\n * @providesModule emptyFunction                                                                                       // 19383\n */                                                                                                                    // 19384\n                                                                                                                       // 19385\nfunction makeEmptyFunction(arg) {                                                                                      // 19386\n  return function() {                                                                                                  // 19387\n    return arg;                                                                                                        // 19388\n  };                                                                                                                   // 19389\n}                                                                                                                      // 19390\n                                                                                                                       // 19391\n/**                                                                                                                    // 19392\n * This function accepts and discards inputs; it has no side effects. This is                                          // 19393\n * primarily useful idiomatically for overridable function endpoints which                                             // 19394\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.                                             // 19395\n */                                                                                                                    // 19396\nfunction emptyFunction() {}                                                                                            // 19397\n                                                                                                                       // 19398\nemptyFunction.thatReturns = makeEmptyFunction;                                                                         // 19399\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);                                                             // 19400\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);                                                               // 19401\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);                                                               // 19402\nemptyFunction.thatReturnsThis = function() { return this; };                                                           // 19403\nemptyFunction.thatReturnsArgument = function(arg) { return arg; };                                                     // 19404\n                                                                                                                       // 19405\nmodule.exports = emptyFunction;                                                                                        // 19406\n                                                                                                                       // 19407\n},{}],\"react/lib/emptyObject\":[function(require,module,exports){                                                       // 19408\n(function (process){                                                                                                   // 19409\n/**                                                                                                                    // 19410\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19411\n * All rights reserved.                                                                                                // 19412\n *                                                                                                                     // 19413\n * This source code is licensed under the BSD-style license found in the                                               // 19414\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19415\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19416\n *                                                                                                                     // 19417\n * @providesModule emptyObject                                                                                         // 19418\n */                                                                                                                    // 19419\n                                                                                                                       // 19420\n\"use strict\";                                                                                                          // 19421\n                                                                                                                       // 19422\nvar emptyObject = {};                                                                                                  // 19423\n                                                                                                                       // 19424\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 19425\n  Object_freeze(emptyObject);                                                                                          // 19426\n}                                                                                                                      // 19427\n                                                                                                                       // 19428\nmodule.exports = emptyObject;                                                                                          // 19429\n                                                                                                                       // 19430\n}).call(this,require('_process'))                                                                                      // 19431\n                                                                                                                       // 19432\n},{\"_process\":1}],\"react/lib/escapeTextContentForBrowser\":[function(require,module,exports){                           // 19433\n/**                                                                                                                    // 19434\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19435\n * All rights reserved.                                                                                                // 19436\n *                                                                                                                     // 19437\n * This source code is licensed under the BSD-style license found in the                                               // 19438\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19439\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19440\n *                                                                                                                     // 19441\n * @providesModule escapeTextContentForBrowser                                                                         // 19442\n */                                                                                                                    // 19443\n                                                                                                                       // 19444\n'use strict';                                                                                                          // 19445\n                                                                                                                       // 19446\nvar ESCAPE_LOOKUP = {                                                                                                  // 19447\n  '&': '&amp;',                                                                                                        // 19448\n  '>': '&gt;',                                                                                                         // 19449\n  '<': '&lt;',                                                                                                         // 19450\n  '\"': '&quot;',                                                                                                       // 19451\n  '\\'': '&#x27;'                                                                                                       // 19452\n};                                                                                                                     // 19453\n                                                                                                                       // 19454\nvar ESCAPE_REGEX = /[&><\"']/g;                                                                                         // 19455\n                                                                                                                       // 19456\nfunction escaper(match) {                                                                                              // 19457\n  return ESCAPE_LOOKUP[match];                                                                                         // 19458\n}                                                                                                                      // 19459\n                                                                                                                       // 19460\n/**                                                                                                                    // 19461\n * Escapes text to prevent scripting attacks.                                                                          // 19462\n *                                                                                                                     // 19463\n * @param {*} text Text value to escape.                                                                               // 19464\n * @return {string} An escaped string.                                                                                 // 19465\n */                                                                                                                    // 19466\nfunction escapeTextContentForBrowser(text) {                                                                           // 19467\n  return ('' + text).replace(ESCAPE_REGEX, escaper);                                                                   // 19468\n}                                                                                                                      // 19469\n                                                                                                                       // 19470\nmodule.exports = escapeTextContentForBrowser;                                                                          // 19471\n                                                                                                                       // 19472\n},{}],\"react/lib/findDOMNode\":[function(require,module,exports){                                                       // 19473\n(function (process){                                                                                                   // 19474\n/**                                                                                                                    // 19475\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19476\n * All rights reserved.                                                                                                // 19477\n *                                                                                                                     // 19478\n * This source code is licensed under the BSD-style license found in the                                               // 19479\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19480\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19481\n *                                                                                                                     // 19482\n * @providesModule findDOMNode                                                                                         // 19483\n * @typechecks static-only                                                                                             // 19484\n */                                                                                                                    // 19485\n                                                                                                                       // 19486\n'use strict';                                                                                                          // 19487\n                                                                                                                       // 19488\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");                                                                // 19489\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");                                                                  // 19490\nvar ReactMount = require(\"./ReactMount\");                                                                              // 19491\n                                                                                                                       // 19492\nvar invariant = require(\"./invariant\");                                                                                // 19493\nvar isNode = require(\"./isNode\");                                                                                      // 19494\nvar warning = require(\"./warning\");                                                                                    // 19495\n                                                                                                                       // 19496\n/**                                                                                                                    // 19497\n * Returns the DOM node rendered by this element.                                                                      // 19498\n *                                                                                                                     // 19499\n * @param {ReactComponent|DOMElement} componentOrElement                                                               // 19500\n * @return {DOMElement} The root node of this element.                                                                 // 19501\n */                                                                                                                    // 19502\nfunction findDOMNode(componentOrElement) {                                                                             // 19503\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 19504\n    var owner = ReactCurrentOwner.current;                                                                             // 19505\n    if (owner !== null) {                                                                                              // 19506\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 19507\n        owner._warnedAboutRefsInRender,                                                                                // 19508\n        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +                                            // 19509\n        'render() should be a pure function of props and state. It should ' +                                          // 19510\n        'never access something that requires stale data from the previous ' +                                         // 19511\n        'render, such as refs. Move this logic to componentDidMount and ' +                                            // 19512\n        'componentDidUpdate instead.',                                                                                 // 19513\n        owner.getName() || 'A component'                                                                               // 19514\n      ) : null);                                                                                                       // 19515\n      owner._warnedAboutRefsInRender = true;                                                                           // 19516\n    }                                                                                                                  // 19517\n  }                                                                                                                    // 19518\n  if (componentOrElement == null) {                                                                                    // 19519\n    return null;                                                                                                       // 19520\n  }                                                                                                                    // 19521\n  if (isNode(componentOrElement)) {                                                                                    // 19522\n    return componentOrElement;                                                                                         // 19523\n  }                                                                                                                    // 19524\n  if (ReactInstanceMap.has(componentOrElement)) {                                                                      // 19525\n    return ReactMount.getNodeFromInstance(componentOrElement);                                                         // 19526\n  }                                                                                                                    // 19527\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 19528\n    componentOrElement.render == null ||                                                                               // 19529\n    typeof componentOrElement.render !== 'function',                                                                   // 19530\n    'Component (with keys: %s) contains `render` method ' +                                                            // 19531\n    'but is not mounted in the DOM',                                                                                   // 19532\n    Object.keys(componentOrElement)                                                                                    // 19533\n  ) : invariant(componentOrElement.render == null ||                                                                   // 19534\n  typeof componentOrElement.render !== 'function'));                                                                   // 19535\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 19536\n    false,                                                                                                             // 19537\n    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',                                             // 19538\n    Object.keys(componentOrElement)                                                                                    // 19539\n  ) : invariant(false));                                                                                               // 19540\n}                                                                                                                      // 19541\n                                                                                                                       // 19542\nmodule.exports = findDOMNode;                                                                                          // 19543\n                                                                                                                       // 19544\n}).call(this,require('_process'))                                                                                      // 19545\n                                                                                                                       // 19546\n},{\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./ReactMount\":\"react/lib/ReactMount\",\"./invariant\":\"react/lib/invariant\",\"./isNode\":\"react/lib/isNode\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/flattenChildren\":[function(require,module,exports){\n(function (process){                                                                                                   // 19548\n/**                                                                                                                    // 19549\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19550\n * All rights reserved.                                                                                                // 19551\n *                                                                                                                     // 19552\n * This source code is licensed under the BSD-style license found in the                                               // 19553\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19554\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19555\n *                                                                                                                     // 19556\n * @providesModule flattenChildren                                                                                     // 19557\n */                                                                                                                    // 19558\n                                                                                                                       // 19559\n'use strict';                                                                                                          // 19560\n                                                                                                                       // 19561\nvar traverseAllChildren = require(\"./traverseAllChildren\");                                                            // 19562\nvar warning = require(\"./warning\");                                                                                    // 19563\n                                                                                                                       // 19564\n/**                                                                                                                    // 19565\n * @param {function} traverseContext Context passed through traversal.                                                 // 19566\n * @param {?ReactComponent} child React child component.                                                               // 19567\n * @param {!string} name String name of key path to child.                                                             // 19568\n */                                                                                                                    // 19569\nfunction flattenSingleChildIntoContext(traverseContext, child, name) {                                                 // 19570\n  // We found a component instance.                                                                                    // 19571\n  var result = traverseContext;                                                                                        // 19572\n  var keyUnique = !result.hasOwnProperty(name);                                                                        // 19573\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 19574\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 19575\n      keyUnique,                                                                                                       // 19576\n      'flattenChildren(...): Encountered two children with the same key, ' +                                           // 19577\n      '`%s`. Child keys must be unique; when two children share a key, only ' +                                        // 19578\n      'the first child will be used.',                                                                                 // 19579\n      name                                                                                                             // 19580\n    ) : null);                                                                                                         // 19581\n  }                                                                                                                    // 19582\n  if (keyUnique && child != null) {                                                                                    // 19583\n    result[name] = child;                                                                                              // 19584\n  }                                                                                                                    // 19585\n}                                                                                                                      // 19586\n                                                                                                                       // 19587\n/**                                                                                                                    // 19588\n * Flattens children that are typically specified as `props.children`. Any null                                        // 19589\n * children will not be included in the resulting object.                                                              // 19590\n * @return {!object} flattened children keyed by name.                                                                 // 19591\n */                                                                                                                    // 19592\nfunction flattenChildren(children) {                                                                                   // 19593\n  if (children == null) {                                                                                              // 19594\n    return children;                                                                                                   // 19595\n  }                                                                                                                    // 19596\n  var result = {};                                                                                                     // 19597\n  traverseAllChildren(children, flattenSingleChildIntoContext, result);                                                // 19598\n  return result;                                                                                                       // 19599\n}                                                                                                                      // 19600\n                                                                                                                       // 19601\nmodule.exports = flattenChildren;                                                                                      // 19602\n                                                                                                                       // 19603\n}).call(this,require('_process'))                                                                                      // 19604\n                                                                                                                       // 19605\n},{\"./traverseAllChildren\":\"react/lib/traverseAllChildren\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/focusNode\":[function(require,module,exports){\n/**                                                                                                                    // 19607\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 19608\n * All rights reserved.                                                                                                // 19609\n *                                                                                                                     // 19610\n * This source code is licensed under the BSD-style license found in the                                               // 19611\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19612\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19613\n *                                                                                                                     // 19614\n * @providesModule focusNode                                                                                           // 19615\n */                                                                                                                    // 19616\n                                                                                                                       // 19617\n\"use strict\";                                                                                                          // 19618\n                                                                                                                       // 19619\n/**                                                                                                                    // 19620\n * @param {DOMElement} node input/textarea to focus                                                                    // 19621\n */                                                                                                                    // 19622\nfunction focusNode(node) {                                                                                             // 19623\n  // IE8 can throw \"Can't move focus to the control because it is invisible,                                           // 19624\n  // not enabled, or of a type that does not accept the focus.\" for all kinds of                                       // 19625\n  // reasons that are too expensive and fragile to test.                                                               // 19626\n  try {                                                                                                                // 19627\n    node.focus();                                                                                                      // 19628\n  } catch(e) {                                                                                                         // 19629\n  }                                                                                                                    // 19630\n}                                                                                                                      // 19631\n                                                                                                                       // 19632\nmodule.exports = focusNode;                                                                                            // 19633\n                                                                                                                       // 19634\n},{}],\"react/lib/forEachAccumulated\":[function(require,module,exports){                                                // 19635\n/**                                                                                                                    // 19636\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19637\n * All rights reserved.                                                                                                // 19638\n *                                                                                                                     // 19639\n * This source code is licensed under the BSD-style license found in the                                               // 19640\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19641\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19642\n *                                                                                                                     // 19643\n * @providesModule forEachAccumulated                                                                                  // 19644\n */                                                                                                                    // 19645\n                                                                                                                       // 19646\n'use strict';                                                                                                          // 19647\n                                                                                                                       // 19648\n/**                                                                                                                    // 19649\n * @param {array} an \"accumulation\" of items which is either an Array or                                               // 19650\n * a single item. Useful when paired with the `accumulate` module. This is a                                           // 19651\n * simple utility that allows us to reason about a collection of items, but                                            // 19652\n * handling the case when there is exactly one item (and we do not need to                                             // 19653\n * allocate an array).                                                                                                 // 19654\n */                                                                                                                    // 19655\nvar forEachAccumulated = function(arr, cb, scope) {                                                                    // 19656\n  if (Array.isArray(arr)) {                                                                                            // 19657\n    arr.forEach(cb, scope);                                                                                            // 19658\n  } else if (arr) {                                                                                                    // 19659\n    cb.call(scope, arr);                                                                                               // 19660\n  }                                                                                                                    // 19661\n};                                                                                                                     // 19662\n                                                                                                                       // 19663\nmodule.exports = forEachAccumulated;                                                                                   // 19664\n                                                                                                                       // 19665\n},{}],\"react/lib/getActiveElement\":[function(require,module,exports){                                                  // 19666\n/**                                                                                                                    // 19667\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19668\n * All rights reserved.                                                                                                // 19669\n *                                                                                                                     // 19670\n * This source code is licensed under the BSD-style license found in the                                               // 19671\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19672\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19673\n *                                                                                                                     // 19674\n * @providesModule getActiveElement                                                                                    // 19675\n * @typechecks                                                                                                         // 19676\n */                                                                                                                    // 19677\n                                                                                                                       // 19678\n/**                                                                                                                    // 19679\n * Same as document.activeElement but wraps in a try-catch block. In IE it is                                          // 19680\n * not safe to call document.activeElement if there is nothing focused.                                                // 19681\n *                                                                                                                     // 19682\n * The activeElement will be null only if the document body is not yet defined.                                        // 19683\n */                                                                                                                    // 19684\nfunction getActiveElement() /*?DOMElement*/ {                                                                          // 19685\n  try {                                                                                                                // 19686\n    return document.activeElement || document.body;                                                                    // 19687\n  } catch (e) {                                                                                                        // 19688\n    return document.body;                                                                                              // 19689\n  }                                                                                                                    // 19690\n}                                                                                                                      // 19691\n                                                                                                                       // 19692\nmodule.exports = getActiveElement;                                                                                     // 19693\n                                                                                                                       // 19694\n},{}],\"react/lib/getEventCharCode\":[function(require,module,exports){                                                  // 19695\n/**                                                                                                                    // 19696\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19697\n * All rights reserved.                                                                                                // 19698\n *                                                                                                                     // 19699\n * This source code is licensed under the BSD-style license found in the                                               // 19700\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19701\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19702\n *                                                                                                                     // 19703\n * @providesModule getEventCharCode                                                                                    // 19704\n * @typechecks static-only                                                                                             // 19705\n */                                                                                                                    // 19706\n                                                                                                                       // 19707\n'use strict';                                                                                                          // 19708\n                                                                                                                       // 19709\n/**                                                                                                                    // 19710\n * `charCode` represents the actual \"character code\" and is safe to use with                                           // 19711\n * `String.fromCharCode`. As such, only keys that correspond to printable                                              // 19712\n * characters produce a valid `charCode`, the only exception to this is Enter.                                         // 19713\n * The Tab-key is considered non-printable and does not have a `charCode`,                                             // 19714\n * presumably because it does not produce a tab-character in browsers.                                                 // 19715\n *                                                                                                                     // 19716\n * @param {object} nativeEvent Native browser event.                                                                   // 19717\n * @return {string} Normalized `charCode` property.                                                                    // 19718\n */                                                                                                                    // 19719\nfunction getEventCharCode(nativeEvent) {                                                                               // 19720\n  var charCode;                                                                                                        // 19721\n  var keyCode = nativeEvent.keyCode;                                                                                   // 19722\n                                                                                                                       // 19723\n  if ('charCode' in nativeEvent) {                                                                                     // 19724\n    charCode = nativeEvent.charCode;                                                                                   // 19725\n                                                                                                                       // 19726\n    // FF does not set `charCode` for the Enter-key, check against `keyCode`.                                          // 19727\n    if (charCode === 0 && keyCode === 13) {                                                                            // 19728\n      charCode = 13;                                                                                                   // 19729\n    }                                                                                                                  // 19730\n  } else {                                                                                                             // 19731\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.                                         // 19732\n    charCode = keyCode;                                                                                                // 19733\n  }                                                                                                                    // 19734\n                                                                                                                       // 19735\n  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.                                       // 19736\n  // Must not discard the (non-)printable Enter-key.                                                                   // 19737\n  if (charCode >= 32 || charCode === 13) {                                                                             // 19738\n    return charCode;                                                                                                   // 19739\n  }                                                                                                                    // 19740\n                                                                                                                       // 19741\n  return 0;                                                                                                            // 19742\n}                                                                                                                      // 19743\n                                                                                                                       // 19744\nmodule.exports = getEventCharCode;                                                                                     // 19745\n                                                                                                                       // 19746\n},{}],\"react/lib/getEventKey\":[function(require,module,exports){                                                       // 19747\n/**                                                                                                                    // 19748\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19749\n * All rights reserved.                                                                                                // 19750\n *                                                                                                                     // 19751\n * This source code is licensed under the BSD-style license found in the                                               // 19752\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19753\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19754\n *                                                                                                                     // 19755\n * @providesModule getEventKey                                                                                         // 19756\n * @typechecks static-only                                                                                             // 19757\n */                                                                                                                    // 19758\n                                                                                                                       // 19759\n'use strict';                                                                                                          // 19760\n                                                                                                                       // 19761\nvar getEventCharCode = require(\"./getEventCharCode\");                                                                  // 19762\n                                                                                                                       // 19763\n/**                                                                                                                    // 19764\n * Normalization of deprecated HTML5 `key` values                                                                      // 19765\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 19766\n */                                                                                                                    // 19767\nvar normalizeKey = {                                                                                                   // 19768\n  'Esc': 'Escape',                                                                                                     // 19769\n  'Spacebar': ' ',                                                                                                     // 19770\n  'Left': 'ArrowLeft',                                                                                                 // 19771\n  'Up': 'ArrowUp',                                                                                                     // 19772\n  'Right': 'ArrowRight',                                                                                               // 19773\n  'Down': 'ArrowDown',                                                                                                 // 19774\n  'Del': 'Delete',                                                                                                     // 19775\n  'Win': 'OS',                                                                                                         // 19776\n  'Menu': 'ContextMenu',                                                                                               // 19777\n  'Apps': 'ContextMenu',                                                                                               // 19778\n  'Scroll': 'ScrollLock',                                                                                              // 19779\n  'MozPrintableKey': 'Unidentified'                                                                                    // 19780\n};                                                                                                                     // 19781\n                                                                                                                       // 19782\n/**                                                                                                                    // 19783\n * Translation from legacy `keyCode` to HTML5 `key`                                                                    // 19784\n * Only special keys supported, all others depend on keyboard layout or browser                                        // 19785\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names                                       // 19786\n */                                                                                                                    // 19787\nvar translateToKey = {                                                                                                 // 19788\n  8: 'Backspace',                                                                                                      // 19789\n  9: 'Tab',                                                                                                            // 19790\n  12: 'Clear',                                                                                                         // 19791\n  13: 'Enter',                                                                                                         // 19792\n  16: 'Shift',                                                                                                         // 19793\n  17: 'Control',                                                                                                       // 19794\n  18: 'Alt',                                                                                                           // 19795\n  19: 'Pause',                                                                                                         // 19796\n  20: 'CapsLock',                                                                                                      // 19797\n  27: 'Escape',                                                                                                        // 19798\n  32: ' ',                                                                                                             // 19799\n  33: 'PageUp',                                                                                                        // 19800\n  34: 'PageDown',                                                                                                      // 19801\n  35: 'End',                                                                                                           // 19802\n  36: 'Home',                                                                                                          // 19803\n  37: 'ArrowLeft',                                                                                                     // 19804\n  38: 'ArrowUp',                                                                                                       // 19805\n  39: 'ArrowRight',                                                                                                    // 19806\n  40: 'ArrowDown',                                                                                                     // 19807\n  45: 'Insert',                                                                                                        // 19808\n  46: 'Delete',                                                                                                        // 19809\n  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',                                                    // 19810\n  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',                                                 // 19811\n  144: 'NumLock',                                                                                                      // 19812\n  145: 'ScrollLock',                                                                                                   // 19813\n  224: 'Meta'                                                                                                          // 19814\n};                                                                                                                     // 19815\n                                                                                                                       // 19816\n/**                                                                                                                    // 19817\n * @param {object} nativeEvent Native browser event.                                                                   // 19818\n * @return {string} Normalized `key` property.                                                                         // 19819\n */                                                                                                                    // 19820\nfunction getEventKey(nativeEvent) {                                                                                    // 19821\n  if (nativeEvent.key) {                                                                                               // 19822\n    // Normalize inconsistent values reported by browsers due to                                                       // 19823\n    // implementations of a working draft specification.                                                               // 19824\n                                                                                                                       // 19825\n    // FireFox implements `key` but returns `MozPrintableKey` for all                                                  // 19826\n    // printable characters (normalized to `Unidentified`), ignore it.                                                 // 19827\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;                                                        // 19828\n    if (key !== 'Unidentified') {                                                                                      // 19829\n      return key;                                                                                                      // 19830\n    }                                                                                                                  // 19831\n  }                                                                                                                    // 19832\n                                                                                                                       // 19833\n  // Browser does not implement `key`, polyfill as much of it as we can.                                               // 19834\n  if (nativeEvent.type === 'keypress') {                                                                               // 19835\n    var charCode = getEventCharCode(nativeEvent);                                                                      // 19836\n                                                                                                                       // 19837\n    // The enter-key is technically both printable and non-printable and can                                           // 19838\n    // thus be captured by `keypress`, no other non-printable key should.                                              // 19839\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);                                                  // 19840\n  }                                                                                                                    // 19841\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {                                                // 19842\n    // While user keyboard layout determines the actual meaning of each                                                // 19843\n    // `keyCode` value, almost all function keys have a universal value.                                               // 19844\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';                                                      // 19845\n  }                                                                                                                    // 19846\n  return '';                                                                                                           // 19847\n}                                                                                                                      // 19848\n                                                                                                                       // 19849\nmodule.exports = getEventKey;                                                                                          // 19850\n                                                                                                                       // 19851\n},{\"./getEventCharCode\":\"react/lib/getEventCharCode\"}],\"react/lib/getEventModifierState\":[function(require,module,exports){\n/**                                                                                                                    // 19853\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19854\n * All rights reserved.                                                                                                // 19855\n *                                                                                                                     // 19856\n * This source code is licensed under the BSD-style license found in the                                               // 19857\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19858\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19859\n *                                                                                                                     // 19860\n * @providesModule getEventModifierState                                                                               // 19861\n * @typechecks static-only                                                                                             // 19862\n */                                                                                                                    // 19863\n                                                                                                                       // 19864\n'use strict';                                                                                                          // 19865\n                                                                                                                       // 19866\n/**                                                                                                                    // 19867\n * Translation from modifier key to the associated property in the event.                                              // 19868\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers                                                        // 19869\n */                                                                                                                    // 19870\n                                                                                                                       // 19871\nvar modifierKeyToProp = {                                                                                              // 19872\n  'Alt': 'altKey',                                                                                                     // 19873\n  'Control': 'ctrlKey',                                                                                                // 19874\n  'Meta': 'metaKey',                                                                                                   // 19875\n  'Shift': 'shiftKey'                                                                                                  // 19876\n};                                                                                                                     // 19877\n                                                                                                                       // 19878\n// IE8 does not implement getModifierState so we simply map it to the only                                             // 19879\n// modifier keys exposed by the event itself, does not support Lock-keys.                                              // 19880\n// Currently, all major browsers except Chrome seems to support Lock-keys.                                             // 19881\nfunction modifierStateGetter(keyArg) {                                                                                 // 19882\n  /*jshint validthis:true */                                                                                           // 19883\n  var syntheticEvent = this;                                                                                           // 19884\n  var nativeEvent = syntheticEvent.nativeEvent;                                                                        // 19885\n  if (nativeEvent.getModifierState) {                                                                                  // 19886\n    return nativeEvent.getModifierState(keyArg);                                                                       // 19887\n  }                                                                                                                    // 19888\n  var keyProp = modifierKeyToProp[keyArg];                                                                             // 19889\n  return keyProp ? !!nativeEvent[keyProp] : false;                                                                     // 19890\n}                                                                                                                      // 19891\n                                                                                                                       // 19892\nfunction getEventModifierState(nativeEvent) {                                                                          // 19893\n  return modifierStateGetter;                                                                                          // 19894\n}                                                                                                                      // 19895\n                                                                                                                       // 19896\nmodule.exports = getEventModifierState;                                                                                // 19897\n                                                                                                                       // 19898\n},{}],\"react/lib/getEventTarget\":[function(require,module,exports){                                                    // 19899\n/**                                                                                                                    // 19900\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19901\n * All rights reserved.                                                                                                // 19902\n *                                                                                                                     // 19903\n * This source code is licensed under the BSD-style license found in the                                               // 19904\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19905\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19906\n *                                                                                                                     // 19907\n * @providesModule getEventTarget                                                                                      // 19908\n * @typechecks static-only                                                                                             // 19909\n */                                                                                                                    // 19910\n                                                                                                                       // 19911\n'use strict';                                                                                                          // 19912\n                                                                                                                       // 19913\n/**                                                                                                                    // 19914\n * Gets the target node from a native browser event by accounting for                                                  // 19915\n * inconsistencies in browser DOM APIs.                                                                                // 19916\n *                                                                                                                     // 19917\n * @param {object} nativeEvent Native browser event.                                                                   // 19918\n * @return {DOMEventTarget} Target node.                                                                               // 19919\n */                                                                                                                    // 19920\nfunction getEventTarget(nativeEvent) {                                                                                 // 19921\n  var target = nativeEvent.target || nativeEvent.srcElement || window;                                                 // 19922\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).                                                       // 19923\n  // @see http://www.quirksmode.org/js/events_properties.html                                                          // 19924\n  return target.nodeType === 3 ? target.parentNode : target;                                                           // 19925\n}                                                                                                                      // 19926\n                                                                                                                       // 19927\nmodule.exports = getEventTarget;                                                                                       // 19928\n                                                                                                                       // 19929\n},{}],\"react/lib/getIteratorFn\":[function(require,module,exports){                                                     // 19930\n/**                                                                                                                    // 19931\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19932\n * All rights reserved.                                                                                                // 19933\n *                                                                                                                     // 19934\n * This source code is licensed under the BSD-style license found in the                                               // 19935\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19936\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19937\n *                                                                                                                     // 19938\n * @providesModule getIteratorFn                                                                                       // 19939\n * @typechecks static-only                                                                                             // 19940\n */                                                                                                                    // 19941\n                                                                                                                       // 19942\n'use strict';                                                                                                          // 19943\n                                                                                                                       // 19944\n/* global Symbol */                                                                                                    // 19945\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                                 // 19946\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.                                                        // 19947\n                                                                                                                       // 19948\n/**                                                                                                                    // 19949\n * Returns the iterator method function contained on the iterable object.                                              // 19950\n *                                                                                                                     // 19951\n * Be sure to invoke the function with the iterable as context:                                                        // 19952\n *                                                                                                                     // 19953\n *     var iteratorFn = getIteratorFn(myIterable);                                                                     // 19954\n *     if (iteratorFn) {                                                                                               // 19955\n *       var iterator = iteratorFn.call(myIterable);                                                                   // 19956\n *       ...                                                                                                           // 19957\n *     }                                                                                                               // 19958\n *                                                                                                                     // 19959\n * @param {?object} maybeIterable                                                                                      // 19960\n * @return {?function}                                                                                                 // 19961\n */                                                                                                                    // 19962\nfunction getIteratorFn(maybeIterable) {                                                                                // 19963\n  var iteratorFn = maybeIterable && (                                                                                  // 19964\n    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])                         // 19965\n  );                                                                                                                   // 19966\n  if (typeof iteratorFn === 'function') {                                                                              // 19967\n    return iteratorFn;                                                                                                 // 19968\n  }                                                                                                                    // 19969\n}                                                                                                                      // 19970\n                                                                                                                       // 19971\nmodule.exports = getIteratorFn;                                                                                        // 19972\n                                                                                                                       // 19973\n},{}],\"react/lib/getMarkupWrap\":[function(require,module,exports){                                                     // 19974\n(function (process){                                                                                                   // 19975\n/**                                                                                                                    // 19976\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 19977\n * All rights reserved.                                                                                                // 19978\n *                                                                                                                     // 19979\n * This source code is licensed under the BSD-style license found in the                                               // 19980\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 19981\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 19982\n *                                                                                                                     // 19983\n * @providesModule getMarkupWrap                                                                                       // 19984\n */                                                                                                                    // 19985\n                                                                                                                       // 19986\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 19987\n                                                                                                                       // 19988\nvar invariant = require(\"./invariant\");                                                                                // 19989\n                                                                                                                       // 19990\n/**                                                                                                                    // 19991\n * Dummy container used to detect which wraps are necessary.                                                           // 19992\n */                                                                                                                    // 19993\nvar dummyNode =                                                                                                        // 19994\n  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;                                               // 19995\n                                                                                                                       // 19996\n/**                                                                                                                    // 19997\n * Some browsers cannot use `innerHTML` to render certain elements standalone,                                         // 19998\n * so we wrap them, render the wrapped nodes, then extract the desired node.                                           // 19999\n *                                                                                                                     // 20000\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').                                           // 20001\n */                                                                                                                    // 20002\nvar shouldWrap = {                                                                                                     // 20003\n  // Force wrapping for SVG elements because if they get created inside a <div>,                                       // 20004\n  // they will be initialized in the wrong namespace (and will not display).                                           // 20005\n  'circle': true,                                                                                                      // 20006\n  'clipPath': true,                                                                                                    // 20007\n  'defs': true,                                                                                                        // 20008\n  'ellipse': true,                                                                                                     // 20009\n  'g': true,                                                                                                           // 20010\n  'line': true,                                                                                                        // 20011\n  'linearGradient': true,                                                                                              // 20012\n  'path': true,                                                                                                        // 20013\n  'polygon': true,                                                                                                     // 20014\n  'polyline': true,                                                                                                    // 20015\n  'radialGradient': true,                                                                                              // 20016\n  'rect': true,                                                                                                        // 20017\n  'stop': true,                                                                                                        // 20018\n  'text': true                                                                                                         // 20019\n};                                                                                                                     // 20020\n                                                                                                                       // 20021\nvar selectWrap = [1, '<select multiple=\"true\">', '</select>'];                                                         // 20022\nvar tableWrap = [1, '<table>', '</table>'];                                                                            // 20023\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];                                                       // 20024\n                                                                                                                       // 20025\nvar svgWrap = [1, '<svg>', '</svg>'];                                                                                  // 20026\n                                                                                                                       // 20027\nvar markupWrap = {                                                                                                     // 20028\n  '*': [1, '?<div>', '</div>'],                                                                                        // 20029\n                                                                                                                       // 20030\n  'area': [1, '<map>', '</map>'],                                                                                      // 20031\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],                                               // 20032\n  'legend': [1, '<fieldset>', '</fieldset>'],                                                                          // 20033\n  'param': [1, '<object>', '</object>'],                                                                               // 20034\n  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 20035\n                                                                                                                       // 20036\n  'optgroup': selectWrap,                                                                                              // 20037\n  'option': selectWrap,                                                                                                // 20038\n                                                                                                                       // 20039\n  'caption': tableWrap,                                                                                                // 20040\n  'colgroup': tableWrap,                                                                                               // 20041\n  'tbody': tableWrap,                                                                                                  // 20042\n  'tfoot': tableWrap,                                                                                                  // 20043\n  'thead': tableWrap,                                                                                                  // 20044\n                                                                                                                       // 20045\n  'td': trWrap,                                                                                                        // 20046\n  'th': trWrap,                                                                                                        // 20047\n                                                                                                                       // 20048\n  'circle': svgWrap,                                                                                                   // 20049\n  'clipPath': svgWrap,                                                                                                 // 20050\n  'defs': svgWrap,                                                                                                     // 20051\n  'ellipse': svgWrap,                                                                                                  // 20052\n  'g': svgWrap,                                                                                                        // 20053\n  'line': svgWrap,                                                                                                     // 20054\n  'linearGradient': svgWrap,                                                                                           // 20055\n  'path': svgWrap,                                                                                                     // 20056\n  'polygon': svgWrap,                                                                                                  // 20057\n  'polyline': svgWrap,                                                                                                 // 20058\n  'radialGradient': svgWrap,                                                                                           // 20059\n  'rect': svgWrap,                                                                                                     // 20060\n  'stop': svgWrap,                                                                                                     // 20061\n  'text': svgWrap                                                                                                      // 20062\n};                                                                                                                     // 20063\n                                                                                                                       // 20064\n/**                                                                                                                    // 20065\n * Gets the markup wrap configuration for the supplied `nodeName`.                                                     // 20066\n *                                                                                                                     // 20067\n * NOTE: This lazily detects which wraps are necessary for the current browser.                                        // 20068\n *                                                                                                                     // 20069\n * @param {string} nodeName Lowercase `nodeName`.                                                                      // 20070\n * @return {?array} Markup wrap configuration, if applicable.                                                          // 20071\n */                                                                                                                    // 20072\nfunction getMarkupWrap(nodeName) {                                                                                     // 20073\n  (\"production\" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));\n  if (!markupWrap.hasOwnProperty(nodeName)) {                                                                          // 20075\n    nodeName = '*';                                                                                                    // 20076\n  }                                                                                                                    // 20077\n  if (!shouldWrap.hasOwnProperty(nodeName)) {                                                                          // 20078\n    if (nodeName === '*') {                                                                                            // 20079\n      dummyNode.innerHTML = '<link />';                                                                                // 20080\n    } else {                                                                                                           // 20081\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';                                                   // 20082\n    }                                                                                                                  // 20083\n    shouldWrap[nodeName] = !dummyNode.firstChild;                                                                      // 20084\n  }                                                                                                                    // 20085\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;                                                           // 20086\n}                                                                                                                      // 20087\n                                                                                                                       // 20088\n                                                                                                                       // 20089\nmodule.exports = getMarkupWrap;                                                                                        // 20090\n                                                                                                                       // 20091\n}).call(this,require('_process'))                                                                                      // 20092\n                                                                                                                       // 20093\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/getNodeForCharacterOffset\":[function(require,module,exports){\n/**                                                                                                                    // 20095\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20096\n * All rights reserved.                                                                                                // 20097\n *                                                                                                                     // 20098\n * This source code is licensed under the BSD-style license found in the                                               // 20099\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20100\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20101\n *                                                                                                                     // 20102\n * @providesModule getNodeForCharacterOffset                                                                           // 20103\n */                                                                                                                    // 20104\n                                                                                                                       // 20105\n'use strict';                                                                                                          // 20106\n                                                                                                                       // 20107\n/**                                                                                                                    // 20108\n * Given any node return the first leaf node without children.                                                         // 20109\n *                                                                                                                     // 20110\n * @param {DOMElement|DOMTextNode} node                                                                                // 20111\n * @return {DOMElement|DOMTextNode}                                                                                    // 20112\n */                                                                                                                    // 20113\nfunction getLeafNode(node) {                                                                                           // 20114\n  while (node && node.firstChild) {                                                                                    // 20115\n    node = node.firstChild;                                                                                            // 20116\n  }                                                                                                                    // 20117\n  return node;                                                                                                         // 20118\n}                                                                                                                      // 20119\n                                                                                                                       // 20120\n/**                                                                                                                    // 20121\n * Get the next sibling within a container. This will walk up the                                                      // 20122\n * DOM if a node's siblings have been exhausted.                                                                       // 20123\n *                                                                                                                     // 20124\n * @param {DOMElement|DOMTextNode} node                                                                                // 20125\n * @return {?DOMElement|DOMTextNode}                                                                                   // 20126\n */                                                                                                                    // 20127\nfunction getSiblingNode(node) {                                                                                        // 20128\n  while (node) {                                                                                                       // 20129\n    if (node.nextSibling) {                                                                                            // 20130\n      return node.nextSibling;                                                                                         // 20131\n    }                                                                                                                  // 20132\n    node = node.parentNode;                                                                                            // 20133\n  }                                                                                                                    // 20134\n}                                                                                                                      // 20135\n                                                                                                                       // 20136\n/**                                                                                                                    // 20137\n * Get object describing the nodes which contain characters at offset.                                                 // 20138\n *                                                                                                                     // 20139\n * @param {DOMElement|DOMTextNode} root                                                                                // 20140\n * @param {number} offset                                                                                              // 20141\n * @return {?object}                                                                                                   // 20142\n */                                                                                                                    // 20143\nfunction getNodeForCharacterOffset(root, offset) {                                                                     // 20144\n  var node = getLeafNode(root);                                                                                        // 20145\n  var nodeStart = 0;                                                                                                   // 20146\n  var nodeEnd = 0;                                                                                                     // 20147\n                                                                                                                       // 20148\n  while (node) {                                                                                                       // 20149\n    if (node.nodeType === 3) {                                                                                         // 20150\n      nodeEnd = nodeStart + node.textContent.length;                                                                   // 20151\n                                                                                                                       // 20152\n      if (nodeStart <= offset && nodeEnd >= offset) {                                                                  // 20153\n        return {                                                                                                       // 20154\n          node: node,                                                                                                  // 20155\n          offset: offset - nodeStart                                                                                   // 20156\n        };                                                                                                             // 20157\n      }                                                                                                                // 20158\n                                                                                                                       // 20159\n      nodeStart = nodeEnd;                                                                                             // 20160\n    }                                                                                                                  // 20161\n                                                                                                                       // 20162\n    node = getLeafNode(getSiblingNode(node));                                                                          // 20163\n  }                                                                                                                    // 20164\n}                                                                                                                      // 20165\n                                                                                                                       // 20166\nmodule.exports = getNodeForCharacterOffset;                                                                            // 20167\n                                                                                                                       // 20168\n},{}],\"react/lib/getReactRootElementInContainer\":[function(require,module,exports){                                    // 20169\n/**                                                                                                                    // 20170\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20171\n * All rights reserved.                                                                                                // 20172\n *                                                                                                                     // 20173\n * This source code is licensed under the BSD-style license found in the                                               // 20174\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20175\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20176\n *                                                                                                                     // 20177\n * @providesModule getReactRootElementInContainer                                                                      // 20178\n */                                                                                                                    // 20179\n                                                                                                                       // 20180\n'use strict';                                                                                                          // 20181\n                                                                                                                       // 20182\nvar DOC_NODE_TYPE = 9;                                                                                                 // 20183\n                                                                                                                       // 20184\n/**                                                                                                                    // 20185\n * @param {DOMElement|DOMDocument} container DOM element that may contain                                              // 20186\n *                                           a React component                                                         // 20187\n * @return {?*} DOM element that may have the reactRoot ID, or null.                                                   // 20188\n */                                                                                                                    // 20189\nfunction getReactRootElementInContainer(container) {                                                                   // 20190\n  if (!container) {                                                                                                    // 20191\n    return null;                                                                                                       // 20192\n  }                                                                                                                    // 20193\n                                                                                                                       // 20194\n  if (container.nodeType === DOC_NODE_TYPE) {                                                                          // 20195\n    return container.documentElement;                                                                                  // 20196\n  } else {                                                                                                             // 20197\n    return container.firstChild;                                                                                       // 20198\n  }                                                                                                                    // 20199\n}                                                                                                                      // 20200\n                                                                                                                       // 20201\nmodule.exports = getReactRootElementInContainer;                                                                       // 20202\n                                                                                                                       // 20203\n},{}],\"react/lib/getTextContentAccessor\":[function(require,module,exports){                                            // 20204\n/**                                                                                                                    // 20205\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20206\n * All rights reserved.                                                                                                // 20207\n *                                                                                                                     // 20208\n * This source code is licensed under the BSD-style license found in the                                               // 20209\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20210\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20211\n *                                                                                                                     // 20212\n * @providesModule getTextContentAccessor                                                                              // 20213\n */                                                                                                                    // 20214\n                                                                                                                       // 20215\n'use strict';                                                                                                          // 20216\n                                                                                                                       // 20217\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 20218\n                                                                                                                       // 20219\nvar contentKey = null;                                                                                                 // 20220\n                                                                                                                       // 20221\n/**                                                                                                                    // 20222\n * Gets the key used to access text content on a DOM node.                                                             // 20223\n *                                                                                                                     // 20224\n * @return {?string} Key used to access text content.                                                                  // 20225\n * @internal                                                                                                           // 20226\n */                                                                                                                    // 20227\nfunction getTextContentAccessor() {                                                                                    // 20228\n  if (!contentKey && ExecutionEnvironment.canUseDOM) {                                                                 // 20229\n    // Prefer textContent to innerText because many browsers support both but                                          // 20230\n    // SVG <text> elements don't support innerText even when <div> does.                                               // 20231\n    contentKey = 'textContent' in document.documentElement ?                                                           // 20232\n      'textContent' :                                                                                                  // 20233\n      'innerText';                                                                                                     // 20234\n  }                                                                                                                    // 20235\n  return contentKey;                                                                                                   // 20236\n}                                                                                                                      // 20237\n                                                                                                                       // 20238\nmodule.exports = getTextContentAccessor;                                                                               // 20239\n                                                                                                                       // 20240\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\"}],\"react/lib/getUnboundedScrollPosition\":[function(require,module,exports){\n/**                                                                                                                    // 20242\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20243\n * All rights reserved.                                                                                                // 20244\n *                                                                                                                     // 20245\n * This source code is licensed under the BSD-style license found in the                                               // 20246\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20247\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20248\n *                                                                                                                     // 20249\n * @providesModule getUnboundedScrollPosition                                                                          // 20250\n * @typechecks                                                                                                         // 20251\n */                                                                                                                    // 20252\n                                                                                                                       // 20253\n\"use strict\";                                                                                                          // 20254\n                                                                                                                       // 20255\n/**                                                                                                                    // 20256\n * Gets the scroll position of the supplied element or window.                                                         // 20257\n *                                                                                                                     // 20258\n * The return values are unbounded, unlike `getScrollPosition`. This means they                                        // 20259\n * may be negative or exceed the element boundaries (which is possible using                                           // 20260\n * inertial scrolling).                                                                                                // 20261\n *                                                                                                                     // 20262\n * @param {DOMWindow|DOMElement} scrollable                                                                            // 20263\n * @return {object} Map with `x` and `y` keys.                                                                         // 20264\n */                                                                                                                    // 20265\nfunction getUnboundedScrollPosition(scrollable) {                                                                      // 20266\n  if (scrollable === window) {                                                                                         // 20267\n    return {                                                                                                           // 20268\n      x: window.pageXOffset || document.documentElement.scrollLeft,                                                    // 20269\n      y: window.pageYOffset || document.documentElement.scrollTop                                                      // 20270\n    };                                                                                                                 // 20271\n  }                                                                                                                    // 20272\n  return {                                                                                                             // 20273\n    x: scrollable.scrollLeft,                                                                                          // 20274\n    y: scrollable.scrollTop                                                                                            // 20275\n  };                                                                                                                   // 20276\n}                                                                                                                      // 20277\n                                                                                                                       // 20278\nmodule.exports = getUnboundedScrollPosition;                                                                           // 20279\n                                                                                                                       // 20280\n},{}],\"react/lib/hyphenateStyleName\":[function(require,module,exports){                                                // 20281\n/**                                                                                                                    // 20282\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20283\n * All rights reserved.                                                                                                // 20284\n *                                                                                                                     // 20285\n * This source code is licensed under the BSD-style license found in the                                               // 20286\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20287\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20288\n *                                                                                                                     // 20289\n * @providesModule hyphenateStyleName                                                                                  // 20290\n * @typechecks                                                                                                         // 20291\n */                                                                                                                    // 20292\n                                                                                                                       // 20293\n\"use strict\";                                                                                                          // 20294\n                                                                                                                       // 20295\nvar hyphenate = require(\"./hyphenate\");                                                                                // 20296\n                                                                                                                       // 20297\nvar msPattern = /^ms-/;                                                                                                // 20298\n                                                                                                                       // 20299\n/**                                                                                                                    // 20300\n * Hyphenates a camelcased CSS property name, for example:                                                             // 20301\n *                                                                                                                     // 20302\n *   > hyphenateStyleName('backgroundColor')                                                                           // 20303\n *   < \"background-color\"                                                                                              // 20304\n *   > hyphenateStyleName('MozTransition')                                                                             // 20305\n *   < \"-moz-transition\"                                                                                               // 20306\n *   > hyphenateStyleName('msTransition')                                                                              // 20307\n *   < \"-ms-transition\"                                                                                                // 20308\n *                                                                                                                     // 20309\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix                                         // 20310\n * is converted to `-ms-`.                                                                                             // 20311\n *                                                                                                                     // 20312\n * @param {string} string                                                                                              // 20313\n * @return {string}                                                                                                    // 20314\n */                                                                                                                    // 20315\nfunction hyphenateStyleName(string) {                                                                                  // 20316\n  return hyphenate(string).replace(msPattern, '-ms-');                                                                 // 20317\n}                                                                                                                      // 20318\n                                                                                                                       // 20319\nmodule.exports = hyphenateStyleName;                                                                                   // 20320\n                                                                                                                       // 20321\n},{\"./hyphenate\":\"react/lib/hyphenate\"}],\"react/lib/hyphenate\":[function(require,module,exports){                      // 20322\n/**                                                                                                                    // 20323\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20324\n * All rights reserved.                                                                                                // 20325\n *                                                                                                                     // 20326\n * This source code is licensed under the BSD-style license found in the                                               // 20327\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20328\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20329\n *                                                                                                                     // 20330\n * @providesModule hyphenate                                                                                           // 20331\n * @typechecks                                                                                                         // 20332\n */                                                                                                                    // 20333\n                                                                                                                       // 20334\nvar _uppercasePattern = /([A-Z])/g;                                                                                    // 20335\n                                                                                                                       // 20336\n/**                                                                                                                    // 20337\n * Hyphenates a camelcased string, for example:                                                                        // 20338\n *                                                                                                                     // 20339\n *   > hyphenate('backgroundColor')                                                                                    // 20340\n *   < \"background-color\"                                                                                              // 20341\n *                                                                                                                     // 20342\n * For CSS style names, use `hyphenateStyleName` instead which works properly                                          // 20343\n * with all vendor prefixes, including `ms`.                                                                           // 20344\n *                                                                                                                     // 20345\n * @param {string} string                                                                                              // 20346\n * @return {string}                                                                                                    // 20347\n */                                                                                                                    // 20348\nfunction hyphenate(string) {                                                                                           // 20349\n  return string.replace(_uppercasePattern, '-$1').toLowerCase();                                                       // 20350\n}                                                                                                                      // 20351\n                                                                                                                       // 20352\nmodule.exports = hyphenate;                                                                                            // 20353\n                                                                                                                       // 20354\n},{}],\"react/lib/instantiateReactComponent\":[function(require,module,exports){                                         // 20355\n(function (process){                                                                                                   // 20356\n/**                                                                                                                    // 20357\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20358\n * All rights reserved.                                                                                                // 20359\n *                                                                                                                     // 20360\n * This source code is licensed under the BSD-style license found in the                                               // 20361\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20362\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20363\n *                                                                                                                     // 20364\n * @providesModule instantiateReactComponent                                                                           // 20365\n * @typechecks static-only                                                                                             // 20366\n */                                                                                                                    // 20367\n                                                                                                                       // 20368\n'use strict';                                                                                                          // 20369\n                                                                                                                       // 20370\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");                                                    // 20371\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");                                                            // 20372\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");                                                          // 20373\n                                                                                                                       // 20374\nvar assign = require(\"./Object.assign\");                                                                               // 20375\nvar invariant = require(\"./invariant\");                                                                                // 20376\nvar warning = require(\"./warning\");                                                                                    // 20377\n                                                                                                                       // 20378\n// To avoid a cyclic dependency, we create the final class in this module                                              // 20379\nvar ReactCompositeComponentWrapper = function() { };                                                                   // 20380\nassign(                                                                                                                // 20381\n  ReactCompositeComponentWrapper.prototype,                                                                            // 20382\n  ReactCompositeComponent.Mixin,                                                                                       // 20383\n  {                                                                                                                    // 20384\n    _instantiateReactComponent: instantiateReactComponent                                                              // 20385\n  }                                                                                                                    // 20386\n);                                                                                                                     // 20387\n                                                                                                                       // 20388\n/**                                                                                                                    // 20389\n * Check if the type reference is a known internal type. I.e. not a user                                               // 20390\n * provided composite type.                                                                                            // 20391\n *                                                                                                                     // 20392\n * @param {function} type                                                                                              // 20393\n * @return {boolean} Returns true if this is a valid internal type.                                                    // 20394\n */                                                                                                                    // 20395\nfunction isInternalComponentType(type) {                                                                               // 20396\n  return (                                                                                                             // 20397\n    typeof type === 'function' &&                                                                                      // 20398\n    typeof type.prototype !== 'undefined' &&                                                                           // 20399\n    typeof type.prototype.mountComponent === 'function' &&                                                             // 20400\n    typeof type.prototype.receiveComponent === 'function'                                                              // 20401\n  );                                                                                                                   // 20402\n}                                                                                                                      // 20403\n                                                                                                                       // 20404\n/**                                                                                                                    // 20405\n * Given a ReactNode, create an instance that will actually be mounted.                                                // 20406\n *                                                                                                                     // 20407\n * @param {ReactNode} node                                                                                             // 20408\n * @param {*} parentCompositeType The composite type that resolved this.                                               // 20409\n * @return {object} A new instance of the element's constructor.                                                       // 20410\n * @protected                                                                                                          // 20411\n */                                                                                                                    // 20412\nfunction instantiateReactComponent(node, parentCompositeType) {                                                        // 20413\n  var instance;                                                                                                        // 20414\n                                                                                                                       // 20415\n  if (node === null || node === false) {                                                                               // 20416\n    node = ReactEmptyComponent.emptyElement;                                                                           // 20417\n  }                                                                                                                    // 20418\n                                                                                                                       // 20419\n  if (typeof node === 'object') {                                                                                      // 20420\n    var element = node;                                                                                                // 20421\n    if (\"production\" !== process.env.NODE_ENV) {                                                                       // 20422\n      (\"production\" !== process.env.NODE_ENV ? warning(                                                                // 20423\n        element && (typeof element.type === 'function' ||                                                              // 20424\n                    typeof element.type === 'string'),                                                                 // 20425\n        'Only functions or strings can be mounted as React components.'                                                // 20426\n      ) : null);                                                                                                       // 20427\n    }                                                                                                                  // 20428\n                                                                                                                       // 20429\n    // Special case string values                                                                                      // 20430\n    if (parentCompositeType === element.type &&                                                                        // 20431\n        typeof element.type === 'string') {                                                                            // 20432\n      // Avoid recursion if the wrapper renders itself.                                                                // 20433\n      instance = ReactNativeComponent.createInternalComponent(element);                                                // 20434\n      // All native components are currently wrapped in a composite so we're                                           // 20435\n      // safe to assume that this is what we should instantiate.                                                       // 20436\n    } else if (isInternalComponentType(element.type)) {                                                                // 20437\n      // This is temporarily available for custom components that are not string                                       // 20438\n      // represenations. I.e. ART. Once those are updated to use the string                                            // 20439\n      // representation, we can drop this code path.                                                                   // 20440\n      instance = new element.type(element);                                                                            // 20441\n    } else {                                                                                                           // 20442\n      instance = new ReactCompositeComponentWrapper();                                                                 // 20443\n    }                                                                                                                  // 20444\n  } else if (typeof node === 'string' || typeof node === 'number') {                                                   // 20445\n    instance = ReactNativeComponent.createInstanceForText(node);                                                       // 20446\n  } else {                                                                                                             // 20447\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 20448\n      false,                                                                                                           // 20449\n      'Encountered invalid React node of type %s',                                                                     // 20450\n      typeof node                                                                                                      // 20451\n    ) : invariant(false));                                                                                             // 20452\n  }                                                                                                                    // 20453\n                                                                                                                       // 20454\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 20455\n    (\"production\" !== process.env.NODE_ENV ? warning(                                                                  // 20456\n      typeof instance.construct === 'function' &&                                                                      // 20457\n      typeof instance.mountComponent === 'function' &&                                                                 // 20458\n      typeof instance.receiveComponent === 'function' &&                                                               // 20459\n      typeof instance.unmountComponent === 'function',                                                                 // 20460\n      'Only React Components can be mounted.'                                                                          // 20461\n    ) : null);                                                                                                         // 20462\n  }                                                                                                                    // 20463\n                                                                                                                       // 20464\n  // Sets up the instance. This can probably just move into the constructor now.                                       // 20465\n  instance.construct(node);                                                                                            // 20466\n                                                                                                                       // 20467\n  // These two fields are used by the DOM and ART diffing algorithms                                                   // 20468\n  // respectively. Instead of using expandos on components, we should be                                               // 20469\n  // storing the state needed by the diffing algorithms elsewhere.                                                     // 20470\n  instance._mountIndex = 0;                                                                                            // 20471\n  instance._mountImage = null;                                                                                         // 20472\n                                                                                                                       // 20473\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 20474\n    instance._isOwnerNecessary = false;                                                                                // 20475\n    instance._warnedAboutRefsInRender = false;                                                                         // 20476\n  }                                                                                                                    // 20477\n                                                                                                                       // 20478\n  // Internal instances should fully constructed at this point, so they should                                         // 20479\n  // not get any new fields added to them at this point.                                                               // 20480\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 20481\n    if (Object.preventExtensions) {                                                                                    // 20482\n      Object.preventExtensions(instance);                                                                              // 20483\n    }                                                                                                                  // 20484\n  }                                                                                                                    // 20485\n                                                                                                                       // 20486\n  return instance;                                                                                                     // 20487\n}                                                                                                                      // 20488\n                                                                                                                       // 20489\nmodule.exports = instantiateReactComponent;                                                                            // 20490\n                                                                                                                       // 20491\n}).call(this,require('_process'))                                                                                      // 20492\n                                                                                                                       // 20493\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactCompositeComponent\":\"react/lib/ReactCompositeComponent\",\"./ReactEmptyComponent\":\"react/lib/ReactEmptyComponent\",\"./ReactNativeComponent\":\"react/lib/ReactNativeComponent\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/invariant\":[function(require,module,exports){\n(function (process){                                                                                                   // 20495\n/**                                                                                                                    // 20496\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20497\n * All rights reserved.                                                                                                // 20498\n *                                                                                                                     // 20499\n * This source code is licensed under the BSD-style license found in the                                               // 20500\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20501\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20502\n *                                                                                                                     // 20503\n * @providesModule invariant                                                                                           // 20504\n */                                                                                                                    // 20505\n                                                                                                                       // 20506\n\"use strict\";                                                                                                          // 20507\n                                                                                                                       // 20508\n/**                                                                                                                    // 20509\n * Use invariant() to assert state which your program assumes to be true.                                              // 20510\n *                                                                                                                     // 20511\n * Provide sprintf-style format (only %s is supported) and arguments                                                   // 20512\n * to provide information about what broke and what you were                                                           // 20513\n * expecting.                                                                                                          // 20514\n *                                                                                                                     // 20515\n * The invariant message will be stripped in production, but the invariant                                             // 20516\n * will remain to ensure logic does not differ in production.                                                          // 20517\n */                                                                                                                    // 20518\n                                                                                                                       // 20519\nvar invariant = function(condition, format, a, b, c, d, e, f) {                                                        // 20520\n  if (\"production\" !== process.env.NODE_ENV) {                                                                         // 20521\n    if (format === undefined) {                                                                                        // 20522\n      throw new Error('invariant requires an error message argument');                                                 // 20523\n    }                                                                                                                  // 20524\n  }                                                                                                                    // 20525\n                                                                                                                       // 20526\n  if (!condition) {                                                                                                    // 20527\n    var error;                                                                                                         // 20528\n    if (format === undefined) {                                                                                        // 20529\n      error = new Error(                                                                                               // 20530\n        'Minified exception occurred; use the non-minified dev environment ' +                                         // 20531\n        'for the full error message and additional helpful warnings.'                                                  // 20532\n      );                                                                                                               // 20533\n    } else {                                                                                                           // 20534\n      var args = [a, b, c, d, e, f];                                                                                   // 20535\n      var argIndex = 0;                                                                                                // 20536\n      error = new Error(                                                                                               // 20537\n        'Invariant Violation: ' +                                                                                      // 20538\n        format.replace(/%s/g, function() { return args[argIndex++]; })                                                 // 20539\n      );                                                                                                               // 20540\n    }                                                                                                                  // 20541\n                                                                                                                       // 20542\n    error.framesToPop = 1; // we don't care about invariant's own frame                                                // 20543\n    throw error;                                                                                                       // 20544\n  }                                                                                                                    // 20545\n};                                                                                                                     // 20546\n                                                                                                                       // 20547\nmodule.exports = invariant;                                                                                            // 20548\n                                                                                                                       // 20549\n}).call(this,require('_process'))                                                                                      // 20550\n                                                                                                                       // 20551\n},{\"_process\":1}],\"react/lib/isEventSupported\":[function(require,module,exports){                                      // 20552\n/**                                                                                                                    // 20553\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20554\n * All rights reserved.                                                                                                // 20555\n *                                                                                                                     // 20556\n * This source code is licensed under the BSD-style license found in the                                               // 20557\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20558\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20559\n *                                                                                                                     // 20560\n * @providesModule isEventSupported                                                                                    // 20561\n */                                                                                                                    // 20562\n                                                                                                                       // 20563\n'use strict';                                                                                                          // 20564\n                                                                                                                       // 20565\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 20566\n                                                                                                                       // 20567\nvar useHasFeature;                                                                                                     // 20568\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 20569\n  useHasFeature =                                                                                                      // 20570\n    document.implementation &&                                                                                         // 20571\n    document.implementation.hasFeature &&                                                                              // 20572\n    // always returns true in newer browsers as per the standard.                                                      // 20573\n    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature                                               // 20574\n    document.implementation.hasFeature('', '') !== true;                                                               // 20575\n}                                                                                                                      // 20576\n                                                                                                                       // 20577\n/**                                                                                                                    // 20578\n * Checks if an event is supported in the current execution environment.                                               // 20579\n *                                                                                                                     // 20580\n * NOTE: This will not work correctly for non-generic events such as `change`,                                         // 20581\n * `reset`, `load`, `error`, and `select`.                                                                             // 20582\n *                                                                                                                     // 20583\n * Borrows from Modernizr.                                                                                             // 20584\n *                                                                                                                     // 20585\n * @param {string} eventNameSuffix Event name, e.g. \"click\".                                                           // 20586\n * @param {?boolean} capture Check if the capture phase is supported.                                                  // 20587\n * @return {boolean} True if the event is supported.                                                                   // 20588\n * @internal                                                                                                           // 20589\n * @license Modernizr 3.0.0pre (Custom Build) | MIT                                                                    // 20590\n */                                                                                                                    // 20591\nfunction isEventSupported(eventNameSuffix, capture) {                                                                  // 20592\n  if (!ExecutionEnvironment.canUseDOM ||                                                                               // 20593\n      capture && !('addEventListener' in document)) {                                                                  // 20594\n    return false;                                                                                                      // 20595\n  }                                                                                                                    // 20596\n                                                                                                                       // 20597\n  var eventName = 'on' + eventNameSuffix;                                                                              // 20598\n  var isSupported = eventName in document;                                                                             // 20599\n                                                                                                                       // 20600\n  if (!isSupported) {                                                                                                  // 20601\n    var element = document.createElement('div');                                                                       // 20602\n    element.setAttribute(eventName, 'return;');                                                                        // 20603\n    isSupported = typeof element[eventName] === 'function';                                                            // 20604\n  }                                                                                                                    // 20605\n                                                                                                                       // 20606\n  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {                                                  // 20607\n    // This is the only way to test support for the `wheel` event in IE9+.                                             // 20608\n    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');                                           // 20609\n  }                                                                                                                    // 20610\n                                                                                                                       // 20611\n  return isSupported;                                                                                                  // 20612\n}                                                                                                                      // 20613\n                                                                                                                       // 20614\nmodule.exports = isEventSupported;                                                                                     // 20615\n                                                                                                                       // 20616\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\"}],\"react/lib/isNode\":[function(require,module,exports){   // 20617\n/**                                                                                                                    // 20618\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20619\n * All rights reserved.                                                                                                // 20620\n *                                                                                                                     // 20621\n * This source code is licensed under the BSD-style license found in the                                               // 20622\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20623\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20624\n *                                                                                                                     // 20625\n * @providesModule isNode                                                                                              // 20626\n * @typechecks                                                                                                         // 20627\n */                                                                                                                    // 20628\n                                                                                                                       // 20629\n/**                                                                                                                    // 20630\n * @param {*} object The object to check.                                                                              // 20631\n * @return {boolean} Whether or not the object is a DOM node.                                                          // 20632\n */                                                                                                                    // 20633\nfunction isNode(object) {                                                                                              // 20634\n  return !!(object && (                                                                                                // 20635\n    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&                              // 20636\n    typeof object.nodeType === 'number' &&                                                                             // 20637\n    typeof object.nodeName === 'string'))                                                                              // 20638\n  ));                                                                                                                  // 20639\n}                                                                                                                      // 20640\n                                                                                                                       // 20641\nmodule.exports = isNode;                                                                                               // 20642\n                                                                                                                       // 20643\n},{}],\"react/lib/isTextInputElement\":[function(require,module,exports){                                                // 20644\n/**                                                                                                                    // 20645\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20646\n * All rights reserved.                                                                                                // 20647\n *                                                                                                                     // 20648\n * This source code is licensed under the BSD-style license found in the                                               // 20649\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20650\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20651\n *                                                                                                                     // 20652\n * @providesModule isTextInputElement                                                                                  // 20653\n */                                                                                                                    // 20654\n                                                                                                                       // 20655\n'use strict';                                                                                                          // 20656\n                                                                                                                       // 20657\n/**                                                                                                                    // 20658\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary     // 20659\n */                                                                                                                    // 20660\nvar supportedInputTypes = {                                                                                            // 20661\n  'color': true,                                                                                                       // 20662\n  'date': true,                                                                                                        // 20663\n  'datetime': true,                                                                                                    // 20664\n  'datetime-local': true,                                                                                              // 20665\n  'email': true,                                                                                                       // 20666\n  'month': true,                                                                                                       // 20667\n  'number': true,                                                                                                      // 20668\n  'password': true,                                                                                                    // 20669\n  'range': true,                                                                                                       // 20670\n  'search': true,                                                                                                      // 20671\n  'tel': true,                                                                                                         // 20672\n  'text': true,                                                                                                        // 20673\n  'time': true,                                                                                                        // 20674\n  'url': true,                                                                                                         // 20675\n  'week': true                                                                                                         // 20676\n};                                                                                                                     // 20677\n                                                                                                                       // 20678\nfunction isTextInputElement(elem) {                                                                                    // 20679\n  return elem && (                                                                                                     // 20680\n    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')                      // 20681\n  );                                                                                                                   // 20682\n}                                                                                                                      // 20683\n                                                                                                                       // 20684\nmodule.exports = isTextInputElement;                                                                                   // 20685\n                                                                                                                       // 20686\n},{}],\"react/lib/isTextNode\":[function(require,module,exports){                                                        // 20687\n/**                                                                                                                    // 20688\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20689\n * All rights reserved.                                                                                                // 20690\n *                                                                                                                     // 20691\n * This source code is licensed under the BSD-style license found in the                                               // 20692\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20693\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20694\n *                                                                                                                     // 20695\n * @providesModule isTextNode                                                                                          // 20696\n * @typechecks                                                                                                         // 20697\n */                                                                                                                    // 20698\n                                                                                                                       // 20699\nvar isNode = require(\"./isNode\");                                                                                      // 20700\n                                                                                                                       // 20701\n/**                                                                                                                    // 20702\n * @param {*} object The object to check.                                                                              // 20703\n * @return {boolean} Whether or not the object is a DOM text node.                                                     // 20704\n */                                                                                                                    // 20705\nfunction isTextNode(object) {                                                                                          // 20706\n  return isNode(object) && object.nodeType == 3;                                                                       // 20707\n}                                                                                                                      // 20708\n                                                                                                                       // 20709\nmodule.exports = isTextNode;                                                                                           // 20710\n                                                                                                                       // 20711\n},{\"./isNode\":\"react/lib/isNode\"}],\"react/lib/joinClasses\":[function(require,module,exports){                          // 20712\n/**                                                                                                                    // 20713\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20714\n * All rights reserved.                                                                                                // 20715\n *                                                                                                                     // 20716\n * This source code is licensed under the BSD-style license found in the                                               // 20717\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20718\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20719\n *                                                                                                                     // 20720\n * @providesModule joinClasses                                                                                         // 20721\n * @typechecks static-only                                                                                             // 20722\n */                                                                                                                    // 20723\n                                                                                                                       // 20724\n'use strict';                                                                                                          // 20725\n                                                                                                                       // 20726\n/**                                                                                                                    // 20727\n * Combines multiple className strings into one.                                                                       // 20728\n * http://jsperf.com/joinclasses-args-vs-array                                                                         // 20729\n *                                                                                                                     // 20730\n * @param {...?string} classes                                                                                         // 20731\n * @return {string}                                                                                                    // 20732\n */                                                                                                                    // 20733\nfunction joinClasses(className/*, ... */) {                                                                            // 20734\n  if (!className) {                                                                                                    // 20735\n    className = '';                                                                                                    // 20736\n  }                                                                                                                    // 20737\n  var nextClass;                                                                                                       // 20738\n  var argLength = arguments.length;                                                                                    // 20739\n  if (argLength > 1) {                                                                                                 // 20740\n    for (var ii = 1; ii < argLength; ii++) {                                                                           // 20741\n      nextClass = arguments[ii];                                                                                       // 20742\n      if (nextClass) {                                                                                                 // 20743\n        className = (className ? className + ' ' : '') + nextClass;                                                    // 20744\n      }                                                                                                                // 20745\n    }                                                                                                                  // 20746\n  }                                                                                                                    // 20747\n  return className;                                                                                                    // 20748\n}                                                                                                                      // 20749\n                                                                                                                       // 20750\nmodule.exports = joinClasses;                                                                                          // 20751\n                                                                                                                       // 20752\n},{}],\"react/lib/keyMirror\":[function(require,module,exports){                                                         // 20753\n(function (process){                                                                                                   // 20754\n/**                                                                                                                    // 20755\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20756\n * All rights reserved.                                                                                                // 20757\n *                                                                                                                     // 20758\n * This source code is licensed under the BSD-style license found in the                                               // 20759\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20760\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20761\n *                                                                                                                     // 20762\n * @providesModule keyMirror                                                                                           // 20763\n * @typechecks static-only                                                                                             // 20764\n */                                                                                                                    // 20765\n                                                                                                                       // 20766\n'use strict';                                                                                                          // 20767\n                                                                                                                       // 20768\nvar invariant = require(\"./invariant\");                                                                                // 20769\n                                                                                                                       // 20770\n/**                                                                                                                    // 20771\n * Constructs an enumeration with keys equal to their value.                                                           // 20772\n *                                                                                                                     // 20773\n * For example:                                                                                                        // 20774\n *                                                                                                                     // 20775\n *   var COLORS = keyMirror({blue: null, red: null});                                                                  // 20776\n *   var myColor = COLORS.blue;                                                                                        // 20777\n *   var isColorValid = !!COLORS[myColor];                                                                             // 20778\n *                                                                                                                     // 20779\n * The last line could not be performed if the values of the generated enum were                                       // 20780\n * not equal to their keys.                                                                                            // 20781\n *                                                                                                                     // 20782\n *   Input:  {key1: val1, key2: val2}                                                                                  // 20783\n *   Output: {key1: key1, key2: key2}                                                                                  // 20784\n *                                                                                                                     // 20785\n * @param {object} obj                                                                                                 // 20786\n * @return {object}                                                                                                    // 20787\n */                                                                                                                    // 20788\nvar keyMirror = function(obj) {                                                                                        // 20789\n  var ret = {};                                                                                                        // 20790\n  var key;                                                                                                             // 20791\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 20792\n    obj instanceof Object && !Array.isArray(obj),                                                                      // 20793\n    'keyMirror(...): Argument must be an object.'                                                                      // 20794\n  ) : invariant(obj instanceof Object && !Array.isArray(obj)));                                                        // 20795\n  for (key in obj) {                                                                                                   // 20796\n    if (!obj.hasOwnProperty(key)) {                                                                                    // 20797\n      continue;                                                                                                        // 20798\n    }                                                                                                                  // 20799\n    ret[key] = key;                                                                                                    // 20800\n  }                                                                                                                    // 20801\n  return ret;                                                                                                          // 20802\n};                                                                                                                     // 20803\n                                                                                                                       // 20804\nmodule.exports = keyMirror;                                                                                            // 20805\n                                                                                                                       // 20806\n}).call(this,require('_process'))                                                                                      // 20807\n                                                                                                                       // 20808\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/keyOf\":[function(require,module,exports){             // 20809\n/**                                                                                                                    // 20810\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20811\n * All rights reserved.                                                                                                // 20812\n *                                                                                                                     // 20813\n * This source code is licensed under the BSD-style license found in the                                               // 20814\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20815\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20816\n *                                                                                                                     // 20817\n * @providesModule keyOf                                                                                               // 20818\n */                                                                                                                    // 20819\n                                                                                                                       // 20820\n/**                                                                                                                    // 20821\n * Allows extraction of a minified key. Let's the build system minify keys                                             // 20822\n * without loosing the ability to dynamically use key strings as values                                                // 20823\n * themselves. Pass in an object with a single key/val pair and it will return                                         // 20824\n * you the string key of that single record. Suppose you want to grab the                                              // 20825\n * value for a key 'className' inside of an object. Key/val minification may                                           // 20826\n * have aliased that key to be 'xa12'. keyOf({className: null}) will return                                            // 20827\n * 'xa12' in that case. Resolve keys you want to use once at startup time, then                                        // 20828\n * reuse those resolutions.                                                                                            // 20829\n */                                                                                                                    // 20830\nvar keyOf = function(oneKeyObj) {                                                                                      // 20831\n  var key;                                                                                                             // 20832\n  for (key in oneKeyObj) {                                                                                             // 20833\n    if (!oneKeyObj.hasOwnProperty(key)) {                                                                              // 20834\n      continue;                                                                                                        // 20835\n    }                                                                                                                  // 20836\n    return key;                                                                                                        // 20837\n  }                                                                                                                    // 20838\n  return null;                                                                                                         // 20839\n};                                                                                                                     // 20840\n                                                                                                                       // 20841\n                                                                                                                       // 20842\nmodule.exports = keyOf;                                                                                                // 20843\n                                                                                                                       // 20844\n},{}],\"react/lib/mapObject\":[function(require,module,exports){                                                         // 20845\n/**                                                                                                                    // 20846\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20847\n * All rights reserved.                                                                                                // 20848\n *                                                                                                                     // 20849\n * This source code is licensed under the BSD-style license found in the                                               // 20850\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20851\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20852\n *                                                                                                                     // 20853\n * @providesModule mapObject                                                                                           // 20854\n */                                                                                                                    // 20855\n                                                                                                                       // 20856\n'use strict';                                                                                                          // 20857\n                                                                                                                       // 20858\nvar hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 20859\n                                                                                                                       // 20860\n/**                                                                                                                    // 20861\n * Executes the provided `callback` once for each enumerable own property in the                                       // 20862\n * object and constructs a new object from the results. The `callback` is                                              // 20863\n * invoked with three arguments:                                                                                       // 20864\n *                                                                                                                     // 20865\n *  - the property value                                                                                               // 20866\n *  - the property name                                                                                                // 20867\n *  - the object being traversed                                                                                       // 20868\n *                                                                                                                     // 20869\n * Properties that are added after the call to `mapObject` will not be visited                                         // 20870\n * by `callback`. If the values of existing properties are changed, the value                                          // 20871\n * passed to `callback` will be the value at the time `mapObject` visits them.                                         // 20872\n * Properties that are deleted before being visited are not visited.                                                   // 20873\n *                                                                                                                     // 20874\n * @grep function objectMap()                                                                                          // 20875\n * @grep function objMap()                                                                                             // 20876\n *                                                                                                                     // 20877\n * @param {?object} object                                                                                             // 20878\n * @param {function} callback                                                                                          // 20879\n * @param {*} context                                                                                                  // 20880\n * @return {?object}                                                                                                   // 20881\n */                                                                                                                    // 20882\nfunction mapObject(object, callback, context) {                                                                        // 20883\n  if (!object) {                                                                                                       // 20884\n    return null;                                                                                                       // 20885\n  }                                                                                                                    // 20886\n  var result = {};                                                                                                     // 20887\n  for (var name in object) {                                                                                           // 20888\n    if (hasOwnProperty.call(object, name)) {                                                                           // 20889\n      result[name] = callback.call(context, object[name], name, object);                                               // 20890\n    }                                                                                                                  // 20891\n  }                                                                                                                    // 20892\n  return result;                                                                                                       // 20893\n}                                                                                                                      // 20894\n                                                                                                                       // 20895\nmodule.exports = mapObject;                                                                                            // 20896\n                                                                                                                       // 20897\n},{}],\"react/lib/memoizeStringOnly\":[function(require,module,exports){                                                 // 20898\n/**                                                                                                                    // 20899\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20900\n * All rights reserved.                                                                                                // 20901\n *                                                                                                                     // 20902\n * This source code is licensed under the BSD-style license found in the                                               // 20903\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20904\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20905\n *                                                                                                                     // 20906\n * @providesModule memoizeStringOnly                                                                                   // 20907\n * @typechecks static-only                                                                                             // 20908\n */                                                                                                                    // 20909\n                                                                                                                       // 20910\n'use strict';                                                                                                          // 20911\n                                                                                                                       // 20912\n/**                                                                                                                    // 20913\n * Memoizes the return value of a function that accepts one string argument.                                           // 20914\n *                                                                                                                     // 20915\n * @param {function} callback                                                                                          // 20916\n * @return {function}                                                                                                  // 20917\n */                                                                                                                    // 20918\nfunction memoizeStringOnly(callback) {                                                                                 // 20919\n  var cache = {};                                                                                                      // 20920\n  return function(string) {                                                                                            // 20921\n    if (!cache.hasOwnProperty(string)) {                                                                               // 20922\n      cache[string] = callback.call(this, string);                                                                     // 20923\n    }                                                                                                                  // 20924\n    return cache[string];                                                                                              // 20925\n  };                                                                                                                   // 20926\n}                                                                                                                      // 20927\n                                                                                                                       // 20928\nmodule.exports = memoizeStringOnly;                                                                                    // 20929\n                                                                                                                       // 20930\n},{}],\"react/lib/onlyChild\":[function(require,module,exports){                                                         // 20931\n(function (process){                                                                                                   // 20932\n/**                                                                                                                    // 20933\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20934\n * All rights reserved.                                                                                                // 20935\n *                                                                                                                     // 20936\n * This source code is licensed under the BSD-style license found in the                                               // 20937\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20938\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20939\n *                                                                                                                     // 20940\n * @providesModule onlyChild                                                                                           // 20941\n */                                                                                                                    // 20942\n'use strict';                                                                                                          // 20943\n                                                                                                                       // 20944\nvar ReactElement = require(\"./ReactElement\");                                                                          // 20945\n                                                                                                                       // 20946\nvar invariant = require(\"./invariant\");                                                                                // 20947\n                                                                                                                       // 20948\n/**                                                                                                                    // 20949\n * Returns the first child in a collection of children and verifies that there                                         // 20950\n * is only one child in the collection. The current implementation of this                                             // 20951\n * function assumes that a single child gets passed without a wrapper, but the                                         // 20952\n * purpose of this helper function is to abstract away the particular structure                                        // 20953\n * of children.                                                                                                        // 20954\n *                                                                                                                     // 20955\n * @param {?object} children Child collection structure.                                                               // 20956\n * @return {ReactComponent} The first and only `ReactComponent` contained in the                                       // 20957\n * structure.                                                                                                          // 20958\n */                                                                                                                    // 20959\nfunction onlyChild(children) {                                                                                         // 20960\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 20961\n    ReactElement.isValidElement(children),                                                                             // 20962\n    'onlyChild must be passed a children with exactly one child.'                                                      // 20963\n  ) : invariant(ReactElement.isValidElement(children)));                                                               // 20964\n  return children;                                                                                                     // 20965\n}                                                                                                                      // 20966\n                                                                                                                       // 20967\nmodule.exports = onlyChild;                                                                                            // 20968\n                                                                                                                       // 20969\n}).call(this,require('_process'))                                                                                      // 20970\n                                                                                                                       // 20971\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/performanceNow\":[function(require,module,exports){\n/**                                                                                                                    // 20973\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 20974\n * All rights reserved.                                                                                                // 20975\n *                                                                                                                     // 20976\n * This source code is licensed under the BSD-style license found in the                                               // 20977\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 20978\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 20979\n *                                                                                                                     // 20980\n * @providesModule performanceNow                                                                                      // 20981\n * @typechecks                                                                                                         // 20982\n */                                                                                                                    // 20983\n                                                                                                                       // 20984\nvar performance = require(\"./performance\");                                                                            // 20985\n                                                                                                                       // 20986\n/**                                                                                                                    // 20987\n * Detect if we can use `window.performance.now()` and gracefully fallback to                                          // 20988\n * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now                                           // 20989\n * because of Facebook's testing infrastructure.                                                                       // 20990\n */                                                                                                                    // 20991\nif (!performance || !performance.now) {                                                                                // 20992\n  performance = Date;                                                                                                  // 20993\n}                                                                                                                      // 20994\n                                                                                                                       // 20995\nvar performanceNow = performance.now.bind(performance);                                                                // 20996\n                                                                                                                       // 20997\nmodule.exports = performanceNow;                                                                                       // 20998\n                                                                                                                       // 20999\n},{\"./performance\":\"react/lib/performance\"}],\"react/lib/performance\":[function(require,module,exports){                // 21000\n/**                                                                                                                    // 21001\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21002\n * All rights reserved.                                                                                                // 21003\n *                                                                                                                     // 21004\n * This source code is licensed under the BSD-style license found in the                                               // 21005\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 21006\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 21007\n *                                                                                                                     // 21008\n * @providesModule performance                                                                                         // 21009\n * @typechecks                                                                                                         // 21010\n */                                                                                                                    // 21011\n                                                                                                                       // 21012\n\"use strict\";                                                                                                          // 21013\n                                                                                                                       // 21014\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 21015\n                                                                                                                       // 21016\nvar performance;                                                                                                       // 21017\n                                                                                                                       // 21018\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 21019\n  performance =                                                                                                        // 21020\n    window.performance ||                                                                                              // 21021\n    window.msPerformance ||                                                                                            // 21022\n    window.webkitPerformance;                                                                                          // 21023\n}                                                                                                                      // 21024\n                                                                                                                       // 21025\nmodule.exports = performance || {};                                                                                    // 21026\n                                                                                                                       // 21027\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\"}],\"react/lib/quoteAttributeValueForBrowser\":[function(require,module,exports){\n/**                                                                                                                    // 21029\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21030\n * All rights reserved.                                                                                                // 21031\n *                                                                                                                     // 21032\n * This source code is licensed under the BSD-style license found in the                                               // 21033\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 21034\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 21035\n *                                                                                                                     // 21036\n * @providesModule quoteAttributeValueForBrowser                                                                       // 21037\n */                                                                                                                    // 21038\n                                                                                                                       // 21039\n'use strict';                                                                                                          // 21040\n                                                                                                                       // 21041\nvar escapeTextContentForBrowser = require(\"./escapeTextContentForBrowser\");                                            // 21042\n                                                                                                                       // 21043\n/**                                                                                                                    // 21044\n * Escapes attribute value to prevent scripting attacks.                                                               // 21045\n *                                                                                                                     // 21046\n * @param {*} value Value to escape.                                                                                   // 21047\n * @return {string} An escaped string.                                                                                 // 21048\n */                                                                                                                    // 21049\nfunction quoteAttributeValueForBrowser(value) {                                                                        // 21050\n  return '\"' + escapeTextContentForBrowser(value) + '\"';                                                               // 21051\n}                                                                                                                      // 21052\n                                                                                                                       // 21053\nmodule.exports = quoteAttributeValueForBrowser;                                                                        // 21054\n                                                                                                                       // 21055\n},{\"./escapeTextContentForBrowser\":\"react/lib/escapeTextContentForBrowser\"}],\"react/lib/setInnerHTML\":[function(require,module,exports){\n/**                                                                                                                    // 21057\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21058\n * All rights reserved.                                                                                                // 21059\n *                                                                                                                     // 21060\n * This source code is licensed under the BSD-style license found in the                                               // 21061\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 21062\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 21063\n *                                                                                                                     // 21064\n * @providesModule setInnerHTML                                                                                        // 21065\n */                                                                                                                    // 21066\n                                                                                                                       // 21067\n/* globals MSApp */                                                                                                    // 21068\n                                                                                                                       // 21069\n'use strict';                                                                                                          // 21070\n                                                                                                                       // 21071\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 21072\n                                                                                                                       // 21073\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;                                                                                  // 21074\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;                                          // 21075\n                                                                                                                       // 21076\n/**                                                                                                                    // 21077\n * Set the innerHTML property of a node, ensuring that whitespace is preserved                                         // 21078\n * even in IE8.                                                                                                        // 21079\n *                                                                                                                     // 21080\n * @param {DOMElement} node                                                                                            // 21081\n * @param {string} html                                                                                                // 21082\n * @internal                                                                                                           // 21083\n */                                                                                                                    // 21084\nvar setInnerHTML = function(node, html) {                                                                              // 21085\n  node.innerHTML = html;                                                                                               // 21086\n};                                                                                                                     // 21087\n                                                                                                                       // 21088\n// Win8 apps: Allow all html to be inserted                                                                            // 21089\nif (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {                                                   // 21090\n  setInnerHTML = function(node, html) {                                                                                // 21091\n    MSApp.execUnsafeLocalFunction(function() {                                                                         // 21092\n      node.innerHTML = html;                                                                                           // 21093\n    });                                                                                                                // 21094\n  };                                                                                                                   // 21095\n}                                                                                                                      // 21096\n                                                                                                                       // 21097\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 21098\n  // IE8: When updating a just created node with innerHTML only leading                                                // 21099\n  // whitespace is removed. When updating an existing node with innerHTML                                              // 21100\n  // whitespace in root TextNodes is also collapsed.                                                                   // 21101\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html                                              // 21102\n                                                                                                                       // 21103\n  // Feature detection; only IE8 is known to behave improperly like this.                                              // 21104\n  var testElement = document.createElement('div');                                                                     // 21105\n  testElement.innerHTML = ' ';                                                                                         // 21106\n  if (testElement.innerHTML === '') {                                                                                  // 21107\n    setInnerHTML = function(node, html) {                                                                              // 21108\n      // Magic theory: IE8 supposedly differentiates between added and updated                                         // 21109\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers                                           // 21110\n      // from worse whitespace behavior. Re-adding a node like this triggers                                           // 21111\n      // the initial and more favorable whitespace behavior.                                                           // 21112\n      // TODO: What to do on a detached node?                                                                          // 21113\n      if (node.parentNode) {                                                                                           // 21114\n        node.parentNode.replaceChild(node, node);                                                                      // 21115\n      }                                                                                                                // 21116\n                                                                                                                       // 21117\n      // We also implement a workaround for non-visible tags disappearing into                                         // 21118\n      // thin air on IE8, this only happens if there is no visible text                                                // 21119\n      // in-front of the non-visible tags. Piggyback on the whitespace fix                                             // 21120\n      // and simply check if any non-visible tags appear in the source.                                                // 21121\n      if (WHITESPACE_TEST.test(html) ||                                                                                // 21122\n          html[0] === '<' && NONVISIBLE_TEST.test(html)) {                                                             // 21123\n        // Recover leading whitespace by temporarily prepending any character.                                         // 21124\n        // \\uFEFF has the potential advantage of being zero-width/invisible.                                           // 21125\n        node.innerHTML = '\\uFEFF' + html;                                                                              // 21126\n                                                                                                                       // 21127\n        // deleteData leaves an empty `TextNode` which offsets the index of all                                        // 21128\n        // children. Definitely want to avoid this.                                                                    // 21129\n        var textNode = node.firstChild;                                                                                // 21130\n        if (textNode.data.length === 1) {                                                                              // 21131\n          node.removeChild(textNode);                                                                                  // 21132\n        } else {                                                                                                       // 21133\n          textNode.deleteData(0, 1);                                                                                   // 21134\n        }                                                                                                              // 21135\n      } else {                                                                                                         // 21136\n        node.innerHTML = html;                                                                                         // 21137\n      }                                                                                                                // 21138\n    };                                                                                                                 // 21139\n  }                                                                                                                    // 21140\n}                                                                                                                      // 21141\n                                                                                                                       // 21142\nmodule.exports = setInnerHTML;                                                                                         // 21143\n                                                                                                                       // 21144\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\"}],\"react/lib/setTextContent\":[function(require,module,exports){\n/**                                                                                                                    // 21146\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21147\n * All rights reserved.                                                                                                // 21148\n *                                                                                                                     // 21149\n * This source code is licensed under the BSD-style license found in the                                               // 21150\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 21151\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 21152\n *                                                                                                                     // 21153\n * @providesModule setTextContent                                                                                      // 21154\n */                                                                                                                    // 21155\n                                                                                                                       // 21156\n'use strict';                                                                                                          // 21157\n                                                                                                                       // 21158\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");                                                          // 21159\nvar escapeTextContentForBrowser = require(\"./escapeTextContentForBrowser\");                                            // 21160\nvar setInnerHTML = require(\"./setInnerHTML\");                                                                          // 21161\n                                                                                                                       // 21162\n/**                                                                                                                    // 21163\n * Set the textContent property of a node, ensuring that whitespace is preserved                                       // 21164\n * even in IE8. innerText is a poor substitute for textContent and, among many                                         // 21165\n * issues, inserts <br> instead of the literal newline chars. innerHTML behaves                                        // 21166\n * as it should.                                                                                                       // 21167\n *                                                                                                                     // 21168\n * @param {DOMElement} node                                                                                            // 21169\n * @param {string} text                                                                                                // 21170\n * @internal                                                                                                           // 21171\n */                                                                                                                    // 21172\nvar setTextContent = function(node, text) {                                                                            // 21173\n  node.textContent = text;                                                                                             // 21174\n};                                                                                                                     // 21175\n                                                                                                                       // 21176\nif (ExecutionEnvironment.canUseDOM) {                                                                                  // 21177\n  if (!('textContent' in document.documentElement)) {                                                                  // 21178\n    setTextContent = function(node, text) {                                                                            // 21179\n      setInnerHTML(node, escapeTextContentForBrowser(text));                                                           // 21180\n    };                                                                                                                 // 21181\n  }                                                                                                                    // 21182\n}                                                                                                                      // 21183\n                                                                                                                       // 21184\nmodule.exports = setTextContent;                                                                                       // 21185\n                                                                                                                       // 21186\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./escapeTextContentForBrowser\":\"react/lib/escapeTextContentForBrowser\",\"./setInnerHTML\":\"react/lib/setInnerHTML\"}],\"react/lib/shallowEqual\":[function(require,module,exports){\n/**                                                                                                                    // 21188\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21189\n * All rights reserved.                                                                                                // 21190\n *                                                                                                                     // 21191\n * This source code is licensed under the BSD-style license found in the                                               // 21192\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 21193\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 21194\n *                                                                                                                     // 21195\n * @providesModule shallowEqual                                                                                        // 21196\n */                                                                                                                    // 21197\n                                                                                                                       // 21198\n'use strict';                                                                                                          // 21199\n                                                                                                                       // 21200\n/**                                                                                                                    // 21201\n * Performs equality by iterating through keys on an object and returning                                              // 21202\n * false when any key has values which are not strictly equal between                                                  // 21203\n * objA and objB. Returns true when the values of all keys are strictly equal.                                         // 21204\n *                                                                                                                     // 21205\n * @return {boolean}                                                                                                   // 21206\n */                                                                                                                    // 21207\nfunction shallowEqual(objA, objB) {                                                                                    // 21208\n  if (objA === objB) {                                                                                                 // 21209\n    return true;                                                                                                       // 21210\n  }                                                                                                                    // 21211\n  var key;                                                                                                             // 21212\n  // Test for A's keys different from B.                                                                               // 21213\n  for (key in objA) {                                                                                                  // 21214\n    if (objA.hasOwnProperty(key) &&                                                                                    // 21215\n        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {                                                      // 21216\n      return false;                                                                                                    // 21217\n    }                                                                                                                  // 21218\n  }                                                                                                                    // 21219\n  // Test for B's keys missing from A.                                                                                 // 21220\n  for (key in objB) {                                                                                                  // 21221\n    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {                                                       // 21222\n      return false;                                                                                                    // 21223\n    }                                                                                                                  // 21224\n  }                                                                                                                    // 21225\n  return true;                                                                                                         // 21226\n}                                                                                                                      // 21227\n                                                                                                                       // 21228\nmodule.exports = shallowEqual;                                                                                         // 21229\n                                                                                                                       // 21230\n},{}],\"react/lib/shouldUpdateReactComponent\":[function(require,module,exports){                                        // 21231\n(function (process){                                                                                                   // 21232\n/**                                                                                                                    // 21233\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21234\n * All rights reserved.                                                                                                // 21235\n *                                                                                                                     // 21236\n * This source code is licensed under the BSD-style license found in the                                               // 21237\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 21238\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 21239\n *                                                                                                                     // 21240\n * @providesModule shouldUpdateReactComponent                                                                          // 21241\n * @typechecks static-only                                                                                             // 21242\n */                                                                                                                    // 21243\n                                                                                                                       // 21244\n'use strict';                                                                                                          // 21245\n                                                                                                                       // 21246\nvar warning = require(\"./warning\");                                                                                    // 21247\n                                                                                                                       // 21248\n/**                                                                                                                    // 21249\n * Given a `prevElement` and `nextElement`, determines if the existing                                                 // 21250\n * instance should be updated as opposed to being destroyed or replaced by a new                                       // 21251\n * instance. Both arguments are elements. This ensures that this logic can                                             // 21252\n * operate on stateless trees without any backing instance.                                                            // 21253\n *                                                                                                                     // 21254\n * @param {?object} prevElement                                                                                        // 21255\n * @param {?object} nextElement                                                                                        // 21256\n * @return {boolean} True if the existing instance should be updated.                                                  // 21257\n * @protected                                                                                                          // 21258\n */                                                                                                                    // 21259\nfunction shouldUpdateReactComponent(prevElement, nextElement) {                                                        // 21260\n  if (prevElement != null && nextElement != null) {                                                                    // 21261\n    var prevType = typeof prevElement;                                                                                 // 21262\n    var nextType = typeof nextElement;                                                                                 // 21263\n    if (prevType === 'string' || prevType === 'number') {                                                              // 21264\n      return (nextType === 'string' || nextType === 'number');                                                         // 21265\n    } else {                                                                                                           // 21266\n      if (nextType === 'object' &&                                                                                     // 21267\n          prevElement.type === nextElement.type &&                                                                     // 21268\n          prevElement.key === nextElement.key) {                                                                       // 21269\n        var ownersMatch = prevElement._owner === nextElement._owner;                                                   // 21270\n        var prevName = null;                                                                                           // 21271\n        var nextName = null;                                                                                           // 21272\n        var nextDisplayName = null;                                                                                    // 21273\n        if (\"production\" !== process.env.NODE_ENV) {                                                                   // 21274\n          if (!ownersMatch) {                                                                                          // 21275\n            if (prevElement._owner != null &&                                                                          // 21276\n                prevElement._owner.getPublicInstance() != null &&                                                      // 21277\n                prevElement._owner.getPublicInstance().constructor != null) {                                          // 21278\n              prevName =                                                                                               // 21279\n                prevElement._owner.getPublicInstance().constructor.displayName;                                        // 21280\n            }                                                                                                          // 21281\n            if (nextElement._owner != null &&                                                                          // 21282\n                nextElement._owner.getPublicInstance() != null &&                                                      // 21283\n                nextElement._owner.getPublicInstance().constructor != null) {                                          // 21284\n              nextName =                                                                                               // 21285\n                nextElement._owner.getPublicInstance().constructor.displayName;                                        // 21286\n            }                                                                                                          // 21287\n            if (nextElement.type != null &&                                                                            // 21288\n                nextElement.type.displayName != null) {                                                                // 21289\n              nextDisplayName = nextElement.type.displayName;                                                          // 21290\n            }                                                                                                          // 21291\n            if (nextElement.type != null && typeof nextElement.type === 'string') {                                    // 21292\n              nextDisplayName = nextElement.type;                                                                      // 21293\n            }                                                                                                          // 21294\n            if (typeof nextElement.type !== 'string' ||                                                                // 21295\n                nextElement.type === 'input' ||                                                                        // 21296\n                nextElement.type === 'textarea') {                                                                     // 21297\n              if ((prevElement._owner != null &&                                                                       // 21298\n                  prevElement._owner._isOwnerNecessary === false) ||                                                   // 21299\n                  (nextElement._owner != null &&                                                                       // 21300\n                  nextElement._owner._isOwnerNecessary === false)) {                                                   // 21301\n                if (prevElement._owner != null) {                                                                      // 21302\n                  prevElement._owner._isOwnerNecessary = true;                                                         // 21303\n                }                                                                                                      // 21304\n                if (nextElement._owner != null) {                                                                      // 21305\n                  nextElement._owner._isOwnerNecessary = true;                                                         // 21306\n                }                                                                                                      // 21307\n                (\"production\" !== process.env.NODE_ENV ? warning(                                                      // 21308\n                  false,                                                                                               // 21309\n                  '<%s /> is being rendered by both %s and %s using the same ' +                                       // 21310\n                  'key (%s) in the same place. Currently, this means that ' +                                          // 21311\n                  'they don\\'t preserve state. This behavior should be very ' +                                        // 21312\n                  'rare so we\\'re considering deprecating it. Please contact ' +                                       // 21313\n                  'the React team and explain your use case so that we can ' +                                         // 21314\n                  'take that into consideration.',                                                                     // 21315\n                  nextDisplayName || 'Unknown Component',                                                              // 21316\n                  prevName || '[Unknown]',                                                                             // 21317\n                  nextName || '[Unknown]',                                                                             // 21318\n                  prevElement.key                                                                                      // 21319\n                ) : null);                                                                                             // 21320\n              }                                                                                                        // 21321\n            }                                                                                                          // 21322\n          }                                                                                                            // 21323\n        }                                                                                                              // 21324\n        return ownersMatch;                                                                                            // 21325\n      }                                                                                                                // 21326\n    }                                                                                                                  // 21327\n  }                                                                                                                    // 21328\n  return false;                                                                                                        // 21329\n}                                                                                                                      // 21330\n                                                                                                                       // 21331\nmodule.exports = shouldUpdateReactComponent;                                                                           // 21332\n                                                                                                                       // 21333\n}).call(this,require('_process'))                                                                                      // 21334\n                                                                                                                       // 21335\n},{\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/toArray\":[function(require,module,exports){               // 21336\n(function (process){                                                                                                   // 21337\n/**                                                                                                                    // 21338\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 21339\n * All rights reserved.                                                                                                // 21340\n *                                                                                                                     // 21341\n * This source code is licensed under the BSD-style license found in the                                               // 21342\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 21343\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 21344\n *                                                                                                                     // 21345\n * @providesModule toArray                                                                                             // 21346\n * @typechecks                                                                                                         // 21347\n */                                                                                                                    // 21348\n                                                                                                                       // 21349\nvar invariant = require(\"./invariant\");                                                                                // 21350\n                                                                                                                       // 21351\n/**                                                                                                                    // 21352\n * Convert array-like objects to arrays.                                                                               // 21353\n *                                                                                                                     // 21354\n * This API assumes the caller knows the contents of the data type. For less                                           // 21355\n * well defined inputs use createArrayFromMixed.                                                                       // 21356\n *                                                                                                                     // 21357\n * @param {object|function|filelist} obj                                                                               // 21358\n * @return {array}                                                                                                     // 21359\n */                                                                                                                    // 21360\nfunction toArray(obj) {                                                                                                // 21361\n  var length = obj.length;                                                                                             // 21362\n                                                                                                                       // 21363\n  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in                                        // 21364\n  // old versions of Safari).                                                                                          // 21365\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 21366\n    !Array.isArray(obj) &&                                                                                             // 21367\n    (typeof obj === 'object' || typeof obj === 'function'),                                                            // 21368\n    'toArray: Array-like object expected'                                                                              // 21369\n  ) : invariant(!Array.isArray(obj) &&                                                                                 // 21370\n  (typeof obj === 'object' || typeof obj === 'function')));                                                            // 21371\n                                                                                                                       // 21372\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 21373\n    typeof length === 'number',                                                                                        // 21374\n    'toArray: Object needs a length property'                                                                          // 21375\n  ) : invariant(typeof length === 'number'));                                                                          // 21376\n                                                                                                                       // 21377\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 21378\n    length === 0 ||                                                                                                    // 21379\n    (length - 1) in obj,                                                                                               // 21380\n    'toArray: Object should have keys for indices'                                                                     // 21381\n  ) : invariant(length === 0 ||                                                                                        // 21382\n  (length - 1) in obj));                                                                                               // 21383\n                                                                                                                       // 21384\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs                                           // 21385\n  // without method will throw during the slice call and skip straight to the                                          // 21386\n  // fallback.                                                                                                         // 21387\n  if (obj.hasOwnProperty) {                                                                                            // 21388\n    try {                                                                                                              // 21389\n      return Array.prototype.slice.call(obj);                                                                          // 21390\n    } catch (e) {                                                                                                      // 21391\n      // IE < 9 does not support Array#slice on collections objects                                                    // 21392\n    }                                                                                                                  // 21393\n  }                                                                                                                    // 21394\n                                                                                                                       // 21395\n  // Fall back to copying key by key. This assumes all keys have a value,                                              // 21396\n  // so will not preserve sparsely populated inputs.                                                                   // 21397\n  var ret = Array(length);                                                                                             // 21398\n  for (var ii = 0; ii < length; ii++) {                                                                                // 21399\n    ret[ii] = obj[ii];                                                                                                 // 21400\n  }                                                                                                                    // 21401\n  return ret;                                                                                                          // 21402\n}                                                                                                                      // 21403\n                                                                                                                       // 21404\nmodule.exports = toArray;                                                                                              // 21405\n                                                                                                                       // 21406\n}).call(this,require('_process'))                                                                                      // 21407\n                                                                                                                       // 21408\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/traverseAllChildren\":[function(require,module,exports){\n(function (process){                                                                                                   // 21410\n/**                                                                                                                    // 21411\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21412\n * All rights reserved.                                                                                                // 21413\n *                                                                                                                     // 21414\n * This source code is licensed under the BSD-style license found in the                                               // 21415\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 21416\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 21417\n *                                                                                                                     // 21418\n * @providesModule traverseAllChildren                                                                                 // 21419\n */                                                                                                                    // 21420\n                                                                                                                       // 21421\n'use strict';                                                                                                          // 21422\n                                                                                                                       // 21423\nvar ReactElement = require(\"./ReactElement\");                                                                          // 21424\nvar ReactFragment = require(\"./ReactFragment\");                                                                        // 21425\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");                                                          // 21426\n                                                                                                                       // 21427\nvar getIteratorFn = require(\"./getIteratorFn\");                                                                        // 21428\nvar invariant = require(\"./invariant\");                                                                                // 21429\nvar warning = require(\"./warning\");                                                                                    // 21430\n                                                                                                                       // 21431\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;                                                                        // 21432\nvar SUBSEPARATOR = ':';                                                                                                // 21433\n                                                                                                                       // 21434\n/**                                                                                                                    // 21435\n * TODO: Test that a single child and an array with one item have the same key                                         // 21436\n * pattern.                                                                                                            // 21437\n */                                                                                                                    // 21438\n                                                                                                                       // 21439\nvar userProvidedKeyEscaperLookup = {                                                                                   // 21440\n  '=': '=0',                                                                                                           // 21441\n  '.': '=1',                                                                                                           // 21442\n  ':': '=2'                                                                                                            // 21443\n};                                                                                                                     // 21444\n                                                                                                                       // 21445\nvar userProvidedKeyEscapeRegex = /[=.:]/g;                                                                             // 21446\n                                                                                                                       // 21447\nvar didWarnAboutMaps = false;                                                                                          // 21448\n                                                                                                                       // 21449\nfunction userProvidedKeyEscaper(match) {                                                                               // 21450\n  return userProvidedKeyEscaperLookup[match];                                                                          // 21451\n}                                                                                                                      // 21452\n                                                                                                                       // 21453\n/**                                                                                                                    // 21454\n * Generate a key string that identifies a component within a set.                                                     // 21455\n *                                                                                                                     // 21456\n * @param {*} component A component that could contain a manual key.                                                   // 21457\n * @param {number} index Index that is used if a manual key is not provided.                                           // 21458\n * @return {string}                                                                                                    // 21459\n */                                                                                                                    // 21460\nfunction getComponentKey(component, index) {                                                                           // 21461\n  if (component && component.key != null) {                                                                            // 21462\n    // Explicit key                                                                                                    // 21463\n    return wrapUserProvidedKey(component.key);                                                                         // 21464\n  }                                                                                                                    // 21465\n  // Implicit key determined by the index in the set                                                                   // 21466\n  return index.toString(36);                                                                                           // 21467\n}                                                                                                                      // 21468\n                                                                                                                       // 21469\n/**                                                                                                                    // 21470\n * Escape a component key so that it is safe to use in a reactid.                                                      // 21471\n *                                                                                                                     // 21472\n * @param {*} key Component key to be escaped.                                                                         // 21473\n * @return {string} An escaped string.                                                                                 // 21474\n */                                                                                                                    // 21475\nfunction escapeUserProvidedKey(text) {                                                                                 // 21476\n  return ('' + text).replace(                                                                                          // 21477\n    userProvidedKeyEscapeRegex,                                                                                        // 21478\n    userProvidedKeyEscaper                                                                                             // 21479\n  );                                                                                                                   // 21480\n}                                                                                                                      // 21481\n                                                                                                                       // 21482\n/**                                                                                                                    // 21483\n * Wrap a `key` value explicitly provided by the user to distinguish it from                                           // 21484\n * implicitly-generated keys generated by a component's index in its parent.                                           // 21485\n *                                                                                                                     // 21486\n * @param {string} key Value of a user-provided `key` attribute                                                        // 21487\n * @return {string}                                                                                                    // 21488\n */                                                                                                                    // 21489\nfunction wrapUserProvidedKey(key) {                                                                                    // 21490\n  return '$' + escapeUserProvidedKey(key);                                                                             // 21491\n}                                                                                                                      // 21492\n                                                                                                                       // 21493\n/**                                                                                                                    // 21494\n * @param {?*} children Children tree container.                                                                       // 21495\n * @param {!string} nameSoFar Name of the key path so far.                                                             // 21496\n * @param {!number} indexSoFar Number of children encountered until this point.                                        // 21497\n * @param {!function} callback Callback to invoke with each child found.                                               // 21498\n * @param {?*} traverseContext Used to pass information throughout the traversal                                       // 21499\n * process.                                                                                                            // 21500\n * @return {!number} The number of children in this subtree.                                                           // 21501\n */                                                                                                                    // 21502\nfunction traverseAllChildrenImpl(                                                                                      // 21503\n  children,                                                                                                            // 21504\n  nameSoFar,                                                                                                           // 21505\n  indexSoFar,                                                                                                          // 21506\n  callback,                                                                                                            // 21507\n  traverseContext                                                                                                      // 21508\n) {                                                                                                                    // 21509\n  var type = typeof children;                                                                                          // 21510\n                                                                                                                       // 21511\n  if (type === 'undefined' || type === 'boolean') {                                                                    // 21512\n    // All of the above are perceived as null.                                                                         // 21513\n    children = null;                                                                                                   // 21514\n  }                                                                                                                    // 21515\n                                                                                                                       // 21516\n  if (children === null ||                                                                                             // 21517\n      type === 'string' ||                                                                                             // 21518\n      type === 'number' ||                                                                                             // 21519\n      ReactElement.isValidElement(children)) {                                                                         // 21520\n    callback(                                                                                                          // 21521\n      traverseContext,                                                                                                 // 21522\n      children,                                                                                                        // 21523\n      // If it's the only child, treat the name as if it was wrapped in an array                                       // 21524\n      // so that it's consistent if the number of children grows.                                                      // 21525\n      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,                                         // 21526\n      indexSoFar                                                                                                       // 21527\n    );                                                                                                                 // 21528\n    return 1;                                                                                                          // 21529\n  }                                                                                                                    // 21530\n                                                                                                                       // 21531\n  var child, nextName, nextIndex;                                                                                      // 21532\n  var subtreeCount = 0; // Count of children found in the current subtree.                                             // 21533\n                                                                                                                       // 21534\n  if (Array.isArray(children)) {                                                                                       // 21535\n    for (var i = 0; i < children.length; i++) {                                                                        // 21536\n      child = children[i];                                                                                             // 21537\n      nextName = (                                                                                                     // 21538\n        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +                                                    // 21539\n        getComponentKey(child, i)                                                                                      // 21540\n      );                                                                                                               // 21541\n      nextIndex = indexSoFar + subtreeCount;                                                                           // 21542\n      subtreeCount += traverseAllChildrenImpl(                                                                         // 21543\n        child,                                                                                                         // 21544\n        nextName,                                                                                                      // 21545\n        nextIndex,                                                                                                     // 21546\n        callback,                                                                                                      // 21547\n        traverseContext                                                                                                // 21548\n      );                                                                                                               // 21549\n    }                                                                                                                  // 21550\n  } else {                                                                                                             // 21551\n    var iteratorFn = getIteratorFn(children);                                                                          // 21552\n    if (iteratorFn) {                                                                                                  // 21553\n      var iterator = iteratorFn.call(children);                                                                        // 21554\n      var step;                                                                                                        // 21555\n      if (iteratorFn !== children.entries) {                                                                           // 21556\n        var ii = 0;                                                                                                    // 21557\n        while (!(step = iterator.next()).done) {                                                                       // 21558\n          child = step.value;                                                                                          // 21559\n          nextName = (                                                                                                 // 21560\n            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +                                                // 21561\n            getComponentKey(child, ii++)                                                                               // 21562\n          );                                                                                                           // 21563\n          nextIndex = indexSoFar + subtreeCount;                                                                       // 21564\n          subtreeCount += traverseAllChildrenImpl(                                                                     // 21565\n            child,                                                                                                     // 21566\n            nextName,                                                                                                  // 21567\n            nextIndex,                                                                                                 // 21568\n            callback,                                                                                                  // 21569\n            traverseContext                                                                                            // 21570\n          );                                                                                                           // 21571\n        }                                                                                                              // 21572\n      } else {                                                                                                         // 21573\n        if (\"production\" !== process.env.NODE_ENV) {                                                                   // 21574\n          (\"production\" !== process.env.NODE_ENV ? warning(                                                            // 21575\n            didWarnAboutMaps,                                                                                          // 21576\n            'Using Maps as children is not yet fully supported. It is an ' +                                           // 21577\n            'experimental feature that might be removed. Convert it to a ' +                                           // 21578\n            'sequence / iterable of keyed ReactElements instead.'                                                      // 21579\n          ) : null);                                                                                                   // 21580\n          didWarnAboutMaps = true;                                                                                     // 21581\n        }                                                                                                              // 21582\n        // Iterator will provide entry [k,v] tuples rather than values.                                                // 21583\n        while (!(step = iterator.next()).done) {                                                                       // 21584\n          var entry = step.value;                                                                                      // 21585\n          if (entry) {                                                                                                 // 21586\n            child = entry[1];                                                                                          // 21587\n            nextName = (                                                                                               // 21588\n              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +                                              // 21589\n              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +                                                           // 21590\n              getComponentKey(child, 0)                                                                                // 21591\n            );                                                                                                         // 21592\n            nextIndex = indexSoFar + subtreeCount;                                                                     // 21593\n            subtreeCount += traverseAllChildrenImpl(                                                                   // 21594\n              child,                                                                                                   // 21595\n              nextName,                                                                                                // 21596\n              nextIndex,                                                                                               // 21597\n              callback,                                                                                                // 21598\n              traverseContext                                                                                          // 21599\n            );                                                                                                         // 21600\n          }                                                                                                            // 21601\n        }                                                                                                              // 21602\n      }                                                                                                                // 21603\n    } else if (type === 'object') {                                                                                    // 21604\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 21605\n        children.nodeType !== 1,                                                                                       // 21606\n        'traverseAllChildren(...): Encountered an invalid child; DOM ' +                                               // 21607\n        'elements are not valid children of React components.'                                                         // 21608\n      ) : invariant(children.nodeType !== 1));                                                                         // 21609\n      var fragment = ReactFragment.extract(children);                                                                  // 21610\n      for (var key in fragment) {                                                                                      // 21611\n        if (fragment.hasOwnProperty(key)) {                                                                            // 21612\n          child = fragment[key];                                                                                       // 21613\n          nextName = (                                                                                                 // 21614\n            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +                                                // 21615\n            wrapUserProvidedKey(key) + SUBSEPARATOR +                                                                  // 21616\n            getComponentKey(child, 0)                                                                                  // 21617\n          );                                                                                                           // 21618\n          nextIndex = indexSoFar + subtreeCount;                                                                       // 21619\n          subtreeCount += traverseAllChildrenImpl(                                                                     // 21620\n            child,                                                                                                     // 21621\n            nextName,                                                                                                  // 21622\n            nextIndex,                                                                                                 // 21623\n            callback,                                                                                                  // 21624\n            traverseContext                                                                                            // 21625\n          );                                                                                                           // 21626\n        }                                                                                                              // 21627\n      }                                                                                                                // 21628\n    }                                                                                                                  // 21629\n  }                                                                                                                    // 21630\n                                                                                                                       // 21631\n  return subtreeCount;                                                                                                 // 21632\n}                                                                                                                      // 21633\n                                                                                                                       // 21634\n/**                                                                                                                    // 21635\n * Traverses children that are typically specified as `props.children`, but                                            // 21636\n * might also be specified through attributes:                                                                         // 21637\n *                                                                                                                     // 21638\n * - `traverseAllChildren(this.props.children, ...)`                                                                   // 21639\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`                                                          // 21640\n *                                                                                                                     // 21641\n * The `traverseContext` is an optional argument that is passed through the                                            // 21642\n * entire traversal. It can be used to store accumulations or anything else that                                       // 21643\n * the callback might find relevant.                                                                                   // 21644\n *                                                                                                                     // 21645\n * @param {?*} children Children tree object.                                                                          // 21646\n * @param {!function} callback To invoke upon traversing each child.                                                   // 21647\n * @param {?*} traverseContext Context for traversal.                                                                  // 21648\n * @return {!number} The number of children in this subtree.                                                           // 21649\n */                                                                                                                    // 21650\nfunction traverseAllChildren(children, callback, traverseContext) {                                                    // 21651\n  if (children == null) {                                                                                              // 21652\n    return 0;                                                                                                          // 21653\n  }                                                                                                                    // 21654\n                                                                                                                       // 21655\n  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);                                          // 21656\n}                                                                                                                      // 21657\n                                                                                                                       // 21658\nmodule.exports = traverseAllChildren;                                                                                  // 21659\n                                                                                                                       // 21660\n}).call(this,require('_process'))                                                                                      // 21661\n                                                                                                                       // 21662\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactFragment\":\"react/lib/ReactFragment\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./getIteratorFn\":\"react/lib/getIteratorFn\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/update\":[function(require,module,exports){\n(function (process){                                                                                                   // 21664\n/**                                                                                                                    // 21665\n * Copyright 2013-2015, Facebook, Inc.                                                                                 // 21666\n * All rights reserved.                                                                                                // 21667\n *                                                                                                                     // 21668\n * This source code is licensed under the BSD-style license found in the                                               // 21669\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 21670\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 21671\n *                                                                                                                     // 21672\n * @providesModule update                                                                                              // 21673\n */                                                                                                                    // 21674\n                                                                                                                       // 21675\n /* global hasOwnProperty:true */                                                                                      // 21676\n                                                                                                                       // 21677\n'use strict';                                                                                                          // 21678\n                                                                                                                       // 21679\nvar assign = require(\"./Object.assign\");                                                                               // 21680\nvar keyOf = require(\"./keyOf\");                                                                                        // 21681\nvar invariant = require(\"./invariant\");                                                                                // 21682\nvar hasOwnProperty = {}.hasOwnProperty;                                                                                // 21683\n                                                                                                                       // 21684\nfunction shallowCopy(x) {                                                                                              // 21685\n  if (Array.isArray(x)) {                                                                                              // 21686\n    return x.concat();                                                                                                 // 21687\n  } else if (x && typeof x === 'object') {                                                                             // 21688\n    return assign(new x.constructor(), x);                                                                             // 21689\n  } else {                                                                                                             // 21690\n    return x;                                                                                                          // 21691\n  }                                                                                                                    // 21692\n}                                                                                                                      // 21693\n                                                                                                                       // 21694\nvar COMMAND_PUSH = keyOf({$push: null});                                                                               // 21695\nvar COMMAND_UNSHIFT = keyOf({$unshift: null});                                                                         // 21696\nvar COMMAND_SPLICE = keyOf({$splice: null});                                                                           // 21697\nvar COMMAND_SET = keyOf({$set: null});                                                                                 // 21698\nvar COMMAND_MERGE = keyOf({$merge: null});                                                                             // 21699\nvar COMMAND_APPLY = keyOf({$apply: null});                                                                             // 21700\n                                                                                                                       // 21701\nvar ALL_COMMANDS_LIST = [                                                                                              // 21702\n  COMMAND_PUSH,                                                                                                        // 21703\n  COMMAND_UNSHIFT,                                                                                                     // 21704\n  COMMAND_SPLICE,                                                                                                      // 21705\n  COMMAND_SET,                                                                                                         // 21706\n  COMMAND_MERGE,                                                                                                       // 21707\n  COMMAND_APPLY                                                                                                        // 21708\n];                                                                                                                     // 21709\n                                                                                                                       // 21710\nvar ALL_COMMANDS_SET = {};                                                                                             // 21711\n                                                                                                                       // 21712\nALL_COMMANDS_LIST.forEach(function(command) {                                                                          // 21713\n  ALL_COMMANDS_SET[command] = true;                                                                                    // 21714\n});                                                                                                                    // 21715\n                                                                                                                       // 21716\nfunction invariantArrayCase(value, spec, command) {                                                                    // 21717\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 21718\n    Array.isArray(value),                                                                                              // 21719\n    'update(): expected target of %s to be an array; got %s.',                                                         // 21720\n    command,                                                                                                           // 21721\n    value                                                                                                              // 21722\n  ) : invariant(Array.isArray(value)));                                                                                // 21723\n  var specValue = spec[command];                                                                                       // 21724\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 21725\n    Array.isArray(specValue),                                                                                          // 21726\n    'update(): expected spec of %s to be an array; got %s. ' +                                                         // 21727\n    'Did you forget to wrap your parameter in an array?',                                                              // 21728\n    command,                                                                                                           // 21729\n    specValue                                                                                                          // 21730\n  ) : invariant(Array.isArray(specValue)));                                                                            // 21731\n}                                                                                                                      // 21732\n                                                                                                                       // 21733\nfunction update(value, spec) {                                                                                         // 21734\n  (\"production\" !== process.env.NODE_ENV ? invariant(                                                                  // 21735\n    typeof spec === 'object',                                                                                          // 21736\n    'update(): You provided a key path to update() that did not contain one ' +                                        // 21737\n    'of %s. Did you forget to include {%s: ...}?',                                                                     // 21738\n    ALL_COMMANDS_LIST.join(', '),                                                                                      // 21739\n    COMMAND_SET                                                                                                        // 21740\n  ) : invariant(typeof spec === 'object'));                                                                            // 21741\n                                                                                                                       // 21742\n  if (hasOwnProperty.call(spec, COMMAND_SET)) {                                                                        // 21743\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 21744\n      Object.keys(spec).length === 1,                                                                                  // 21745\n      'Cannot have more than one key in an object with %s',                                                            // 21746\n      COMMAND_SET                                                                                                      // 21747\n    ) : invariant(Object.keys(spec).length === 1));                                                                    // 21748\n                                                                                                                       // 21749\n    return spec[COMMAND_SET];                                                                                          // 21750\n  }                                                                                                                    // 21751\n                                                                                                                       // 21752\n  var nextValue = shallowCopy(value);                                                                                  // 21753\n                                                                                                                       // 21754\n  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {                                                                      // 21755\n    var mergeObj = spec[COMMAND_MERGE];                                                                                // 21756\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 21757\n      mergeObj && typeof mergeObj === 'object',                                                                        // 21758\n      'update(): %s expects a spec of type \\'object\\'; got %s',                                                        // 21759\n      COMMAND_MERGE,                                                                                                   // 21760\n      mergeObj                                                                                                         // 21761\n    ) : invariant(mergeObj && typeof mergeObj === 'object'));                                                          // 21762\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 21763\n      nextValue && typeof nextValue === 'object',                                                                      // 21764\n      'update(): %s expects a target of type \\'object\\'; got %s',                                                      // 21765\n      COMMAND_MERGE,                                                                                                   // 21766\n      nextValue                                                                                                        // 21767\n    ) : invariant(nextValue && typeof nextValue === 'object'));                                                        // 21768\n    assign(nextValue, spec[COMMAND_MERGE]);                                                                            // 21769\n  }                                                                                                                    // 21770\n                                                                                                                       // 21771\n  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {                                                                       // 21772\n    invariantArrayCase(value, spec, COMMAND_PUSH);                                                                     // 21773\n    spec[COMMAND_PUSH].forEach(function(item) {                                                                        // 21774\n      nextValue.push(item);                                                                                            // 21775\n    });                                                                                                                // 21776\n  }                                                                                                                    // 21777\n                                                                                                                       // 21778\n  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {                                                                    // 21779\n    invariantArrayCase(value, spec, COMMAND_UNSHIFT);                                                                  // 21780\n    spec[COMMAND_UNSHIFT].forEach(function(item) {                                                                     // 21781\n      nextValue.unshift(item);                                                                                         // 21782\n    });                                                                                                                // 21783\n  }                                                                                                                    // 21784\n                                                                                                                       // 21785\n  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {                                                                     // 21786\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 21787\n      Array.isArray(value),                                                                                            // 21788\n      'Expected %s target to be an array; got %s',                                                                     // 21789\n      COMMAND_SPLICE,                                                                                                  // 21790\n      value                                                                                                            // 21791\n    ) : invariant(Array.isArray(value)));                                                                              // 21792\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 21793\n      Array.isArray(spec[COMMAND_SPLICE]),                                                                             // 21794\n      'update(): expected spec of %s to be an array of arrays; got %s. ' +                                             // 21795\n      'Did you forget to wrap your parameters in an array?',                                                           // 21796\n      COMMAND_SPLICE,                                                                                                  // 21797\n      spec[COMMAND_SPLICE]                                                                                             // 21798\n    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));                                                               // 21799\n    spec[COMMAND_SPLICE].forEach(function(args) {                                                                      // 21800\n      (\"production\" !== process.env.NODE_ENV ? invariant(                                                              // 21801\n        Array.isArray(args),                                                                                           // 21802\n        'update(): expected spec of %s to be an array of arrays; got %s. ' +                                           // 21803\n        'Did you forget to wrap your parameters in an array?',                                                         // 21804\n        COMMAND_SPLICE,                                                                                                // 21805\n        spec[COMMAND_SPLICE]                                                                                           // 21806\n      ) : invariant(Array.isArray(args)));                                                                             // 21807\n      nextValue.splice.apply(nextValue, args);                                                                         // 21808\n    });                                                                                                                // 21809\n  }                                                                                                                    // 21810\n                                                                                                                       // 21811\n  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {                                                                      // 21812\n    (\"production\" !== process.env.NODE_ENV ? invariant(                                                                // 21813\n      typeof spec[COMMAND_APPLY] === 'function',                                                                       // 21814\n      'update(): expected spec of %s to be a function; got %s.',                                                       // 21815\n      COMMAND_APPLY,                                                                                                   // 21816\n      spec[COMMAND_APPLY]                                                                                              // 21817\n    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));                                                         // 21818\n    nextValue = spec[COMMAND_APPLY](nextValue);                                                                        // 21819\n  }                                                                                                                    // 21820\n                                                                                                                       // 21821\n  for (var k in spec) {                                                                                                // 21822\n    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {                                                // 21823\n      nextValue[k] = update(value[k], spec[k]);                                                                        // 21824\n    }                                                                                                                  // 21825\n  }                                                                                                                    // 21826\n                                                                                                                       // 21827\n  return nextValue;                                                                                                    // 21828\n}                                                                                                                      // 21829\n                                                                                                                       // 21830\nmodule.exports = update;                                                                                               // 21831\n                                                                                                                       // 21832\n}).call(this,require('_process'))                                                                                      // 21833\n                                                                                                                       // 21834\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./invariant\":\"react/lib/invariant\",\"./keyOf\":\"react/lib/keyOf\",\"_process\":1}],\"react/lib/warning\":[function(require,module,exports){\n(function (process){                                                                                                   // 21836\n/**                                                                                                                    // 21837\n * Copyright 2014-2015, Facebook, Inc.                                                                                 // 21838\n * All rights reserved.                                                                                                // 21839\n *                                                                                                                     // 21840\n * This source code is licensed under the BSD-style license found in the                                               // 21841\n * LICENSE file in the root directory of this source tree. An additional grant                                         // 21842\n * of patent rights can be found in the PATENTS file in the same directory.                                            // 21843\n *                                                                                                                     // 21844\n * @providesModule warning                                                                                             // 21845\n */                                                                                                                    // 21846\n                                                                                                                       // 21847\n\"use strict\";                                                                                                          // 21848\n                                                                                                                       // 21849\nvar emptyFunction = require(\"./emptyFunction\");                                                                        // 21850\n                                                                                                                       // 21851\n/**                                                                                                                    // 21852\n * Similar to invariant but only logs a warning if the condition is not met.                                           // 21853\n * This can be used to log issues in development environments in critical                                              // 21854\n * paths. Removing the logging code for production environments will keep the                                          // 21855\n * same logic and follow the same code paths.                                                                          // 21856\n */                                                                                                                    // 21857\n                                                                                                                       // 21858\nvar warning = emptyFunction;                                                                                           // 21859\n                                                                                                                       // 21860\nif (\"production\" !== process.env.NODE_ENV) {                                                                           // 21861\n  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n    if (format === undefined) {                                                                                        // 21863\n      throw new Error(                                                                                                 // 21864\n        '`warning(condition, format, ...args)` requires a warning ' +                                                  // 21865\n        'message argument'                                                                                             // 21866\n      );                                                                                                               // 21867\n    }                                                                                                                  // 21868\n                                                                                                                       // 21869\n    if (format.length < 10 || /^[s\\W]*$/.test(format)) {                                                               // 21870\n      throw new Error(                                                                                                 // 21871\n        'The warning format should be able to uniquely identify this ' +                                               // 21872\n        'warning. Please, use a more descriptive format than: ' + format                                               // 21873\n      );                                                                                                               // 21874\n    }                                                                                                                  // 21875\n                                                                                                                       // 21876\n    if (format.indexOf('Failed Composite propType: ') === 0) {                                                         // 21877\n      return; // Ignore CompositeComponent proptype check.                                                             // 21878\n    }                                                                                                                  // 21879\n                                                                                                                       // 21880\n    if (!condition) {                                                                                                  // 21881\n      var argIndex = 0;                                                                                                // 21882\n      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});                       // 21883\n      console.warn(message);                                                                                           // 21884\n      try {                                                                                                            // 21885\n        // --- Welcome to debugging React ---                                                                          // 21886\n        // This error was thrown as a convenience so that you can use this stack                                       // 21887\n        // to find the callsite that caused this warning to fire.                                                      // 21888\n        throw new Error(message);                                                                                      // 21889\n      } catch(x) {}                                                                                                    // 21890\n    }                                                                                                                  // 21891\n  };                                                                                                                   // 21892\n}                                                                                                                      // 21893\n                                                                                                                       // 21894\nmodule.exports = warning;                                                                                              // 21895\n                                                                                                                       // 21896\n}).call(this,require('_process'))                                                                                      // 21897\n                                                                                                                       // 21898\n},{\"./emptyFunction\":\"react/lib/emptyFunction\",\"_process\":1}],\"react\":[function(require,module,exports){               // 21899\nmodule.exports = require('./lib/React');                                                                               // 21900\n                                                                                                                       // 21901\n},{\"./lib/React\":\"react/lib/React\"}]},{},[2])                                                                          // 21902\n//# sourceMappingURL=react-runtime-dev/react.browserify.js                                                             // 21903\n                                                                                                                       // 21904\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/react-runtime-dev/attach-require.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nReact.require = require;                                                                                               // 1\nReactDev = React;                                                                                                      // 2\n                                                                                                                       // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['react-runtime-dev'] = {\n  ReactDev: ReactDev\n};\n\n})();\n","servePath":"/packages/react-runtime-dev.js","sourceMap":{"version":3,"sources":["/packages/react-runtime-dev/detect-shims.js","/packages/react-runtime-dev/shams.js","/packages/react-runtime-dev/react.browserify.js","/packages/react-runtime-dev/attach-require.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACrqBA;AACA;AACA,2H","file":"/packages/react-runtime-dev.js","sourcesContent":["// React contains this code, but it doesn't run it soon enough to be helpful.\n// Also, this way we get to print a meteor-specific error message, though\n// in addition we modify React's error message with a search-and-replace in\n// the Browserify options.\n\nvar expectedFeatures = [\n  Array.isArray,\n  Array.prototype.every,\n  Array.prototype.forEach,\n  Array.prototype.indexOf,\n  Array.prototype.map,\n  Date.now,\n  Function.prototype.bind,\n  Object.keys,\n  String.prototype.split,\n  String.prototype.trim\n];\n\nfor (var i = 0; i < expectedFeatures.length; i++) {\n  if (!expectedFeatures[i]) {\n    console.error(\n      'One or more ES5 shims expected by React are not available: ' +\n        'Add the es5-shim package with `meteor add es5-shim`'\n    );\n    break;\n  }\n}\n","// This file is duplicated between react-runtime-prod and react-runtime-dev,\n// so be sure to keep them in sync.\n//\n// These private helpers that approximate Object.create and Object.freeze,\n// in conjunction with a browserify transform that does a search-and-replace\n// on the React code, remove React's dependence on es5-sham.  See also\n// https://github.com/facebook/react/issues/4189.\n\nObject_create = (Object.create || function (proto, props) {\n  if (proto === null) {\n    throw new Error(\"This sham does not support Object.create(null)\");\n  } else if (props) {\n    throw new Error(\"This sham does not support Object.create(..., props)\");\n  }\n\n  var Type = function Type() {}; // An empty constructor.\n  Type.prototype = proto;\n  return new Type();\n});\n\nObject_freeze = (Object.freeze || function (obj) { return obj; });\n","require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],2:[function(require,module,exports){\nReact = require(\"react/addons\");\n\n},{\"react/addons\":\"react/addons\"}],\"react/addons\":[function(require,module,exports){\nmodule.exports = require('./lib/ReactWithAddons');\n\n},{\"./lib/ReactWithAddons\":\"react/lib/ReactWithAddons\"}],\"react/lib/AutoFocusMixin\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AutoFocusMixin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar focusNode = require(\"./focusNode\");\n\nvar AutoFocusMixin = {\n  componentDidMount: function() {\n    if (this.props.autoFocus) {\n      focusNode(this.getDOMNode());\n    }\n  }\n};\n\nmodule.exports = AutoFocusMixin;\n\n},{\"./focusNode\":\"react/lib/focusNode\"}],\"react/lib/BeforeInputEventPlugin\":[function(require,module,exports){\n/**\n * Copyright 2013-2015 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar FallbackCompositionState = require(\"./FallbackCompositionState\");\nvar SyntheticCompositionEvent = require(\"./SyntheticCompositionEvent\");\nvar SyntheticInputEvent = require(\"./SyntheticInputEvent\");\n\nvar keyOf = require(\"./keyOf\");\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = (\n  ExecutionEnvironment.canUseDOM &&\n  'CompositionEvent' in window\n);\n\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = (\n  ExecutionEnvironment.canUseDOM &&\n  'TextEvent' in window &&\n  !documentMode &&\n  !isPresto()\n);\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = (\n  ExecutionEnvironment.canUseDOM &&\n  (\n    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)\n  )\n);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return (\n    typeof opera === 'object' &&\n    typeof opera.version === 'function' &&\n    parseInt(opera.version(), 10) <= 12\n  );\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onBeforeInput: null}),\n      captured: keyOf({onBeforeInputCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topCompositionEnd,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topTextInput,\n      topLevelTypes.topPaste\n    ]\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionEnd: null}),\n      captured: keyOf({onCompositionEndCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionEnd,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionStart: null}),\n      captured: keyOf({onCompositionStartCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionStart,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionUpdate: null}),\n      captured: keyOf({onCompositionUpdateCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionUpdate,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (\n    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n    // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n  );\n}\n\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return (\n    topLevelType === topLevelTypes.topKeyDown &&\n    nativeEvent.keyCode === START_KEYCODE\n  );\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return (nativeEvent.keyCode !== START_KEYCODE);\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(\n  topLevelType,\n  topLevelTarget,\n  topLevelTargetID,\n  nativeEvent\n) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(\n    eventType,\n    topLevelTargetID,\n    nativeEvent\n  );\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionEnd:\n      return getDataFromCustomEvent(nativeEvent);\n    case topLevelTypes.topKeyPress:\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case topLevelTypes.topTextInput:\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  if (currentComposition) {\n    if (\n      topLevelType === topLevelTypes.topCompositionEnd ||\n      isFallbackCompositionEnd(topLevelType, nativeEvent)\n    ) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case topLevelTypes.topPaste:\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case topLevelTypes.topKeyPress:\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case topLevelTypes.topCompositionEnd:\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(\n  topLevelType,\n  topLevelTarget,\n  topLevelTargetID,\n  nativeEvent\n) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(\n    eventTypes.beforeInput,\n    topLevelTargetID,\n    nativeEvent\n  );\n\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID,\n    nativeEvent\n  ) {\n    return [\n      extractCompositionEvent(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID,\n        nativeEvent\n      ),\n      extractBeforeInputEvent(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID,\n        nativeEvent\n      )\n    ];\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;\n\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPropagators\":\"react/lib/EventPropagators\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./FallbackCompositionState\":\"react/lib/FallbackCompositionState\",\"./SyntheticCompositionEvent\":\"react/lib/SyntheticCompositionEvent\",\"./SyntheticInputEvent\":\"react/lib/SyntheticInputEvent\",\"./keyOf\":\"react/lib/keyOf\"}],\"react/lib/CSSCore\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSCore\n * @typechecks\n */\n\nvar invariant = require(\"./invariant\");\n\n/**\n * The CSSCore module specifies the API (and implements most of the methods)\n * that should be used when dealing with the display of elements (via their\n * CSS classes and visibility on screen. It is an API focused on mutating the\n * display and not reading it as no logical state should be encoded in the\n * display of elements.\n */\n\nvar CSSCore = {\n\n  /**\n   * Adds the class passed in to the element if it doesn't already have it.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  addClass: function(element, className) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !/\\s/.test(className),\n      'CSSCore.addClass takes only a single class name. \"%s\" contains ' +\n      'multiple classes.', className\n    ) : invariant(!/\\s/.test(className)));\n\n    if (className) {\n      if (element.classList) {\n        element.classList.add(className);\n      } else if (!CSSCore.hasClass(element, className)) {\n        element.className = element.className + ' ' + className;\n      }\n    }\n    return element;\n  },\n\n  /**\n   * Removes the class passed in from the element\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  removeClass: function(element, className) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !/\\s/.test(className),\n      'CSSCore.removeClass takes only a single class name. \"%s\" contains ' +\n      'multiple classes.', className\n    ) : invariant(!/\\s/.test(className)));\n\n    if (className) {\n      if (element.classList) {\n        element.classList.remove(className);\n      } else if (CSSCore.hasClass(element, className)) {\n        element.className = element.className\n          .replace(new RegExp('(^|\\\\s)' + className + '(?:\\\\s|$)', 'g'), '$1')\n          .replace(/\\s+/g, ' ') // multiple spaces to one\n          .replace(/^\\s*|\\s*$/g, ''); // trim the ends\n      }\n    }\n    return element;\n  },\n\n  /**\n   * Helper to add or remove a class from an element based on a condition.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @param {*} bool condition to whether to add or remove the class\n   * @return {DOMElement} the element passed in\n   */\n  conditionClass: function(element, className, bool) {\n    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);\n  },\n\n  /**\n   * Tests whether the element has the class specified.\n   *\n   * @param {DOMNode|DOMWindow} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {boolean} true if the element has the class, false if not\n   */\n  hasClass: function(element, className) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !/\\s/.test(className),\n      'CSS.hasClass takes only a single class name.'\n    ) : invariant(!/\\s/.test(className)));\n    if (element.classList) {\n      return !!className && element.classList.contains(className);\n    }\n    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;\n  }\n\n};\n\nmodule.exports = CSSCore;\n\n}).call(this,require('_process'))\n\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/CSSPropertyOperations\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSPropertyOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CSSProperty = require(\"./CSSProperty\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar camelizeStyleName = require(\"./camelizeStyleName\");\nvar dangerousStyleValue = require(\"./dangerousStyleValue\");\nvar hyphenateStyleName = require(\"./hyphenateStyleName\");\nvar memoizeStringOnly = require(\"./memoizeStringOnly\");\nvar warning = require(\"./warning\");\n\nvar processStyleName = memoizeStringOnly(function(styleName) {\n  return hyphenateStyleName(styleName);\n});\n\nvar styleFloatAccessor = 'cssFloat';\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8 only supports accessing cssFloat (standard) as styleFloat\n  if (document.documentElement.style.cssFloat === undefined) {\n    styleFloatAccessor = 'styleFloat';\n  }\n}\n\nif (\"production\" !== process.env.NODE_ENV) {\n  // 'msTransform' is correct, but the other prefixes should be capitalized\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n\n  // style values shouldn't contain a semicolon\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;\n\n  var warnedStyleNames = {};\n  var warnedStyleValues = {};\n\n  var warnHyphenatedStyleName = function(name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      false,\n      'Unsupported style property %s. Did you mean %s?',\n      name,\n      camelizeStyleName(name)\n    ) : null);\n  };\n\n  var warnBadVendoredStyleName = function(name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      false,\n      'Unsupported vendor-prefixed style property %s. Did you mean %s?',\n      name,\n      name.charAt(0).toUpperCase() + name.slice(1)\n    ) : null);\n  };\n\n  var warnStyleValueWithSemicolon = function(name, value) {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      false,\n      'Style property values shouldn\\'t contain a semicolon. ' +\n      'Try \"%s: %s\" instead.',\n      name,\n      value.replace(badStyleValueWithSemicolonPattern, '')\n    ) : null);\n  };\n\n  /**\n   * @param {string} name\n   * @param {*} value\n   */\n  var warnValidStyle = function(name, value) {\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value);\n    }\n  };\n}\n\n/**\n * Operations for dealing with CSS properties.\n */\nvar CSSPropertyOperations = {\n\n  /**\n   * Serializes a mapping of style properties for use as inline styles:\n   *\n   *   > createMarkupForStyles({width: '200px', height: 0})\n   *   \"width:200px;height:0;\"\n   *\n   * Undefined values are ignored so that declarative programming is easier.\n   * The result should be HTML-escaped before insertion into the DOM.\n   *\n   * @param {object} styles\n   * @return {?string}\n   */\n  createMarkupForStyles: function(styles) {\n    var serialized = '';\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      var styleValue = styles[styleName];\n      if (\"production\" !== process.env.NODE_ENV) {\n        warnValidStyle(styleName, styleValue);\n      }\n      if (styleValue != null) {\n        serialized += processStyleName(styleName) + ':';\n        serialized += dangerousStyleValue(styleName, styleValue) + ';';\n      }\n    }\n    return serialized || null;\n  },\n\n  /**\n   * Sets the value for multiple styles on a node.  If a value is specified as\n   * '' (empty string), the corresponding style property will be unset.\n   *\n   * @param {DOMElement} node\n   * @param {object} styles\n   */\n  setValueForStyles: function(node, styles) {\n    var style = node.style;\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      if (\"production\" !== process.env.NODE_ENV) {\n        warnValidStyle(styleName, styles[styleName]);\n      }\n      var styleValue = dangerousStyleValue(styleName, styles[styleName]);\n      if (styleName === 'float') {\n        styleName = styleFloatAccessor;\n      }\n      if (styleValue) {\n        style[styleName] = styleValue;\n      } else {\n        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];\n        if (expansion) {\n          // Shorthand property that IE8 won't like unsetting, so unset each\n          // component to placate it\n          for (var individualStyleName in expansion) {\n            style[individualStyleName] = '';\n          }\n        } else {\n          style[styleName] = '';\n        }\n      }\n    }\n  }\n\n};\n\nmodule.exports = CSSPropertyOperations;\n\n}).call(this,require('_process'))\n\n},{\"./CSSProperty\":\"react/lib/CSSProperty\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./camelizeStyleName\":\"react/lib/camelizeStyleName\",\"./dangerousStyleValue\":\"react/lib/dangerousStyleValue\",\"./hyphenateStyleName\":\"react/lib/hyphenateStyleName\",\"./memoizeStringOnly\":\"react/lib/memoizeStringOnly\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/CSSProperty\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSProperty\n */\n\n'use strict';\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nvar isUnitlessNumber = {\n  boxFlex: true,\n  boxFlexGroup: true,\n  columnCount: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n\n  // SVG-related properties\n  fillOpacity: true,\n  strokeDashoffset: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\n\n/**\n * @param {string} prefix vendor-specific prefix, eg: Webkit\n * @param {string} key style name, eg: transitionDuration\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:\n * WebkitTransitionDuration\n */\nfunction prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n}\n\n/**\n * Support style names that may come passed in prefixed by adding permutations\n * of vendor prefixes.\n */\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\n\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an\n// infinite loop, because it iterates over the newly added props too.\nObject.keys(isUnitlessNumber).forEach(function(prop) {\n  prefixes.forEach(function(prefix) {\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];\n  });\n});\n\n/**\n * Most style properties can be unset by doing .style[prop] = '' but IE8\n * doesn't like doing that with shorthand properties so for the properties that\n * IE8 breaks on, which are listed here, we instead unset each of the\n * individual properties. See http://bugs.jquery.com/ticket/12385.\n * The 4-value 'clock' properties like margin, padding, border-width seem to\n * behave without any problems. Curiously, list-style works too without any\n * special prodding.\n */\nvar shorthandPropertyExpansions = {\n  background: {\n    backgroundImage: true,\n    backgroundPosition: true,\n    backgroundRepeat: true,\n    backgroundColor: true\n  },\n  border: {\n    borderWidth: true,\n    borderStyle: true,\n    borderColor: true\n  },\n  borderBottom: {\n    borderBottomWidth: true,\n    borderBottomStyle: true,\n    borderBottomColor: true\n  },\n  borderLeft: {\n    borderLeftWidth: true,\n    borderLeftStyle: true,\n    borderLeftColor: true\n  },\n  borderRight: {\n    borderRightWidth: true,\n    borderRightStyle: true,\n    borderRightColor: true\n  },\n  borderTop: {\n    borderTopWidth: true,\n    borderTopStyle: true,\n    borderTopColor: true\n  },\n  font: {\n    fontStyle: true,\n    fontVariant: true,\n    fontWeight: true,\n    fontSize: true,\n    lineHeight: true,\n    fontFamily: true\n  }\n};\n\nvar CSSProperty = {\n  isUnitlessNumber: isUnitlessNumber,\n  shorthandPropertyExpansions: shorthandPropertyExpansions\n};\n\nmodule.exports = CSSProperty;\n\n},{}],\"react/lib/CallbackQueue\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CallbackQueue\n */\n\n'use strict';\n\nvar PooledClass = require(\"./PooledClass\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\n/**\n * A specialized pseudo-event module to help keep track of components waiting to\n * be notified when their DOM representations are available for use.\n *\n * This implements `PooledClass`, so you should never need to instantiate this.\n * Instead, use `CallbackQueue.getPooled()`.\n *\n * @class ReactMountReady\n * @implements PooledClass\n * @internal\n */\nfunction CallbackQueue() {\n  this._callbacks = null;\n  this._contexts = null;\n}\n\nassign(CallbackQueue.prototype, {\n\n  /**\n   * Enqueues a callback to be invoked when `notifyAll` is invoked.\n   *\n   * @param {function} callback Invoked when `notifyAll` is invoked.\n   * @param {?object} context Context to call `callback` with.\n   * @internal\n   */\n  enqueue: function(callback, context) {\n    this._callbacks = this._callbacks || [];\n    this._contexts = this._contexts || [];\n    this._callbacks.push(callback);\n    this._contexts.push(context);\n  },\n\n  /**\n   * Invokes all enqueued callbacks and clears the queue. This is invoked after\n   * the DOM representation of a component has been created or updated.\n   *\n   * @internal\n   */\n  notifyAll: function() {\n    var callbacks = this._callbacks;\n    var contexts = this._contexts;\n    if (callbacks) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        callbacks.length === contexts.length,\n        'Mismatched list of contexts in callback queue'\n      ) : invariant(callbacks.length === contexts.length));\n      this._callbacks = null;\n      this._contexts = null;\n      for (var i = 0, l = callbacks.length; i < l; i++) {\n        callbacks[i].call(contexts[i]);\n      }\n      callbacks.length = 0;\n      contexts.length = 0;\n    }\n  },\n\n  /**\n   * Resets the internal queue.\n   *\n   * @internal\n   */\n  reset: function() {\n    this._callbacks = null;\n    this._contexts = null;\n  },\n\n  /**\n   * `PooledClass` looks for this.\n   */\n  destructor: function() {\n    this.reset();\n  }\n\n});\n\nPooledClass.addPoolingTo(CallbackQueue);\n\nmodule.exports = CallbackQueue;\n\n}).call(this,require('_process'))\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ChangeEventPlugin\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ChangeEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar isEventSupported = require(\"./isEventSupported\");\nvar isTextInputElement = require(\"./isTextInputElement\");\nvar keyOf = require(\"./keyOf\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onChange: null}),\n      captured: keyOf({onChangeCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topChange,\n      topLevelTypes.topClick,\n      topLevelTypes.topFocus,\n      topLevelTypes.topInput,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topSelectionChange\n    ]\n  }\n};\n\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementID = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  return (\n    elem.nodeName === 'SELECT' ||\n    (elem.nodeName === 'INPUT' && elem.type === 'file')\n  );\n}\n\nvar doesChangeEventBubble = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (\n    (!('documentMode' in document) || document.documentMode > 8)\n  );\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(\n    eventTypes.change,\n    activeElementID,\n    nativeEvent\n  );\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue();\n}\n\nfunction startWatchingForChangeEventIE8(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementID = null;\n}\n\nfunction getTargetIDForChangeEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return topLevelTargetID;\n  }\n}\nfunction handleEventsForChangeEventIE8(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events\n  isInputEventSupported = isEventSupported('input') && (\n    (!('documentMode' in document) || document.documentMode > 9)\n  );\n}\n\n/**\n * (For old IE.) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\nvar newValueProp =  {\n  get: function() {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function(val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n\n/**\n * (For old IE.) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(\n    target.constructor.prototype,\n    'value'\n  );\n\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n\n/**\n * (For old IE.) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  // delete restores the original property definition\n  delete activeElement.value;\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n\n  activeElement = null;\n  activeElementID = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n\n/**\n * (For old IE.) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  var value = nativeEvent.srcElement.value;\n  if (value === activeElementValue) {\n    return;\n  }\n  activeElementValue = value;\n\n  manualDispatchChangeEvent(nativeEvent);\n}\n\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\nfunction getTargetIDForInputEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return topLevelTargetID;\n  }\n}\n\n// For IE8 and IE9.\nfunction handleEventsForInputEventIE(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetIDForInputEventIE(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topSelectionChange ||\n      topLevelType === topLevelTypes.topKeyUp ||\n      topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementID;\n    }\n  }\n}\n\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return (\n    elem.nodeName === 'INPUT' &&\n    (elem.type === 'checkbox' || elem.type === 'radio')\n  );\n}\n\nfunction getTargetIDForClickEvent(\n    topLevelType,\n    topLevelTarget,\n    topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return topLevelTargetID;\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    var getTargetIDFunc, handleEventFunc;\n    if (shouldUseChangeEvent(topLevelTarget)) {\n      if (doesChangeEventBubble) {\n        getTargetIDFunc = getTargetIDForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(topLevelTarget)) {\n      if (isInputEventSupported) {\n        getTargetIDFunc = getTargetIDForInputEvent;\n      } else {\n        getTargetIDFunc = getTargetIDForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(topLevelTarget)) {\n      getTargetIDFunc = getTargetIDForClickEvent;\n    }\n\n    if (getTargetIDFunc) {\n      var targetID = getTargetIDFunc(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID\n      );\n      if (targetID) {\n        var event = SyntheticEvent.getPooled(\n          eventTypes.change,\n          targetID,\n          nativeEvent\n        );\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(\n        topLevelType,\n        topLevelTarget,\n        topLevelTargetID\n      );\n    }\n  }\n\n};\n\nmodule.exports = ChangeEventPlugin;\n\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPluginHub\":\"react/lib/EventPluginHub\",\"./EventPropagators\":\"react/lib/EventPropagators\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./SyntheticEvent\":\"react/lib/SyntheticEvent\",\"./isEventSupported\":\"react/lib/isEventSupported\",\"./isTextInputElement\":\"react/lib/isTextInputElement\",\"./keyOf\":\"react/lib/keyOf\"}],\"react/lib/ClientReactRootIndex\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ClientReactRootIndex\n * @typechecks\n */\n\n'use strict';\n\nvar nextReactRootIndex = 0;\n\nvar ClientReactRootIndex = {\n  createReactRootIndex: function() {\n    return nextReactRootIndex++;\n  }\n};\n\nmodule.exports = ClientReactRootIndex;\n\n},{}],\"react/lib/DOMChildrenOperations\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar Danger = require(\"./Danger\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar setTextContent = require(\"./setTextContent\");\nvar invariant = require(\"./invariant\");\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n  parentNode.insertBefore(\n    childNode,\n    parentNode.childNodes[index] || null\n  );\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n\n  updateTextContent: setTextContent,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function(updates, markupList) {\n    var update;\n    // Mapping from parent IDs to initial child orderings.\n    var initialChildren = null;\n    // List of children that will be moved or removed.\n    var updatedChildren = null;\n\n    for (var i = 0; i < updates.length; i++) {\n      update = updates[i];\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||\n          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;\n        var updatedChild = update.parentNode.childNodes[updatedIndex];\n        var parentID = update.parentID;\n\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          updatedChild,\n          'processUpdates(): Unable to find child %s of element. This ' +\n          'probably means the DOM was unexpectedly mutated (e.g., by the ' +\n          'browser), usually due to forgetting a <tbody> when using tables, ' +\n          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +\n          'in an <svg> parent. Try inspecting the child nodes of the element ' +\n          'with React ID `%s`.',\n          updatedIndex,\n          parentID\n        ) : invariant(updatedChild));\n\n        initialChildren = initialChildren || {};\n        initialChildren[parentID] = initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] = updatedChild;\n\n        updatedChildren = updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n\n    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);\n\n    // Remove updated children first so that `toIndex` is consistent.\n    if (updatedChildren) {\n      for (var j = 0; j < updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n\n    for (var k = 0; k < updates.length; k++) {\n      update = updates[k];\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(\n            update.parentNode,\n            renderedMarkup[update.markupIndex],\n            update.toIndex\n          );\n          break;\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(\n            update.parentNode,\n            initialChildren[update.parentID][update.fromIndex],\n            update.toIndex\n          );\n          break;\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          setTextContent(\n            update.parentNode,\n            update.textContent\n          );\n          break;\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n\n};\n\nmodule.exports = DOMChildrenOperations;\n\n}).call(this,require('_process'))\n\n},{\"./Danger\":\"react/lib/Danger\",\"./ReactMultiChildUpdateTypes\":\"react/lib/ReactMultiChildUpdateTypes\",\"./invariant\":\"react/lib/invariant\",\"./setTextContent\":\"react/lib/setTextContent\",\"_process\":1}],\"react/lib/DOMPropertyOperations\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMPropertyOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\n\nvar quoteAttributeValueForBrowser = require(\"./quoteAttributeValueForBrowser\");\nvar warning = require(\"./warning\");\n\nfunction shouldIgnoreValue(name, value) {\n  return value == null ||\n    (DOMProperty.hasBooleanValue[name] && !value) ||\n    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||\n    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||\n    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);\n}\n\nif (\"production\" !== process.env.NODE_ENV) {\n  var reactProps = {\n    children: true,\n    dangerouslySetInnerHTML: true,\n    key: true,\n    ref: true\n  };\n  var warnedProperties = {};\n\n  var warnUnknownProperty = function(name) {\n    if (reactProps.hasOwnProperty(name) && reactProps[name] ||\n        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {\n      return;\n    }\n\n    warnedProperties[name] = true;\n    var lowerCasedName = name.toLowerCase();\n\n    // data-* attributes should be lowercase; suggest the lowercase version\n    var standardName = (\n      DOMProperty.isCustomAttribute(lowerCasedName) ?\n        lowerCasedName :\n      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?\n        DOMProperty.getPossibleStandardName[lowerCasedName] :\n        null\n    );\n\n    // For now, only warn when we have a suggested correction. This prevents\n    // logging too much when using transferPropsTo.\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      standardName == null,\n      'Unknown DOM property %s. Did you mean %s?',\n      name,\n      standardName\n    ) : null);\n\n  };\n}\n\n/**\n * Operations for dealing with DOM properties.\n */\nvar DOMPropertyOperations = {\n\n  /**\n   * Creates markup for the ID property.\n   *\n   * @param {string} id Unescaped ID.\n   * @return {string} Markup string.\n   */\n  createMarkupForID: function(id) {\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +\n      quoteAttributeValueForBrowser(id);\n  },\n\n  /**\n   * Creates markup for a property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {?string} Markup string, or null if the property was invalid.\n   */\n  createMarkupForProperty: function(name, value) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) &&\n        DOMProperty.isStandardName[name]) {\n      if (shouldIgnoreValue(name, value)) {\n        return '';\n      }\n      var attributeName = DOMProperty.getAttributeName[name];\n      if (DOMProperty.hasBooleanValue[name] ||\n          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {\n        return attributeName;\n      }\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        return '';\n      }\n      return name + '=' + quoteAttributeValueForBrowser(value);\n    } else if (\"production\" !== process.env.NODE_ENV) {\n      warnUnknownProperty(name);\n    }\n    return null;\n  },\n\n  /**\n   * Sets the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   * @param {*} value\n   */\n  setValueForProperty: function(node, name, value) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) &&\n        DOMProperty.isStandardName[name]) {\n      var mutationMethod = DOMProperty.getMutationMethod[name];\n      if (mutationMethod) {\n        mutationMethod(node, value);\n      } else if (shouldIgnoreValue(name, value)) {\n        this.deleteValueForProperty(node, name);\n      } else if (DOMProperty.mustUseAttribute[name]) {\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);\n      } else {\n        var propName = DOMProperty.getPropertyName[name];\n        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the\n        // property type before comparing; only `value` does and is string.\n        if (!DOMProperty.hasSideEffects[name] ||\n            ('' + node[propName]) !== ('' + value)) {\n          // Contrary to `setAttribute`, object properties are properly\n          // `toString`ed by IE8/9.\n          node[propName] = value;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        node.removeAttribute(name);\n      } else {\n        node.setAttribute(name, '' + value);\n      }\n    } else if (\"production\" !== process.env.NODE_ENV) {\n      warnUnknownProperty(name);\n    }\n  },\n\n  /**\n   * Deletes the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForProperty: function(node, name) {\n    if (DOMProperty.isStandardName.hasOwnProperty(name) &&\n        DOMProperty.isStandardName[name]) {\n      var mutationMethod = DOMProperty.getMutationMethod[name];\n      if (mutationMethod) {\n        mutationMethod(node, undefined);\n      } else if (DOMProperty.mustUseAttribute[name]) {\n        node.removeAttribute(DOMProperty.getAttributeName[name]);\n      } else {\n        var propName = DOMProperty.getPropertyName[name];\n        var defaultValue = DOMProperty.getDefaultValueForProperty(\n          node.nodeName,\n          propName\n        );\n        if (!DOMProperty.hasSideEffects[name] ||\n            ('' + node[propName]) !== defaultValue) {\n          node[propName] = defaultValue;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      node.removeAttribute(name);\n    } else if (\"production\" !== process.env.NODE_ENV) {\n      warnUnknownProperty(name);\n    }\n  }\n\n};\n\nmodule.exports = DOMPropertyOperations;\n\n}).call(this,require('_process'))\n\n},{\"./DOMProperty\":\"react/lib/DOMProperty\",\"./quoteAttributeValueForBrowser\":\"react/lib/quoteAttributeValueForBrowser\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/DOMProperty\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n/*jslint bitwise: true */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_NUMERIC_VALUE: 0x10,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function(domPropertyConfig) {\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(\n        domPropertyConfig.isCustomAttribute\n      );\n    }\n\n    for (var propName in Properties) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !DOMProperty.isStandardName.hasOwnProperty(propName),\n        'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' +\n        '\\'%s\\' which has already been injected. You may be accidentally ' +\n        'injecting the same DOM property config twice, or you may be ' +\n        'injecting two configs that have conflicting property names.',\n        propName\n      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));\n\n      DOMProperty.isStandardName[propName] = true;\n\n      var lowerCased = propName.toLowerCase();\n      DOMProperty.getPossibleStandardName[lowerCased] = propName;\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        DOMProperty.getPossibleStandardName[attributeName] = propName;\n        DOMProperty.getAttributeName[propName] = attributeName;\n      } else {\n        DOMProperty.getAttributeName[propName] = lowerCased;\n      }\n\n      DOMProperty.getPropertyName[propName] =\n        DOMPropertyNames.hasOwnProperty(propName) ?\n          DOMPropertyNames[propName] :\n          propName;\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];\n      } else {\n        DOMProperty.getMutationMethod[propName] = null;\n      }\n\n      var propConfig = Properties[propName];\n      DOMProperty.mustUseAttribute[propName] =\n        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);\n      DOMProperty.mustUseProperty[propName] =\n        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);\n      DOMProperty.hasSideEffects[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);\n      DOMProperty.hasBooleanValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);\n      DOMProperty.hasNumericValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);\n      DOMProperty.hasPositiveNumericValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);\n      DOMProperty.hasOverloadedBooleanValue[propName] =\n        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);\n\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !DOMProperty.mustUseAttribute[propName] ||\n          !DOMProperty.mustUseProperty[propName],\n        'DOMProperty: Cannot require using both attribute and property: %s',\n        propName\n      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||\n        !DOMProperty.mustUseProperty[propName]));\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        DOMProperty.mustUseProperty[propName] ||\n          !DOMProperty.hasSideEffects[propName],\n        'DOMProperty: Properties that have side effects must use property: %s',\n        propName\n      ) : invariant(DOMProperty.mustUseProperty[propName] ||\n        !DOMProperty.hasSideEffects[propName]));\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !!DOMProperty.hasBooleanValue[propName] +\n          !!DOMProperty.hasNumericValue[propName] +\n          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,\n        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +\n        'numeric value, but not a combination: %s',\n        propName\n      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +\n        !!DOMProperty.hasNumericValue[propName] +\n        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));\n    }\n  }\n};\nvar defaultValueCache = {};\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty = {\n\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n\n  /**\n   * Checks whether a property name is a standard property.\n   * @type {Object}\n   */\n  isStandardName: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties.\n   * @type {Object}\n   */\n  getPossibleStandardName: {},\n\n  /**\n   * Mapping from normalized names to attribute names that differ. Attribute\n   * names are used when rendering markup or with `*Attribute()`.\n   * @type {Object}\n   */\n  getAttributeName: {},\n\n  /**\n   * Mapping from normalized names to properties on DOM node instances.\n   * (This includes properties that mutate due to external factors.)\n   * @type {Object}\n   */\n  getPropertyName: {},\n\n  /**\n   * Mapping from normalized names to mutation methods. This will only exist if\n   * mutation cannot be set simply by the property or `setAttribute()`.\n   * @type {Object}\n   */\n  getMutationMethod: {},\n\n  /**\n   * Whether the property must be accessed and mutated as an object property.\n   * @type {Object}\n   */\n  mustUseAttribute: {},\n\n  /**\n   * Whether the property must be accessed and mutated using `*Attribute()`.\n   * (This includes anything that fails `<propName> in <element>`.)\n   * @type {Object}\n   */\n  mustUseProperty: {},\n\n  /**\n   * Whether or not setting a value causes side effects such as triggering\n   * resources to be loaded or text selection changes. We must ensure that\n   * the value is only set if it has changed.\n   * @type {Object}\n   */\n  hasSideEffects: {},\n\n  /**\n   * Whether the property should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasBooleanValue: {},\n\n  /**\n   * Whether the property must be numeric or parse as a\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasNumericValue: {},\n\n  /**\n   * Whether the property must be positive numeric or parse as a positive\n   * numeric and should be removed when set to a falsey value.\n   * @type {Object}\n   */\n  hasPositiveNumericValue: {},\n\n  /**\n   * Whether the property can be used as a flag as well as with a value. Removed\n   * when strictly equal to false; present without a value when strictly equal\n   * to true; present with a value otherwise.\n   * @type {Object}\n   */\n  hasOverloadedBooleanValue: {},\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function(attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function(nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n    return nodeDefaults[prop];\n  },\n\n  injection: DOMPropertyInjection\n};\n\nmodule.exports = DOMProperty;\n\n}).call(this,require('_process'))\n\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/Danger\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Danger\n * @typechecks static-only\n */\n\n/*jslint evil: true, sub: true */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar createNodesFromMarkup = require(\"./createNodesFromMarkup\");\nvar emptyFunction = require(\"./emptyFunction\");\nvar getMarkupWrap = require(\"./getMarkupWrap\");\nvar invariant = require(\"./invariant\");\n\nvar OPEN_TAG_NAME_EXP = /^(<[^ \\/>]+)/;\nvar RESULT_INDEX_ATTR = 'data-danger-index';\n\n/**\n * Extracts the `nodeName` from a string of markup.\n *\n * NOTE: Extracting the `nodeName` does not require a regular expression match\n * because we make assumptions about React-generated markup (i.e. there are no\n * spaces surrounding the opening tag and there is at least one attribute).\n *\n * @param {string} markup String of markup.\n * @return {string} Node name of the supplied markup.\n * @see http://jsperf.com/extract-nodename\n */\nfunction getNodeName(markup) {\n  return markup.substring(1, markup.indexOf(' '));\n}\n\nvar Danger = {\n\n  /**\n   * Renders markup into an array of nodes. The markup is expected to render\n   * into a list of root nodes. Also, the length of `resultList` and\n   * `markupList` should be the same.\n   *\n   * @param {array<string>} markupList List of markup strings to render.\n   * @return {array<DOMElement>} List of rendered nodes.\n   * @internal\n   */\n  dangerouslyRenderMarkup: function(markupList) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ExecutionEnvironment.canUseDOM,\n      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +\n      'thread. Make sure `window` and `document` are available globally ' +\n      'before requiring React when unit testing or use ' +\n      'React.renderToString for server rendering.'\n    ) : invariant(ExecutionEnvironment.canUseDOM));\n    var nodeName;\n    var markupByNodeName = {};\n    // Group markup by `nodeName` if a wrap is necessary, else by '*'.\n    for (var i = 0; i < markupList.length; i++) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        markupList[i],\n        'dangerouslyRenderMarkup(...): Missing markup.'\n      ) : invariant(markupList[i]));\n      nodeName = getNodeName(markupList[i]);\n      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';\n      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];\n      markupByNodeName[nodeName][i] = markupList[i];\n    }\n    var resultList = [];\n    var resultListAssignmentCount = 0;\n    for (nodeName in markupByNodeName) {\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {\n        continue;\n      }\n      var markupListByNodeName = markupByNodeName[nodeName];\n\n      // This for-in loop skips the holes of the sparse array. The order of\n      // iteration should follow the order of assignment, which happens to match\n      // numerical index order, but we don't rely on that.\n      var resultIndex;\n      for (resultIndex in markupListByNodeName) {\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {\n          var markup = markupListByNodeName[resultIndex];\n\n          // Push the requested markup with an additional RESULT_INDEX_ATTR\n          // attribute.  If the markup does not start with a < character, it\n          // will be discarded below (with an appropriate console.error).\n          markupListByNodeName[resultIndex] = markup.replace(\n            OPEN_TAG_NAME_EXP,\n            // This index will be parsed back out below.\n            '$1 ' + RESULT_INDEX_ATTR + '=\"' + resultIndex + '\" '\n          );\n        }\n      }\n\n      // Render each group of markup with similar wrapping `nodeName`.\n      var renderNodes = createNodesFromMarkup(\n        markupListByNodeName.join(''),\n        emptyFunction // Do nothing special with <script> tags.\n      );\n\n      for (var j = 0; j < renderNodes.length; ++j) {\n        var renderNode = renderNodes[j];\n        if (renderNode.hasAttribute &&\n            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {\n\n          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);\n\n          (\"production\" !== process.env.NODE_ENV ? invariant(\n            !resultList.hasOwnProperty(resultIndex),\n            'Danger: Assigning to an already-occupied result index.'\n          ) : invariant(!resultList.hasOwnProperty(resultIndex)));\n\n          resultList[resultIndex] = renderNode;\n\n          // This should match resultList.length and markupList.length when\n          // we're done.\n          resultListAssignmentCount += 1;\n\n        } else if (\"production\" !== process.env.NODE_ENV) {\n          console.error(\n            'Danger: Discarding unexpected node:',\n            renderNode\n          );\n        }\n      }\n    }\n\n    // Although resultList was populated out of order, it should now be a dense\n    // array.\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      resultListAssignmentCount === resultList.length,\n      'Danger: Did not assign to every index of resultList.'\n    ) : invariant(resultListAssignmentCount === resultList.length));\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      resultList.length === markupList.length,\n      'Danger: Expected markup to render %s nodes, but rendered %s.',\n      markupList.length,\n      resultList.length\n    ) : invariant(resultList.length === markupList.length));\n\n    return resultList;\n  },\n\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ExecutionEnvironment.canUseDOM,\n      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +\n      'worker thread. Make sure `window` and `document` are available ' +\n      'globally before requiring React when unit testing or use ' +\n      'React.renderToString for server rendering.'\n    ) : invariant(ExecutionEnvironment.canUseDOM));\n    (\"production\" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      oldChild.tagName.toLowerCase() !== 'html',\n      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +\n      '<html> node. This is because browser quirks make this unreliable ' +\n      'and/or slow. If you want to render to the root you must use ' +\n      'server rendering. See React.renderToString().'\n    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));\n\n    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n  }\n\n};\n\nmodule.exports = Danger;\n\n}).call(this,require('_process'))\n\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./createNodesFromMarkup\":\"react/lib/createNodesFromMarkup\",\"./emptyFunction\":\"react/lib/emptyFunction\",\"./getMarkupWrap\":\"react/lib/getMarkupWrap\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/DefaultEventPluginOrder\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DefaultEventPluginOrder\n */\n\n'use strict';\n\nvar keyOf = require(\"./keyOf\");\n\n/**\n * Module that is injectable into `EventPluginHub`, that specifies a\n * deterministic ordering of `EventPlugin`s. A convenient way to reason about\n * plugins, without having to package every one of them. This is better than\n * having plugins be ordered in the same order that they are injected because\n * that ordering would be influenced by the packaging order.\n * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that\n * preventing default on events is convenient in `SimpleEventPlugin` handlers.\n */\nvar DefaultEventPluginOrder = [\n  keyOf({ResponderEventPlugin: null}),\n  keyOf({SimpleEventPlugin: null}),\n  keyOf({TapEventPlugin: null}),\n  keyOf({EnterLeaveEventPlugin: null}),\n  keyOf({ChangeEventPlugin: null}),\n  keyOf({SelectEventPlugin: null}),\n  keyOf({BeforeInputEventPlugin: null}),\n  keyOf({AnalyticsEventPlugin: null}),\n  keyOf({MobileSafariClickEventPlugin: null})\n];\n\nmodule.exports = DefaultEventPluginOrder;\n\n},{\"./keyOf\":\"react/lib/keyOf\"}],\"react/lib/EnterLeaveEventPlugin\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EnterLeaveEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar SyntheticMouseEvent = require(\"./SyntheticMouseEvent\");\n\nvar ReactMount = require(\"./ReactMount\");\nvar keyOf = require(\"./keyOf\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar getFirstReactDOM = ReactMount.getFirstReactDOM;\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: keyOf({onMouseEnter: null}),\n    dependencies: [\n      topLevelTypes.topMouseOut,\n      topLevelTypes.topMouseOver\n    ]\n  },\n  mouseLeave: {\n    registrationName: keyOf({onMouseLeave: null}),\n    dependencies: [\n      topLevelTypes.topMouseOut,\n      topLevelTypes.topMouseOver\n    ]\n  }\n};\n\nvar extractedEvents = [null, null];\n\nvar EnterLeaveEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    if (topLevelType === topLevelTypes.topMouseOver &&\n        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== topLevelTypes.topMouseOut &&\n        topLevelType !== topLevelTypes.topMouseOver) {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (topLevelTarget.window === topLevelTarget) {\n      // `topLevelTarget` is probably a window object.\n      win = topLevelTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = topLevelTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from, to;\n    if (topLevelType === topLevelTypes.topMouseOut) {\n      from = topLevelTarget;\n      to =\n        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||\n        win;\n    } else {\n      from = win;\n      to = topLevelTarget;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var fromID = from ? ReactMount.getID(from) : '';\n    var toID = to ? ReactMount.getID(to) : '';\n\n    var leave = SyntheticMouseEvent.getPooled(\n      eventTypes.mouseLeave,\n      fromID,\n      nativeEvent\n    );\n    leave.type = 'mouseleave';\n    leave.target = from;\n    leave.relatedTarget = to;\n\n    var enter = SyntheticMouseEvent.getPooled(\n      eventTypes.mouseEnter,\n      toID,\n      nativeEvent\n    );\n    enter.type = 'mouseenter';\n    enter.target = to;\n    enter.relatedTarget = from;\n\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);\n\n    extractedEvents[0] = leave;\n    extractedEvents[1] = enter;\n\n    return extractedEvents;\n  }\n\n};\n\nmodule.exports = EnterLeaveEventPlugin;\n\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPropagators\":\"react/lib/EventPropagators\",\"./ReactMount\":\"react/lib/ReactMount\",\"./SyntheticMouseEvent\":\"react/lib/SyntheticMouseEvent\",\"./keyOf\":\"react/lib/keyOf\"}],\"react/lib/EventConstants\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventConstants\n */\n\n'use strict';\n\nvar keyMirror = require(\"./keyMirror\");\n\nvar PropagationPhases = keyMirror({bubbled: null, captured: null});\n\n/**\n * Types of raw signals from the browser caught at the top level.\n */\nvar topLevelTypes = keyMirror({\n  topBlur: null,\n  topChange: null,\n  topClick: null,\n  topCompositionEnd: null,\n  topCompositionStart: null,\n  topCompositionUpdate: null,\n  topContextMenu: null,\n  topCopy: null,\n  topCut: null,\n  topDoubleClick: null,\n  topDrag: null,\n  topDragEnd: null,\n  topDragEnter: null,\n  topDragExit: null,\n  topDragLeave: null,\n  topDragOver: null,\n  topDragStart: null,\n  topDrop: null,\n  topError: null,\n  topFocus: null,\n  topInput: null,\n  topKeyDown: null,\n  topKeyPress: null,\n  topKeyUp: null,\n  topLoad: null,\n  topMouseDown: null,\n  topMouseMove: null,\n  topMouseOut: null,\n  topMouseOver: null,\n  topMouseUp: null,\n  topPaste: null,\n  topReset: null,\n  topScroll: null,\n  topSelectionChange: null,\n  topSubmit: null,\n  topTextInput: null,\n  topTouchCancel: null,\n  topTouchEnd: null,\n  topTouchMove: null,\n  topTouchStart: null,\n  topWheel: null\n});\n\nvar EventConstants = {\n  topLevelTypes: topLevelTypes,\n  PropagationPhases: PropagationPhases\n};\n\nmodule.exports = EventConstants;\n\n},{\"./keyMirror\":\"react/lib/keyMirror\"}],\"react/lib/EventListener\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventListener\n * @typechecks\n */\n\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function() {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function(target, eventType, callback) {\n    if (!target.addEventListener) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        console.error(\n          'Attempted to listen to events during the capture phase on a ' +\n          'browser that does not support the capture phase. Your application ' +\n          'will not receive some events.'\n        );\n      }\n      return {\n        remove: emptyFunction\n      };\n    } else {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function() {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    }\n  },\n\n  registerDefault: function() {}\n};\n\nmodule.exports = EventListener;\n\n}).call(this,require('_process'))\n\n},{\"./emptyFunction\":\"react/lib/emptyFunction\",\"_process\":1}],\"react/lib/EventPluginHub\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n'use strict';\n\nvar EventPluginRegistry = require(\"./EventPluginRegistry\");\nvar EventPluginUtils = require(\"./EventPluginUtils\");\n\nvar accumulateInto = require(\"./accumulateInto\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\nvar invariant = require(\"./invariant\");\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @private\n */\nvar executeDispatchesAndRelease = function(event) {\n  if (event) {\n    var executeDispatch = EventPluginUtils.executeDispatch;\n    // Plugins can provide custom behavior when dispatching events.\n    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);\n    if (PluginModule && PluginModule.executeDispatch) {\n      executeDispatch = PluginModule.executeDispatch;\n    }\n    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var valid =\n    InstanceHandle &&\n    InstanceHandle.traverseTwoPhase &&\n    InstanceHandle.traverseEnterLeave;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    valid,\n    'InstanceHandle not injected before use!'\n  ) : invariant(valid));\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function(InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (\"production\" !== process.env.NODE_ENV) {\n        validateInstanceHandle();\n      }\n    },\n\n    getInstanceHandle: function() {\n      if (\"production\" !== process.env.NODE_ENV) {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function(id, registrationName, listener) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !listener || typeof listener === 'function',\n      'Expected %s listener to be a function, instead got type %s',\n      registrationName, typeof listener\n    ) : invariant(!listener || typeof listener === 'function'));\n\n    var bankForRegistrationName =\n      listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function(id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function(id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function(id) {\n    for (var registrationName in listenerBank) {\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0, l = plugins.length; i < l; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(\n          topLevelType,\n          topLevelTarget,\n          topLevelTargetID,\n          nativeEvent\n        );\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function(events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function() {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !eventQueue,\n      'processEventQueue(): Additional events were enqueued while processing ' +\n      'an event queue. Support for this has not yet been implemented.'\n    ) : invariant(!eventQueue));\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function() {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function() {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports = EventPluginHub;\n\n}).call(this,require('_process'))\n\n},{\"./EventPluginRegistry\":\"react/lib/EventPluginRegistry\",\"./EventPluginUtils\":\"react/lib/EventPluginUtils\",\"./accumulateInto\":\"react/lib/accumulateInto\",\"./forEachAccumulated\":\"react/lib/forEachAccumulated\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/EventPluginRegistry\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Injectable ordering of event plugins.\n */\nvar EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      pluginIndex > -1,\n      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +\n      'the plugin ordering, `%s`.',\n      pluginName\n    ) : invariant(pluginIndex > -1));\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      PluginModule.extractEvents,\n      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +\n      'method, but `%s` does not.',\n      pluginName\n    ) : invariant(PluginModule.extractEvents));\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        publishEventForPlugin(\n          publishedEvents[eventName],\n          PluginModule,\n          eventName\n        ),\n        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',\n        eventName,\n        pluginName\n      ) : invariant(publishEventForPlugin(\n        publishedEvents[eventName],\n        PluginModule,\n        eventName\n      )));\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),\n    'EventPluginHub: More than one plugin attempted to publish the same ' +\n    'event name, `%s`.',\n    eventName\n  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(\n          phasedRegistrationName,\n          PluginModule,\n          eventName\n        );\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(\n      dispatchConfig.registrationName,\n      PluginModule,\n      eventName\n    );\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !EventPluginRegistry.registrationNameModules[registrationName],\n    'EventPluginHub: More than one plugin attempted to publish the same ' +\n    'registration name, `%s`.',\n    registrationName\n  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] =\n    PluginModule.eventTypes[eventName].dependencies;\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function(InjectedEventPluginOrder) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !EventPluginOrder,\n      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +\n      'once. You are likely trying to load more than one copy of React.'\n    ) : invariant(!EventPluginOrder));\n    // Clone the ordering so it cannot be dynamically mutated.\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function(injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var PluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) ||\n          namesToPlugins[pluginName] !== PluginModule) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          !namesToPlugins[pluginName],\n          'EventPluginRegistry: Cannot inject two different event plugins ' +\n          'using the same name, `%s`.',\n          pluginName\n        ) : invariant(!namesToPlugins[pluginName]));\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function(event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[\n        dispatchConfig.registrationName\n      ] || null;\n    }\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n      var PluginModule = EventPluginRegistry.registrationNameModules[\n        dispatchConfig.phasedRegistrationNames[phase]\n      ];\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function() {\n    EventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n\n};\n\nmodule.exports = EventPluginRegistry;\n\n}).call(this,require('_process'))\n\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/EventPluginUtils\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginUtils\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Injected dependencies:\n */\n\n/**\n * - `Mount`: [required] Module that can convert between React dom IDs and\n *   actual node references.\n */\nvar injection = {\n  Mount: null,\n  injectMount: function(InjectedMount) {\n    injection.Mount = InjectedMount;\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        InjectedMount && InjectedMount.getNode,\n        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +\n        'is missing getNode.'\n      ) : invariant(InjectedMount && InjectedMount.getNode));\n    }\n  }\n};\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nfunction isEndish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseUp ||\n         topLevelType === topLevelTypes.topTouchEnd ||\n         topLevelType === topLevelTypes.topTouchCancel;\n}\n\nfunction isMoveish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseMove ||\n         topLevelType === topLevelTypes.topTouchMove;\n}\nfunction isStartish(topLevelType) {\n  return topLevelType === topLevelTypes.topMouseDown ||\n         topLevelType === topLevelTypes.topTouchStart;\n}\n\n\nvar validateEventDispatches;\nif (\"production\" !== process.env.NODE_ENV) {\n  validateEventDispatches = function(event) {\n    var dispatchListeners = event._dispatchListeners;\n    var dispatchIDs = event._dispatchIDs;\n\n    var listenersIsArr = Array.isArray(dispatchListeners);\n    var idsIsArr = Array.isArray(dispatchIDs);\n    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;\n    var listenersLen = listenersIsArr ?\n      dispatchListeners.length :\n      dispatchListeners ? 1 : 0;\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      idsIsArr === listenersIsArr && IDsLen === listenersLen,\n      'EventPluginUtils: Invalid `event`.'\n    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));\n  };\n}\n\n/**\n * Invokes `cb(event, listener, id)`. Avoids using call if no scope is\n * provided. The `(listener,id)` pair effectively forms the \"dispatch\" but are\n * kept separate to conserve memory.\n */\nfunction forEachEventDispatch(event, cb) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchIDs = event._dispatchIDs;\n  if (\"production\" !== process.env.NODE_ENV) {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and IDs are two parallel arrays that are always in sync.\n      cb(event, dispatchListeners[i], dispatchIDs[i]);\n    }\n  } else if (dispatchListeners) {\n    cb(event, dispatchListeners, dispatchIDs);\n  }\n}\n\n/**\n * Default implementation of PluginModule.executeDispatch().\n * @param {SyntheticEvent} SyntheticEvent to handle\n * @param {function} Application-level callback\n * @param {string} domID DOM id to pass to the callback.\n */\nfunction executeDispatch(event, listener, domID) {\n  event.currentTarget = injection.Mount.getNode(domID);\n  var returnValue = listener(event, domID);\n  event.currentTarget = null;\n  return returnValue;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches.\n */\nfunction executeDispatchesInOrder(event, cb) {\n  forEachEventDispatch(event, cb);\n  event._dispatchListeners = null;\n  event._dispatchIDs = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches, but stops\n * at the first dispatch execution returning true, and returns that id.\n *\n * @return id of the first dispatch execution who's listener returns true, or\n * null if no listener returned true.\n */\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchIDs = event._dispatchIDs;\n  if (\"production\" !== process.env.NODE_ENV) {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and IDs are two parallel arrays that are always in sync.\n      if (dispatchListeners[i](event, dispatchIDs[i])) {\n        return dispatchIDs[i];\n      }\n    }\n  } else if (dispatchListeners) {\n    if (dispatchListeners(event, dispatchIDs)) {\n      return dispatchIDs;\n    }\n  }\n  return null;\n}\n\n/**\n * @see executeDispatchesInOrderStopAtTrueImpl\n */\nfunction executeDispatchesInOrderStopAtTrue(event) {\n  var ret = executeDispatchesInOrderStopAtTrueImpl(event);\n  event._dispatchIDs = null;\n  event._dispatchListeners = null;\n  return ret;\n}\n\n/**\n * Execution of a \"direct\" dispatch - there must be at most one dispatch\n * accumulated on the event or it is considered an error. It doesn't really make\n * sense for an event with multiple dispatches (bubbled) to keep track of the\n * return values at each dispatch execution, but it does tend to make sense when\n * dealing with \"direct\" dispatches.\n *\n * @return The return value of executing the single dispatch.\n */\nfunction executeDirectDispatch(event) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    validateEventDispatches(event);\n  }\n  var dispatchListener = event._dispatchListeners;\n  var dispatchID = event._dispatchIDs;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !Array.isArray(dispatchListener),\n    'executeDirectDispatch(...): Invalid `event`.'\n  ) : invariant(!Array.isArray(dispatchListener)));\n  var res = dispatchListener ?\n    dispatchListener(event, dispatchID) :\n    null;\n  event._dispatchListeners = null;\n  event._dispatchIDs = null;\n  return res;\n}\n\n/**\n * @param {SyntheticEvent} event\n * @return {bool} True iff number of dispatches accumulated is greater than 0.\n */\nfunction hasDispatches(event) {\n  return !!event._dispatchListeners;\n}\n\n/**\n * General utilities that are useful in creating custom Event Plugins.\n */\nvar EventPluginUtils = {\n  isEndish: isEndish,\n  isMoveish: isMoveish,\n  isStartish: isStartish,\n\n  executeDirectDispatch: executeDirectDispatch,\n  executeDispatch: executeDispatch,\n  executeDispatchesInOrder: executeDispatchesInOrder,\n  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,\n  hasDispatches: hasDispatches,\n  injection: injection,\n  useTouchEvents: false\n};\n\nmodule.exports = EventPluginUtils;\n\n}).call(this,require('_process'))\n\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/EventPropagators\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPropagators\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\n\nvar accumulateInto = require(\"./accumulateInto\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\n\nvar PropagationPhases = EventConstants.PropagationPhases;\nvar getListener = EventPluginHub.getListener;\n\n/**\n * Some event types have a notion of different registration names for different\n * \"phases\" of propagation. This finds listeners by a given phase.\n */\nfunction listenerAtPhase(id, event, propagationPhase) {\n  var registrationName =\n    event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(id, registrationName);\n}\n\n/**\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function\n * here, allows us to not have to bind or create functions for each event.\n * Mutating the event's members allows us to not have to create a wrapping\n * \"dispatch\" object that pairs the event with the listener.\n */\nfunction accumulateDirectionalDispatches(domID, upwards, event) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    if (!domID) {\n      throw new Error('Dispatching id must not be null');\n    }\n  }\n  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;\n  var listener = listenerAtPhase(domID, event, phase);\n  if (listener) {\n    event._dispatchListeners =\n      accumulateInto(event._dispatchListeners, listener);\n    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);\n  }\n}\n\n/**\n * Collect dispatches (must be entirely collected before dispatching - see unit\n * tests). Lazily allocate the array to conserve memory.  We must loop through\n * each event and perform the traversal for each one. We can not perform a\n * single traversal for the entire collection of events because each event may\n * have a different target.\n */\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(\n      event.dispatchMarker,\n      accumulateDirectionalDispatches,\n      event\n    );\n  }\n}\n\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(id, ignoredDirection, event) {\n  if (event && event.dispatchConfig.registrationName) {\n    var registrationName = event.dispatchConfig.registrationName;\n    var listener = getListener(id, registrationName);\n    if (listener) {\n      event._dispatchListeners =\n        accumulateInto(event._dispatchListeners, listener);\n      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event.dispatchMarker, null, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n\nfunction accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {\n  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(\n    fromID,\n    toID,\n    accumulateDispatches,\n    leave,\n    enter\n  );\n}\n\n\nfunction accumulateDirectDispatches(events) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\n\n\n/**\n * A small set of propagation patterns, each of which will accept a small amount\n * of information, and generate a set of \"dispatch ready event objects\" - which\n * are sets of events that have already been annotated with a set of dispatched\n * listener functions/ids. The API is designed this way to discourage these\n * propagation strategies from actually executing the dispatches, since we\n * always want to collect the entire set of dispatches before executing event a\n * single one.\n *\n * @constructor EventPropagators\n */\nvar EventPropagators = {\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,\n  accumulateDirectDispatches: accumulateDirectDispatches,\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches\n};\n\nmodule.exports = EventPropagators;\n\n}).call(this,require('_process'))\n\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPluginHub\":\"react/lib/EventPluginHub\",\"./accumulateInto\":\"react/lib/accumulateInto\",\"./forEachAccumulated\":\"react/lib/forEachAccumulated\",\"_process\":1}],\"react/lib/ExecutionEnvironment\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ExecutionEnvironment\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nvar canUseDOM = !!(\n  (typeof window !== 'undefined' &&\n  window.document && window.document.createElement)\n);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment = {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !== 'undefined',\n\n  canUseEventListeners:\n    canUseDOM && !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM && !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports = ExecutionEnvironment;\n\n},{}],\"react/lib/FallbackCompositionState\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FallbackCompositionState\n * @typechecks static-only\n */\n\n'use strict';\n\nvar PooledClass = require(\"./PooledClass\");\n\nvar assign = require(\"./Object.assign\");\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\n\n/**\n * This helper class stores information about text content of a target node,\n * allowing comparison of content before and after a given event.\n *\n * Identify the node where selection currently begins, then observe\n * both its text content and its current position in the DOM. Since the\n * browser may natively replace the target node during composition, we can\n * use its position to find its replacement.\n *\n * @param {DOMEventTarget} root\n */\nfunction FallbackCompositionState(root) {\n  this._root = root;\n  this._startText = this.getText();\n  this._fallbackText = null;\n}\n\nassign(FallbackCompositionState.prototype, {\n  /**\n   * Get current text of input.\n   *\n   * @return {string}\n   */\n  getText: function() {\n    if ('value' in this._root) {\n      return this._root.value;\n    }\n    return this._root[getTextContentAccessor()];\n  },\n\n  /**\n   * Determine the differing substring between the initially stored\n   * text content and the current content.\n   *\n   * @return {string}\n   */\n  getData: function() {\n    if (this._fallbackText) {\n      return this._fallbackText;\n    }\n\n    var start;\n    var startValue = this._startText;\n    var startLength = startValue.length;\n    var end;\n    var endValue = this.getText();\n    var endLength = endValue.length;\n\n    for (start = 0; start < startLength; start++) {\n      if (startValue[start] !== endValue[start]) {\n        break;\n      }\n    }\n\n    var minEnd = startLength - start;\n    for (end = 1; end <= minEnd; end++) {\n      if (startValue[startLength - end] !== endValue[endLength - end]) {\n        break;\n      }\n    }\n\n    var sliceTail = end > 1 ? 1 - end : undefined;\n    this._fallbackText = endValue.slice(start, sliceTail);\n    return this._fallbackText;\n  }\n});\n\nPooledClass.addPoolingTo(FallbackCompositionState);\n\nmodule.exports = FallbackCompositionState;\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./getTextContentAccessor\":\"react/lib/getTextContentAccessor\"}],\"react/lib/HTMLDOMPropertyConfig\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule HTMLDOMPropertyConfig\n */\n\n/*jslint bitwise: true*/\n\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;\nvar MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;\nvar HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;\nvar HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;\nvar HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;\nvar HAS_POSITIVE_NUMERIC_VALUE =\n  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;\nvar HAS_OVERLOADED_BOOLEAN_VALUE =\n  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;\n\nvar hasSVG;\nif (ExecutionEnvironment.canUseDOM) {\n  var implementation = document.implementation;\n  hasSVG = (\n    implementation &&\n    implementation.hasFeature &&\n    implementation.hasFeature(\n      'http://www.w3.org/TR/SVG11/feature#BasicStructure',\n      '1.1'\n    )\n  );\n}\n\n\nvar HTMLDOMPropertyConfig = {\n  isCustomAttribute: RegExp.prototype.test.bind(\n    /^(data|aria)-[a-z_][a-z\\d_.\\-]*$/\n  ),\n  Properties: {\n    /**\n     * Standard Properties\n     */\n    accept: null,\n    acceptCharset: null,\n    accessKey: null,\n    action: null,\n    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    allowTransparency: MUST_USE_ATTRIBUTE,\n    alt: null,\n    async: HAS_BOOLEAN_VALUE,\n    autoComplete: null,\n    // autoFocus is polyfilled/normalized by AutoFocusMixin\n    // autoFocus: HAS_BOOLEAN_VALUE,\n    autoPlay: HAS_BOOLEAN_VALUE,\n    cellPadding: null,\n    cellSpacing: null,\n    charSet: MUST_USE_ATTRIBUTE,\n    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    classID: MUST_USE_ATTRIBUTE,\n    // To set className on SVG elements, it's necessary to use .setAttribute;\n    // this works on HTML elements too in all browsers except IE8. Conveniently,\n    // IE8 doesn't support SVG and so we can simply use the attribute in\n    // browsers that support SVG and the property in browsers that don't,\n    // regardless of whether the element is HTML or SVG.\n    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,\n    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    colSpan: null,\n    content: null,\n    contentEditable: null,\n    contextMenu: MUST_USE_ATTRIBUTE,\n    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    coords: null,\n    crossOrigin: null,\n    data: null, // For `<object />` acts as `src`.\n    dateTime: MUST_USE_ATTRIBUTE,\n    defer: HAS_BOOLEAN_VALUE,\n    dir: null,\n    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    download: HAS_OVERLOADED_BOOLEAN_VALUE,\n    draggable: null,\n    encType: null,\n    form: MUST_USE_ATTRIBUTE,\n    formAction: MUST_USE_ATTRIBUTE,\n    formEncType: MUST_USE_ATTRIBUTE,\n    formMethod: MUST_USE_ATTRIBUTE,\n    formNoValidate: HAS_BOOLEAN_VALUE,\n    formTarget: MUST_USE_ATTRIBUTE,\n    frameBorder: MUST_USE_ATTRIBUTE,\n    headers: null,\n    height: MUST_USE_ATTRIBUTE,\n    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    high: null,\n    href: null,\n    hrefLang: null,\n    htmlFor: null,\n    httpEquiv: null,\n    icon: null,\n    id: MUST_USE_PROPERTY,\n    label: null,\n    lang: null,\n    list: MUST_USE_ATTRIBUTE,\n    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    low: null,\n    manifest: MUST_USE_ATTRIBUTE,\n    marginHeight: null,\n    marginWidth: null,\n    max: null,\n    maxLength: MUST_USE_ATTRIBUTE,\n    media: MUST_USE_ATTRIBUTE,\n    mediaGroup: null,\n    method: null,\n    min: null,\n    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    name: null,\n    noValidate: HAS_BOOLEAN_VALUE,\n    open: HAS_BOOLEAN_VALUE,\n    optimum: null,\n    pattern: null,\n    placeholder: null,\n    poster: null,\n    preload: null,\n    radioGroup: null,\n    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    rel: null,\n    required: HAS_BOOLEAN_VALUE,\n    role: MUST_USE_ATTRIBUTE,\n    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    rowSpan: null,\n    sandbox: null,\n    scope: null,\n    scoped: HAS_BOOLEAN_VALUE,\n    scrolling: null,\n    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,\n    shape: null,\n    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,\n    sizes: MUST_USE_ATTRIBUTE,\n    span: HAS_POSITIVE_NUMERIC_VALUE,\n    spellCheck: null,\n    src: null,\n    srcDoc: MUST_USE_PROPERTY,\n    srcSet: MUST_USE_ATTRIBUTE,\n    start: HAS_NUMERIC_VALUE,\n    step: null,\n    style: null,\n    tabIndex: null,\n    target: null,\n    title: null,\n    type: null,\n    useMap: null,\n    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,\n    width: MUST_USE_ATTRIBUTE,\n    wmode: MUST_USE_ATTRIBUTE,\n\n    /**\n     * Non-standard Properties\n     */\n    // autoCapitalize and autoCorrect are supported in Mobile Safari for\n    // keyboard hints.\n    autoCapitalize: null,\n    autoCorrect: null,\n    // itemProp, itemScope, itemType are for\n    // Microdata support. See http://schema.org/docs/gs.html\n    itemProp: MUST_USE_ATTRIBUTE,\n    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,\n    itemType: MUST_USE_ATTRIBUTE,\n    // itemID and itemRef are for Microdata support as well but\n    // only specified in the the WHATWG spec document. See\n    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api\n    itemID: MUST_USE_ATTRIBUTE,\n    itemRef: MUST_USE_ATTRIBUTE,\n    // property is supported for OpenGraph in meta tags.\n    property: null,\n    // IE-only attribute that controls focus behavior\n    unselectable: MUST_USE_ATTRIBUTE\n  },\n  DOMAttributeNames: {\n    acceptCharset: 'accept-charset',\n    className: 'class',\n    htmlFor: 'for',\n    httpEquiv: 'http-equiv'\n  },\n  DOMPropertyNames: {\n    autoCapitalize: 'autocapitalize',\n    autoComplete: 'autocomplete',\n    autoCorrect: 'autocorrect',\n    autoFocus: 'autofocus',\n    autoPlay: 'autoplay',\n    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.\n    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding\n    encType: 'encoding',\n    hrefLang: 'hreflang',\n    radioGroup: 'radiogroup',\n    spellCheck: 'spellcheck',\n    srcDoc: 'srcdoc',\n    srcSet: 'srcset'\n  }\n};\n\nmodule.exports = HTMLDOMPropertyConfig;\n\n},{\"./DOMProperty\":\"react/lib/DOMProperty\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\"}],\"react/lib/LinkedStateMixin\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LinkedStateMixin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactLink = require(\"./ReactLink\");\nvar ReactStateSetters = require(\"./ReactStateSetters\");\n\n/**\n * A simple mixin around ReactLink.forState().\n */\nvar LinkedStateMixin = {\n  /**\n   * Create a ReactLink that's linked to part of this component's state. The\n   * ReactLink will have the current value of this.state[key] and will call\n   * setState() when a change is requested.\n   *\n   * @param {string} key state key to update. Note: you may want to use keyOf()\n   * if you're using Google Closure Compiler advanced mode.\n   * @return {ReactLink} ReactLink instance linking to the state.\n   */\n  linkState: function(key) {\n    return new ReactLink(\n      this.state[key],\n      ReactStateSetters.createStateKeySetter(this, key)\n    );\n  }\n};\n\nmodule.exports = LinkedStateMixin;\n\n},{\"./ReactLink\":\"react/lib/ReactLink\",\"./ReactStateSetters\":\"react/lib/ReactStateSetters\"}],\"react/lib/LinkedValueUtils\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LinkedValueUtils\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactPropTypes = require(\"./ReactPropTypes\");\n\nvar invariant = require(\"./invariant\");\n\nvar hasReadOnlyValue = {\n  'button': true,\n  'checkbox': true,\n  'image': true,\n  'hidden': true,\n  'radio': true,\n  'reset': true,\n  'submit': true\n};\n\nfunction _assertSingleLink(input) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    input.props.checkedLink == null || input.props.valueLink == null,\n    'Cannot provide a checkedLink and a valueLink. If you want to use ' +\n    'checkedLink, you probably don\\'t want to use valueLink and vice versa.'\n  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));\n}\nfunction _assertValueLink(input) {\n  _assertSingleLink(input);\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    input.props.value == null && input.props.onChange == null,\n    'Cannot provide a valueLink and a value or onChange event. If you want ' +\n    'to use value or onChange, you probably don\\'t want to use valueLink.'\n  ) : invariant(input.props.value == null && input.props.onChange == null));\n}\n\nfunction _assertCheckedLink(input) {\n  _assertSingleLink(input);\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    input.props.checked == null && input.props.onChange == null,\n    'Cannot provide a checkedLink and a checked property or onChange event. ' +\n    'If you want to use checked or onChange, you probably don\\'t want to ' +\n    'use checkedLink'\n  ) : invariant(input.props.checked == null && input.props.onChange == null));\n}\n\n/**\n * @param {SyntheticEvent} e change event to handle\n */\nfunction _handleLinkedValueChange(e) {\n  /*jshint validthis:true */\n  this.props.valueLink.requestChange(e.target.value);\n}\n\n/**\n  * @param {SyntheticEvent} e change event to handle\n  */\nfunction _handleLinkedCheckChange(e) {\n  /*jshint validthis:true */\n  this.props.checkedLink.requestChange(e.target.checked);\n}\n\n/**\n * Provide a linked `value` attribute for controlled forms. You should not use\n * this outside of the ReactDOM controlled form components.\n */\nvar LinkedValueUtils = {\n  Mixin: {\n    propTypes: {\n      value: function(props, propName, componentName) {\n        if (!props[propName] ||\n            hasReadOnlyValue[props.type] ||\n            props.onChange ||\n            props.readOnly ||\n            props.disabled) {\n          return null;\n        }\n        return new Error(\n          'You provided a `value` prop to a form field without an ' +\n          '`onChange` handler. This will render a read-only field. If ' +\n          'the field should be mutable use `defaultValue`. Otherwise, ' +\n          'set either `onChange` or `readOnly`.'\n        );\n      },\n      checked: function(props, propName, componentName) {\n        if (!props[propName] ||\n            props.onChange ||\n            props.readOnly ||\n            props.disabled) {\n          return null;\n        }\n        return new Error(\n          'You provided a `checked` prop to a form field without an ' +\n          '`onChange` handler. This will render a read-only field. If ' +\n          'the field should be mutable use `defaultChecked`. Otherwise, ' +\n          'set either `onChange` or `readOnly`.'\n        );\n      },\n      onChange: ReactPropTypes.func\n    }\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current value of the input either from value prop or link.\n   */\n  getValue: function(input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n      return input.props.valueLink.value;\n    }\n    return input.props.value;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current checked status of the input either from checked prop\n   *             or link.\n   */\n  getChecked: function(input) {\n    if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n      return input.props.checkedLink.value;\n    }\n    return input.props.checked;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {function} change callback either from onChange prop or link.\n   */\n  getOnChange: function(input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n      return _handleLinkedValueChange;\n    } else if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n      return _handleLinkedCheckChange;\n    }\n    return input.props.onChange;\n  }\n};\n\nmodule.exports = LinkedValueUtils;\n\n}).call(this,require('_process'))\n\n},{\"./ReactPropTypes\":\"react/lib/ReactPropTypes\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/LocalEventTrapMixin\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule LocalEventTrapMixin\n */\n\n'use strict';\n\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\n\nvar accumulateInto = require(\"./accumulateInto\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\nvar invariant = require(\"./invariant\");\n\nfunction remove(event) {\n  event.remove();\n}\n\nvar LocalEventTrapMixin = {\n  trapBubbledEvent:function(topLevelType, handlerBaseName) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));\n    // If a component renders to null or if another component fatals and causes\n    // the state of the tree to be corrupted, `node` here can be null.\n    var node = this.getDOMNode();\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      node,\n      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'\n    ) : invariant(node));\n    var listener = ReactBrowserEventEmitter.trapBubbledEvent(\n      topLevelType,\n      handlerBaseName,\n      node\n    );\n    this._localEventListeners =\n      accumulateInto(this._localEventListeners, listener);\n  },\n\n  // trapCapturedEvent would look nearly identical. We don't implement that\n  // method because it isn't currently needed.\n\n  componentWillUnmount:function() {\n    if (this._localEventListeners) {\n      forEachAccumulated(this._localEventListeners, remove);\n    }\n  }\n};\n\nmodule.exports = LocalEventTrapMixin;\n\n}).call(this,require('_process'))\n\n},{\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\",\"./accumulateInto\":\"react/lib/accumulateInto\",\"./forEachAccumulated\":\"react/lib/forEachAccumulated\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/MobileSafariClickEventPlugin\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule MobileSafariClickEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar emptyFunction = require(\"./emptyFunction\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n/**\n * Mobile Safari does not fire properly bubble click events on non-interactive\n * elements, which means delegated click listeners do not fire. The workaround\n * for this bug involves attaching an empty click listener on the target node.\n *\n * This particular plugin works around the bug by attaching an empty click\n * listener on `touchstart` (which does fire on every element).\n */\nvar MobileSafariClickEventPlugin = {\n\n  eventTypes: null,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    if (topLevelType === topLevelTypes.topTouchStart) {\n      var target = nativeEvent.target;\n      if (target && !target.onclick) {\n        target.onclick = emptyFunction;\n      }\n    }\n  }\n\n};\n\nmodule.exports = MobileSafariClickEventPlugin;\n\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./emptyFunction\":\"react/lib/emptyFunction\"}],\"react/lib/Object.assign\":[function(require,module,exports){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Object.assign\n */\n\n// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign\n\n'use strict';\n\nfunction assign(target, sources) {\n  if (target == null) {\n    throw new TypeError('Object.assign target cannot be null or undefined');\n  }\n\n  var to = Object(target);\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {\n    var nextSource = arguments[nextIndex];\n    if (nextSource == null) {\n      continue;\n    }\n\n    var from = Object(nextSource);\n\n    // We don't currently support accessors nor proxies. Therefore this\n    // copy cannot throw. If we ever supported this then we must handle\n    // exceptions and side-effects. We don't support symbols so they won't\n    // be transferred.\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n  }\n\n  return to;\n}\n\nmodule.exports = assign;\n\n},{}],\"react/lib/PooledClass\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PooledClass\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\nvar oneArgumentPooler = function(copyFieldsFrom) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\n\nvar twoArgumentPooler = function(a1, a2) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar threeArgumentPooler = function(a1, a2, a3) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\n\nvar fiveArgumentPooler = function(a1, a2, a3, a4, a5) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4, a5);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4, a5);\n  }\n};\n\nvar standardReleaser = function(instance) {\n  var Klass = this;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    instance instanceof Klass,\n    'Trying to release an instance into a pool of a different type.'\n  ) : invariant(instance instanceof Klass));\n  if (instance.destructor) {\n    instance.destructor();\n  }\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = oneArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances (optional).\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo = function(CopyConstructor, pooler) {\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fiveArgumentPooler: fiveArgumentPooler\n};\n\nmodule.exports = PooledClass;\n\n}).call(this,require('_process'))\n\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactBrowserComponentMixin\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactBrowserComponentMixin\n */\n\n'use strict';\n\nvar findDOMNode = require(\"./findDOMNode\");\n\nvar ReactBrowserComponentMixin = {\n  /**\n   * Returns the DOM node rendered by this component.\n   *\n   * @return {DOMElement} The root node of this component.\n   * @final\n   * @protected\n   */\n  getDOMNode: function() {\n    return findDOMNode(this);\n  }\n};\n\nmodule.exports = ReactBrowserComponentMixin;\n\n},{\"./findDOMNode\":\"react/lib/findDOMNode\"}],\"react/lib/ReactBrowserEventEmitter\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactBrowserEventEmitter\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar EventPluginRegistry = require(\"./EventPluginRegistry\");\nvar ReactEventEmitterMixin = require(\"./ReactEventEmitterMixin\");\nvar ViewportMetrics = require(\"./ViewportMetrics\");\n\nvar assign = require(\"./Object.assign\");\nvar isEventSupported = require(\"./isEventSupported\");\n\n/**\n * Summary of `ReactBrowserEventEmitter` event handling:\n *\n *  - Top-level delegation is used to trap most native browser events. This\n *    may only occur in the main thread and is the responsibility of\n *    ReactEventListener, which is injected and can therefore support pluggable\n *    event sources. This is the only work that occurs in the main thread.\n *\n *  - We normalize and de-duplicate events to account for browser quirks. This\n *    may be done in the worker thread.\n *\n *  - Forward these native events (with the associated top-level type used to\n *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want\n *    to extract any synthetic events.\n *\n *  - The `EventPluginHub` will then process each event by annotating them with\n *    \"dispatches\", a sequence of listeners and IDs that care about that event.\n *\n *  - The `EventPluginHub` then dispatches the events.\n *\n * Overview of React and the event system:\n *\n * +------------+    .\n * |    DOM     |    .\n * +------------+    .\n *       |           .\n *       v           .\n * +------------+    .\n * | ReactEvent |    .\n * |  Listener  |    .\n * +------------+    .                         +-----------+\n *       |           .               +--------+|SimpleEvent|\n *       |           .               |         |Plugin     |\n * +-----|------+    .               v         +-----------+\n * |     |      |    .    +--------------+                    +------------+\n * |     +-----------.--->|EventPluginHub|                    |    Event   |\n * |            |    .    |              |     +-----------+  | Propagators|\n * | ReactEvent |    .    |              |     |TapEvent   |  |------------|\n * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|\n * |            |    .    |              |     +-----------+  |  utilities |\n * |     +-----------.--->|              |                    +------------+\n * |     |      |    .    +--------------+\n * +-----|------+    .                ^        +-----------+\n *       |           .                |        |Enter/Leave|\n *       +           .                +-------+|Plugin     |\n * +-------------+   .                         +-----------+\n * | application |   .\n * |-------------|   .\n * |             |   .\n * |             |   .\n * +-------------+   .\n *                   .\n *    React Core     .  General Purpose Event Plugin System\n */\n\nvar alreadyListeningTo = {};\nvar isMonitoringScrollValue = false;\nvar reactTopListenersCounter = 0;\n\n// For events like 'submit' which don't consistently bubble (which we trap at a\n// lower node than `document`), binding at `document` would cause duplicate\n// events so we don't include them here\nvar topEventMapping = {\n  topBlur: 'blur',\n  topChange: 'change',\n  topClick: 'click',\n  topCompositionEnd: 'compositionend',\n  topCompositionStart: 'compositionstart',\n  topCompositionUpdate: 'compositionupdate',\n  topContextMenu: 'contextmenu',\n  topCopy: 'copy',\n  topCut: 'cut',\n  topDoubleClick: 'dblclick',\n  topDrag: 'drag',\n  topDragEnd: 'dragend',\n  topDragEnter: 'dragenter',\n  topDragExit: 'dragexit',\n  topDragLeave: 'dragleave',\n  topDragOver: 'dragover',\n  topDragStart: 'dragstart',\n  topDrop: 'drop',\n  topFocus: 'focus',\n  topInput: 'input',\n  topKeyDown: 'keydown',\n  topKeyPress: 'keypress',\n  topKeyUp: 'keyup',\n  topMouseDown: 'mousedown',\n  topMouseMove: 'mousemove',\n  topMouseOut: 'mouseout',\n  topMouseOver: 'mouseover',\n  topMouseUp: 'mouseup',\n  topPaste: 'paste',\n  topScroll: 'scroll',\n  topSelectionChange: 'selectionchange',\n  topTextInput: 'textInput',\n  topTouchCancel: 'touchcancel',\n  topTouchEnd: 'touchend',\n  topTouchMove: 'touchmove',\n  topTouchStart: 'touchstart',\n  topWheel: 'wheel'\n};\n\n/**\n * To ensure no conflicts with other potential React instances on the page\n */\nvar topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);\n\nfunction getListeningForDocument(mountAt) {\n  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`\n  // directly.\n  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {\n    mountAt[topListenersIDKey] = reactTopListenersCounter++;\n    alreadyListeningTo[mountAt[topListenersIDKey]] = {};\n  }\n  return alreadyListeningTo[mountAt[topListenersIDKey]];\n}\n\n/**\n * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For\n * example:\n *\n *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);\n *\n * This would allocate a \"registration\" of `('onClick', myFunction)` on 'myID'.\n *\n * @internal\n */\nvar ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {\n\n  /**\n   * Injectable event backend\n   */\n  ReactEventListener: null,\n\n  injection: {\n    /**\n     * @param {object} ReactEventListener\n     */\n    injectReactEventListener: function(ReactEventListener) {\n      ReactEventListener.setHandleTopLevel(\n        ReactBrowserEventEmitter.handleTopLevel\n      );\n      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;\n    }\n  },\n\n  /**\n   * Sets whether or not any created callbacks should be enabled.\n   *\n   * @param {boolean} enabled True if callbacks should be enabled.\n   */\n  setEnabled: function(enabled) {\n    if (ReactBrowserEventEmitter.ReactEventListener) {\n      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);\n    }\n  },\n\n  /**\n   * @return {boolean} True if callbacks are enabled.\n   */\n  isEnabled: function() {\n    return !!(\n      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())\n    );\n  },\n\n  /**\n   * We listen for bubbled touch events on the document object.\n   *\n   * Firefox v8.01 (and possibly others) exhibited strange behavior when\n   * mounting `onmousemove` events at some node that was not the document\n   * element. The symptoms were that if your mouse is not moving over something\n   * contained within that mount point (for example on the background) the\n   * top-level listeners for `onmousemove` won't be called. However, if you\n   * register the `mousemove` on the document object, then it will of course\n   * catch all `mousemove`s. This along with iOS quirks, justifies restricting\n   * top-level listeners to the document object only, at least for these\n   * movement types of events and possibly all events.\n   *\n   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n   *\n   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but\n   * they bubble to document.\n   *\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {object} contentDocumentHandle Document which owns the container\n   */\n  listenTo: function(registrationName, contentDocumentHandle) {\n    var mountAt = contentDocumentHandle;\n    var isListening = getListeningForDocument(mountAt);\n    var dependencies = EventPluginRegistry.\n      registrationNameDependencies[registrationName];\n\n    var topLevelTypes = EventConstants.topLevelTypes;\n    for (var i = 0, l = dependencies.length; i < l; i++) {\n      var dependency = dependencies[i];\n      if (!(\n            (isListening.hasOwnProperty(dependency) && isListening[dependency])\n          )) {\n        if (dependency === topLevelTypes.topWheel) {\n          if (isEventSupported('wheel')) {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topWheel,\n              'wheel',\n              mountAt\n            );\n          } else if (isEventSupported('mousewheel')) {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topWheel,\n              'mousewheel',\n              mountAt\n            );\n          } else {\n            // Firefox needs to capture a different mouse scroll event.\n            // @see http://www.quirksmode.org/dom/events/tests/scroll.html\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topWheel,\n              'DOMMouseScroll',\n              mountAt\n            );\n          }\n        } else if (dependency === topLevelTypes.topScroll) {\n\n          if (isEventSupported('scroll', true)) {\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(\n              topLevelTypes.topScroll,\n              'scroll',\n              mountAt\n            );\n          } else {\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topScroll,\n              'scroll',\n              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE\n            );\n          }\n        } else if (dependency === topLevelTypes.topFocus ||\n            dependency === topLevelTypes.topBlur) {\n\n          if (isEventSupported('focus', true)) {\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(\n              topLevelTypes.topFocus,\n              'focus',\n              mountAt\n            );\n            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(\n              topLevelTypes.topBlur,\n              'blur',\n              mountAt\n            );\n          } else if (isEventSupported('focusin')) {\n            // IE has `focusin` and `focusout` events which bubble.\n            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topFocus,\n              'focusin',\n              mountAt\n            );\n            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n              topLevelTypes.topBlur,\n              'focusout',\n              mountAt\n            );\n          }\n\n          // to make sure blur and focus event listeners are only attached once\n          isListening[topLevelTypes.topBlur] = true;\n          isListening[topLevelTypes.topFocus] = true;\n        } else if (topEventMapping.hasOwnProperty(dependency)) {\n          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n            dependency,\n            topEventMapping[dependency],\n            mountAt\n          );\n        }\n\n        isListening[dependency] = true;\n      }\n    }\n  },\n\n  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {\n    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(\n      topLevelType,\n      handlerBaseName,\n      handle\n    );\n  },\n\n  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {\n    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(\n      topLevelType,\n      handlerBaseName,\n      handle\n    );\n  },\n\n  /**\n   * Listens to window scroll and resize events. We cache scroll values so that\n   * application code can access them without triggering reflows.\n   *\n   * NOTE: Scroll events do not bubble.\n   *\n   * @see http://www.quirksmode.org/dom/events/scroll.html\n   */\n  ensureScrollValueMonitoring: function() {\n    if (!isMonitoringScrollValue) {\n      var refresh = ViewportMetrics.refreshScrollValues;\n      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);\n      isMonitoringScrollValue = true;\n    }\n  },\n\n  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginHub.registrationNameModules,\n\n  putListener: EventPluginHub.putListener,\n\n  getListener: EventPluginHub.getListener,\n\n  deleteListener: EventPluginHub.deleteListener,\n\n  deleteAllListeners: EventPluginHub.deleteAllListeners\n\n});\n\nmodule.exports = ReactBrowserEventEmitter;\n\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPluginHub\":\"react/lib/EventPluginHub\",\"./EventPluginRegistry\":\"react/lib/EventPluginRegistry\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactEventEmitterMixin\":\"react/lib/ReactEventEmitterMixin\",\"./ViewportMetrics\":\"react/lib/ViewportMetrics\",\"./isEventSupported\":\"react/lib/isEventSupported\"}],\"react/lib/ReactCSSTransitionGroupChild\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n * @providesModule ReactCSSTransitionGroupChild\n */\n\n'use strict';\n\nvar React = require(\"./React\");\n\nvar CSSCore = require(\"./CSSCore\");\nvar ReactTransitionEvents = require(\"./ReactTransitionEvents\");\n\nvar onlyChild = require(\"./onlyChild\");\nvar warning = require(\"./warning\");\n\n// We don't remove the element from the DOM until we receive an animationend or\n// transitionend event. If the user screws up and forgets to add an animation\n// their node will be stuck in the DOM forever, so we detect if an animation\n// does not start and if it doesn't, we just call the end listener immediately.\nvar TICK = 17;\nvar NO_EVENT_TIMEOUT = 5000;\n\nvar noEventListener = null;\n\n\nif (\"production\" !== process.env.NODE_ENV) {\n  noEventListener = function() {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      false,\n      'transition(): tried to perform an animation without ' +\n      'an animationend or transitionend event after timeout (' +\n      '%sms). You should either disable this ' +\n      'transition in JS or add a CSS animation/transition.',\n      NO_EVENT_TIMEOUT\n    ) : null);\n  };\n}\n\nvar ReactCSSTransitionGroupChild = React.createClass({\n  displayName: 'ReactCSSTransitionGroupChild',\n\n  transition: function(animationType, finishCallback) {\n    var node = this.getDOMNode();\n    var className = this.props.name + '-' + animationType;\n    var activeClassName = className + '-active';\n    var noEventTimeout = null;\n\n    var endListener = function(e) {\n      if (e && e.target !== node) {\n        return;\n      }\n      if (\"production\" !== process.env.NODE_ENV) {\n        clearTimeout(noEventTimeout);\n      }\n\n      CSSCore.removeClass(node, className);\n      CSSCore.removeClass(node, activeClassName);\n\n      ReactTransitionEvents.removeEndEventListener(node, endListener);\n\n      // Usually this optional callback is used for informing an owner of\n      // a leave animation and telling it to remove the child.\n      if (finishCallback) {\n        finishCallback();\n      }\n    };\n\n    ReactTransitionEvents.addEndEventListener(node, endListener);\n\n    CSSCore.addClass(node, className);\n\n    // Need to do this to actually trigger a transition.\n    this.queueClass(activeClassName);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);\n    }\n  },\n\n  queueClass: function(className) {\n    this.classNameQueue.push(className);\n\n    if (!this.timeout) {\n      this.timeout = setTimeout(this.flushClassNameQueue, TICK);\n    }\n  },\n\n  flushClassNameQueue: function() {\n    if (this.isMounted()) {\n      this.classNameQueue.forEach(\n        CSSCore.addClass.bind(CSSCore, this.getDOMNode())\n      );\n    }\n    this.classNameQueue.length = 0;\n    this.timeout = null;\n  },\n\n  componentWillMount: function() {\n    this.classNameQueue = [];\n  },\n\n  componentWillUnmount: function() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n  },\n\n  componentWillAppear: function(done) {\n    if (this.props.appear) {\n      this.transition('appear', done);\n    } else {\n      done();\n    }\n  },\n\n  componentWillEnter: function(done) {\n    if (this.props.enter) {\n      this.transition('enter', done);\n    } else {\n      done();\n    }\n  },\n\n  componentWillLeave: function(done) {\n    if (this.props.leave) {\n      this.transition('leave', done);\n    } else {\n      done();\n    }\n  },\n\n  render: function() {\n    return onlyChild(this.props.children);\n  }\n});\n\nmodule.exports = ReactCSSTransitionGroupChild;\n\n}).call(this,require('_process'))\n\n},{\"./CSSCore\":\"react/lib/CSSCore\",\"./React\":\"react/lib/React\",\"./ReactTransitionEvents\":\"react/lib/ReactTransitionEvents\",\"./onlyChild\":\"react/lib/onlyChild\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactCSSTransitionGroup\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n * @providesModule ReactCSSTransitionGroup\n */\n\n'use strict';\n\nvar React = require(\"./React\");\n\nvar assign = require(\"./Object.assign\");\n\nvar ReactTransitionGroup = React.createFactory(\n  require(\"./ReactTransitionGroup\")\n);\nvar ReactCSSTransitionGroupChild = React.createFactory(\n  require(\"./ReactCSSTransitionGroupChild\")\n);\n\nvar ReactCSSTransitionGroup = React.createClass({\n  displayName: 'ReactCSSTransitionGroup',\n\n  propTypes: {\n    transitionName: React.PropTypes.string.isRequired,\n    transitionAppear: React.PropTypes.bool,\n    transitionEnter: React.PropTypes.bool,\n    transitionLeave: React.PropTypes.bool\n  },\n\n  getDefaultProps: function() {\n    return {\n      transitionAppear: false,\n      transitionEnter: true,\n      transitionLeave: true\n    };\n  },\n\n  _wrapChild: function(child) {\n    // We need to provide this childFactory so that\n    // ReactCSSTransitionGroupChild can receive updates to name, enter, and\n    // leave while it is leaving.\n    return ReactCSSTransitionGroupChild(\n      {\n        name: this.props.transitionName,\n        appear: this.props.transitionAppear,\n        enter: this.props.transitionEnter,\n        leave: this.props.transitionLeave\n      },\n      child\n    );\n  },\n\n  render: function() {\n    return (\n      ReactTransitionGroup(\n        assign({}, this.props, {childFactory: this._wrapChild})\n      )\n    );\n  }\n});\n\nmodule.exports = ReactCSSTransitionGroup;\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./React\":\"react/lib/React\",\"./ReactCSSTransitionGroupChild\":\"react/lib/ReactCSSTransitionGroupChild\",\"./ReactTransitionGroup\":\"react/lib/ReactTransitionGroup\"}],\"react/lib/ReactChildReconciler\":[function(require,module,exports){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactChildReconciler\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactReconciler = require(\"./ReactReconciler\");\n\nvar flattenChildren = require(\"./flattenChildren\");\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\n\n/**\n * ReactChildReconciler provides helpers for initializing or updating a set of\n * children. Its output is suitable for passing it onto ReactMultiChild which\n * does diffed reordering and insertion.\n */\nvar ReactChildReconciler = {\n\n  /**\n   * Generates a \"mount image\" for each of the supplied children. In the case\n   * of `ReactDOMComponent`, a mount image is a string of markup.\n   *\n   * @param {?object} nestedChildNodes Nested child maps.\n   * @return {?object} A set of child instances.\n   * @internal\n   */\n  instantiateChildren: function(nestedChildNodes, transaction, context) {\n    var children = flattenChildren(nestedChildNodes);\n    for (var name in children) {\n      if (children.hasOwnProperty(name)) {\n        var child = children[name];\n        // The rendered children must be turned into instances as they're\n        // mounted.\n        var childInstance = instantiateReactComponent(child, null);\n        children[name] = childInstance;\n      }\n    }\n    return children;\n  },\n\n  /**\n   * Updates the rendered children and returns a new set of children.\n   *\n   * @param {?object} prevChildren Previously initialized set of children.\n   * @param {?object} nextNestedChildNodes Nested child maps.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @return {?object} A new set of child instances.\n   * @internal\n   */\n  updateChildren: function(\n    prevChildren,\n    nextNestedChildNodes,\n    transaction,\n    context) {\n    // We currently don't have a way to track moves here but if we use iterators\n    // instead of for..in we can zip the iterators and check if an item has\n    // moved.\n    // TODO: If nothing has changed, return the prevChildren object so that we\n    // can quickly bailout if nothing has changed.\n    var nextChildren = flattenChildren(nextNestedChildNodes);\n    if (!nextChildren && !prevChildren) {\n      return null;\n    }\n    var name;\n    for (name in nextChildren) {\n      if (!nextChildren.hasOwnProperty(name)) {\n        continue;\n      }\n      var prevChild = prevChildren && prevChildren[name];\n      var prevElement = prevChild && prevChild._currentElement;\n      var nextElement = nextChildren[name];\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {\n        ReactReconciler.receiveComponent(\n          prevChild, nextElement, transaction, context\n        );\n        nextChildren[name] = prevChild;\n      } else {\n        if (prevChild) {\n          ReactReconciler.unmountComponent(prevChild, name);\n        }\n        // The child must be instantiated before it's mounted.\n        var nextChildInstance = instantiateReactComponent(\n          nextElement,\n          null\n        );\n        nextChildren[name] = nextChildInstance;\n      }\n    }\n    // Unmount children that are no longer present.\n    for (name in prevChildren) {\n      if (prevChildren.hasOwnProperty(name) &&\n          !(nextChildren && nextChildren.hasOwnProperty(name))) {\n        ReactReconciler.unmountComponent(prevChildren[name]);\n      }\n    }\n    return nextChildren;\n  },\n\n  /**\n   * Unmounts all rendered children. This should be used to clean up children\n   * when this component is unmounted.\n   *\n   * @param {?object} renderedChildren Previously initialized set of children.\n   * @internal\n   */\n  unmountChildren: function(renderedChildren) {\n    for (var name in renderedChildren) {\n      var renderedChild = renderedChildren[name];\n      ReactReconciler.unmountComponent(renderedChild);\n    }\n  }\n\n};\n\nmodule.exports = ReactChildReconciler;\n\n},{\"./ReactReconciler\":\"react/lib/ReactReconciler\",\"./flattenChildren\":\"react/lib/flattenChildren\",\"./instantiateReactComponent\":\"react/lib/instantiateReactComponent\",\"./shouldUpdateReactComponent\":\"react/lib/shouldUpdateReactComponent\"}],\"react/lib/ReactChildren\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactChildren\n */\n\n'use strict';\n\nvar PooledClass = require(\"./PooledClass\");\nvar ReactFragment = require(\"./ReactFragment\");\n\nvar traverseAllChildren = require(\"./traverseAllChildren\");\nvar warning = require(\"./warning\");\n\nvar twoArgumentPooler = PooledClass.twoArgumentPooler;\nvar threeArgumentPooler = PooledClass.threeArgumentPooler;\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * traversal. Allows avoiding binding callbacks.\n *\n * @constructor ForEachBookKeeping\n * @param {!function} forEachFunction Function to perform traversal with.\n * @param {?*} forEachContext Context to perform context with.\n */\nfunction ForEachBookKeeping(forEachFunction, forEachContext) {\n  this.forEachFunction = forEachFunction;\n  this.forEachContext = forEachContext;\n}\nPooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);\n\nfunction forEachSingleChild(traverseContext, child, name, i) {\n  var forEachBookKeeping = traverseContext;\n  forEachBookKeeping.forEachFunction.call(\n    forEachBookKeeping.forEachContext, child, i);\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc.\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n\n  var traverseContext =\n    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  ForEachBookKeeping.release(traverseContext);\n}\n\n/**\n * PooledClass representing the bookkeeping associated with performing a child\n * mapping. Allows avoiding binding callbacks.\n *\n * @constructor MapBookKeeping\n * @param {!*} mapResult Object containing the ordered map of results.\n * @param {!function} mapFunction Function to perform mapping with.\n * @param {?*} mapContext Context to perform mapping with.\n */\nfunction MapBookKeeping(mapResult, mapFunction, mapContext) {\n  this.mapResult = mapResult;\n  this.mapFunction = mapFunction;\n  this.mapContext = mapContext;\n}\nPooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);\n\nfunction mapSingleChildIntoContext(traverseContext, child, name, i) {\n  var mapBookKeeping = traverseContext;\n  var mapResult = mapBookKeeping.mapResult;\n\n  var keyUnique = !mapResult.hasOwnProperty(name);\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      keyUnique,\n      'ReactChildren.map(...): Encountered two children with the same key, ' +\n      '`%s`. Child keys must be unique; when two children share a key, only ' +\n      'the first child will be used.',\n      name\n    ) : null);\n  }\n\n  if (keyUnique) {\n    var mappedChild =\n      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);\n    mapResult[name] = mappedChild;\n  }\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * TODO: This may likely break any calls to `ReactChildren.map` that were\n * previously relying on the fact that we guarded against null children.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} mapFunction.\n * @param {*} mapContext Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var mapResult = {};\n  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  MapBookKeeping.release(traverseContext);\n  return ReactFragment.create(mapResult);\n}\n\nfunction forEachSingleChildDummy(traverseContext, child, name, i) {\n  return null;\n}\n\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\nfunction countChildren(children, context) {\n  return traverseAllChildren(children, forEachSingleChildDummy, null);\n}\n\nvar ReactChildren = {\n  forEach: forEachChildren,\n  map: mapChildren,\n  count: countChildren\n};\n\nmodule.exports = ReactChildren;\n\n}).call(this,require('_process'))\n\n},{\"./PooledClass\":\"react/lib/PooledClass\",\"./ReactFragment\":\"react/lib/ReactFragment\",\"./traverseAllChildren\":\"react/lib/traverseAllChildren\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactClass\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactClass\n */\n\n'use strict';\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactErrorUtils = require(\"./ReactErrorUtils\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\nvar keyOf = require(\"./keyOf\");\nvar warning = require(\"./warning\");\n\nvar MIXINS_KEY = keyOf({mixins: null});\n\n/**\n * Policies that describe methods in `ReactClassInterface`.\n */\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\n\n\nvar injectedMixins = [];\n\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactClass`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactClassInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will available on the prototype.\n *\n * @interface ReactClassInterface\n * @internal\n */\nvar ReactClassInterface = {\n\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n\n\n\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n\n\n\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\nvar RESERVED_SPEC_KEYS = {\n  displayName: function(Constructor, displayName) {\n    Constructor.displayName = displayName;\n  },\n  mixins: function(Constructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(Constructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function(Constructor, childContextTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(\n        Constructor,\n        childContextTypes,\n        ReactPropTypeLocations.childContext\n      );\n    }\n    Constructor.childContextTypes = assign(\n      {},\n      Constructor.childContextTypes,\n      childContextTypes\n    );\n  },\n  contextTypes: function(Constructor, contextTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(\n        Constructor,\n        contextTypes,\n        ReactPropTypeLocations.context\n      );\n    }\n    Constructor.contextTypes = assign(\n      {},\n      Constructor.contextTypes,\n      contextTypes\n    );\n  },\n  /**\n   * Special case getDefaultProps which should move into statics but requires\n   * automatic merging.\n   */\n  getDefaultProps: function(Constructor, getDefaultProps) {\n    if (Constructor.getDefaultProps) {\n      Constructor.getDefaultProps = createMergedResultFunction(\n        Constructor.getDefaultProps,\n        getDefaultProps\n      );\n    } else {\n      Constructor.getDefaultProps = getDefaultProps;\n    }\n  },\n  propTypes: function(Constructor, propTypes) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      validateTypeDef(\n        Constructor,\n        propTypes,\n        ReactPropTypeLocations.prop\n      );\n    }\n    Constructor.propTypes = assign(\n      {},\n      Constructor.propTypes,\n      propTypes\n    );\n  },\n  statics: function(Constructor, statics) {\n    mixStaticSpecIntoComponent(Constructor, statics);\n  }\n};\n\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      // use a warning instead of an invariant so components\n      // don't show up in prod but not in __DEV__\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        typeof typeDef[propName] === 'function',\n        '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n        'React.PropTypes.',\n        Constructor.displayName || 'ReactClass',\n        ReactPropTypeLocationNames[location],\n        propName\n      ) : null);\n    }\n  }\n}\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?\n    ReactClassInterface[name] :\n    null;\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactClassMixin.hasOwnProperty(name)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      specPolicy === SpecPolicy.OVERRIDE_BASE,\n      'ReactClassInterface: You are attempting to override ' +\n      '`%s` from your class specification. Ensure that your method names ' +\n      'do not overlap with React methods.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (proto.hasOwnProperty(name)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      specPolicy === SpecPolicy.DEFINE_MANY ||\n      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,\n      'ReactClassInterface: You are attempting to define ' +\n      '`%s` on your component more than once. This conflict may be due ' +\n      'to a mixin.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||\n    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));\n  }\n}\n\n/**\n * Mixin helper which handles policy validation and reserved\n * specification keys when building React classses.\n */\nfunction mixSpecIntoComponent(Constructor, spec) {\n  if (!spec) {\n    return;\n  }\n\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof spec !== 'function',\n    'ReactClass: You\\'re attempting to ' +\n    'use a component class as a mixin. Instead, just use a regular object.'\n  ) : invariant(typeof spec !== 'function'));\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !ReactElement.isValidElement(spec),\n    'ReactClass: You\\'re attempting to ' +\n    'use a component as a mixin. Instead, just use a regular object.'\n  ) : invariant(!ReactElement.isValidElement(spec)));\n\n  var proto = Constructor.prototype;\n\n  // By handling mixins before any other properties, we ensure the same\n  // chaining order is applied to methods with DEFINE_MANY policy, whether\n  // mixins are listed before or after these methods in the spec.\n  if (spec.hasOwnProperty(MIXINS_KEY)) {\n    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n  }\n\n  for (var name in spec) {\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    if (name === MIXINS_KEY) {\n      // We have already handled mixins in a special case above\n      continue;\n    }\n\n    var property = spec[name];\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](Constructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactClass methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isReactClassMethod =\n        ReactClassInterface.hasOwnProperty(name);\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      var markedDontBind = property && property.__reactDontBind;\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind =\n        isFunction &&\n        !isReactClassMethod &&\n        !isAlreadyDefined &&\n        !markedDontBind;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isAlreadyDefined) {\n          var specPolicy = ReactClassInterface[name];\n\n          // These cases should already be caught by validateMethodOverride\n          (\"production\" !== process.env.NODE_ENV ? invariant(\n            isReactClassMethod && (\n              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)\n            ),\n            'ReactClass: Unexpected spec policy %s for key %s ' +\n            'when mixing in component specs.',\n            specPolicy,\n            name\n          ) : invariant(isReactClassMethod && (\n            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)\n          )));\n\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property, merging if appropriate.\n          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n          if (\"production\" !== process.env.NODE_ENV) {\n            // Add verbose displayName to the function, which helps when looking\n            // at profiling tools.\n            if (typeof property === 'function' && spec.displayName) {\n              proto[name].displayName = spec.displayName + '_' + name;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(Constructor, statics) {\n  if (!statics) {\n    return;\n  }\n  for (var name in statics) {\n    var property = statics[name];\n    if (!statics.hasOwnProperty(name)) {\n      continue;\n    }\n\n    var isReserved = name in RESERVED_SPEC_KEYS;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !isReserved,\n      'ReactClass: You are attempting to define a reserved ' +\n      'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n      'as an instance property instead; it will still be accessible on the ' +\n      'constructor.',\n      name\n    ) : invariant(!isReserved));\n\n    var isInherited = name in Constructor;\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !isInherited,\n      'ReactClass: You are attempting to define ' +\n      '`%s` on your component more than once. This conflict may be ' +\n      'due to a mixin.',\n      name\n    ) : invariant(!isInherited));\n    Constructor[name] = property;\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeIntoWithNoDuplicateKeys(one, two) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    one && two && typeof one === 'object' && typeof two === 'object',\n    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\n  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));\n\n  for (var key in two) {\n    if (two.hasOwnProperty(key)) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        one[key] === undefined,\n        'mergeIntoWithNoDuplicateKeys(): ' +\n        'Tried to merge two objects with the same key: `%s`. This conflict ' +\n        'may be due to a mixin; in particular, this may be caused by two ' +\n        'getInitialState() or getDefaultProps() methods returning objects ' +\n        'with clashing keys.',\n        key\n      ) : invariant(one[key] === undefined));\n      one[key] = two[key];\n    }\n  }\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n    var c = {};\n    mergeIntoWithNoDuplicateKeys(c, a);\n    mergeIntoWithNoDuplicateKeys(c, b);\n    return c;\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\n/**\n * Binds a method to the component.\n *\n * @param {object} component Component whose method is going to be bound.\n * @param {function} method Method to be bound.\n * @return {function} The bound method.\n */\nfunction bindAutoBindMethod(component, method) {\n  var boundMethod = method.bind(component);\n  if (\"production\" !== process.env.NODE_ENV) {\n    boundMethod.__reactBoundContext = component;\n    boundMethod.__reactBoundMethod = method;\n    boundMethod.__reactBoundArguments = null;\n    var componentName = component.constructor.displayName;\n    var _bind = boundMethod.bind;\n    /* eslint-disable block-scoped-var, no-undef */\n    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n      // User is trying to bind() an autobound method; we effectively will\n      // ignore the value of \"this\" that the user is trying to use, so\n      // let's warn.\n      if (newThis !== component && newThis !== null) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          false,\n          'bind(): React component methods may only be bound to the ' +\n          'component instance. See %s',\n          componentName\n        ) : null);\n      } else if (!args.length) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          false,\n          'bind(): You are binding a component method to the component. ' +\n          'React does this for you automatically in a high-performance ' +\n          'way, so you can safely remove this call. See %s',\n          componentName\n        ) : null);\n        return boundMethod;\n      }\n      var reboundMethod = _bind.apply(boundMethod, arguments);\n      reboundMethod.__reactBoundContext = component;\n      reboundMethod.__reactBoundMethod = method;\n      reboundMethod.__reactBoundArguments = args;\n      return reboundMethod;\n      /* eslint-enable */\n    };\n  }\n  return boundMethod;\n}\n\n/**\n * Binds all auto-bound methods in a component.\n *\n * @param {object} component Component whose method is going to be bound.\n */\nfunction bindAutoBindMethods(component) {\n  for (var autoBindKey in component.__reactAutoBindMap) {\n    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n      var method = component.__reactAutoBindMap[autoBindKey];\n      component[autoBindKey] = bindAutoBindMethod(\n        component,\n        ReactErrorUtils.guard(\n          method,\n          component.constructor.displayName + '.' + autoBindKey\n        )\n      );\n    }\n  }\n}\n\nvar typeDeprecationDescriptor = {\n  enumerable: false,\n  get: function() {\n    var displayName = this.displayName || this.name || 'Component';\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      false,\n      '%s.type is deprecated. Use %s directly to access the class.',\n      displayName,\n      displayName\n    ) : null);\n    Object.defineProperty(this, 'type', {\n      value: this\n    });\n    return this;\n  }\n};\n\n/**\n * Add more to the ReactClass base class. These are all legacy features and\n * therefore not already part of the modern ReactComponent.\n */\nvar ReactClassMixin = {\n\n  /**\n   * TODO: This will be deprecated because state should always keep a consistent\n   * type signature and the only use case for this, is to avoid that.\n   */\n  replaceState: function(newState, callback) {\n    ReactUpdateQueue.enqueueReplaceState(this, newState);\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function() {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var owner = ReactCurrentOwner.current;\n      if (owner !== null) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          owner._warnedAboutRefsInRender,\n          '%s is accessing isMounted inside its render() function. ' +\n          'render() should be a pure function of props and state. It should ' +\n          'never access something that requires stale data from the previous ' +\n          'render, such as refs. Move this logic to componentDidMount and ' +\n          'componentDidUpdate instead.',\n          owner.getName() || 'A component'\n        ) : null);\n        owner._warnedAboutRefsInRender = true;\n      }\n    }\n    var internalInstance = ReactInstanceMap.get(this);\n    return (\n      internalInstance &&\n      internalInstance !== ReactLifeCycle.currentlyMountingInstance\n    );\n  },\n\n  /**\n   * Sets a subset of the props.\n   *\n   * @param {object} partialProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  setProps: function(partialProps, callback) {\n    ReactUpdateQueue.enqueueSetProps(this, partialProps);\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  },\n\n  /**\n   * Replace all the props.\n   *\n   * @param {object} newProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @public\n   * @deprecated\n   */\n  replaceProps: function(newProps, callback) {\n    ReactUpdateQueue.enqueueReplaceProps(this, newProps);\n    if (callback) {\n      ReactUpdateQueue.enqueueCallback(this, callback);\n    }\n  }\n};\n\nvar ReactClassComponent = function() {};\nassign(\n  ReactClassComponent.prototype,\n  ReactComponent.prototype,\n  ReactClassMixin\n);\n\n/**\n * Module for creating composite components.\n *\n * @class ReactClass\n */\nvar ReactClass = {\n\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function(spec) {\n    var Constructor = function(props, context) {\n      // This constructor is overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          this instanceof Constructor,\n          'Something is calling a React component directly. Use a factory or ' +\n          'JSX instead. See: https://fb.me/react-legacyfactory'\n        ) : null);\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindMap) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (\"production\" !== process.env.NODE_ENV) {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (typeof initialState === 'undefined' &&\n            this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        typeof initialState === 'object' && !Array.isArray(initialState),\n        '%s.getInitialState(): must return an object or null',\n        Constructor.displayName || 'ReactCompositeComponent'\n      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));\n\n      this.state = initialState;\n    };\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n\n    injectedMixins.forEach(\n      mixSpecIntoComponent.bind(null, Constructor)\n    );\n\n    mixSpecIntoComponent(Constructor, spec);\n\n    // Initialize the defaultProps property after all mixins have been merged\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    ) : invariant(Constructor.prototype.render));\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !Constructor.prototype.componentShouldUpdate,\n        '%s has a method called ' +\n        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n        'The name is phrased as a question because the function is ' +\n        'expected to return a value.',\n        spec.displayName || 'A component'\n      ) : null);\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    // Legacy hook\n    Constructor.type = Constructor;\n    if (\"production\" !== process.env.NODE_ENV) {\n      try {\n        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);\n      } catch (x) {\n        // IE will fail on defineProperty (es5-shim/sham too)\n      }\n    }\n\n    return Constructor;\n  },\n\n  injection: {\n    injectMixin: function(mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n\n};\n\nmodule.exports = ReactClass;\n\n}).call(this,require('_process'))\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactComponent\":\"react/lib/ReactComponent\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactErrorUtils\":\"react/lib/ReactErrorUtils\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./ReactLifeCycle\":\"react/lib/ReactLifeCycle\",\"./ReactPropTypeLocationNames\":\"react/lib/ReactPropTypeLocationNames\",\"./ReactPropTypeLocations\":\"react/lib/ReactPropTypeLocations\",\"./ReactUpdateQueue\":\"react/lib/ReactUpdateQueue\",\"./invariant\":\"react/lib/invariant\",\"./keyMirror\":\"react/lib/keyMirror\",\"./keyOf\":\"react/lib/keyOf\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactComponentBrowserEnvironment\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentBrowserEnvironment\n */\n\n/*jslint evil: true */\n\n'use strict';\n\nvar ReactDOMIDOperations = require(\"./ReactDOMIDOperations\");\nvar ReactMount = require(\"./ReactMount\");\n\n/**\n * Abstracts away all functionality of the reconciler that requires knowledge of\n * the browser context. TODO: These callers should be refactored to avoid the\n * need for this injection.\n */\nvar ReactComponentBrowserEnvironment = {\n\n  processChildrenUpdates:\n    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,\n\n  replaceNodeWithMarkupByID:\n    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,\n\n  /**\n   * If a particular environment requires that some resources be cleaned up,\n   * specify this in the injected Mixin. In the DOM, we would likely want to\n   * purge any cached node ID lookups.\n   *\n   * @private\n   */\n  unmountIDFromEnvironment: function(rootNodeID) {\n    ReactMount.purgeID(rootNodeID);\n  }\n\n};\n\nmodule.exports = ReactComponentBrowserEnvironment;\n\n},{\"./ReactDOMIDOperations\":\"react/lib/ReactDOMIDOperations\",\"./ReactMount\":\"react/lib/ReactMount\"}],\"react/lib/ReactComponentEnvironment\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentEnvironment\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\nvar injected = false;\n\nvar ReactComponentEnvironment = {\n\n  /**\n   * Optionally injectable environment dependent cleanup hook. (server vs.\n   * browser etc). Example: A browser system caches DOM nodes based on component\n   * ID and must remove that cache entry when this instance is unmounted.\n   */\n  unmountIDFromEnvironment: null,\n\n  /**\n   * Optionally injectable hook for swapping out mount images in the middle of\n   * the tree.\n   */\n  replaceNodeWithMarkupByID: null,\n\n  /**\n   * Optionally injectable hook for processing a queue of child updates. Will\n   * later move into MultiChildComponents.\n   */\n  processChildrenUpdates: null,\n\n  injection: {\n    injectEnvironment: function(environment) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        !injected,\n        'ReactCompositeComponent: injectEnvironment() can only be called once.'\n      ) : invariant(!injected));\n      ReactComponentEnvironment.unmountIDFromEnvironment =\n        environment.unmountIDFromEnvironment;\n      ReactComponentEnvironment.replaceNodeWithMarkupByID =\n        environment.replaceNodeWithMarkupByID;\n      ReactComponentEnvironment.processChildrenUpdates =\n        environment.processChildrenUpdates;\n      injected = true;\n    }\n  }\n\n};\n\nmodule.exports = ReactComponentEnvironment;\n\n}).call(this,require('_process'))\n\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactComponentWithPureRenderMixin\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n* @providesModule ReactComponentWithPureRenderMixin\n*/\n\n'use strict';\n\nvar shallowEqual = require(\"./shallowEqual\");\n\n/**\n * If your React component's render function is \"pure\", e.g. it will render the\n * same result given the same props and state, provide this Mixin for a\n * considerable performance boost.\n *\n * Most React components have pure render functions.\n *\n * Example:\n *\n *   var ReactComponentWithPureRenderMixin =\n *     require('ReactComponentWithPureRenderMixin');\n *   React.createClass({\n *     mixins: [ReactComponentWithPureRenderMixin],\n *\n *     render: function() {\n *       return <div className={this.props.className}>foo</div>;\n *     }\n *   });\n *\n * Note: This only checks shallow equality for props and state. If these contain\n * complex data structures this mixin may have false-negatives for deeper\n * differences. Only mixin to components which have simple props and state, or\n * use `forceUpdate()` when you know deep data structures have changed.\n */\nvar ReactComponentWithPureRenderMixin = {\n  shouldComponentUpdate: function(nextProps, nextState) {\n    return !shallowEqual(this.props, nextProps) ||\n           !shallowEqual(this.state, nextState);\n  }\n};\n\nmodule.exports = ReactComponentWithPureRenderMixin;\n\n},{\"./shallowEqual\":\"react/lib/shallowEqual\"}],\"react/lib/ReactComponent\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponent\n */\n\n'use strict';\n\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");\n\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction ReactComponent(props, context) {\n  this.props = props;\n  this.context = context;\n}\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nReactComponent.prototype.setState = function(partialState, callback) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof partialState === 'object' ||\n    typeof partialState === 'function' ||\n    partialState == null,\n    'setState(...): takes an object of state variables to update or a ' +\n    'function which returns an object of state variables.'\n  ) : invariant(typeof partialState === 'object' ||\n  typeof partialState === 'function' ||\n  partialState == null));\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      partialState != null,\n      'setState(...): You passed an undefined or null state object; ' +\n      'instead, use forceUpdate().'\n    ) : null);\n  }\n  ReactUpdateQueue.enqueueSetState(this, partialState);\n  if (callback) {\n    ReactUpdateQueue.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nReactComponent.prototype.forceUpdate = function(callback) {\n  ReactUpdateQueue.enqueueForceUpdate(this);\n  if (callback) {\n    ReactUpdateQueue.enqueueCallback(this, callback);\n  }\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (\"production\" !== process.env.NODE_ENV) {\n  var deprecatedAPIs = {\n    getDOMNode: [\n      'getDOMNode',\n      'Use React.findDOMNode(component) instead.'\n    ],\n    isMounted: [\n      'isMounted',\n      'Instead, make sure to clean up subscriptions and pending requests in ' +\n      'componentWillUnmount to prevent memory leaks.'\n    ],\n    replaceProps: [\n      'replaceProps',\n      'Instead, call React.render again at the top level.'\n    ],\n    replaceState: [\n      'replaceState',\n      'Refactor your code to use setState instead (see ' +\n      'https://github.com/facebook/react/issues/3236).'\n    ],\n    setProps: [\n      'setProps',\n      'Instead, call React.render again at the top level.'\n    ]\n  };\n  var defineDeprecationWarning = function(methodName, info) {\n    try {\n      Object.defineProperty(ReactComponent.prototype, methodName, {\n        get: function() {\n          (\"production\" !== process.env.NODE_ENV ? warning(\n            false,\n            '%s(...) is deprecated in plain JavaScript React classes. %s',\n            info[0],\n            info[1]\n          ) : null);\n          return undefined;\n        }\n      });\n    } catch (x) {\n      // IE will fail on defineProperty (es5-shim/sham too)\n    }\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nmodule.exports = ReactComponent;\n\n}).call(this,require('_process'))\n\n},{\"./ReactUpdateQueue\":\"react/lib/ReactUpdateQueue\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactCompositeComponent\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCompositeComponent\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");\nvar ReactContext = require(\"./ReactContext\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\nvar ReactReconciler = require(\"./ReactReconciler\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar emptyObject = require(\"./emptyObject\");\nvar invariant = require(\"./invariant\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\nvar warning = require(\"./warning\");\n\nfunction getDeclarationErrorAddendum(component) {\n  var owner = component._currentElement._owner || null;\n  if (owner) {\n    var name = owner.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * ------------------ The Life-Cycle of a Composite Component ------------------\n *\n * - constructor: Initialization of state. The instance is now retained.\n *   - componentWillMount\n *   - render\n *   - [children's constructors]\n *     - [children's componentWillMount and render]\n *     - [children's componentDidMount]\n *     - componentDidMount\n *\n *       Update Phases:\n *       - componentWillReceiveProps (only called if parent updated)\n *       - shouldComponentUpdate\n *         - componentWillUpdate\n *           - render\n *           - [children's constructors or receive props phases]\n *         - componentDidUpdate\n *\n *     - componentWillUnmount\n *     - [children's componentWillUnmount]\n *   - [children destroyed]\n * - (destroyed): The instance is now blank, released by React and ready for GC.\n *\n * -----------------------------------------------------------------------------\n */\n\n/**\n * An incrementing ID assigned to each component when it is mounted. This is\n * used to enforce the order in which `ReactUpdates` updates dirty components.\n *\n * @private\n */\nvar nextMountID = 1;\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponentMixin = {\n\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {ReactElement} element\n   * @final\n   * @internal\n   */\n  construct: function(element) {\n    this._currentElement = element;\n    this._rootNodeID = null;\n    this._instance = null;\n\n    // See ReactUpdateQueue\n    this._pendingElement = null;\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    this._renderedComponent = null;\n\n    this._context = null;\n    this._mountOrder = 0;\n    this._isTopLevel = false;\n\n    // See ReactUpdates and ReactUpdateQueue.\n    this._pendingCallbacks = null;\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function(rootID, transaction, context) {\n    this._context = context;\n    this._mountOrder = nextMountID++;\n    this._rootNodeID = rootID;\n\n    var publicProps = this._processProps(this._currentElement.props);\n    var publicContext = this._processContext(this._currentElement._context);\n\n    var Component = ReactNativeComponent.getComponentClassForElement(\n      this._currentElement\n    );\n\n    // Initialize the public class\n    var inst = new Component(publicProps, publicContext);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // This will throw later in _renderValidatedComponent, but add an early\n      // warning now to help debugging\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        inst.render != null,\n        '%s(...): No `render` method found on the returned component ' +\n        'instance: you may have forgotten to define `render` in your ' +\n        'component or you may have accidentally tried to render an element ' +\n        'whose type is a function that isn\\'t a React component.',\n        Component.displayName || Component.name || 'Component'\n      ) : null);\n    }\n\n    // These should be set up in the constructor, but as a convenience for\n    // simpler class abstractions, we set them up after the fact.\n    inst.props = publicProps;\n    inst.context = publicContext;\n    inst.refs = emptyObject;\n\n    this._instance = inst;\n\n    // Store a reference from the instance back to the internal representation\n    ReactInstanceMap.set(inst, this);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      this._warnIfContextsDiffer(this._currentElement._context, context);\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // Since plain JS classes are defined without any special initialization\n      // logic, we can not catch common errors early. Therefore, we have to\n      // catch them here, at initialization time, instead.\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !inst.getInitialState ||\n        inst.getInitialState.isReactClassApproved,\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n        'This is only supported for classes created using React.createClass. ' +\n        'Did you mean to define a state property instead?',\n        this.getName() || 'a component'\n      ) : null);\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !inst.getDefaultProps ||\n        inst.getDefaultProps.isReactClassApproved,\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n        'This is only supported for classes created using React.createClass. ' +\n        'Use a static property to define defaultProps instead.',\n        this.getName() || 'a component'\n      ) : null);\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !inst.propTypes,\n        'propTypes was defined as an instance property on %s. Use a static ' +\n        'property to define propTypes instead.',\n        this.getName() || 'a component'\n      ) : null);\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !inst.contextTypes,\n        'contextTypes was defined as an instance property on %s. Use a ' +\n        'static property to define contextTypes instead.',\n        this.getName() || 'a component'\n      ) : null);\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        typeof inst.componentShouldUpdate !== 'function',\n        '%s has a method called ' +\n        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n        'The name is phrased as a question because the function is ' +\n        'expected to return a value.',\n        (this.getName() || 'A component')\n      ) : null);\n    }\n\n    var initialState = inst.state;\n    if (initialState === undefined) {\n      inst.state = initialState = null;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof initialState === 'object' && !Array.isArray(initialState),\n      '%s.state: must be set to an object or null',\n      this.getName() || 'ReactCompositeComponent'\n    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));\n\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n\n    var childContext;\n    var renderedElement;\n\n    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;\n    ReactLifeCycle.currentlyMountingInstance = this;\n    try {\n      if (inst.componentWillMount) {\n        inst.componentWillMount();\n        // When mounting, calls to `setState` by `componentWillMount` will set\n        // `this._pendingStateQueue` without triggering a re-render.\n        if (this._pendingStateQueue) {\n          inst.state = this._processPendingState(inst.props, inst.context);\n        }\n      }\n\n      childContext = this._getValidatedChildContext(context);\n      renderedElement = this._renderValidatedComponent(childContext);\n    } finally {\n      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;\n    }\n\n    this._renderedComponent = this._instantiateReactComponent(\n      renderedElement,\n      this._currentElement.type // The wrapping type\n    );\n\n    var markup = ReactReconciler.mountComponent(\n      this._renderedComponent,\n      rootID,\n      transaction,\n      this._mergeChildContext(context, childContext)\n    );\n    if (inst.componentDidMount) {\n      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);\n    }\n\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function() {\n    var inst = this._instance;\n\n    if (inst.componentWillUnmount) {\n      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;\n      ReactLifeCycle.currentlyUnmountingInstance = this;\n      try {\n        inst.componentWillUnmount();\n      } finally {\n        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;\n      }\n    }\n\n    ReactReconciler.unmountComponent(this._renderedComponent);\n    this._renderedComponent = null;\n\n    // Reset pending fields\n    this._pendingStateQueue = null;\n    this._pendingReplaceState = false;\n    this._pendingForceUpdate = false;\n    this._pendingCallbacks = null;\n    this._pendingElement = null;\n\n    // These fields do not really need to be reset since this object is no\n    // longer accessible.\n    this._context = null;\n    this._rootNodeID = null;\n\n    // Delete the reference from the instance to this internal representation\n    // which allow the internals to be properly cleaned up even if the user\n    // leaks a reference to the public instance.\n    ReactInstanceMap.remove(inst);\n\n    // Some existing components rely on inst.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: inst.props = null;\n    // TODO: inst.state = null;\n    // TODO: inst.context = null;\n  },\n\n  /**\n   * Schedule a partial update to the props. Only used for internal testing.\n   *\n   * @param {object} partialProps Subset of the next props.\n   * @param {?function} callback Called after props are updated.\n   * @final\n   * @internal\n   */\n  _setPropsInternal: function(partialProps, callback) {\n    // This is a deoptimized path. We optimize for always having an element.\n    // This creates an extra internal element.\n    var element = this._pendingElement || this._currentElement;\n    this._pendingElement = ReactElement.cloneAndReplaceProps(\n      element,\n      assign({}, element.props, partialProps)\n    );\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _maskContext: function(context) {\n    var maskedContext = null;\n    // This really should be getting the component class for the element,\n    // but we know that we're not going to need it for built-ins.\n    if (typeof this._currentElement.type === 'string') {\n      return emptyObject;\n    }\n    var contextTypes = this._currentElement.type.contextTypes;\n    if (!contextTypes) {\n      return emptyObject;\n    }\n    maskedContext = {};\n    for (var contextName in contextTypes) {\n      maskedContext[contextName] = context[contextName];\n    }\n    return maskedContext;\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function(context) {\n    var maskedContext = this._maskContext(context);\n    if (\"production\" !== process.env.NODE_ENV) {\n      var Component = ReactNativeComponent.getComponentClassForElement(\n        this._currentElement\n      );\n      if (Component.contextTypes) {\n        this._checkPropTypes(\n          Component.contextTypes,\n          maskedContext,\n          ReactPropTypeLocations.context\n        );\n      }\n    }\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _getValidatedChildContext: function(currentContext) {\n    var inst = this._instance;\n    var childContext = inst.getChildContext && inst.getChildContext();\n    if (childContext) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        typeof inst.constructor.childContextTypes === 'object',\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n        'use getChildContext().',\n        this.getName() || 'ReactCompositeComponent'\n      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));\n      if (\"production\" !== process.env.NODE_ENV) {\n        this._checkPropTypes(\n          inst.constructor.childContextTypes,\n          childContext,\n          ReactPropTypeLocations.childContext\n        );\n      }\n      for (var name in childContext) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          name in inst.constructor.childContextTypes,\n          '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',\n          this.getName() || 'ReactCompositeComponent',\n          name\n        ) : invariant(name in inst.constructor.childContextTypes));\n      }\n      return childContext;\n    }\n    return null;\n  },\n\n  _mergeChildContext: function(currentContext, childContext) {\n    if (childContext) {\n      return assign({}, currentContext, childContext);\n    }\n    return currentContext;\n  },\n\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid. Does not mutate its argument; returns\n   * a new props object with defaults merged in.\n   *\n   * @param {object} newProps\n   * @return {object}\n   * @private\n   */\n  _processProps: function(newProps) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var Component = ReactNativeComponent.getComponentClassForElement(\n        this._currentElement\n      );\n      if (Component.propTypes) {\n        this._checkPropTypes(\n          Component.propTypes,\n          newProps,\n          ReactPropTypeLocations.prop\n        );\n      }\n    }\n    return newProps;\n  },\n\n  /**\n   * Assert that the props are valid\n   *\n   * @param {object} propTypes Map of prop name to a ReactPropType\n   * @param {object} props\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkPropTypes: function(propTypes, props, location) {\n    // TODO: Stop validating prop types here and only use the element\n    // validation.\n    var componentName = this.getName();\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        var error;\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          (\"production\" !== process.env.NODE_ENV ? invariant(\n            typeof propTypes[propName] === 'function',\n            '%s: %s type `%s` is invalid; it must be a function, usually ' +\n            'from React.PropTypes.',\n            componentName || 'React class',\n            ReactPropTypeLocationNames[location],\n            propName\n          ) : invariant(typeof propTypes[propName] === 'function'));\n          error = propTypes[propName](props, propName, componentName, location);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error instanceof Error) {\n          // We may want to extend this logic for similar errors in\n          // React.render calls, so I'm abstracting it away into\n          // a function to minimize refactoring in the future\n          var addendum = getDeclarationErrorAddendum(this);\n\n          if (location === ReactPropTypeLocations.prop) {\n            // Preface gives us something to blacklist in warning module\n            (\"production\" !== process.env.NODE_ENV ? warning(\n              false,\n              'Failed Composite propType: %s%s',\n              error.message,\n              addendum\n            ) : null);\n          } else {\n            (\"production\" !== process.env.NODE_ENV ? warning(\n              false,\n              'Failed Context Types: %s%s',\n              error.message,\n              addendum\n            ) : null);\n          }\n        }\n      }\n    }\n  },\n\n  receiveComponent: function(nextElement, transaction, nextContext) {\n    var prevElement = this._currentElement;\n    var prevContext = this._context;\n\n    this._pendingElement = null;\n\n    this.updateComponent(\n      transaction,\n      prevElement,\n      nextElement,\n      prevContext,\n      nextContext\n    );\n  },\n\n  /**\n   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`\n   * is set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function(transaction) {\n    if (this._pendingElement != null) {\n      ReactReconciler.receiveComponent(\n        this,\n        this._pendingElement || this._currentElement,\n        transaction,\n        this._context\n      );\n    }\n\n    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        ReactElementValidator.checkAndWarnForMutatedProps(\n          this._currentElement\n        );\n      }\n\n      this.updateComponent(\n        transaction,\n        this._currentElement,\n        this._currentElement,\n        this._context,\n        this._context\n      );\n    }\n  },\n\n  /**\n   * Compare two contexts, warning if they are different\n   * TODO: Remove this check when owner-context is removed\n   */\n   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {\n    ownerBasedContext = this._maskContext(ownerBasedContext);\n    parentBasedContext = this._maskContext(parentBasedContext);\n    var parentKeys = Object.keys(parentBasedContext).sort();\n    var displayName = this.getName() || 'ReactCompositeComponent';\n    for (var i = 0; i < parentKeys.length; i++) {\n      var key = parentKeys[i];\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        ownerBasedContext[key] === parentBasedContext[key],\n        'owner-based and parent-based contexts differ '  +\n        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +\n        '(see: http://fb.me/react-context-by-parent)',\n        ownerBasedContext[key],\n        parentBasedContext[key],\n        key,\n        displayName\n      ) : null);\n    }\n  },\n\n  /**\n   * Perform an update to a mounted component. The componentWillReceiveProps and\n   * shouldComponentUpdate methods are called, then (assuming the update isn't\n   * skipped) the remaining update lifecycle methods are called and the DOM\n   * representation is updated.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevParentElement\n   * @param {ReactElement} nextParentElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function(\n    transaction,\n    prevParentElement,\n    nextParentElement,\n    prevUnmaskedContext,\n    nextUnmaskedContext\n  ) {\n    var inst = this._instance;\n\n    var nextContext = inst.context;\n    var nextProps = inst.props;\n\n    // Distinguish between a props update versus a simple state update\n    if (prevParentElement !== nextParentElement) {\n      nextContext = this._processContext(nextParentElement._context);\n      nextProps = this._processProps(nextParentElement.props);\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        if (nextUnmaskedContext != null) {\n          this._warnIfContextsDiffer(\n            nextParentElement._context,\n            nextUnmaskedContext\n          );\n        }\n      }\n\n      // An update here will schedule an update but immediately set\n      // _pendingStateQueue which will ensure that any state updates gets\n      // immediately reconciled instead of waiting for the next batch.\n\n      if (inst.componentWillReceiveProps) {\n        inst.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    var nextState = this._processPendingState(nextProps, nextContext);\n\n    var shouldUpdate =\n      this._pendingForceUpdate ||\n      !inst.shouldComponentUpdate ||\n      inst.shouldComponentUpdate(nextProps, nextState, nextContext);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        typeof shouldUpdate !== 'undefined',\n        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n        'boolean value. Make sure to return true or false.',\n        this.getName() || 'ReactCompositeComponent'\n      ) : null);\n    }\n\n    if (shouldUpdate) {\n      this._pendingForceUpdate = false;\n      // Will set `this.props`, `this.state` and `this.context`.\n      this._performComponentUpdate(\n        nextParentElement,\n        nextProps,\n        nextState,\n        nextContext,\n        transaction,\n        nextUnmaskedContext\n      );\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state but we shortcut the rest of the update.\n      this._currentElement = nextParentElement;\n      this._context = nextUnmaskedContext;\n      inst.props = nextProps;\n      inst.state = nextState;\n      inst.context = nextContext;\n    }\n  },\n\n  _processPendingState: function(props, context) {\n    var inst = this._instance;\n    var queue = this._pendingStateQueue;\n    var replace = this._pendingReplaceState;\n    this._pendingReplaceState = false;\n    this._pendingStateQueue = null;\n\n    if (!queue) {\n      return inst.state;\n    }\n\n    if (replace && queue.length === 1) {\n      return queue[0];\n    }\n\n    var nextState = assign({}, replace ? queue[0] : inst.state);\n    for (var i = replace ? 1 : 0; i < queue.length; i++) {\n      var partial = queue[i];\n      assign(\n        nextState,\n        typeof partial === 'function' ?\n          partial.call(inst, nextState, props, context) :\n          partial\n      );\n    }\n\n    return nextState;\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {ReactElement} nextElement Next element\n   * @param {object} nextProps Next public object to set as properties.\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextContext Next public object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @param {?object} unmaskedContext\n   * @private\n   */\n  _performComponentUpdate: function(\n    nextElement,\n    nextProps,\n    nextState,\n    nextContext,\n    transaction,\n    unmaskedContext\n  ) {\n    var inst = this._instance;\n\n    var prevProps = inst.props;\n    var prevState = inst.state;\n    var prevContext = inst.context;\n\n    if (inst.componentWillUpdate) {\n      inst.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n\n    this._currentElement = nextElement;\n    this._context = unmaskedContext;\n    inst.props = nextProps;\n    inst.state = nextState;\n    inst.context = nextContext;\n\n    this._updateRenderedComponent(transaction, unmaskedContext);\n\n    if (inst.componentDidUpdate) {\n      transaction.getReactMountReady().enqueue(\n        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),\n        inst\n      );\n    }\n  },\n\n  /**\n   * Call the component's `render` method and update the DOM accordingly.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _updateRenderedComponent: function(transaction, context) {\n    var prevComponentInstance = this._renderedComponent;\n    var prevRenderedElement = prevComponentInstance._currentElement;\n    var childContext = this._getValidatedChildContext();\n    var nextRenderedElement = this._renderValidatedComponent(childContext);\n    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {\n      ReactReconciler.receiveComponent(\n        prevComponentInstance,\n        nextRenderedElement,\n        transaction,\n        this._mergeChildContext(context, childContext)\n      );\n    } else {\n      // These two IDs are actually the same! But nothing should rely on that.\n      var thisID = this._rootNodeID;\n      var prevComponentID = prevComponentInstance._rootNodeID;\n      ReactReconciler.unmountComponent(prevComponentInstance);\n\n      this._renderedComponent = this._instantiateReactComponent(\n        nextRenderedElement,\n        this._currentElement.type\n      );\n      var nextMarkup = ReactReconciler.mountComponent(\n        this._renderedComponent,\n        thisID,\n        transaction,\n        this._mergeChildContext(context, childContext)\n      );\n      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);\n    }\n  },\n\n  /**\n   * @protected\n   */\n  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {\n    ReactComponentEnvironment.replaceNodeWithMarkupByID(\n      prevComponentID,\n      nextMarkup\n    );\n  },\n\n  /**\n   * @protected\n   */\n  _renderValidatedComponentWithoutOwnerOrContext: function() {\n    var inst = this._instance;\n    var renderedComponent = inst.render();\n    if (\"production\" !== process.env.NODE_ENV) {\n      // We allow auto-mocks to proceed as if they're returning null.\n      if (typeof renderedComponent === 'undefined' &&\n          inst.render._isMockFunction) {\n        // This is probably bad practice. Consider warning here and\n        // deprecating this convenience.\n        renderedComponent = null;\n      }\n    }\n\n    return renderedComponent;\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: function(childContext) {\n    var renderedComponent;\n    var previousContext = ReactContext.current;\n    ReactContext.current = this._mergeChildContext(\n      this._currentElement._context,\n      childContext\n    );\n    ReactCurrentOwner.current = this;\n    try {\n      renderedComponent =\n        this._renderValidatedComponentWithoutOwnerOrContext();\n    } finally {\n      ReactContext.current = previousContext;\n      ReactCurrentOwner.current = null;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      // TODO: An `isValidNode` function would probably be more appropriate\n      renderedComponent === null || renderedComponent === false ||\n      ReactElement.isValidElement(renderedComponent),\n      '%s.render(): A valid ReactComponent must be returned. You may have ' +\n        'returned undefined, an array or some other invalid object.',\n      this.getName() || 'ReactCompositeComponent'\n    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate\n    renderedComponent === null || renderedComponent === false ||\n    ReactElement.isValidElement(renderedComponent)));\n    return renderedComponent;\n  },\n\n  /**\n   * Lazily allocates the refs object and stores `component` as `ref`.\n   *\n   * @param {string} ref Reference name.\n   * @param {component} component Component to store as `ref`.\n   * @final\n   * @private\n   */\n  attachRef: function(ref, component) {\n    var inst = this.getPublicInstance();\n    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;\n    refs[ref] = component.getPublicInstance();\n  },\n\n  /**\n   * Detaches a reference name.\n   *\n   * @param {string} ref Name to dereference.\n   * @final\n   * @private\n   */\n  detachRef: function(ref) {\n    var refs = this.getPublicInstance().refs;\n    delete refs[ref];\n  },\n\n  /**\n   * Get a text description of the component that can be used to identify it\n   * in error messages.\n   * @return {string} The name or null.\n   * @internal\n   */\n  getName: function() {\n    var type = this._currentElement.type;\n    var constructor = this._instance && this._instance.constructor;\n    return (\n      type.displayName || (constructor && constructor.displayName) ||\n      type.name || (constructor && constructor.name) ||\n      null\n    );\n  },\n\n  /**\n   * Get the publicly accessible representation of this component - i.e. what\n   * is exposed by refs and returned by React.render. Can be null for stateless\n   * components.\n   *\n   * @return {ReactComponent} the public component instance.\n   * @internal\n   */\n  getPublicInstance: function() {\n    return this._instance;\n  },\n\n  // Stub\n  _instantiateReactComponent: null\n\n};\n\nReactPerf.measureMethods(\n  ReactCompositeComponentMixin,\n  'ReactCompositeComponent',\n  {\n    mountComponent: 'mountComponent',\n    updateComponent: 'updateComponent',\n    _renderValidatedComponent: '_renderValidatedComponent'\n  }\n);\n\nvar ReactCompositeComponent = {\n\n  Mixin: ReactCompositeComponentMixin\n\n};\n\nmodule.exports = ReactCompositeComponent;\n\n}).call(this,require('_process'))\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactComponentEnvironment\":\"react/lib/ReactComponentEnvironment\",\"./ReactContext\":\"react/lib/ReactContext\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactElementValidator\":\"react/lib/ReactElementValidator\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./ReactLifeCycle\":\"react/lib/ReactLifeCycle\",\"./ReactNativeComponent\":\"react/lib/ReactNativeComponent\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./ReactPropTypeLocationNames\":\"react/lib/ReactPropTypeLocationNames\",\"./ReactPropTypeLocations\":\"react/lib/ReactPropTypeLocations\",\"./ReactReconciler\":\"react/lib/ReactReconciler\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./emptyObject\":\"react/lib/emptyObject\",\"./invariant\":\"react/lib/invariant\",\"./shouldUpdateReactComponent\":\"react/lib/shouldUpdateReactComponent\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactContext\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactContext\n */\n\n'use strict';\n\nvar assign = require(\"./Object.assign\");\nvar emptyObject = require(\"./emptyObject\");\nvar warning = require(\"./warning\");\n\nvar didWarn = false;\n\n/**\n * Keeps track of the current context.\n *\n * The context is automatically passed down the component ownership hierarchy\n * and is accessible via `this.context` on ReactCompositeComponents.\n */\nvar ReactContext = {\n\n  /**\n   * @internal\n   * @type {object}\n   */\n  current: emptyObject,\n\n  /**\n   * Temporarily extends the current context while executing scopedCallback.\n   *\n   * A typical use case might look like\n   *\n   *  render: function() {\n   *    var children = ReactContext.withContext({foo: 'foo'}, () => (\n   *\n   *    ));\n   *    return <div>{children}</div>;\n   *  }\n   *\n   * @param {object} newContext New context to merge into the existing context\n   * @param {function} scopedCallback Callback to run with the new context\n   * @return {ReactComponent|array<ReactComponent>}\n   */\n  withContext: function(newContext, scopedCallback) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        didWarn,\n        'withContext is deprecated and will be removed in a future version. ' +\n        'Use a wrapper component with getChildContext instead.'\n      ) : null);\n\n      didWarn = true;\n    }\n\n    var result;\n    var previousContext = ReactContext.current;\n    ReactContext.current = assign({}, previousContext, newContext);\n    try {\n      result = scopedCallback();\n    } finally {\n      ReactContext.current = previousContext;\n    }\n    return result;\n  }\n\n};\n\nmodule.exports = ReactContext;\n\n}).call(this,require('_process'))\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./emptyObject\":\"react/lib/emptyObject\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactCurrentOwner\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactCurrentOwner\n */\n\n'use strict';\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n *\n * The depth indicate how many composite components are above this render level.\n */\nvar ReactCurrentOwner = {\n\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n\n};\n\nmodule.exports = ReactCurrentOwner;\n\n},{}],\"react/lib/ReactDOMButton\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMButton\n */\n\n'use strict';\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\n\nvar keyMirror = require(\"./keyMirror\");\n\nvar button = ReactElement.createFactory('button');\n\nvar mouseListenerNames = keyMirror({\n  onClick: true,\n  onDoubleClick: true,\n  onMouseDown: true,\n  onMouseMove: true,\n  onMouseUp: true,\n  onClickCapture: true,\n  onDoubleClickCapture: true,\n  onMouseDownCapture: true,\n  onMouseMoveCapture: true,\n  onMouseUpCapture: true\n});\n\n/**\n * Implements a <button> native component that does not receive mouse events\n * when `disabled` is set.\n */\nvar ReactDOMButton = ReactClass.createClass({\n  displayName: 'ReactDOMButton',\n  tagName: 'BUTTON',\n\n  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],\n\n  render: function() {\n    var props = {};\n\n    // Copy the props; except the mouse listeners if we're disabled\n    for (var key in this.props) {\n      if (this.props.hasOwnProperty(key) &&\n          (!this.props.disabled || !mouseListenerNames[key])) {\n        props[key] = this.props[key];\n      }\n    }\n\n    return button(props, this.props.children);\n  }\n\n});\n\nmodule.exports = ReactDOMButton;\n\n},{\"./AutoFocusMixin\":\"react/lib/AutoFocusMixin\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\",\"./keyMirror\":\"react/lib/keyMirror\"}],\"react/lib/ReactDOMComponent\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMComponent\n * @typechecks static-only\n */\n\n/* global hasOwnProperty:true */\n\n'use strict';\n\nvar CSSPropertyOperations = require(\"./CSSPropertyOperations\");\nvar DOMProperty = require(\"./DOMProperty\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\nvar ReactComponentBrowserEnvironment =\n  require(\"./ReactComponentBrowserEnvironment\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactMultiChild = require(\"./ReactMultiChild\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar assign = require(\"./Object.assign\");\nvar escapeTextContentForBrowser = require(\"./escapeTextContentForBrowser\");\nvar invariant = require(\"./invariant\");\nvar isEventSupported = require(\"./isEventSupported\");\nvar keyOf = require(\"./keyOf\");\nvar warning = require(\"./warning\");\n\nvar deleteListener = ReactBrowserEventEmitter.deleteListener;\nvar listenTo = ReactBrowserEventEmitter.listenTo;\nvar registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;\n\n// For quickly matching children type, to test if can be treated as content.\nvar CONTENT_TYPES = {'string': true, 'number': true};\n\nvar STYLE = keyOf({style: null});\n\nvar ELEMENT_NODE_TYPE = 1;\n\n/**\n * Optionally injectable operations for mutating the DOM\n */\nvar BackendIDOperations = null;\n\n/**\n * @param {?object} props\n */\nfunction assertValidProps(props) {\n  if (!props) {\n    return;\n  }\n  // Note the use of `==` which checks for null or undefined.\n  if (props.dangerouslySetInnerHTML != null) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      props.children == null,\n      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'\n    ) : invariant(props.children == null));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof props.dangerouslySetInnerHTML === 'object' &&\n      '__html' in props.dangerouslySetInnerHTML,\n      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +\n      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +\n      'for more information.'\n    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&\n    '__html' in props.dangerouslySetInnerHTML));\n  }\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      props.innerHTML == null,\n      'Directly setting property `innerHTML` is not permitted. ' +\n      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'\n    ) : null);\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      !props.contentEditable || props.children == null,\n      'A component is `contentEditable` and contains `children` managed by ' +\n      'React. It is now your responsibility to guarantee that none of ' +\n      'those nodes are unexpectedly modified or duplicated. This is ' +\n      'probably not intentional.'\n    ) : null);\n  }\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    props.style == null || typeof props.style === 'object',\n    'The `style` prop expects a mapping from style properties to values, ' +\n    'not a string. For example, style={{marginRight: spacing + \\'em\\'}} when ' +\n    'using JSX.'\n  ) : invariant(props.style == null || typeof props.style === 'object'));\n}\n\nfunction putListener(id, registrationName, listener, transaction) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    // IE8 has no API for event capturing and the `onScroll` event doesn't\n    // bubble.\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      registrationName !== 'onScroll' || isEventSupported('scroll', true),\n      'This browser doesn\\'t support the `onScroll` event'\n    ) : null);\n  }\n  var container = ReactMount.findReactContainerForID(id);\n  if (container) {\n    var doc = container.nodeType === ELEMENT_NODE_TYPE ?\n      container.ownerDocument :\n      container;\n    listenTo(registrationName, doc);\n  }\n  transaction.getPutListenerQueue().enqueuePutListener(\n    id,\n    registrationName,\n    listener\n  );\n}\n\n// For HTML, certain tags should omit their close tag. We keep a whitelist for\n// those special cased tags.\n\nvar omittedCloseTags = {\n  'area': true,\n  'base': true,\n  'br': true,\n  'col': true,\n  'embed': true,\n  'hr': true,\n  'img': true,\n  'input': true,\n  'keygen': true,\n  'link': true,\n  'meta': true,\n  'param': true,\n  'source': true,\n  'track': true,\n  'wbr': true\n  // NOTE: menuitem's close tag should be omitted, but that causes problems.\n};\n\n// We accept any tag to be rendered but since this gets injected into abitrary\n// HTML, we want to make sure that it's a safe tag.\n// http://www.w3.org/TR/REC-xml/#NT-Name\n\nvar VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset\nvar validatedTagCache = {};\nvar hasOwnProperty = {}.hasOwnProperty;\n\nfunction validateDangerousTag(tag) {\n  if (!hasOwnProperty.call(validatedTagCache, tag)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));\n    validatedTagCache[tag] = true;\n  }\n}\n\n/**\n * Creates a new React class that is idempotent and capable of containing other\n * React components. It accepts event listeners and DOM properties that are\n * valid according to `DOMProperty`.\n *\n *  - Event listeners: `onClick`, `onMouseDown`, etc.\n *  - DOM properties: `className`, `name`, `title`, etc.\n *\n * The `style` property functions differently from the DOM API. It accepts an\n * object mapping of style properties to values.\n *\n * @constructor ReactDOMComponent\n * @extends ReactMultiChild\n */\nfunction ReactDOMComponent(tag) {\n  validateDangerousTag(tag);\n  this._tag = tag;\n  this._renderedChildren = null;\n  this._previousStyleCopy = null;\n  this._rootNodeID = null;\n}\n\nReactDOMComponent.displayName = 'ReactDOMComponent';\n\nReactDOMComponent.Mixin = {\n\n  construct: function(element) {\n    this._currentElement = element;\n  },\n\n  /**\n   * Generates root tag markup then recurses. This method has side effects and\n   * is not idempotent.\n   *\n   * @internal\n   * @param {string} rootID The root DOM ID for this node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} The computed markup.\n   */\n  mountComponent: function(rootID, transaction, context) {\n    this._rootNodeID = rootID;\n    assertValidProps(this._currentElement.props);\n    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';\n    return (\n      this._createOpenTagMarkupAndPutListeners(transaction) +\n      this._createContentMarkup(transaction, context) +\n      closeTag\n    );\n  },\n\n  /**\n   * Creates markup for the open tag and all attributes.\n   *\n   * This method has side effects because events get registered.\n   *\n   * Iterating over object properties is faster than iterating over arrays.\n   * @see http://jsperf.com/obj-vs-arr-iteration\n   *\n   * @private\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup of opening tag.\n   */\n  _createOpenTagMarkupAndPutListeners: function(transaction) {\n    var props = this._currentElement.props;\n    var ret = '<' + this._tag;\n\n    for (var propKey in props) {\n      if (!props.hasOwnProperty(propKey)) {\n        continue;\n      }\n      var propValue = props[propKey];\n      if (propValue == null) {\n        continue;\n      }\n      if (registrationNameModules.hasOwnProperty(propKey)) {\n        putListener(this._rootNodeID, propKey, propValue, transaction);\n      } else {\n        if (propKey === STYLE) {\n          if (propValue) {\n            propValue = this._previousStyleCopy = assign({}, props.style);\n          }\n          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);\n        }\n        var markup =\n          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);\n        if (markup) {\n          ret += ' ' + markup;\n        }\n      }\n    }\n\n    // For static pages, no need to put React ID and checksum. Saves lots of\n    // bytes.\n    if (transaction.renderToStaticMarkup) {\n      return ret + '>';\n    }\n\n    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);\n    return ret + ' ' + markupForID + '>';\n  },\n\n  /**\n   * Creates markup for the content between the tags.\n   *\n   * @private\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {object} context\n   * @return {string} Content markup.\n   */\n  _createContentMarkup: function(transaction, context) {\n    var prefix = '';\n    if (this._tag === 'listing' ||\n        this._tag === 'pre' ||\n        this._tag === 'textarea') {\n      // Add an initial newline because browsers ignore the first newline in\n      // a <listing>, <pre>, or <textarea> as an \"authoring convenience\" -- see\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.\n      prefix = '\\n';\n    }\n\n    var props = this._currentElement.props;\n\n    // Intentional use of != to avoid catching zero/false.\n    var innerHTML = props.dangerouslySetInnerHTML;\n    if (innerHTML != null) {\n      if (innerHTML.__html != null) {\n        return prefix + innerHTML.__html;\n      }\n    } else {\n      var contentToUse =\n        CONTENT_TYPES[typeof props.children] ? props.children : null;\n      var childrenToUse = contentToUse != null ? null : props.children;\n      if (contentToUse != null) {\n        return prefix + escapeTextContentForBrowser(contentToUse);\n      } else if (childrenToUse != null) {\n        var mountImages = this.mountChildren(\n          childrenToUse,\n          transaction,\n          context\n        );\n        return prefix + mountImages.join('');\n      }\n    }\n    return prefix;\n  },\n\n  receiveComponent: function(nextElement, transaction, context) {\n    var prevElement = this._currentElement;\n    this._currentElement = nextElement;\n    this.updateComponent(transaction, prevElement, nextElement, context);\n  },\n\n  /**\n   * Updates a native DOM component after it has already been allocated and\n   * attached to the DOM. Reconciles the root DOM node, then recurses.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {ReactElement} prevElement\n   * @param {ReactElement} nextElement\n   * @internal\n   * @overridable\n   */\n  updateComponent: function(transaction, prevElement, nextElement, context) {\n    assertValidProps(this._currentElement.props);\n    this._updateDOMProperties(prevElement.props, transaction);\n    this._updateDOMChildren(prevElement.props, transaction, context);\n  },\n\n  /**\n   * Reconciles the properties by detecting differences in property values and\n   * updating the DOM as necessary. This function is probably the single most\n   * critical path for performance optimization.\n   *\n   * TODO: Benchmark whether checking for changed values in memory actually\n   *       improves performance (especially statically positioned elements).\n   * TODO: Benchmark the effects of putting this at the top since 99% of props\n   *       do not change for a given reconciliation.\n   * TODO: Benchmark areas that can be improved with caching.\n   *\n   * @private\n   * @param {object} lastProps\n   * @param {ReactReconcileTransaction} transaction\n   */\n  _updateDOMProperties: function(lastProps, transaction) {\n    var nextProps = this._currentElement.props;\n    var propKey;\n    var styleName;\n    var styleUpdates;\n    for (propKey in lastProps) {\n      if (nextProps.hasOwnProperty(propKey) ||\n         !lastProps.hasOwnProperty(propKey)) {\n        continue;\n      }\n      if (propKey === STYLE) {\n        var lastStyle = this._previousStyleCopy;\n        for (styleName in lastStyle) {\n          if (lastStyle.hasOwnProperty(styleName)) {\n            styleUpdates = styleUpdates || {};\n            styleUpdates[styleName] = '';\n          }\n        }\n        this._previousStyleCopy = null;\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {\n        deleteListener(this._rootNodeID, propKey);\n      } else if (\n          DOMProperty.isStandardName[propKey] ||\n          DOMProperty.isCustomAttribute(propKey)) {\n        BackendIDOperations.deletePropertyByID(\n          this._rootNodeID,\n          propKey\n        );\n      }\n    }\n    for (propKey in nextProps) {\n      var nextProp = nextProps[propKey];\n      var lastProp = propKey === STYLE ?\n        this._previousStyleCopy :\n        lastProps[propKey];\n      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {\n        continue;\n      }\n      if (propKey === STYLE) {\n        if (nextProp) {\n          nextProp = this._previousStyleCopy = assign({}, nextProp);\n        } else {\n          this._previousStyleCopy = null;\n        }\n        if (lastProp) {\n          // Unset styles on `lastProp` but not on `nextProp`.\n          for (styleName in lastProp) {\n            if (lastProp.hasOwnProperty(styleName) &&\n                (!nextProp || !nextProp.hasOwnProperty(styleName))) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = '';\n            }\n          }\n          // Update styles that changed since `lastProp`.\n          for (styleName in nextProp) {\n            if (nextProp.hasOwnProperty(styleName) &&\n                lastProp[styleName] !== nextProp[styleName]) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = nextProp[styleName];\n            }\n          }\n        } else {\n          // Relies on `updateStylesByID` not mutating `styleUpdates`.\n          styleUpdates = nextProp;\n        }\n      } else if (registrationNameModules.hasOwnProperty(propKey)) {\n        putListener(this._rootNodeID, propKey, nextProp, transaction);\n      } else if (\n          DOMProperty.isStandardName[propKey] ||\n          DOMProperty.isCustomAttribute(propKey)) {\n        BackendIDOperations.updatePropertyByID(\n          this._rootNodeID,\n          propKey,\n          nextProp\n        );\n      }\n    }\n    if (styleUpdates) {\n      BackendIDOperations.updateStylesByID(\n        this._rootNodeID,\n        styleUpdates\n      );\n    }\n  },\n\n  /**\n   * Reconciles the children with the various properties that affect the\n   * children content.\n   *\n   * @param {object} lastProps\n   * @param {ReactReconcileTransaction} transaction\n   */\n  _updateDOMChildren: function(lastProps, transaction, context) {\n    var nextProps = this._currentElement.props;\n\n    var lastContent =\n      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;\n    var nextContent =\n      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;\n\n    var lastHtml =\n      lastProps.dangerouslySetInnerHTML &&\n      lastProps.dangerouslySetInnerHTML.__html;\n    var nextHtml =\n      nextProps.dangerouslySetInnerHTML &&\n      nextProps.dangerouslySetInnerHTML.__html;\n\n    // Note the use of `!=` which checks for null or undefined.\n    var lastChildren = lastContent != null ? null : lastProps.children;\n    var nextChildren = nextContent != null ? null : nextProps.children;\n\n    // If we're switching from children to content/html or vice versa, remove\n    // the old content\n    var lastHasContentOrHtml = lastContent != null || lastHtml != null;\n    var nextHasContentOrHtml = nextContent != null || nextHtml != null;\n    if (lastChildren != null && nextChildren == null) {\n      this.updateChildren(null, transaction, context);\n    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {\n      this.updateTextContent('');\n    }\n\n    if (nextContent != null) {\n      if (lastContent !== nextContent) {\n        this.updateTextContent('' + nextContent);\n      }\n    } else if (nextHtml != null) {\n      if (lastHtml !== nextHtml) {\n        BackendIDOperations.updateInnerHTMLByID(\n          this._rootNodeID,\n          nextHtml\n        );\n      }\n    } else if (nextChildren != null) {\n      this.updateChildren(nextChildren, transaction, context);\n    }\n  },\n\n  /**\n   * Destroys all event registrations for this instance. Does not remove from\n   * the DOM. That must be done by the parent.\n   *\n   * @internal\n   */\n  unmountComponent: function() {\n    this.unmountChildren();\n    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);\n    this._rootNodeID = null;\n  }\n\n};\n\nReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {\n  mountComponent: 'mountComponent',\n  updateComponent: 'updateComponent'\n});\n\nassign(\n  ReactDOMComponent.prototype,\n  ReactDOMComponent.Mixin,\n  ReactMultiChild.Mixin\n);\n\nReactDOMComponent.injection = {\n  injectIDOperations: function(IDOperations) {\n    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;\n  }\n};\n\nmodule.exports = ReactDOMComponent;\n\n}).call(this,require('_process'))\n\n},{\"./CSSPropertyOperations\":\"react/lib/CSSPropertyOperations\",\"./DOMProperty\":\"react/lib/DOMProperty\",\"./DOMPropertyOperations\":\"react/lib/DOMPropertyOperations\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\",\"./ReactComponentBrowserEnvironment\":\"react/lib/ReactComponentBrowserEnvironment\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactMultiChild\":\"react/lib/ReactMultiChild\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./escapeTextContentForBrowser\":\"react/lib/escapeTextContentForBrowser\",\"./invariant\":\"react/lib/invariant\",\"./isEventSupported\":\"react/lib/isEventSupported\",\"./keyOf\":\"react/lib/keyOf\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactDOMForm\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMForm\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar LocalEventTrapMixin = require(\"./LocalEventTrapMixin\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\n\nvar form = ReactElement.createFactory('form');\n\n/**\n * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need\n * to capture it on the <form> element itself. There are lots of hacks we could\n * do to accomplish this, but the most reliable is to make <form> a\n * composite component and use `componentDidMount` to attach the event handlers.\n */\nvar ReactDOMForm = ReactClass.createClass({\n  displayName: 'ReactDOMForm',\n  tagName: 'FORM',\n\n  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],\n\n  render: function() {\n    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,\n    // `jshint` fails to parse JSX so in order for linting to work in the open\n    // source repo, we need to just use `ReactDOM.form`.\n    return form(this.props);\n  },\n\n  componentDidMount: function() {\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');\n  }\n});\n\nmodule.exports = ReactDOMForm;\n\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./LocalEventTrapMixin\":\"react/lib/LocalEventTrapMixin\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\"}],\"react/lib/ReactDOMIDOperations\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n/*jslint evil: true */\n\n'use strict';\n\nvar CSSPropertyOperations = require(\"./CSSPropertyOperations\");\nvar DOMChildrenOperations = require(\"./DOMChildrenOperations\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar invariant = require(\"./invariant\");\nvar setInnerHTML = require(\"./setInnerHTML\");\n\n/**\n * Errors for properties that should not be updated with `updatePropertyById()`.\n *\n * @type {object}\n * @private\n */\nvar INVALID_PROPERTY_ERRORS = {\n  dangerouslySetInnerHTML:\n    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',\n  style: '`style` must be set using `updateStylesByID()`.'\n};\n\n/**\n * Operations used to process updates to DOM nodes. This is made injectable via\n * `ReactDOMComponent.BackendIDOperations`.\n */\nvar ReactDOMIDOperations = {\n\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: function(id, name, value) {\n    var node = ReactMount.getNode(id);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),\n      'updatePropertyByID(...): %s',\n      INVALID_PROPERTY_ERRORS[name]\n    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));\n\n    // If we're updating to null or undefined, we should remove the property\n    // from the DOM node instead of inadvertantly setting to a string. This\n    // brings us in line with the same behavior we have on initial render.\n    if (value != null) {\n      DOMPropertyOperations.setValueForProperty(node, name, value);\n    } else {\n      DOMPropertyOperations.deleteValueForProperty(node, name);\n    }\n  },\n\n  /**\n   * Updates a DOM node to remove a property. This should only be used to remove\n   * DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A property name to remove, see `DOMProperty`.\n   * @internal\n   */\n  deletePropertyByID: function(id, name, value) {\n    var node = ReactMount.getNode(id);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),\n      'updatePropertyByID(...): %s',\n      INVALID_PROPERTY_ERRORS[name]\n    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));\n    DOMPropertyOperations.deleteValueForProperty(node, name, value);\n  },\n\n  /**\n   * Updates a DOM node with new style values. If a value is specified as '',\n   * the corresponding style property will be unset.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {object} styles Mapping from styles to values.\n   * @internal\n   */\n  updateStylesByID: function(id, styles) {\n    var node = ReactMount.getNode(id);\n    CSSPropertyOperations.setValueForStyles(node, styles);\n  },\n\n  /**\n   * Updates a DOM node's innerHTML.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} html An HTML string.\n   * @internal\n   */\n  updateInnerHTMLByID: function(id, html) {\n    var node = ReactMount.getNode(id);\n    setInnerHTML(node, html);\n  },\n\n  /**\n   * Updates a DOM node's text content set by `props.content`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} content Text content.\n   * @internal\n   */\n  updateTextContentByID: function(id, content) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.updateTextContent(node, content);\n  },\n\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n  },\n\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: function(updates, markup) {\n    for (var i = 0; i < updates.length; i++) {\n      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);\n    }\n    DOMChildrenOperations.processUpdates(updates, markup);\n  }\n};\n\nReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {\n  updatePropertyByID: 'updatePropertyByID',\n  deletePropertyByID: 'deletePropertyByID',\n  updateStylesByID: 'updateStylesByID',\n  updateInnerHTMLByID: 'updateInnerHTMLByID',\n  updateTextContentByID: 'updateTextContentByID',\n  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',\n  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'\n});\n\nmodule.exports = ReactDOMIDOperations;\n\n}).call(this,require('_process'))\n\n},{\"./CSSPropertyOperations\":\"react/lib/CSSPropertyOperations\",\"./DOMChildrenOperations\":\"react/lib/DOMChildrenOperations\",\"./DOMPropertyOperations\":\"react/lib/DOMPropertyOperations\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./invariant\":\"react/lib/invariant\",\"./setInnerHTML\":\"react/lib/setInnerHTML\",\"_process\":1}],\"react/lib/ReactDOMIframe\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMIframe\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar LocalEventTrapMixin = require(\"./LocalEventTrapMixin\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\n\nvar iframe = ReactElement.createFactory('iframe');\n\n/**\n * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to\n * capture it on the <iframe> element itself. There are lots of hacks we could\n * do to accomplish this, but the most reliable is to make <iframe> a composite\n * component and use `componentDidMount` to attach the event handlers.\n */\nvar ReactDOMIframe = ReactClass.createClass({\n  displayName: 'ReactDOMIframe',\n  tagName: 'IFRAME',\n\n  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],\n\n  render: function() {\n    return iframe(this.props);\n  },\n\n  componentDidMount: function() {\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');\n  }\n});\n\nmodule.exports = ReactDOMIframe;\n\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./LocalEventTrapMixin\":\"react/lib/LocalEventTrapMixin\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\"}],\"react/lib/ReactDOMImg\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMImg\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar LocalEventTrapMixin = require(\"./LocalEventTrapMixin\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\n\nvar img = ReactElement.createFactory('img');\n\n/**\n * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to\n * capture it on the <img> element itself. There are lots of hacks we could do\n * to accomplish this, but the most reliable is to make <img> a composite\n * component and use `componentDidMount` to attach the event handlers.\n */\nvar ReactDOMImg = ReactClass.createClass({\n  displayName: 'ReactDOMImg',\n  tagName: 'IMG',\n\n  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],\n\n  render: function() {\n    return img(this.props);\n  },\n\n  componentDidMount: function() {\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');\n    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');\n  }\n});\n\nmodule.exports = ReactDOMImg;\n\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./LocalEventTrapMixin\":\"react/lib/LocalEventTrapMixin\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\"}],\"react/lib/ReactDOMInput\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\n'use strict';\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\nvar input = ReactElement.createFactory('input');\n\nvar instancesByReactID = {};\n\nfunction forceUpdateIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.forceUpdate();\n  }\n}\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = ReactClass.createClass({\n  displayName: 'ReactDOMInput',\n  tagName: 'INPUT',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  getInitialState: function() {\n    var defaultValue = this.props.defaultValue;\n    return {\n      initialChecked: this.props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null\n    };\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    props.defaultChecked = null;\n    props.defaultValue = null;\n\n    var value = LinkedValueUtils.getValue(this);\n    props.value = value != null ? value : this.state.initialValue;\n\n    var checked = LinkedValueUtils.getChecked(this);\n    props.checked = checked != null ? checked : this.state.initialChecked;\n\n    props.onChange = this._handleChange;\n\n    return input(props, this.props.children);\n  },\n\n  componentDidMount: function() {\n    var id = ReactMount.getID(this.getDOMNode());\n    instancesByReactID[id] = this;\n  },\n\n  componentWillUnmount: function() {\n    var rootNode = this.getDOMNode();\n    var id = ReactMount.getID(rootNode);\n    delete instancesByReactID[id];\n  },\n\n  componentDidUpdate: function(prevProps, prevState, prevContext) {\n    var rootNode = this.getDOMNode();\n    if (this.props.checked != null) {\n      DOMPropertyOperations.setValueForProperty(\n        rootNode,\n        'checked',\n        this.props.checked || false\n      );\n    }\n\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n    // Here we use asap to wait until all updates have propagated, which\n    // is important when using controlled components within layers:\n    // https://github.com/facebook/react/issues/1698\n    ReactUpdates.asap(forceUpdateIfMounted, this);\n\n    var name = this.props.name;\n    if (this.props.type === 'radio' && name != null) {\n      var rootNode = this.getDOMNode();\n      var queryRoot = rootNode;\n\n      while (queryRoot.parentNode) {\n        queryRoot = queryRoot.parentNode;\n      }\n\n      // If `rootNode.form` was non-null, then we could try `form.elements`,\n      // but that sometimes behaves strangely in IE8. We could also try using\n      // `form.getElementsByName`, but that will only return direct children\n      // and won't include inputs that use the HTML5 `form=` attribute. Since\n      // the input might not even be in a form, let's just use the global\n      // `querySelectorAll` to ensure we don't miss anything.\n      var group = queryRoot.querySelectorAll(\n        'input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n      for (var i = 0, groupLen = group.length; i < groupLen; i++) {\n        var otherNode = group[i];\n        if (otherNode === rootNode ||\n            otherNode.form !== rootNode.form) {\n          continue;\n        }\n        var otherID = ReactMount.getID(otherNode);\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          otherID,\n          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +\n          'same `name` is not supported.'\n        ) : invariant(otherID));\n        var otherInstance = instancesByReactID[otherID];\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          otherInstance,\n          'ReactDOMInput: Unknown radio button ID %s.',\n          otherID\n        ) : invariant(otherInstance));\n        // If this is a controlled radio button group, forcing the input that\n        // was previously checked to update will cause it to be come re-checked\n        // as appropriate.\n        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n      }\n    }\n\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMInput;\n\n}).call(this,require('_process'))\n\n},{\"./AutoFocusMixin\":\"react/lib/AutoFocusMixin\",\"./DOMPropertyOperations\":\"react/lib/DOMPropertyOperations\",\"./LinkedValueUtils\":\"react/lib/LinkedValueUtils\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactDOMOption\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMOption\n */\n\n'use strict';\n\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\n\nvar warning = require(\"./warning\");\n\nvar option = ReactElement.createFactory('option');\n\n/**\n * Implements an <option> native component that warns when `selected` is set.\n */\nvar ReactDOMOption = ReactClass.createClass({\n  displayName: 'ReactDOMOption',\n  tagName: 'OPTION',\n\n  mixins: [ReactBrowserComponentMixin],\n\n  componentWillMount: function() {\n    // TODO (yungsters): Remove support for `selected` in <option>.\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        this.props.selected == null,\n        'Use the `defaultValue` or `value` props on <select> instead of ' +\n        'setting `selected` on <option>.'\n      ) : null);\n    }\n  },\n\n  render: function() {\n    return option(this.props, this.props.children);\n  }\n\n});\n\nmodule.exports = ReactDOMOption;\n\n}).call(this,require('_process'))\n\n},{\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactDOMSelection\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelection\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar getNodeForCharacterOffset = require(\"./getNodeForCharacterOffset\");\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\n\n/**\n * While `isCollapsed` is available on the Selection object and `collapsed`\n * is available on the Range object, IE11 sometimes gets them wrong.\n * If the anchor/focus nodes and offsets are the same, the range is collapsed.\n */\nfunction isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {\n  return anchorNode === focusNode && anchorOffset === focusOffset;\n}\n\n/**\n * Get the appropriate anchor and focus node/offset pairs for IE.\n *\n * The catch here is that IE's selection API doesn't provide information\n * about whether the selection is forward or backward, so we have to\n * behave as though it's always forward.\n *\n * IE text differs from modern selection in that it behaves as though\n * block elements end with a new line. This means character offsets will\n * differ between the two APIs.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getIEOffsets(node) {\n  var selection = document.selection;\n  var selectedRange = selection.createRange();\n  var selectedLength = selectedRange.text.length;\n\n  // Duplicate selection so we can move range without breaking user selection.\n  var fromStart = selectedRange.duplicate();\n  fromStart.moveToElementText(node);\n  fromStart.setEndPoint('EndToStart', selectedRange);\n\n  var startOffset = fromStart.text.length;\n  var endOffset = startOffset + selectedLength;\n\n  return {\n    start: startOffset,\n    end: endOffset\n  };\n}\n\n/**\n * @param {DOMElement} node\n * @return {?object}\n */\nfunction getModernOffsets(node) {\n  var selection = window.getSelection && window.getSelection();\n\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n\n  var anchorNode = selection.anchorNode;\n  var anchorOffset = selection.anchorOffset;\n  var focusNode = selection.focusNode;\n  var focusOffset = selection.focusOffset;\n\n  var currentRange = selection.getRangeAt(0);\n\n  // If the node and offset values are the same, the selection is collapsed.\n  // `Selection.isCollapsed` is available natively, but IE sometimes gets\n  // this value wrong.\n  var isSelectionCollapsed = isCollapsed(\n    selection.anchorNode,\n    selection.anchorOffset,\n    selection.focusNode,\n    selection.focusOffset\n  );\n\n  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;\n\n  var tempRange = currentRange.cloneRange();\n  tempRange.selectNodeContents(node);\n  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);\n\n  var isTempRangeCollapsed = isCollapsed(\n    tempRange.startContainer,\n    tempRange.startOffset,\n    tempRange.endContainer,\n    tempRange.endOffset\n  );\n\n  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;\n  var end = start + rangeLength;\n\n  // Detect whether the selection is backward.\n  var detectionRange = document.createRange();\n  detectionRange.setStart(anchorNode, anchorOffset);\n  detectionRange.setEnd(focusNode, focusOffset);\n  var isBackward = detectionRange.collapsed;\n\n  return {\n    start: isBackward ? end : start,\n    end: isBackward ? start : end\n  };\n}\n\n/**\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setIEOffsets(node, offsets) {\n  var range = document.selection.createRange().duplicate();\n  var start, end;\n\n  if (typeof offsets.end === 'undefined') {\n    start = offsets.start;\n    end = start;\n  } else if (offsets.start > offsets.end) {\n    start = offsets.end;\n    end = offsets.start;\n  } else {\n    start = offsets.start;\n    end = offsets.end;\n  }\n\n  range.moveToElementText(node);\n  range.moveStart('character', start);\n  range.setEndPoint('EndToStart', range);\n  range.moveEnd('character', end - start);\n  range.select();\n}\n\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setModernOffsets(node, offsets) {\n  if (!window.getSelection) {\n    return;\n  }\n\n  var selection = window.getSelection();\n  var length = node[getTextContentAccessor()].length;\n  var start = Math.min(offsets.start, length);\n  var end = typeof offsets.end === 'undefined' ?\n            start : Math.min(offsets.end, length);\n\n  // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n  if (!selection.extend && start > end) {\n    var temp = end;\n    end = start;\n    start = temp;\n  }\n\n  var startMarker = getNodeForCharacterOffset(node, start);\n  var endMarker = getNodeForCharacterOffset(node, end);\n\n  if (startMarker && endMarker) {\n    var range = document.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\n\nvar useIEOffsets = (\n  ExecutionEnvironment.canUseDOM &&\n  'selection' in document &&\n  !('getSelection' in window)\n);\n\nvar ReactDOMSelection = {\n  /**\n   * @param {DOMElement} node\n   */\n  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,\n\n  /**\n   * @param {DOMElement|DOMTextNode} node\n   * @param {object} offsets\n   */\n  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets\n};\n\nmodule.exports = ReactDOMSelection;\n\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./getNodeForCharacterOffset\":\"react/lib/getNodeForCharacterOffset\",\"./getTextContentAccessor\":\"react/lib/getTextContentAccessor\"}],\"react/lib/ReactDOMSelect\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelect\n */\n\n'use strict';\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\n\nvar select = ReactElement.createFactory('select');\n\nfunction updateOptionsIfPendingUpdateAndMounted() {\n  /*jshint validthis:true */\n  if (this._pendingUpdate) {\n    this._pendingUpdate = false;\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null && this.isMounted()) {\n      updateOptions(this, value);\n    }\n  }\n}\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return null;\n  }\n  if (props.multiple) {\n    if (!Array.isArray(props[propName])) {\n      return new Error(\n        (\"The `\" + propName + \"` prop supplied to <select> must be an array if \") +\n        (\"`multiple` is true.\")\n      );\n    }\n  } else {\n    if (Array.isArray(props[propName])) {\n      return new Error(\n        (\"The `\" + propName + \"` prop supplied to <select> must be a scalar \") +\n        (\"value if `multiple` is false.\")\n      );\n    }\n  }\n}\n\n/**\n * @param {ReactComponent} component Instance of ReactDOMSelect\n * @param {*} propValue A stringable (with `multiple`, a list of stringables).\n * @private\n */\nfunction updateOptions(component, propValue) {\n  var selectedValue, i, l;\n  var options = component.getDOMNode().options;\n\n  if (component.props.multiple) {\n    selectedValue = {};\n    for (i = 0, l = propValue.length; i < l; i++) {\n      selectedValue['' + propValue[i]] = true;\n    }\n    for (i = 0, l = options.length; i < l; i++) {\n      var selected = selectedValue.hasOwnProperty(options[i].value);\n      if (options[i].selected !== selected) {\n        options[i].selected = selected;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    selectedValue = '' + propValue;\n    for (i = 0, l = options.length; i < l; i++) {\n      if (options[i].value === selectedValue) {\n        options[i].selected = true;\n        return;\n      }\n    }\n    if (options.length) {\n      options[0].selected = true;\n    }\n  }\n}\n\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect = ReactClass.createClass({\n  displayName: 'ReactDOMSelect',\n  tagName: 'SELECT',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    props.onChange = this._handleChange;\n    props.value = null;\n\n    return select(props, this.props.children);\n  },\n\n  componentWillMount: function() {\n    this._pendingUpdate = false;\n  },\n\n  componentDidMount: function() {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      updateOptions(this, value);\n    } else if (this.props.defaultValue != null) {\n      updateOptions(this, this.props.defaultValue);\n    }\n  },\n\n  componentDidUpdate: function(prevProps) {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      this._pendingUpdate = false;\n      updateOptions(this, value);\n    } else if (!prevProps.multiple !== !this.props.multiple) {\n      // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n      if (this.props.defaultValue != null) {\n        updateOptions(this, this.props.defaultValue);\n      } else {\n        // Revert the select back to its default unselected state.\n        updateOptions(this, this.props.multiple ? [] : '');\n      }\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n\n    this._pendingUpdate = true;\n    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMSelect;\n\n},{\"./AutoFocusMixin\":\"react/lib/AutoFocusMixin\",\"./LinkedValueUtils\":\"react/lib/LinkedValueUtils\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactUpdates\":\"react/lib/ReactUpdates\"}],\"react/lib/ReactDOMTextComponent\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextComponent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactComponentBrowserEnvironment =\n  require(\"./ReactComponentBrowserEnvironment\");\nvar ReactDOMComponent = require(\"./ReactDOMComponent\");\n\nvar assign = require(\"./Object.assign\");\nvar escapeTextContentForBrowser = require(\"./escapeTextContentForBrowser\");\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactDOMTextComponent = function(props) {\n  // This constructor and its argument is currently used by mocks.\n};\n\nassign(ReactDOMTextComponent.prototype, {\n\n  /**\n   * @param {ReactText} text\n   * @internal\n   */\n  construct: function(text) {\n    // TODO: This is really a ReactText (ReactNode), not a ReactElement\n    this._currentElement = text;\n    this._stringText = '' + text;\n\n    // Properties\n    this._rootNodeID = null;\n    this._mountIndex = 0;\n  },\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function(rootID, transaction, context) {\n    this._rootNodeID = rootID;\n    var escapedText = escapeTextContentForBrowser(this._stringText);\n\n    if (transaction.renderToStaticMarkup) {\n      // Normally we'd wrap this in a `span` for the reasons stated above, but\n      // since this is a situation where React won't take over (static pages),\n      // we can simply return the text as it is.\n      return escapedText;\n    }\n\n    return (\n      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +\n        escapedText +\n      '</span>'\n    );\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function(nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        ReactDOMComponent.BackendIDOperations.updateTextContentByID(\n          this._rootNodeID,\n          nextStringText\n        );\n      }\n    }\n  },\n\n  unmountComponent: function() {\n    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);\n  }\n\n});\n\nmodule.exports = ReactDOMTextComponent;\n\n},{\"./DOMPropertyOperations\":\"react/lib/DOMPropertyOperations\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactComponentBrowserEnvironment\":\"react/lib/ReactComponentBrowserEnvironment\",\"./ReactDOMComponent\":\"react/lib/ReactDOMComponent\",\"./escapeTextContentForBrowser\":\"react/lib/escapeTextContentForBrowser\"}],\"react/lib/ReactDOMTextarea\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n\n'use strict';\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\nvar warning = require(\"./warning\");\n\nvar textarea = ReactElement.createFactory('textarea');\n\nfunction forceUpdateIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.forceUpdate();\n  }\n}\n\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = ReactClass.createClass({\n  displayName: 'ReactDOMTextarea',\n  tagName: 'TEXTAREA',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  getInitialState: function() {\n    var defaultValue = this.props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = this.props.children;\n    if (children != null) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          false,\n          'Use the `defaultValue` or `value` props instead of setting ' +\n          'children on <textarea>.'\n        ) : null);\n      }\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        defaultValue == null,\n        'If you supply `defaultValue` on a <textarea>, do not pass children.'\n      ) : invariant(defaultValue == null));\n      if (Array.isArray(children)) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          children.length <= 1,\n          '<textarea> can only have at most one child.'\n        ) : invariant(children.length <= 1));\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    var value = LinkedValueUtils.getValue(this);\n    return {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue)\n    };\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      props.dangerouslySetInnerHTML == null,\n      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'\n    ) : invariant(props.dangerouslySetInnerHTML == null));\n\n    props.defaultValue = null;\n    props.value = null;\n    props.onChange = this._handleChange;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    return textarea(props, this.state.initialValue);\n  },\n\n  componentDidUpdate: function(prevProps, prevState, prevContext) {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      var rootNode = this.getDOMNode();\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n    ReactUpdates.asap(forceUpdateIfMounted, this);\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMTextarea;\n\n}).call(this,require('_process'))\n\n},{\"./AutoFocusMixin\":\"react/lib/AutoFocusMixin\",\"./DOMPropertyOperations\":\"react/lib/DOMPropertyOperations\",\"./LinkedValueUtils\":\"react/lib/LinkedValueUtils\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactDOM\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOM\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\n\nvar mapObject = require(\"./mapObject\");\n\n/**\n * Create a factory that creates HTML tag elements.\n *\n * @param {string} tag Tag name (e.g. `div`).\n * @private\n */\nfunction createDOMFactory(tag) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    return ReactElementValidator.createFactory(tag);\n  }\n  return ReactElement.createFactory(tag);\n}\n\n/**\n * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.\n * This is also accessible via `React.DOM`.\n *\n * @public\n */\nvar ReactDOM = mapObject({\n  a: 'a',\n  abbr: 'abbr',\n  address: 'address',\n  area: 'area',\n  article: 'article',\n  aside: 'aside',\n  audio: 'audio',\n  b: 'b',\n  base: 'base',\n  bdi: 'bdi',\n  bdo: 'bdo',\n  big: 'big',\n  blockquote: 'blockquote',\n  body: 'body',\n  br: 'br',\n  button: 'button',\n  canvas: 'canvas',\n  caption: 'caption',\n  cite: 'cite',\n  code: 'code',\n  col: 'col',\n  colgroup: 'colgroup',\n  data: 'data',\n  datalist: 'datalist',\n  dd: 'dd',\n  del: 'del',\n  details: 'details',\n  dfn: 'dfn',\n  dialog: 'dialog',\n  div: 'div',\n  dl: 'dl',\n  dt: 'dt',\n  em: 'em',\n  embed: 'embed',\n  fieldset: 'fieldset',\n  figcaption: 'figcaption',\n  figure: 'figure',\n  footer: 'footer',\n  form: 'form',\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  head: 'head',\n  header: 'header',\n  hr: 'hr',\n  html: 'html',\n  i: 'i',\n  iframe: 'iframe',\n  img: 'img',\n  input: 'input',\n  ins: 'ins',\n  kbd: 'kbd',\n  keygen: 'keygen',\n  label: 'label',\n  legend: 'legend',\n  li: 'li',\n  link: 'link',\n  main: 'main',\n  map: 'map',\n  mark: 'mark',\n  menu: 'menu',\n  menuitem: 'menuitem',\n  meta: 'meta',\n  meter: 'meter',\n  nav: 'nav',\n  noscript: 'noscript',\n  object: 'object',\n  ol: 'ol',\n  optgroup: 'optgroup',\n  option: 'option',\n  output: 'output',\n  p: 'p',\n  param: 'param',\n  picture: 'picture',\n  pre: 'pre',\n  progress: 'progress',\n  q: 'q',\n  rp: 'rp',\n  rt: 'rt',\n  ruby: 'ruby',\n  s: 's',\n  samp: 'samp',\n  script: 'script',\n  section: 'section',\n  select: 'select',\n  small: 'small',\n  source: 'source',\n  span: 'span',\n  strong: 'strong',\n  style: 'style',\n  sub: 'sub',\n  summary: 'summary',\n  sup: 'sup',\n  table: 'table',\n  tbody: 'tbody',\n  td: 'td',\n  textarea: 'textarea',\n  tfoot: 'tfoot',\n  th: 'th',\n  thead: 'thead',\n  time: 'time',\n  title: 'title',\n  tr: 'tr',\n  track: 'track',\n  u: 'u',\n  ul: 'ul',\n  'var': 'var',\n  video: 'video',\n  wbr: 'wbr',\n\n  // SVG\n  circle: 'circle',\n  clipPath: 'clipPath',\n  defs: 'defs',\n  ellipse: 'ellipse',\n  g: 'g',\n  line: 'line',\n  linearGradient: 'linearGradient',\n  mask: 'mask',\n  path: 'path',\n  pattern: 'pattern',\n  polygon: 'polygon',\n  polyline: 'polyline',\n  radialGradient: 'radialGradient',\n  rect: 'rect',\n  stop: 'stop',\n  svg: 'svg',\n  text: 'text',\n  tspan: 'tspan'\n\n}, createDOMFactory);\n\nmodule.exports = ReactDOM;\n\n}).call(this,require('_process'))\n\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactElementValidator\":\"react/lib/ReactElementValidator\",\"./mapObject\":\"react/lib/mapObject\",\"_process\":1}],\"react/lib/ReactDefaultBatchingStrategy\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultBatchingStrategy\n */\n\n'use strict';\n\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar Transaction = require(\"./Transaction\");\n\nvar assign = require(\"./Object.assign\");\nvar emptyFunction = require(\"./emptyFunction\");\n\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function() {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\n\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\nassign(\n  ReactDefaultBatchingStrategyTransaction.prototype,\n  Transaction.Mixin,\n  {\n    getTransactionWrappers: function() {\n      return TRANSACTION_WRAPPERS;\n    }\n  }\n);\n\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function(callback, a, b, c, d) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      callback(a, b, c, d);\n    } else {\n      transaction.perform(callback, null, a, b, c, d);\n    }\n  }\n};\n\nmodule.exports = ReactDefaultBatchingStrategy;\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./Transaction\":\"react/lib/Transaction\",\"./emptyFunction\":\"react/lib/emptyFunction\"}],\"react/lib/ReactDefaultInjection\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultInjection\n */\n\n'use strict';\n\nvar BeforeInputEventPlugin = require(\"./BeforeInputEventPlugin\");\nvar ChangeEventPlugin = require(\"./ChangeEventPlugin\");\nvar ClientReactRootIndex = require(\"./ClientReactRootIndex\");\nvar DefaultEventPluginOrder = require(\"./DefaultEventPluginOrder\");\nvar EnterLeaveEventPlugin = require(\"./EnterLeaveEventPlugin\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar HTMLDOMPropertyConfig = require(\"./HTMLDOMPropertyConfig\");\nvar MobileSafariClickEventPlugin = require(\"./MobileSafariClickEventPlugin\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactComponentBrowserEnvironment =\n  require(\"./ReactComponentBrowserEnvironment\");\nvar ReactDefaultBatchingStrategy = require(\"./ReactDefaultBatchingStrategy\");\nvar ReactDOMComponent = require(\"./ReactDOMComponent\");\nvar ReactDOMButton = require(\"./ReactDOMButton\");\nvar ReactDOMForm = require(\"./ReactDOMForm\");\nvar ReactDOMImg = require(\"./ReactDOMImg\");\nvar ReactDOMIDOperations = require(\"./ReactDOMIDOperations\");\nvar ReactDOMIframe = require(\"./ReactDOMIframe\");\nvar ReactDOMInput = require(\"./ReactDOMInput\");\nvar ReactDOMOption = require(\"./ReactDOMOption\");\nvar ReactDOMSelect = require(\"./ReactDOMSelect\");\nvar ReactDOMTextarea = require(\"./ReactDOMTextarea\");\nvar ReactDOMTextComponent = require(\"./ReactDOMTextComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactEventListener = require(\"./ReactEventListener\");\nvar ReactInjection = require(\"./ReactInjection\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactReconcileTransaction = require(\"./ReactReconcileTransaction\");\nvar SelectEventPlugin = require(\"./SelectEventPlugin\");\nvar ServerReactRootIndex = require(\"./ServerReactRootIndex\");\nvar SimpleEventPlugin = require(\"./SimpleEventPlugin\");\nvar SVGDOMPropertyConfig = require(\"./SVGDOMPropertyConfig\");\n\nvar createFullPageComponent = require(\"./createFullPageComponent\");\n\nfunction autoGenerateWrapperClass(type) {\n  return ReactClass.createClass({\n    tagName: type.toUpperCase(),\n    render: function() {\n      return new ReactElement(\n        type,\n        null,\n        null,\n        null,\n        null,\n        this.props\n      );\n    }\n  });\n}\n\nfunction inject() {\n  ReactInjection.EventEmitter.injectReactEventListener(\n    ReactEventListener\n  );\n\n  /**\n   * Inject modules for resolving DOM hierarchy and plugin ordering.\n   */\n  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);\n  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);\n  ReactInjection.EventPluginHub.injectMount(ReactMount);\n\n  /**\n   * Some important event plugins included by default (without having to require\n   * them).\n   */\n  ReactInjection.EventPluginHub.injectEventPluginsByName({\n    SimpleEventPlugin: SimpleEventPlugin,\n    EnterLeaveEventPlugin: EnterLeaveEventPlugin,\n    ChangeEventPlugin: ChangeEventPlugin,\n    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,\n    SelectEventPlugin: SelectEventPlugin,\n    BeforeInputEventPlugin: BeforeInputEventPlugin\n  });\n\n  ReactInjection.NativeComponent.injectGenericComponentClass(\n    ReactDOMComponent\n  );\n\n  ReactInjection.NativeComponent.injectTextComponentClass(\n    ReactDOMTextComponent\n  );\n\n  ReactInjection.NativeComponent.injectAutoWrapper(\n    autoGenerateWrapperClass\n  );\n\n  // This needs to happen before createFullPageComponent() otherwise the mixin\n  // won't be included.\n  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);\n\n  ReactInjection.NativeComponent.injectComponentClasses({\n    'button': ReactDOMButton,\n    'form': ReactDOMForm,\n    'iframe': ReactDOMIframe,\n    'img': ReactDOMImg,\n    'input': ReactDOMInput,\n    'option': ReactDOMOption,\n    'select': ReactDOMSelect,\n    'textarea': ReactDOMTextarea,\n\n    'html': createFullPageComponent('html'),\n    'head': createFullPageComponent('head'),\n    'body': createFullPageComponent('body')\n  });\n\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);\n  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);\n\n  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');\n\n  ReactInjection.Updates.injectReconcileTransaction(\n    ReactReconcileTransaction\n  );\n  ReactInjection.Updates.injectBatchingStrategy(\n    ReactDefaultBatchingStrategy\n  );\n\n  ReactInjection.RootIndex.injectCreateReactRootIndex(\n    ExecutionEnvironment.canUseDOM ?\n      ClientReactRootIndex.createReactRootIndex :\n      ServerReactRootIndex.createReactRootIndex\n  );\n\n  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);\n  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';\n    if ((/[?&]react_perf\\b/).test(url)) {\n      var ReactDefaultPerf = require(\"./ReactDefaultPerf\");\n      ReactDefaultPerf.start();\n    }\n  }\n}\n\nmodule.exports = {\n  inject: inject\n};\n\n}).call(this,require('_process'))\n\n},{\"./BeforeInputEventPlugin\":\"react/lib/BeforeInputEventPlugin\",\"./ChangeEventPlugin\":\"react/lib/ChangeEventPlugin\",\"./ClientReactRootIndex\":\"react/lib/ClientReactRootIndex\",\"./DefaultEventPluginOrder\":\"react/lib/DefaultEventPluginOrder\",\"./EnterLeaveEventPlugin\":\"react/lib/EnterLeaveEventPlugin\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./HTMLDOMPropertyConfig\":\"react/lib/HTMLDOMPropertyConfig\",\"./MobileSafariClickEventPlugin\":\"react/lib/MobileSafariClickEventPlugin\",\"./ReactBrowserComponentMixin\":\"react/lib/ReactBrowserComponentMixin\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactComponentBrowserEnvironment\":\"react/lib/ReactComponentBrowserEnvironment\",\"./ReactDOMButton\":\"react/lib/ReactDOMButton\",\"./ReactDOMComponent\":\"react/lib/ReactDOMComponent\",\"./ReactDOMForm\":\"react/lib/ReactDOMForm\",\"./ReactDOMIDOperations\":\"react/lib/ReactDOMIDOperations\",\"./ReactDOMIframe\":\"react/lib/ReactDOMIframe\",\"./ReactDOMImg\":\"react/lib/ReactDOMImg\",\"./ReactDOMInput\":\"react/lib/ReactDOMInput\",\"./ReactDOMOption\":\"react/lib/ReactDOMOption\",\"./ReactDOMSelect\":\"react/lib/ReactDOMSelect\",\"./ReactDOMTextComponent\":\"react/lib/ReactDOMTextComponent\",\"./ReactDOMTextarea\":\"react/lib/ReactDOMTextarea\",\"./ReactDefaultBatchingStrategy\":\"react/lib/ReactDefaultBatchingStrategy\",\"./ReactDefaultPerf\":\"react/lib/ReactDefaultPerf\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactEventListener\":\"react/lib/ReactEventListener\",\"./ReactInjection\":\"react/lib/ReactInjection\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactReconcileTransaction\":\"react/lib/ReactReconcileTransaction\",\"./SVGDOMPropertyConfig\":\"react/lib/SVGDOMPropertyConfig\",\"./SelectEventPlugin\":\"react/lib/SelectEventPlugin\",\"./ServerReactRootIndex\":\"react/lib/ServerReactRootIndex\",\"./SimpleEventPlugin\":\"react/lib/SimpleEventPlugin\",\"./createFullPageComponent\":\"react/lib/createFullPageComponent\",\"_process\":1}],\"react/lib/ReactDefaultPerfAnalysis\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerfAnalysis\n */\n\nvar assign = require(\"./Object.assign\");\n\n// Don't try to save users less than 1.2ms (a number I made up)\nvar DONT_CARE_THRESHOLD = 1.2;\nvar DOM_OPERATION_TYPES = {\n  '_mountImageIntoNode': 'set innerHTML',\n  INSERT_MARKUP: 'set innerHTML',\n  MOVE_EXISTING: 'move',\n  REMOVE_NODE: 'remove',\n  TEXT_CONTENT: 'set textContent',\n  'updatePropertyByID': 'update attribute',\n  'deletePropertyByID': 'delete attribute',\n  'updateStylesByID': 'update styles',\n  'updateInnerHTMLByID': 'set innerHTML',\n  'dangerouslyReplaceNodeWithMarkupByID': 'replace'\n};\n\nfunction getTotalTime(measurements) {\n  // TODO: return number of DOM ops? could be misleading.\n  // TODO: measure dropped frames after reconcile?\n  // TODO: log total time of each reconcile and the top-level component\n  // class that triggered it.\n  var totalTime = 0;\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    totalTime += measurement.totalTime;\n  }\n  return totalTime;\n}\n\nfunction getDOMSummary(measurements) {\n  var items = [];\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var id;\n\n    for (id in measurement.writes) {\n      measurement.writes[id].forEach(function(write) {\n        items.push({\n          id: id,\n          type: DOM_OPERATION_TYPES[write.type] || write.type,\n          args: write.args\n        });\n      });\n    }\n  }\n  return items;\n}\n\nfunction getExclusiveSummary(measurements) {\n  var candidates = {};\n  var displayName;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign(\n      {},\n      measurement.exclusive,\n      measurement.inclusive\n    );\n\n    for (var id in allIDs) {\n      displayName = measurement.displayNames[id].current;\n\n      candidates[displayName] = candidates[displayName] || {\n        componentName: displayName,\n        inclusive: 0,\n        exclusive: 0,\n        render: 0,\n        count: 0\n      };\n      if (measurement.render[id]) {\n        candidates[displayName].render += measurement.render[id];\n      }\n      if (measurement.exclusive[id]) {\n        candidates[displayName].exclusive += measurement.exclusive[id];\n      }\n      if (measurement.inclusive[id]) {\n        candidates[displayName].inclusive += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[displayName].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (displayName in candidates) {\n    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[displayName]);\n    }\n  }\n\n  arr.sort(function(a, b) {\n    return b.exclusive - a.exclusive;\n  });\n\n  return arr;\n}\n\nfunction getInclusiveSummary(measurements, onlyClean) {\n  var candidates = {};\n  var inclusiveKey;\n\n  for (var i = 0; i < measurements.length; i++) {\n    var measurement = measurements[i];\n    var allIDs = assign(\n      {},\n      measurement.exclusive,\n      measurement.inclusive\n    );\n    var cleanComponents;\n\n    if (onlyClean) {\n      cleanComponents = getUnchangedComponents(measurement);\n    }\n\n    for (var id in allIDs) {\n      if (onlyClean && !cleanComponents[id]) {\n        continue;\n      }\n\n      var displayName = measurement.displayNames[id];\n\n      // Inclusive time is not useful for many components without knowing where\n      // they are instantiated. So we aggregate inclusive time with both the\n      // owner and current displayName as the key.\n      inclusiveKey = displayName.owner + ' > ' + displayName.current;\n\n      candidates[inclusiveKey] = candidates[inclusiveKey] || {\n        componentName: inclusiveKey,\n        time: 0,\n        count: 0\n      };\n\n      if (measurement.inclusive[id]) {\n        candidates[inclusiveKey].time += measurement.inclusive[id];\n      }\n      if (measurement.counts[id]) {\n        candidates[inclusiveKey].count += measurement.counts[id];\n      }\n    }\n  }\n\n  // Now make a sorted array with the results.\n  var arr = [];\n  for (inclusiveKey in candidates) {\n    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {\n      arr.push(candidates[inclusiveKey]);\n    }\n  }\n\n  arr.sort(function(a, b) {\n    return b.time - a.time;\n  });\n\n  return arr;\n}\n\nfunction getUnchangedComponents(measurement) {\n  // For a given reconcile, look at which components did not actually\n  // render anything to the DOM and return a mapping of their ID to\n  // the amount of time it took to render the entire subtree.\n  var cleanComponents = {};\n  var dirtyLeafIDs = Object.keys(measurement.writes);\n  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);\n\n  for (var id in allIDs) {\n    var isDirty = false;\n    // For each component that rendered, see if a component that triggered\n    // a DOM op is in its subtree.\n    for (var i = 0; i < dirtyLeafIDs.length; i++) {\n      if (dirtyLeafIDs[i].indexOf(id) === 0) {\n        isDirty = true;\n        break;\n      }\n    }\n    if (!isDirty && measurement.counts[id] > 0) {\n      cleanComponents[id] = true;\n    }\n  }\n  return cleanComponents;\n}\n\nvar ReactDefaultPerfAnalysis = {\n  getExclusiveSummary: getExclusiveSummary,\n  getInclusiveSummary: getInclusiveSummary,\n  getDOMSummary: getDOMSummary,\n  getTotalTime: getTotalTime\n};\n\nmodule.exports = ReactDefaultPerfAnalysis;\n\n},{\"./Object.assign\":\"react/lib/Object.assign\"}],\"react/lib/ReactDefaultPerf\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar ReactDefaultPerfAnalysis = require(\"./ReactDefaultPerfAnalysis\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar performanceNow = require(\"./performanceNow\");\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nfunction addValue(obj, key, val) {\n  obj[key] = (obj[key] || 0) + val;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [], // last item in the list is the current one\n  _mountStack: [0],\n  _injected: false,\n\n  start: function() {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n\n  stop: function() {\n    ReactPerf.enableMeasure = false;\n  },\n\n  getLastMeasurements: function() {\n    return ReactDefaultPerf._allMeasurements;\n  },\n\n  printExclusive: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Exclusive mount time (ms)': roundFloat(item.exclusive),\n        'Exclusive render time (ms)': roundFloat(item.render),\n        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Render time per instance (ms)': roundFloat(item.render / item.count),\n        'Instances': item.count\n      };\n    }));\n    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct\n    // number.\n  },\n\n  printInclusive: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  getMeasurementsSummaryMap: function(measurements) {\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(\n      measurements,\n      true\n    );\n    return summary.map(function(item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    });\n  },\n\n  printWasted: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  printDOM: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function(item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result['type'] = item.type;\n      result['args'] = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  _recordWrite: function(id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes =\n      ReactDefaultPerf\n        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]\n        .writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n\n  measure: function(moduleName, fnName, func) {\n    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' ||\n          fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          render: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0\n        });\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ].totalTime = performanceNow() - start;\n        return rv;\n      } else if (fnName === '_mountImageIntoNode' ||\n          moduleName === 'ReactDOMIDOperations') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === '_mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function(update) {\n            var writeArgs = {};\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n            ReactDefaultPerf._recordWrite(\n              update.parentID,\n              update.type,\n              totalTime,\n              writeArgs\n            );\n          });\n        } else {\n          // basic format\n          ReactDefaultPerf._recordWrite(\n            args[0],\n            fnName,\n            totalTime,\n            Array.prototype.slice.call(args, 1)\n          );\n        }\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (\n        (// TODO: receiveComponent()?\n        (fnName === 'mountComponent' ||\n        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {\n\n        if (typeof this._currentElement.type === 'string') {\n          return func.apply(this, args);\n        }\n\n        var rootNodeID = fnName === 'mountComponent' ?\n          args[0] :\n          this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var isMount = fnName === 'mountComponent';\n\n        var mountStack = ReactDefaultPerf._mountStack;\n        var entry = ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ];\n\n        if (isRender) {\n          addValue(entry.counts, rootNodeID, 1);\n        } else if (isMount) {\n          mountStack.push(0);\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (isRender) {\n          addValue(entry.render, rootNodeID, totalTime);\n        } else if (isMount) {\n          var subMountTime = mountStack.pop();\n          mountStack[mountStack.length - 1] += totalTime;\n          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        } else {\n          addValue(entry.inclusive, rootNodeID, totalTime);\n        }\n\n        entry.displayNames[rootNodeID] = {\n          current: this.getName(),\n          owner: this._currentElement._owner ?\n            this._currentElement._owner.getName() :\n            '<root>'\n        };\n\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\n\nmodule.exports = ReactDefaultPerf;\n\n},{\"./DOMProperty\":\"react/lib/DOMProperty\",\"./ReactDefaultPerfAnalysis\":\"react/lib/ReactDefaultPerfAnalysis\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./performanceNow\":\"react/lib/performanceNow\"}],\"react/lib/ReactElementValidator\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElementValidator\n */\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactFragment = require(\"./ReactFragment\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");\n\nvar getIteratorFn = require(\"./getIteratorFn\");\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = ReactCurrentOwner.current.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nvar ownerHasKeyUseWarning = {};\n\nvar loggedTypeFailures = {};\n\nvar NUMERIC_PROPERTY_REGEX = /^\\d+$/;\n\n/**\n * Gets the instance's name for use in warnings.\n *\n * @internal\n * @return {?string} Display name or undefined\n */\nfunction getName(instance) {\n  var publicInstance = instance && instance.getPublicInstance();\n  if (!publicInstance) {\n    return undefined;\n  }\n  var constructor = publicInstance.constructor;\n  if (!constructor) {\n    return undefined;\n  }\n  return constructor.displayName || constructor.name || undefined;\n}\n\n/**\n * Gets the current owner's displayName for use in warnings.\n *\n * @internal\n * @return {?string} Display name or undefined\n */\nfunction getCurrentOwnerDisplayName() {\n  var current = ReactCurrentOwner.current;\n  return (\n    current && getName(current) || undefined\n  );\n}\n\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction validateExplicitKey(element, parentType) {\n  if (element._store.validated || element.key != null) {\n    return;\n  }\n  element._store.validated = true;\n\n  warnAndMonitorForKeyUse(\n    'Each child in an array or iterator should have a unique \"key\" prop.',\n    element,\n    parentType\n  );\n}\n\n/**\n * Warn if the key is being defined as an object property but has an incorrect\n * value.\n *\n * @internal\n * @param {string} name Property name of the key.\n * @param {ReactElement} element Component that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction validatePropertyKey(name, element, parentType) {\n  if (!NUMERIC_PROPERTY_REGEX.test(name)) {\n    return;\n  }\n  warnAndMonitorForKeyUse(\n    'Child objects should have non-numeric keys so ordering is preserved.',\n    element,\n    parentType\n  );\n}\n\n/**\n * Shared warning and monitoring code for the key warnings.\n *\n * @internal\n * @param {string} message The base warning that gets output.\n * @param {ReactElement} element Component that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction warnAndMonitorForKeyUse(message, element, parentType) {\n  var ownerName = getCurrentOwnerDisplayName();\n  var parentName = typeof parentType === 'string' ?\n    parentType : parentType.displayName || parentType.name;\n\n  var useName = ownerName || parentName;\n  var memoizer = ownerHasKeyUseWarning[message] || (\n    (ownerHasKeyUseWarning[message] = {})\n  );\n  if (memoizer.hasOwnProperty(useName)) {\n    return;\n  }\n  memoizer[useName] = true;\n\n  var parentOrOwnerAddendum =\n    ownerName ? (\" Check the render method of \" + ownerName + \".\") :\n    parentName ? (\" Check the React.render call using <\" + parentName + \">.\") :\n    '';\n\n  // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n  var childOwnerAddendum = '';\n  if (element &&\n      element._owner &&\n      element._owner !== ReactCurrentOwner.current) {\n    // Name of the component that originally created this child.\n    var childOwnerName = getName(element._owner);\n\n    childOwnerAddendum = (\" It was passed a child from \" + childOwnerName + \".\");\n  }\n\n  (\"production\" !== process.env.NODE_ENV ? warning(\n    false,\n    message + '%s%s See https://fb.me/react-warning-keys for more information.',\n    parentOrOwnerAddendum,\n    childOwnerAddendum\n  ) : null);\n}\n\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\nfunction validateChildKeys(node, parentType) {\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n      if (ReactElement.isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (ReactElement.isValidElement(node)) {\n    // This element was passed in a valid location.\n    node._store.validated = true;\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n    // Entry iterators provide implicit keys.\n    if (iteratorFn) {\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (ReactElement.isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    } else if (typeof node === 'object') {\n      var fragment = ReactFragment.extractIfFragment(node);\n      for (var key in fragment) {\n        if (fragment.hasOwnProperty(key)) {\n          validatePropertyKey(key, fragment[key], parentType);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Assert that the props are valid\n *\n * @param {string} componentName Name of the component for error messages.\n * @param {object} propTypes Map of prop name to a ReactPropType\n * @param {object} props\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @private\n */\nfunction checkPropTypes(componentName, propTypes, props, location) {\n  for (var propName in propTypes) {\n    if (propTypes.hasOwnProperty(propName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n      try {\n        // This is intentionally an invariant that gets caught. It's the same\n        // behavior as without this statement except with a better message.\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          typeof propTypes[propName] === 'function',\n          '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n          'React.PropTypes.',\n          componentName || 'React class',\n          ReactPropTypeLocationNames[location],\n          propName\n        ) : invariant(typeof propTypes[propName] === 'function'));\n        error = propTypes[propName](props, propName, componentName, location);\n      } catch (ex) {\n        error = ex;\n      }\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n\n        var addendum = getDeclarationErrorAddendum(this);\n        (\"production\" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);\n      }\n    }\n  }\n}\n\nvar warnedPropsMutations = {};\n\n/**\n * Warn about mutating props when setting `propName` on `element`.\n *\n * @param {string} propName The string key within props that was set\n * @param {ReactElement} element\n */\nfunction warnForPropsMutation(propName, element) {\n  var type = element.type;\n  var elementName = typeof type === 'string' ? type : type.displayName;\n  var ownerName = element._owner ?\n    element._owner.getPublicInstance().constructor.displayName : null;\n\n  var warningKey = propName + '|' + elementName + '|' + ownerName;\n  if (warnedPropsMutations.hasOwnProperty(warningKey)) {\n    return;\n  }\n  warnedPropsMutations[warningKey] = true;\n\n  var elementInfo = '';\n  if (elementName) {\n    elementInfo = ' <' + elementName + ' />';\n  }\n  var ownerInfo = '';\n  if (ownerName) {\n    ownerInfo = ' The element was created by ' + ownerName + '.';\n  }\n\n  (\"production\" !== process.env.NODE_ENV ? warning(\n    false,\n    'Don\\'t set .props.%s of the React component%s. Instead, specify the ' +\n    'correct value when initially creating the element or use ' +\n    'React.cloneElement to make a new element with updated props.%s',\n    propName,\n    elementInfo,\n    ownerInfo\n  ) : null);\n}\n\n// Inline Object.is polyfill\nfunction is(a, b) {\n  if (a !== a) {\n    // NaN\n    return b !== b;\n  }\n  if (a === 0 && b === 0) {\n    // +-0\n    return 1 / a === 1 / b;\n  }\n  return a === b;\n}\n\n/**\n * Given an element, check if its props have been mutated since element\n * creation (or the last call to this function). In particular, check if any\n * new props have been added, which we can't directly catch by defining warning\n * properties on the props object.\n *\n * @param {ReactElement} element\n */\nfunction checkAndWarnForMutatedProps(element) {\n  if (!element._store) {\n    // Element was created using `new ReactElement` directly or with\n    // `ReactElement.createElement`; skip mutation checking\n    return;\n  }\n\n  var originalProps = element._store.originalProps;\n  var props = element.props;\n\n  for (var propName in props) {\n    if (props.hasOwnProperty(propName)) {\n      if (!originalProps.hasOwnProperty(propName) ||\n          !is(originalProps[propName], props[propName])) {\n        warnForPropsMutation(propName, element);\n\n        // Copy over the new value so that the two props objects match again\n        originalProps[propName] = props[propName];\n      }\n    }\n  }\n}\n\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\nfunction validatePropTypes(element) {\n  if (element.type == null) {\n    // This has already warned. Don't throw.\n    return;\n  }\n  // Extract the component class from the element. Converts string types\n  // to a composite class which may have propTypes.\n  // TODO: Validating a string's propTypes is not decoupled from the\n  // rendering target which is problematic.\n  var componentClass = ReactNativeComponent.getComponentClassForElement(\n    element\n  );\n  var name = componentClass.displayName || componentClass.name;\n  if (componentClass.propTypes) {\n    checkPropTypes(\n      name,\n      componentClass.propTypes,\n      element.props,\n      ReactPropTypeLocations.prop\n    );\n  }\n  if (typeof componentClass.getDefaultProps === 'function') {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      componentClass.getDefaultProps.isReactClassApproved,\n      'getDefaultProps is only used on classic React.createClass ' +\n      'definitions. Use a static property named `defaultProps` instead.'\n    ) : null);\n  }\n}\n\nvar ReactElementValidator = {\n\n  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,\n\n  createElement: function(type, props, children) {\n    // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      type != null,\n      'React.createElement: type should not be null or undefined. It should ' +\n        'be a string (for DOM elements) or a ReactClass (for composite ' +\n        'components).'\n    ) : null);\n\n    var element = ReactElement.createElement.apply(this, arguments);\n\n    // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n    if (element == null) {\n      return element;\n    }\n\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n\n    validatePropTypes(element);\n\n    return element;\n  },\n\n  createFactory: function(type) {\n    var validatedFactory = ReactElementValidator.createElement.bind(\n      null,\n      type\n    );\n    // Legacy hook TODO: Warn if this is accessed\n    validatedFactory.type = type;\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      try {\n        Object.defineProperty(\n          validatedFactory,\n          'type',\n          {\n            enumerable: false,\n            get: function() {\n              (\"production\" !== process.env.NODE_ENV ? warning(\n                false,\n                'Factory.type is deprecated. Access the class directly ' +\n                'before passing it to createFactory.'\n              ) : null);\n              Object.defineProperty(this, 'type', {\n                value: type\n              });\n              return type;\n            }\n          }\n        );\n      } catch (x) {\n        // IE will fail on defineProperty (es5-shim/sham too)\n      }\n    }\n\n\n    return validatedFactory;\n  },\n\n  cloneElement: function(element, props, children) {\n    var newElement = ReactElement.cloneElement.apply(this, arguments);\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], newElement.type);\n    }\n    validatePropTypes(newElement);\n    return newElement;\n  }\n\n};\n\nmodule.exports = ReactElementValidator;\n\n}).call(this,require('_process'))\n\n},{\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactFragment\":\"react/lib/ReactFragment\",\"./ReactNativeComponent\":\"react/lib/ReactNativeComponent\",\"./ReactPropTypeLocationNames\":\"react/lib/ReactPropTypeLocationNames\",\"./ReactPropTypeLocations\":\"react/lib/ReactPropTypeLocations\",\"./getIteratorFn\":\"react/lib/getIteratorFn\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactElement\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElement\n */\n\n'use strict';\n\nvar ReactContext = require(\"./ReactContext\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\n\nvar assign = require(\"./Object.assign\");\nvar warning = require(\"./warning\");\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true\n};\n\n/**\n * Warn for mutations.\n *\n * @internal\n * @param {object} object\n * @param {string} key\n */\nfunction defineWarningProperty(object, key) {\n  Object.defineProperty(object, key, {\n\n    configurable: false,\n    enumerable: true,\n\n    get: function() {\n      if (!this._store) {\n        return null;\n      }\n      return this._store[key];\n    },\n\n    set: function(value) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        false,\n        'Don\\'t set the %s property of the React element. Instead, ' +\n        'specify the correct value when initially creating the element.',\n        key\n      ) : null);\n      this._store[key] = value;\n    }\n\n  });\n}\n\n/**\n * This is updated to true if the membrane is successfully created.\n */\nvar useMutationMembrane = false;\n\n/**\n * Warn for mutations.\n *\n * @internal\n * @param {object} element\n */\nfunction defineMutationMembrane(prototype) {\n  try {\n    var pseudoFrozenProperties = {\n      props: true\n    };\n    for (var key in pseudoFrozenProperties) {\n      defineWarningProperty(prototype, key);\n    }\n    useMutationMembrane = true;\n  } catch (x) {\n    // IE will fail on defineProperty\n  }\n}\n\n/**\n * Base constructor for all React elements. This is only used to make this\n * work with a dynamic instanceof check. Nothing should live on this prototype.\n *\n * @param {*} type\n * @param {string|object} ref\n * @param {*} key\n * @param {*} props\n * @internal\n */\nvar ReactElement = function(type, key, ref, owner, context, props) {\n  // Built-in properties that belong on the element\n  this.type = type;\n  this.key = key;\n  this.ref = ref;\n\n  // Record the component responsible for creating this element.\n  this._owner = owner;\n\n  // TODO: Deprecate withContext, and then the context becomes accessible\n  // through the owner.\n  this._context = context;\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    // The validation flag and props are currently mutative. We put them on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    this._store = {props: props, originalProps: assign({}, props)};\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    try {\n      Object.defineProperty(this._store, 'validated', {\n        configurable: false,\n        enumerable: false,\n        writable: true\n      });\n    } catch (x) {\n    }\n    this._store.validated = false;\n\n    // We're not allowed to set props directly on the object so we early\n    // return and rely on the prototype membrane to forward to the backing\n    // store.\n    if (useMutationMembrane) {\n      Object_freeze(this);\n      return;\n    }\n  }\n\n  this.props = props;\n};\n\n// We intentionally don't expose the function on the constructor property.\n// ReactElement should be indistinguishable from a plain object.\nReactElement.prototype = {\n  _isReactElement: true\n};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  defineMutationMembrane(ReactElement.prototype);\n}\n\nReactElement.createElement = function(type, config, children) {\n  var propName;\n\n  // Reserved names are extracted\n  var props = {};\n\n  var key = null;\n  var ref = null;\n\n  if (config != null) {\n    ref = config.ref === undefined ? null : config.ref;\n    key = config.key === undefined ? null : '' + config.key;\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (config.hasOwnProperty(propName) &&\n          !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (typeof props[propName] === 'undefined') {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return new ReactElement(\n    type,\n    key,\n    ref,\n    ReactCurrentOwner.current,\n    ReactContext.current,\n    props\n  );\n};\n\nReactElement.createFactory = function(type) {\n  var factory = ReactElement.createElement.bind(null, type);\n  // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. <Foo />.type === Foo.type.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  // Legacy hook TODO: Warn if this is accessed\n  factory.type = type;\n  return factory;\n};\n\nReactElement.cloneAndReplaceProps = function(oldElement, newProps) {\n  var newElement = new ReactElement(\n    oldElement.type,\n    oldElement.key,\n    oldElement.ref,\n    oldElement._owner,\n    oldElement._context,\n    newProps\n  );\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    // If the key on the original is valid, then the clone is valid\n    newElement._store.validated = oldElement._store.validated;\n  }\n  return newElement;\n};\n\nReactElement.cloneElement = function(element, config, children) {\n  var propName;\n\n  // Original props are copied\n  var props = assign({}, element.props);\n\n  // Reserved names are extracted\n  var key = element.key;\n  var ref = element.ref;\n\n  // Owner will be preserved, unless ref is overridden\n  var owner = element._owner;\n\n  if (config != null) {\n    if (config.ref !== undefined) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n    if (config.key !== undefined) {\n      key = '' + config.key;\n    }\n    // Remaining properties override existing props\n    for (propName in config) {\n      if (config.hasOwnProperty(propName) &&\n          !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  return new ReactElement(\n    element.type,\n    key,\n    ref,\n    owner,\n    element._context,\n    props\n  );\n};\n\n/**\n * @param {?object} object\n * @return {boolean} True if `object` is a valid component.\n * @final\n */\nReactElement.isValidElement = function(object) {\n  // ReactTestUtils is often used outside of beforeEach where as React is\n  // within it. This leads to two different instances of React on the same\n  // page. To identify a element from a different React instance we use\n  // a flag instead of an instanceof check.\n  var isElement = !!(object && object._isReactElement);\n  // if (isElement && !(object instanceof ReactElement)) {\n  // This is an indicator that you're using multiple versions of React at the\n  // same time. This will screw with ownership and stuff. Fix it, please.\n  // TODO: We could possibly warn here.\n  // }\n  return isElement;\n};\n\nmodule.exports = ReactElement;\n\n}).call(this,require('_process'))\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactContext\":\"react/lib/ReactContext\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactEmptyComponent\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEmptyComponent\n */\n\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\n\nvar invariant = require(\"./invariant\");\n\nvar component;\n// This registry keeps track of the React IDs of the components that rendered to\n// `null` (in reality a placeholder such as `noscript`)\nvar nullComponentIDsRegistry = {};\n\nvar ReactEmptyComponentInjection = {\n  injectEmptyComponent: function(emptyComponent) {\n    component = ReactElement.createFactory(emptyComponent);\n  }\n};\n\nvar ReactEmptyComponentType = function() {};\nReactEmptyComponentType.prototype.componentDidMount = function() {\n  var internalInstance = ReactInstanceMap.get(this);\n  // TODO: Make sure we run these methods in the correct order, we shouldn't\n  // need this check. We're going to assume if we're here it means we ran\n  // componentWillUnmount already so there is no internal instance (it gets\n  // removed as part of the unmounting process).\n  if (!internalInstance) {\n    return;\n  }\n  registerNullComponentID(internalInstance._rootNodeID);\n};\nReactEmptyComponentType.prototype.componentWillUnmount = function() {\n  var internalInstance = ReactInstanceMap.get(this);\n  // TODO: Get rid of this check. See TODO in componentDidMount.\n  if (!internalInstance) {\n    return;\n  }\n  deregisterNullComponentID(internalInstance._rootNodeID);\n};\nReactEmptyComponentType.prototype.render = function() {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    component,\n    'Trying to return null from a render, but no null placeholder component ' +\n    'was injected.'\n  ) : invariant(component));\n  return component();\n};\n\nvar emptyElement = ReactElement.createElement(ReactEmptyComponentType);\n\n/**\n * Mark the component as having rendered to null.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction registerNullComponentID(id) {\n  nullComponentIDsRegistry[id] = true;\n}\n\n/**\n * Unmark the component as having rendered to null: it renders to something now.\n * @param {string} id Component's `_rootNodeID`.\n */\nfunction deregisterNullComponentID(id) {\n  delete nullComponentIDsRegistry[id];\n}\n\n/**\n * @param {string} id Component's `_rootNodeID`.\n * @return {boolean} True if the component is rendered to null.\n */\nfunction isNullComponentID(id) {\n  return !!nullComponentIDsRegistry[id];\n}\n\nvar ReactEmptyComponent = {\n  emptyElement: emptyElement,\n  injection: ReactEmptyComponentInjection,\n  isNullComponentID: isNullComponentID\n};\n\nmodule.exports = ReactEmptyComponent;\n\n}).call(this,require('_process'))\n\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactErrorUtils\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactErrorUtils\n * @typechecks\n */\n\n\"use strict\";\n\nvar ReactErrorUtils = {\n  /**\n   * Creates a guarded version of a function. This is supposed to make debugging\n   * of event handlers easier. To aid debugging with the browser's debugger,\n   * this currently simply returns the original function.\n   *\n   * @param {function} func Function to be executed\n   * @param {string} name The name of the guard\n   * @return {function}\n   */\n  guard: function(func, name) {\n    return func;\n  }\n};\n\nmodule.exports = ReactErrorUtils;\n\n},{}],\"react/lib/ReactEventEmitterMixin\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEventEmitterMixin\n */\n\n'use strict';\n\nvar EventPluginHub = require(\"./EventPluginHub\");\n\nfunction runEventQueueInBatch(events) {\n  EventPluginHub.enqueueEvents(events);\n  EventPluginHub.processEventQueue();\n}\n\nvar ReactEventEmitterMixin = {\n\n  /**\n   * Streams a fired top-level event to `EventPluginHub` where plugins have the\n   * opportunity to create `ReactEvent`s to be dispatched.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {object} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native environment event.\n   */\n  handleTopLevel: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var events = EventPluginHub.extractEvents(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent\n    );\n\n    runEventQueueInBatch(events);\n  }\n};\n\nmodule.exports = ReactEventEmitterMixin;\n\n},{\"./EventPluginHub\":\"react/lib/EventPluginHub\"}],\"react/lib/ReactEventListener\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactEventListener\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventListener = require(\"./EventListener\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar PooledClass = require(\"./PooledClass\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar getEventTarget = require(\"./getEventTarget\");\nvar getUnboundedScrollPosition = require(\"./getUnboundedScrollPosition\");\n\n/**\n * Finds the parent React component of `node`.\n *\n * @param {*} node\n * @return {?DOMEventTarget} Parent container, or `null` if the specified node\n *                           is not nested.\n */\nfunction findParent(node) {\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM\n  // traversal, but caching is difficult to do correctly without using a\n  // mutation observer to listen for all DOM changes.\n  var nodeID = ReactMount.getID(node);\n  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);\n  var container = ReactMount.findReactContainerForID(rootID);\n  var parent = ReactMount.getFirstReactDOM(container);\n  return parent;\n}\n\n// Used to store ancestor hierarchy in top level callback\nfunction TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {\n  this.topLevelType = topLevelType;\n  this.nativeEvent = nativeEvent;\n  this.ancestors = [];\n}\nassign(TopLevelCallbackBookKeeping.prototype, {\n  destructor: function() {\n    this.topLevelType = null;\n    this.nativeEvent = null;\n    this.ancestors.length = 0;\n  }\n});\nPooledClass.addPoolingTo(\n  TopLevelCallbackBookKeeping,\n  PooledClass.twoArgumentPooler\n);\n\nfunction handleTopLevelImpl(bookKeeping) {\n  var topLevelTarget = ReactMount.getFirstReactDOM(\n    getEventTarget(bookKeeping.nativeEvent)\n  ) || window;\n\n  // Loop through the hierarchy, in case there's any nested components.\n  // It's important that we build the array of ancestors before calling any\n  // event handlers, because event handlers can modify the DOM, leading to\n  // inconsistencies with ReactMount's node cache. See #1105.\n  var ancestor = topLevelTarget;\n  while (ancestor) {\n    bookKeeping.ancestors.push(ancestor);\n    ancestor = findParent(ancestor);\n  }\n\n  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {\n    topLevelTarget = bookKeeping.ancestors[i];\n    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';\n    ReactEventListener._handleTopLevel(\n      bookKeeping.topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      bookKeeping.nativeEvent\n    );\n  }\n}\n\nfunction scrollValueMonitor(cb) {\n  var scrollPosition = getUnboundedScrollPosition(window);\n  cb(scrollPosition);\n}\n\nvar ReactEventListener = {\n  _enabled: true,\n  _handleTopLevel: null,\n\n  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,\n\n  setHandleTopLevel: function(handleTopLevel) {\n    ReactEventListener._handleTopLevel = handleTopLevel;\n  },\n\n  setEnabled: function(enabled) {\n    ReactEventListener._enabled = !!enabled;\n  },\n\n  isEnabled: function() {\n    return ReactEventListener._enabled;\n  },\n\n\n  /**\n   * Traps top-level events by using event bubbling.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {\n    var element = handle;\n    if (!element) {\n      return null;\n    }\n    return EventListener.listen(\n      element,\n      handlerBaseName,\n      ReactEventListener.dispatchEvent.bind(null, topLevelType)\n    );\n  },\n\n  /**\n   * Traps a top-level event by using event capturing.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} handle Element on which to attach listener.\n   * @return {object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {\n    var element = handle;\n    if (!element) {\n      return null;\n    }\n    return EventListener.capture(\n      element,\n      handlerBaseName,\n      ReactEventListener.dispatchEvent.bind(null, topLevelType)\n    );\n  },\n\n  monitorScrollValue: function(refresh) {\n    var callback = scrollValueMonitor.bind(null, refresh);\n    EventListener.listen(window, 'scroll', callback);\n  },\n\n  dispatchEvent: function(topLevelType, nativeEvent) {\n    if (!ReactEventListener._enabled) {\n      return;\n    }\n\n    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(\n      topLevelType,\n      nativeEvent\n    );\n    try {\n      // Event queue being processed in the same cycle allows\n      // `preventDefault`.\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);\n    } finally {\n      TopLevelCallbackBookKeeping.release(bookKeeping);\n    }\n  }\n};\n\nmodule.exports = ReactEventListener;\n\n},{\"./EventListener\":\"react/lib/EventListener\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./getEventTarget\":\"react/lib/getEventTarget\",\"./getUnboundedScrollPosition\":\"react/lib/getUnboundedScrollPosition\"}],\"react/lib/ReactFragment\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n* @providesModule ReactFragment\n*/\n\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar warning = require(\"./warning\");\n\n/**\n * We used to allow keyed objects to serve as a collection of ReactElements,\n * or nested sets. This allowed us a way to explicitly key a set a fragment of\n * components. This is now being replaced with an opaque data structure.\n * The upgrade path is to call React.addons.createFragment({ key: value }) to\n * create a keyed fragment. The resulting data structure is opaque, for now.\n */\n\nif (\"production\" !== process.env.NODE_ENV) {\n  var fragmentKey = '_reactFragment';\n  var didWarnKey = '_reactDidWarn';\n  var canWarnForReactFragment = false;\n\n  try {\n    // Feature test. Don't even try to issue this warning if we can't use\n    // enumerable: false.\n\n    var dummy = function() {\n      return 1;\n    };\n\n    Object.defineProperty(\n      {},\n      fragmentKey,\n      {enumerable: false, value: true}\n    );\n\n    Object.defineProperty(\n      {},\n      'key',\n      {enumerable: true, get: dummy}\n    );\n\n    canWarnForReactFragment = true;\n  } catch (x) { }\n\n  var proxyPropertyAccessWithWarning = function(obj, key) {\n    Object.defineProperty(obj, key, {\n      enumerable: true,\n      get: function() {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          this[didWarnKey],\n          'A ReactFragment is an opaque type. Accessing any of its ' +\n          'properties is deprecated. Pass it to one of the React.Children ' +\n          'helpers.'\n        ) : null);\n        this[didWarnKey] = true;\n        return this[fragmentKey][key];\n      },\n      set: function(value) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          this[didWarnKey],\n          'A ReactFragment is an immutable opaque type. Mutating its ' +\n          'properties is deprecated.'\n        ) : null);\n        this[didWarnKey] = true;\n        this[fragmentKey][key] = value;\n      }\n    });\n  };\n\n  var issuedWarnings = {};\n\n  var didWarnForFragment = function(fragment) {\n    // We use the keys and the type of the value as a heuristic to dedupe the\n    // warning to avoid spamming too much.\n    var fragmentCacheKey = '';\n    for (var key in fragment) {\n      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';\n    }\n    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];\n    issuedWarnings[fragmentCacheKey] = true;\n    return alreadyWarnedOnce;\n  };\n}\n\nvar ReactFragment = {\n  // Wrap a keyed object in an opaque proxy that warns you if you access any\n  // of its properties.\n  create: function(object) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (typeof object !== 'object' || !object || Array.isArray(object)) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          false,\n          'React.addons.createFragment only accepts a single object.',\n          object\n        ) : null);\n        return object;\n      }\n      if (ReactElement.isValidElement(object)) {\n        (\"production\" !== process.env.NODE_ENV ? warning(\n          false,\n          'React.addons.createFragment does not accept a ReactElement ' +\n          'without a wrapper object.'\n        ) : null);\n        return object;\n      }\n      if (canWarnForReactFragment) {\n        var proxy = {};\n        Object.defineProperty(proxy, fragmentKey, {\n          enumerable: false,\n          value: object\n        });\n        Object.defineProperty(proxy, didWarnKey, {\n          writable: true,\n          enumerable: false,\n          value: false\n        });\n        for (var key in object) {\n          proxyPropertyAccessWithWarning(proxy, key);\n        }\n        Object.preventExtensions(proxy);\n        return proxy;\n      }\n    }\n    return object;\n  },\n  // Extract the original keyed object from the fragment opaque type. Warn if\n  // a plain object is passed here.\n  extract: function(fragment) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (canWarnForReactFragment) {\n        if (!fragment[fragmentKey]) {\n          (\"production\" !== process.env.NODE_ENV ? warning(\n            didWarnForFragment(fragment),\n            'Any use of a keyed object should be wrapped in ' +\n            'React.addons.createFragment(object) before being passed as a ' +\n            'child.'\n          ) : null);\n          return fragment;\n        }\n        return fragment[fragmentKey];\n      }\n    }\n    return fragment;\n  },\n  // Check if this is a fragment and if so, extract the keyed object. If it\n  // is a fragment-like object, warn that it should be wrapped. Ignore if we\n  // can't determine what kind of object this is.\n  extractIfFragment: function(fragment) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (canWarnForReactFragment) {\n        // If it is the opaque type, return the keyed object.\n        if (fragment[fragmentKey]) {\n          return fragment[fragmentKey];\n        }\n        // Otherwise, check each property if it has an element, if it does\n        // it is probably meant as a fragment, so we can warn early. Defer,\n        // the warning to extract.\n        for (var key in fragment) {\n          if (fragment.hasOwnProperty(key) &&\n              ReactElement.isValidElement(fragment[key])) {\n            // This looks like a fragment object, we should provide an\n            // early warning.\n            return ReactFragment.extract(fragment);\n          }\n        }\n      }\n    }\n    return fragment;\n  }\n};\n\nmodule.exports = ReactFragment;\n\n}).call(this,require('_process'))\n\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactInjection\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInjection\n */\n\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");\nvar ReactDOMComponent = require(\"./ReactDOMComponent\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactRootIndex = require(\"./ReactRootIndex\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar ReactInjection = {\n  Component: ReactComponentEnvironment.injection,\n  Class: ReactClass.injection,\n  DOMComponent: ReactDOMComponent.injection,\n  DOMProperty: DOMProperty.injection,\n  EmptyComponent: ReactEmptyComponent.injection,\n  EventPluginHub: EventPluginHub.injection,\n  EventEmitter: ReactBrowserEventEmitter.injection,\n  NativeComponent: ReactNativeComponent.injection,\n  Perf: ReactPerf.injection,\n  RootIndex: ReactRootIndex.injection,\n  Updates: ReactUpdates.injection\n};\n\nmodule.exports = ReactInjection;\n\n},{\"./DOMProperty\":\"react/lib/DOMProperty\",\"./EventPluginHub\":\"react/lib/EventPluginHub\",\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactComponentEnvironment\":\"react/lib/ReactComponentEnvironment\",\"./ReactDOMComponent\":\"react/lib/ReactDOMComponent\",\"./ReactEmptyComponent\":\"react/lib/ReactEmptyComponent\",\"./ReactNativeComponent\":\"react/lib/ReactNativeComponent\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./ReactRootIndex\":\"react/lib/ReactRootIndex\",\"./ReactUpdates\":\"react/lib/ReactUpdates\"}],\"react/lib/ReactInputSelection\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInputSelection\n */\n\n'use strict';\n\nvar ReactDOMSelection = require(\"./ReactDOMSelection\");\n\nvar containsNode = require(\"./containsNode\");\nvar focusNode = require(\"./focusNode\");\nvar getActiveElement = require(\"./getActiveElement\");\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\nvar ReactInputSelection = {\n\n  hasSelectionCapabilities: function(elem) {\n    return elem && (\n      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||\n      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')\n    );\n  },\n\n  getSelectionInformation: function() {\n    var focusedElem = getActiveElement();\n    return {\n      focusedElem: focusedElem,\n      selectionRange:\n          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?\n          ReactInputSelection.getSelection(focusedElem) :\n          null\n    };\n  },\n\n  /**\n   * @restoreSelection: If any selection information was potentially lost,\n   * restore it. This is useful when performing operations that could remove dom\n   * nodes and place them back in, resulting in focus being lost.\n   */\n  restoreSelection: function(priorSelectionInformation) {\n    var curFocusedElem = getActiveElement();\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\n    if (curFocusedElem !== priorFocusedElem &&\n        isInDocument(priorFocusedElem)) {\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\n        ReactInputSelection.setSelection(\n          priorFocusedElem,\n          priorSelectionRange\n        );\n      }\n      focusNode(priorFocusedElem);\n    }\n  },\n\n  /**\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\n   * contentEditable node.\n   * -@input: Look up selection bounds of this input\n   * -@return {start: selectionStart, end: selectionEnd}\n   */\n  getSelection: function(input) {\n    var selection;\n\n    if ('selectionStart' in input) {\n      // Modern browser with input or textarea.\n      selection = {\n        start: input.selectionStart,\n        end: input.selectionEnd\n      };\n    } else if (document.selection && input.nodeName === 'INPUT') {\n      // IE8 input.\n      var range = document.selection.createRange();\n      // There can only be one selection per document in IE, so it must\n      // be in our element.\n      if (range.parentElement() === input) {\n        selection = {\n          start: -range.moveStart('character', -input.value.length),\n          end: -range.moveEnd('character', -input.value.length)\n        };\n      }\n    } else {\n      // Content editable or old IE textarea.\n      selection = ReactDOMSelection.getOffsets(input);\n    }\n\n    return selection || {start: 0, end: 0};\n  },\n\n  /**\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\n   * the input.\n   * -@input     Set selection bounds of this input or textarea\n   * -@offsets   Object of same form that is returned from get*\n   */\n  setSelection: function(input, offsets) {\n    var start = offsets.start;\n    var end = offsets.end;\n    if (typeof end === 'undefined') {\n      end = start;\n    }\n\n    if ('selectionStart' in input) {\n      input.selectionStart = start;\n      input.selectionEnd = Math.min(end, input.value.length);\n    } else if (document.selection && input.nodeName === 'INPUT') {\n      var range = input.createTextRange();\n      range.collapse(true);\n      range.moveStart('character', start);\n      range.moveEnd('character', end - start);\n      range.select();\n    } else {\n      ReactDOMSelection.setOffsets(input, offsets);\n    }\n  }\n};\n\nmodule.exports = ReactInputSelection;\n\n},{\"./ReactDOMSelection\":\"react/lib/ReactDOMSelection\",\"./containsNode\":\"react/lib/containsNode\",\"./focusNode\":\"react/lib/focusNode\",\"./getActiveElement\":\"react/lib/getActiveElement\"}],\"react/lib/ReactInstanceHandles\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInstanceHandles\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactRootIndex = require(\"./ReactRootIndex\");\n\nvar invariant = require(\"./invariant\");\n\nvar SEPARATOR = '.';\nvar SEPARATOR_LENGTH = SEPARATOR.length;\n\n/**\n * Maximum depth of traversals before we consider the possibility of a bad ID.\n */\nvar MAX_TREE_DEPTH = 100;\n\n/**\n * Creates a DOM ID prefix to use when mounting React components.\n *\n * @param {number} index A unique integer\n * @return {string} React root ID.\n * @internal\n */\nfunction getReactRootIDString(index) {\n  return SEPARATOR + index.toString(36);\n}\n\n/**\n * Checks if a character in the supplied ID is a separator or the end.\n *\n * @param {string} id A React DOM ID.\n * @param {number} index Index of the character to check.\n * @return {boolean} True if the character is a separator or end of the ID.\n * @private\n */\nfunction isBoundary(id, index) {\n  return id.charAt(index) === SEPARATOR || index === id.length;\n}\n\n/**\n * Checks if the supplied string is a valid React DOM ID.\n *\n * @param {string} id A React DOM ID, maybe.\n * @return {boolean} True if the string is a valid React DOM ID.\n * @private\n */\nfunction isValidID(id) {\n  return id === '' || (\n    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR\n  );\n}\n\n/**\n * Checks if the first ID is an ancestor of or equal to the second ID.\n *\n * @param {string} ancestorID\n * @param {string} descendantID\n * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.\n * @internal\n */\nfunction isAncestorIDOf(ancestorID, descendantID) {\n  return (\n    descendantID.indexOf(ancestorID) === 0 &&\n    isBoundary(descendantID, ancestorID.length)\n  );\n}\n\n/**\n * Gets the parent ID of the supplied React DOM ID, `id`.\n *\n * @param {string} id ID of a component.\n * @return {string} ID of the parent, or an empty string.\n * @private\n */\nfunction getParentID(id) {\n  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';\n}\n\n/**\n * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the\n * supplied `destinationID`. If they are equal, the ID is returned.\n *\n * @param {string} ancestorID ID of an ancestor node of `destinationID`.\n * @param {string} destinationID ID of the destination node.\n * @return {string} Next ID on the path from `ancestorID` to `destinationID`.\n * @private\n */\nfunction getNextDescendantID(ancestorID, destinationID) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    isValidID(ancestorID) && isValidID(destinationID),\n    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',\n    ancestorID,\n    destinationID\n  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    isAncestorIDOf(ancestorID, destinationID),\n    'getNextDescendantID(...): React has made an invalid assumption about ' +\n    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',\n    ancestorID,\n    destinationID\n  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));\n  if (ancestorID === destinationID) {\n    return ancestorID;\n  }\n  // Skip over the ancestor and the immediate separator. Traverse until we hit\n  // another separator or we reach the end of `destinationID`.\n  var start = ancestorID.length + SEPARATOR_LENGTH;\n  var i;\n  for (i = start; i < destinationID.length; i++) {\n    if (isBoundary(destinationID, i)) {\n      break;\n    }\n  }\n  return destinationID.substr(0, i);\n}\n\n/**\n * Gets the nearest common ancestor ID of two IDs.\n *\n * Using this ID scheme, the nearest common ancestor ID is the longest common\n * prefix of the two IDs that immediately preceded a \"marker\" in both strings.\n *\n * @param {string} oneID\n * @param {string} twoID\n * @return {string} Nearest common ancestor ID, or the empty string if none.\n * @private\n */\nfunction getFirstCommonAncestorID(oneID, twoID) {\n  var minLength = Math.min(oneID.length, twoID.length);\n  if (minLength === 0) {\n    return '';\n  }\n  var lastCommonMarkerIndex = 0;\n  // Use `<=` to traverse until the \"EOL\" of the shorter string.\n  for (var i = 0; i <= minLength; i++) {\n    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {\n      lastCommonMarkerIndex = i;\n    } else if (oneID.charAt(i) !== twoID.charAt(i)) {\n      break;\n    }\n  }\n  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    isValidID(longestCommonID),\n    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',\n    oneID,\n    twoID,\n    longestCommonID\n  ) : invariant(isValidID(longestCommonID)));\n  return longestCommonID;\n}\n\n/**\n * Traverses the parent path between two IDs (either up or down). The IDs must\n * not be the same, and there must exist a parent path between them. If the\n * callback returns `false`, traversal is stopped.\n *\n * @param {?string} start ID at which to start traversal.\n * @param {?string} stop ID at which to end traversal.\n * @param {function} cb Callback to invoke each ID with.\n * @param {?boolean} skipFirst Whether or not to skip the first node.\n * @param {?boolean} skipLast Whether or not to skip the last node.\n * @private\n */\nfunction traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {\n  start = start || '';\n  stop = stop || '';\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    start !== stop,\n    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',\n    start\n  ) : invariant(start !== stop));\n  var traverseUp = isAncestorIDOf(stop, start);\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    traverseUp || isAncestorIDOf(start, stop),\n    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +\n    'not have a parent path.',\n    start,\n    stop\n  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));\n  // Traverse from `start` to `stop` one depth at a time.\n  var depth = 0;\n  var traverse = traverseUp ? getParentID : getNextDescendantID;\n  for (var id = start; /* until break */; id = traverse(id, stop)) {\n    var ret;\n    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {\n      ret = cb(id, traverseUp, arg);\n    }\n    if (ret === false || id === stop) {\n      // Only break //after// visiting `stop`.\n      break;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      depth++ < MAX_TREE_DEPTH,\n      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +\n      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',\n      start, stop\n    ) : invariant(depth++ < MAX_TREE_DEPTH));\n  }\n}\n\n/**\n * Manages the IDs assigned to DOM representations of React components. This\n * uses a specific scheme in order to traverse the DOM efficiently (e.g. in\n * order to simulate events).\n *\n * @internal\n */\nvar ReactInstanceHandles = {\n\n  /**\n   * Constructs a React root ID\n   * @return {string} A React root ID.\n   */\n  createReactRootID: function() {\n    return getReactRootIDString(ReactRootIndex.createReactRootIndex());\n  },\n\n  /**\n   * Constructs a React ID by joining a root ID with a name.\n   *\n   * @param {string} rootID Root ID of a parent component.\n   * @param {string} name A component's name (as flattened children).\n   * @return {string} A React ID.\n   * @internal\n   */\n  createReactID: function(rootID, name) {\n    return rootID + name;\n  },\n\n  /**\n   * Gets the DOM ID of the React component that is the root of the tree that\n   * contains the React component with the supplied DOM ID.\n   *\n   * @param {string} id DOM ID of a React component.\n   * @return {?string} DOM ID of the React component that is the root.\n   * @internal\n   */\n  getReactRootIDFromNodeID: function(id) {\n    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {\n      var index = id.indexOf(SEPARATOR, 1);\n      return index > -1 ? id.substr(0, index) : id;\n    }\n    return null;\n  },\n\n  /**\n   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that\n   * should would receive a `mouseEnter` or `mouseLeave` event.\n   *\n   * NOTE: Does not invoke the callback on the nearest common ancestor because\n   * nothing \"entered\" or \"left\" that element.\n   *\n   * @param {string} leaveID ID being left.\n   * @param {string} enterID ID being entered.\n   * @param {function} cb Callback to invoke on each entered/left ID.\n   * @param {*} upArg Argument to invoke the callback with on left IDs.\n   * @param {*} downArg Argument to invoke the callback with on entered IDs.\n   * @internal\n   */\n  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {\n    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);\n    if (ancestorID !== leaveID) {\n      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);\n    }\n    if (ancestorID !== enterID) {\n      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);\n    }\n  },\n\n  /**\n   * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseTwoPhase: function(targetID, cb, arg) {\n    if (targetID) {\n      traverseParentPath('', targetID, cb, arg, true, false);\n      traverseParentPath(targetID, '', cb, arg, false, true);\n    }\n  },\n\n  /**\n   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For\n   * example, passing `.0.$row-0.1` would result in `cb` getting called\n   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.\n   *\n   * NOTE: This traversal happens on IDs without touching the DOM.\n   *\n   * @param {string} targetID ID of the target node.\n   * @param {function} cb Callback to invoke.\n   * @param {*} arg Argument to invoke the callback with.\n   * @internal\n   */\n  traverseAncestors: function(targetID, cb, arg) {\n    traverseParentPath('', targetID, cb, arg, true, false);\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _getFirstCommonAncestorID: getFirstCommonAncestorID,\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _getNextDescendantID: getNextDescendantID,\n\n  isAncestorIDOf: isAncestorIDOf,\n\n  SEPARATOR: SEPARATOR\n\n};\n\nmodule.exports = ReactInstanceHandles;\n\n}).call(this,require('_process'))\n\n},{\"./ReactRootIndex\":\"react/lib/ReactRootIndex\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactInstanceMap\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInstanceMap\n */\n\n'use strict';\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n */\n\n// TODO: Replace this with ES6: var ReactInstanceMap = new Map();\nvar ReactInstanceMap = {\n\n  /**\n   * This API should be called `delete` but we'd have to make sure to always\n   * transform these to strings for IE support. When this transform is fully\n   * supported we can rename it.\n   */\n  remove: function(key) {\n    key._reactInternalInstance = undefined;\n  },\n\n  get: function(key) {\n    return key._reactInternalInstance;\n  },\n\n  has: function(key) {\n    return key._reactInternalInstance !== undefined;\n  },\n\n  set: function(key, value) {\n    key._reactInternalInstance = value;\n  }\n\n};\n\nmodule.exports = ReactInstanceMap;\n\n},{}],\"react/lib/ReactLifeCycle\":[function(require,module,exports){\n/**\n * Copyright 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactLifeCycle\n */\n\n'use strict';\n\n/**\n * This module manages the bookkeeping when a component is in the process\n * of being mounted or being unmounted. This is used as a way to enforce\n * invariants (or warnings) when it is not recommended to call\n * setState/forceUpdate.\n *\n * currentlyMountingInstance: During the construction phase, it is not possible\n * to trigger an update since the instance is not fully mounted yet. However, we\n * currently allow this as a convenience for mutating the initial state.\n *\n * currentlyUnmountingInstance: During the unmounting phase, the instance is\n * still mounted and can therefore schedule an update. However, this is not\n * recommended and probably an error since it's about to be unmounted.\n * Therefore we still want to trigger in an error for that case.\n */\n\nvar ReactLifeCycle = {\n  currentlyMountingInstance: null,\n  currentlyUnmountingInstance: null\n};\n\nmodule.exports = ReactLifeCycle;\n\n},{}],\"react/lib/ReactLink\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactLink\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * ReactLink encapsulates a common pattern in which a component wants to modify\n * a prop received from its parent. ReactLink allows the parent to pass down a\n * value coupled with a callback that, when invoked, expresses an intent to\n * modify that value. For example:\n *\n * React.createClass({\n *   getInitialState: function() {\n *     return {value: ''};\n *   },\n *   render: function() {\n *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);\n *     return <input valueLink={valueLink} />;\n *   },\n *   this._handleValueChange: function(newValue) {\n *     this.setState({value: newValue});\n *   }\n * });\n *\n * We have provided some sugary mixins to make the creation and\n * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.\n */\n\nvar React = require(\"./React\");\n\n/**\n * @param {*} value current value of the link\n * @param {function} requestChange callback to request a change\n */\nfunction ReactLink(value, requestChange) {\n  this.value = value;\n  this.requestChange = requestChange;\n}\n\n/**\n * Creates a PropType that enforces the ReactLink API and optionally checks the\n * type of the value being passed inside the link. Example:\n *\n * MyComponent.propTypes = {\n *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)\n * }\n */\nfunction createLinkTypeChecker(linkType) {\n  var shapes = {\n    value: typeof linkType === 'undefined' ?\n      React.PropTypes.any.isRequired :\n      linkType.isRequired,\n    requestChange: React.PropTypes.func.isRequired\n  };\n  return React.PropTypes.shape(shapes);\n}\n\nReactLink.PropTypes = {\n  link: createLinkTypeChecker\n};\n\nmodule.exports = ReactLink;\n\n},{\"./React\":\"react/lib/React\"}],\"react/lib/ReactMarkupChecksum\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMarkupChecksum\n */\n\n'use strict';\n\nvar adler32 = require(\"./adler32\");\n\nvar ReactMarkupChecksum = {\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',\n\n  /**\n   * @param {string} markup Markup string\n   * @return {string} Markup string with checksum attribute attached\n   */\n  addChecksumToMarkup: function(markup) {\n    var checksum = adler32(markup);\n    return markup.replace(\n      '>',\n      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\">'\n    );\n  },\n\n  /**\n   * @param {string} markup to use\n   * @param {DOMElement} element root React element\n   * @returns {boolean} whether or not the markup is the same\n   */\n  canReuseMarkup: function(markup, element) {\n    var existingChecksum = element.getAttribute(\n      ReactMarkupChecksum.CHECKSUM_ATTR_NAME\n    );\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);\n    var markupChecksum = adler32(markup);\n    return markupChecksum === existingChecksum;\n  }\n};\n\nmodule.exports = ReactMarkupChecksum;\n\n},{\"./adler32\":\"react/lib/adler32\"}],\"react/lib/ReactMount\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMount\n */\n\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar ReactMarkupChecksum = require(\"./ReactMarkupChecksum\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactReconciler = require(\"./ReactReconciler\");\nvar ReactUpdateQueue = require(\"./ReactUpdateQueue\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar emptyObject = require(\"./emptyObject\");\nvar containsNode = require(\"./containsNode\");\nvar getReactRootElementInContainer = require(\"./getReactRootElementInContainer\");\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar invariant = require(\"./invariant\");\nvar setInnerHTML = require(\"./setInnerHTML\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\nvar warning = require(\"./warning\");\n\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar nodeCache = {};\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\n\n/** Mapping from reactRootID to React component instance. */\nvar instancesByReactRootID = {};\n\n/** Mapping from reactRootID to `container` nodes. */\nvar containersByReactRootID = {};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  /** __DEV__-only mapping from reactRootID to root elements. */\n  var rootElementsByReactRootID = {};\n}\n\n// Used to store breadth-first search state in findComponentRoot.\nvar findComponentRootReusableArray = [];\n\n/**\n * Finds the index of the first character\n * that's not common between the two given strings.\n *\n * @return {number} the index of the character where the strings diverge\n */\nfunction firstDifferenceIndex(string1, string2) {\n  var minLen = Math.min(string1.length, string2.length);\n  for (var i = 0; i < minLen; i++) {\n    if (string1.charAt(i) !== string2.charAt(i)) {\n      return i;\n    }\n  }\n  return string1.length === string2.length ? -1 : minLen;\n}\n\n/**\n * @param {DOMElement} container DOM element that may contain a React component.\n * @return {?string} A \"reactRoot\" ID, if a React component is rendered.\n */\nfunction getReactRootID(container) {\n  var rootElement = getReactRootElementInContainer(container);\n  return rootElement && ReactMount.getID(rootElement);\n}\n\n/**\n * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form\n * element can return its control whose name or ID equals ATTR_NAME. All\n * DOM nodes support `getAttributeNode` but this can also get called on\n * other objects so just return '' if we're given something other than a\n * DOM node (such as window).\n *\n * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.\n * @return {string} ID of the supplied `domNode`.\n */\nfunction getID(node) {\n  var id = internalGetID(node);\n  if (id) {\n    if (nodeCache.hasOwnProperty(id)) {\n      var cached = nodeCache[id];\n      if (cached !== node) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          !isValid(cached, id),\n          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',\n          ATTR_NAME, id\n        ) : invariant(!isValid(cached, id)));\n\n        nodeCache[id] = node;\n      }\n    } else {\n      nodeCache[id] = node;\n    }\n  }\n\n  return id;\n}\n\nfunction internalGetID(node) {\n  // If node is something like a window, document, or text node, none of\n  // which support attributes or a .getAttribute method, gracefully return\n  // the empty string, as if the attribute were missing.\n  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';\n}\n\n/**\n * Sets the React-specific ID of the given node.\n *\n * @param {DOMElement} node The DOM node whose ID will be set.\n * @param {string} id The value of the ID attribute.\n */\nfunction setID(node, id) {\n  var oldID = internalGetID(node);\n  if (oldID !== id) {\n    delete nodeCache[oldID];\n  }\n  node.setAttribute(ATTR_NAME, id);\n  nodeCache[id] = node;\n}\n\n/**\n * Finds the node with the supplied React-generated DOM ID.\n *\n * @param {string} id A React-generated DOM ID.\n * @return {DOMElement} DOM node with the suppled `id`.\n * @internal\n */\nfunction getNode(id) {\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {\n    nodeCache[id] = ReactMount.findReactNodeByID(id);\n  }\n  return nodeCache[id];\n}\n\n/**\n * Finds the node with the supplied public React instance.\n *\n * @param {*} instance A public React instance.\n * @return {?DOMElement} DOM node with the suppled `id`.\n * @internal\n */\nfunction getNodeFromInstance(instance) {\n  var id = ReactInstanceMap.get(instance)._rootNodeID;\n  if (ReactEmptyComponent.isNullComponentID(id)) {\n    return null;\n  }\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {\n    nodeCache[id] = ReactMount.findReactNodeByID(id);\n  }\n  return nodeCache[id];\n}\n\n/**\n * A node is \"valid\" if it is contained by a currently mounted container.\n *\n * This means that the node does not have to be contained by a document in\n * order to be considered valid.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @param {string} id The expected ID of the node.\n * @return {boolean} Whether the node is contained by a mounted container.\n */\nfunction isValid(node, id) {\n  if (node) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      internalGetID(node) === id,\n      'ReactMount: Unexpected modification of `%s`',\n      ATTR_NAME\n    ) : invariant(internalGetID(node) === id));\n\n    var container = ReactMount.findReactContainerForID(id);\n    if (container && containsNode(container, node)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Causes the cache to forget about one React-specific ID.\n *\n * @param {string} id The ID to forget.\n */\nfunction purgeID(id) {\n  delete nodeCache[id];\n}\n\nvar deepestNodeSoFar = null;\nfunction findDeepestCachedAncestorImpl(ancestorID) {\n  var ancestor = nodeCache[ancestorID];\n  if (ancestor && isValid(ancestor, ancestorID)) {\n    deepestNodeSoFar = ancestor;\n  } else {\n    // This node isn't populated in the cache, so presumably none of its\n    // descendants are. Break out of the loop.\n    return false;\n  }\n}\n\n/**\n * Return the deepest cached node whose ID is a prefix of `targetID`.\n */\nfunction findDeepestCachedAncestor(targetID) {\n  deepestNodeSoFar = null;\n  ReactInstanceHandles.traverseAncestors(\n    targetID,\n    findDeepestCachedAncestorImpl\n  );\n\n  var foundNode = deepestNodeSoFar;\n  deepestNodeSoFar = null;\n  return foundNode;\n}\n\n/**\n * Mounts this component and inserts it into the DOM.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {string} rootID DOM ID of the root node.\n * @param {DOMElement} container DOM element to mount into.\n * @param {ReactReconcileTransaction} transaction\n * @param {boolean} shouldReuseMarkup If true, do not insert markup\n */\nfunction mountComponentIntoNode(\n    componentInstance,\n    rootID,\n    container,\n    transaction,\n    shouldReuseMarkup) {\n  var markup = ReactReconciler.mountComponent(\n    componentInstance, rootID, transaction, emptyObject\n  );\n  componentInstance._isTopLevel = true;\n  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);\n}\n\n/**\n * Batched mount.\n *\n * @param {ReactComponent} componentInstance The instance to mount.\n * @param {string} rootID DOM ID of the root node.\n * @param {DOMElement} container DOM element to mount into.\n * @param {boolean} shouldReuseMarkup If true, do not insert markup\n */\nfunction batchedMountComponentIntoNode(\n    componentInstance,\n    rootID,\n    container,\n    shouldReuseMarkup) {\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();\n  transaction.perform(\n    mountComponentIntoNode,\n    null,\n    componentInstance,\n    rootID,\n    container,\n    transaction,\n    shouldReuseMarkup\n  );\n  ReactUpdates.ReactReconcileTransaction.release(transaction);\n}\n\n/**\n * Mounting is the process of initializing a React component by creating its\n * representative DOM elements and inserting them into a supplied `container`.\n * Any prior content inside `container` is destroyed in the process.\n *\n *   ReactMount.render(\n *     component,\n *     document.getElementById('container')\n *   );\n *\n *   <div id=\"container\">                   <-- Supplied `container`.\n *     <div data-reactid=\".3\">              <-- Rendered reactRoot of React\n *       // ...                                 component.\n *     </div>\n *   </div>\n *\n * Inside of `container`, the first element rendered is the \"reactRoot\".\n */\nvar ReactMount = {\n  /** Exposed for debugging purposes **/\n  _instancesByReactRootID: instancesByReactRootID,\n\n  /**\n   * This is a hook provided to support rendering React components while\n   * ensuring that the apparent scroll position of its `container` does not\n   * change.\n   *\n   * @param {DOMElement} container The `container` being rendered into.\n   * @param {function} renderCallback This must be called once to do the render.\n   */\n  scrollMonitor: function(container, renderCallback) {\n    renderCallback();\n  },\n\n  /**\n   * Take a component that's already mounted into the DOM and replace its props\n   * @param {ReactComponent} prevComponent component instance already in the DOM\n   * @param {ReactElement} nextElement component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {?function} callback function triggered on completion\n   */\n  _updateRootComponent: function(\n      prevComponent,\n      nextElement,\n      container,\n      callback) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);\n    }\n\n    ReactMount.scrollMonitor(container, function() {\n      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);\n      if (callback) {\n        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);\n      }\n    });\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[getReactRootID(container)] =\n        getReactRootElementInContainer(container);\n    }\n\n    return prevComponent;\n  },\n\n  /**\n   * Register a component into the instance map and starts scroll value\n   * monitoring\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @return {string} reactRoot ID prefix\n   */\n  _registerComponent: function(nextComponent, container) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      container && (\n        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)\n      ),\n      '_registerComponent(...): Target container is not a DOM element.'\n    ) : invariant(container && (\n      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)\n    )));\n\n    ReactBrowserEventEmitter.ensureScrollValueMonitoring();\n\n    var reactRootID = ReactMount.registerContainer(container);\n    instancesByReactRootID[reactRootID] = nextComponent;\n    return reactRootID;\n  },\n\n  /**\n   * Render a new component into the DOM.\n   * @param {ReactElement} nextElement element to render\n   * @param {DOMElement} container container to render into\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion\n   * @return {ReactComponent} nextComponent\n   */\n  _renderNewRootComponent: function(\n    nextElement,\n    container,\n    shouldReuseMarkup\n  ) {\n    // Various parts of our code (such as ReactCompositeComponent's\n    // _renderValidatedComponent) assume that calls to render aren't nested;\n    // verify that that's the case.\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      ReactCurrentOwner.current == null,\n      '_renderNewRootComponent(): Render methods should be a pure function ' +\n      'of props and state; triggering nested component updates from ' +\n      'render is not allowed. If necessary, trigger nested updates in ' +\n      'componentDidUpdate.'\n    ) : null);\n\n    var componentInstance = instantiateReactComponent(nextElement, null);\n    var reactRootID = ReactMount._registerComponent(\n      componentInstance,\n      container\n    );\n\n    // The initial render is synchronous but any updates that happen during\n    // rendering, in componentWillMount or componentDidMount, will be batched\n    // according to the current batching strategy.\n\n    ReactUpdates.batchedUpdates(\n      batchedMountComponentIntoNode,\n      componentInstance,\n      reactRootID,\n      container,\n      shouldReuseMarkup\n    );\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[reactRootID] =\n        getReactRootElementInContainer(container);\n    }\n\n    return componentInstance;\n  },\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactElement} nextElement Component element to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  render: function(nextElement, container, callback) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ReactElement.isValidElement(nextElement),\n      'React.render(): Invalid component element.%s',\n      (\n        typeof nextElement === 'string' ?\n          ' Instead of passing an element string, make sure to instantiate ' +\n          'it by passing it to React.createElement.' :\n        typeof nextElement === 'function' ?\n          ' Instead of passing a component class, make sure to instantiate ' +\n          'it by passing it to React.createElement.' :\n        // Check if it quacks like an element\n        nextElement != null && nextElement.props !== undefined ?\n          ' This may be caused by unintentionally loading two independent ' +\n          'copies of React.' :\n          ''\n      )\n    ) : invariant(ReactElement.isValidElement(nextElement)));\n\n    var prevComponent = instancesByReactRootID[getReactRootID(container)];\n\n    if (prevComponent) {\n      var prevElement = prevComponent._currentElement;\n      if (shouldUpdateReactComponent(prevElement, nextElement)) {\n        return ReactMount._updateRootComponent(\n          prevComponent,\n          nextElement,\n          container,\n          callback\n        ).getPublicInstance();\n      } else {\n        ReactMount.unmountComponentAtNode(container);\n      }\n    }\n\n    var reactRootElement = getReactRootElementInContainer(container);\n    var containerHasReactMarkup =\n      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (!containerHasReactMarkup || reactRootElement.nextSibling) {\n        var rootElementSibling = reactRootElement;\n        while (rootElementSibling) {\n          if (ReactMount.isRenderedByReact(rootElementSibling)) {\n            (\"production\" !== process.env.NODE_ENV ? warning(\n              false,\n              'render(): Target node has markup rendered by React, but there ' +\n              'are unrelated nodes as well. This is most commonly caused by ' +\n              'white-space inserted around server-rendered markup.'\n            ) : null);\n            break;\n          }\n\n          rootElementSibling = rootElementSibling.nextSibling;\n        }\n      }\n    }\n\n    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;\n\n    var component = ReactMount._renderNewRootComponent(\n      nextElement,\n      container,\n      shouldReuseMarkup\n    ).getPublicInstance();\n    if (callback) {\n      callback.call(component);\n    }\n    return component;\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into the supplied `container`.\n   *\n   * @param {function} constructor React component constructor.\n   * @param {?object} props Initial props of the component instance.\n   * @param {DOMElement} container DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  constructAndRenderComponent: function(constructor, props, container) {\n    var element = ReactElement.createElement(constructor, props);\n    return ReactMount.render(element, container);\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into a container node identified by supplied `id`.\n   *\n   * @param {function} componentConstructor React component constructor\n   * @param {?object} props Initial props of the component instance.\n   * @param {string} id ID of the DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in the container node.\n   */\n  constructAndRenderComponentByID: function(constructor, props, id) {\n    var domNode = document.getElementById(id);\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      domNode,\n      'Tried to get element with id of \"%s\" but it is not present on the page.',\n      id\n    ) : invariant(domNode));\n    return ReactMount.constructAndRenderComponent(constructor, props, domNode);\n  },\n\n  /**\n   * Registers a container node into which React components will be rendered.\n   * This also creates the \"reactRoot\" ID that will be assigned to the element\n   * rendered within.\n   *\n   * @param {DOMElement} container DOM element to register as a container.\n   * @return {string} The \"reactRoot\" ID of elements rendered within.\n   */\n  registerContainer: function(container) {\n    var reactRootID = getReactRootID(container);\n    if (reactRootID) {\n      // If one exists, make sure it is a valid \"reactRoot\" ID.\n      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);\n    }\n    if (!reactRootID) {\n      // No valid \"reactRoot\" ID found, create one.\n      reactRootID = ReactInstanceHandles.createReactRootID();\n    }\n    containersByReactRootID[reactRootID] = container;\n    return reactRootID;\n  },\n\n  /**\n   * Unmounts and destroys the React component rendered in the `container`.\n   *\n   * @param {DOMElement} container DOM element containing a React component.\n   * @return {boolean} True if a component was found in and unmounted from\n   *                   `container`\n   */\n  unmountComponentAtNode: function(container) {\n    // Various parts of our code (such as ReactCompositeComponent's\n    // _renderValidatedComponent) assume that calls to render aren't nested;\n    // verify that that's the case. (Strictly speaking, unmounting won't cause a\n    // render but we still don't expect to be in a render call here.)\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      ReactCurrentOwner.current == null,\n      'unmountComponentAtNode(): Render methods should be a pure function of ' +\n      'props and state; triggering nested component updates from render is ' +\n      'not allowed. If necessary, trigger nested updates in ' +\n      'componentDidUpdate.'\n    ) : null);\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      container && (\n        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)\n      ),\n      'unmountComponentAtNode(...): Target container is not a DOM element.'\n    ) : invariant(container && (\n      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)\n    )));\n\n    var reactRootID = getReactRootID(container);\n    var component = instancesByReactRootID[reactRootID];\n    if (!component) {\n      return false;\n    }\n    ReactMount.unmountComponentFromNode(component, container);\n    delete instancesByReactRootID[reactRootID];\n    delete containersByReactRootID[reactRootID];\n    if (\"production\" !== process.env.NODE_ENV) {\n      delete rootElementsByReactRootID[reactRootID];\n    }\n    return true;\n  },\n\n  /**\n   * Unmounts a component and removes it from the DOM.\n   *\n   * @param {ReactComponent} instance React component instance.\n   * @param {DOMElement} container DOM element to unmount from.\n   * @final\n   * @internal\n   * @see {ReactMount.unmountComponentAtNode}\n   */\n  unmountComponentFromNode: function(instance, container) {\n    ReactReconciler.unmountComponent(instance);\n\n    if (container.nodeType === DOC_NODE_TYPE) {\n      container = container.documentElement;\n    }\n\n    // http://jsperf.com/emptying-a-node\n    while (container.lastChild) {\n      container.removeChild(container.lastChild);\n    }\n  },\n\n  /**\n   * Finds the container DOM element that contains React component to which the\n   * supplied DOM `id` belongs.\n   *\n   * @param {string} id The ID of an element rendered by a React component.\n   * @return {?DOMElement} DOM element that contains the `id`.\n   */\n  findReactContainerForID: function(id) {\n    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);\n    var container = containersByReactRootID[reactRootID];\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      var rootElement = rootElementsByReactRootID[reactRootID];\n      if (rootElement && rootElement.parentNode !== container) {\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          // Call internalGetID here because getID calls isValid which calls\n          // findReactContainerForID (this function).\n          internalGetID(rootElement) === reactRootID,\n          'ReactMount: Root element ID differed from reactRootID.'\n        ) : invariant(// Call internalGetID here because getID calls isValid which calls\n        // findReactContainerForID (this function).\n        internalGetID(rootElement) === reactRootID));\n\n        var containerChild = container.firstChild;\n        if (containerChild &&\n            reactRootID === internalGetID(containerChild)) {\n          // If the container has a new child with the same ID as the old\n          // root element, then rootElementsByReactRootID[reactRootID] is\n          // just stale and needs to be updated. The case that deserves a\n          // warning is when the container is empty.\n          rootElementsByReactRootID[reactRootID] = containerChild;\n        } else {\n          (\"production\" !== process.env.NODE_ENV ? warning(\n            false,\n            'ReactMount: Root element has been removed from its original ' +\n            'container. New container:', rootElement.parentNode\n          ) : null);\n        }\n      }\n    }\n\n    return container;\n  },\n\n  /**\n   * Finds an element rendered by React with the supplied ID.\n   *\n   * @param {string} id ID of a DOM node in the React component.\n   * @return {DOMElement} Root DOM node of the React component.\n   */\n  findReactNodeByID: function(id) {\n    var reactRoot = ReactMount.findReactContainerForID(id);\n    return ReactMount.findComponentRoot(reactRoot, id);\n  },\n\n  /**\n   * True if the supplied `node` is rendered by React.\n   *\n   * @param {*} node DOM Element to check.\n   * @return {boolean} True if the DOM Element appears to be rendered by React.\n   * @internal\n   */\n  isRenderedByReact: function(node) {\n    if (node.nodeType !== 1) {\n      // Not a DOMElement, therefore not a React component\n      return false;\n    }\n    var id = ReactMount.getID(node);\n    return id ? id.charAt(0) === SEPARATOR : false;\n  },\n\n  /**\n   * Traverses up the ancestors of the supplied node to find a node that is a\n   * DOM representation of a React component.\n   *\n   * @param {*} node\n   * @return {?DOMEventTarget}\n   * @internal\n   */\n  getFirstReactDOM: function(node) {\n    var current = node;\n    while (current && current.parentNode !== current) {\n      if (ReactMount.isRenderedByReact(current)) {\n        return current;\n      }\n      current = current.parentNode;\n    }\n    return null;\n  },\n\n  /**\n   * Finds a node with the supplied `targetID` inside of the supplied\n   * `ancestorNode`.  Exploits the ID naming scheme to perform the search\n   * quickly.\n   *\n   * @param {DOMEventTarget} ancestorNode Search from this root.\n   * @pararm {string} targetID ID of the DOM representation of the component.\n   * @return {DOMEventTarget} DOM node with the supplied `targetID`.\n   * @internal\n   */\n  findComponentRoot: function(ancestorNode, targetID) {\n    var firstChildren = findComponentRootReusableArray;\n    var childIndex = 0;\n\n    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;\n\n    firstChildren[0] = deepestAncestor.firstChild;\n    firstChildren.length = 1;\n\n    while (childIndex < firstChildren.length) {\n      var child = firstChildren[childIndex++];\n      var targetChild;\n\n      while (child) {\n        var childID = ReactMount.getID(child);\n        if (childID) {\n          // Even if we find the node we're looking for, we finish looping\n          // through its siblings to ensure they're cached so that we don't have\n          // to revisit this node again. Otherwise, we make n^2 calls to getID\n          // when visiting the many children of a single node in order.\n\n          if (targetID === childID) {\n            targetChild = child;\n          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {\n            // If we find a child whose ID is an ancestor of the given ID,\n            // then we can be sure that we only want to search the subtree\n            // rooted at this child, so we can throw out the rest of the\n            // search state.\n            firstChildren.length = childIndex = 0;\n            firstChildren.push(child.firstChild);\n          }\n\n        } else {\n          // If this child had no ID, then there's a chance that it was\n          // injected automatically by the browser, as when a `<table>`\n          // element sprouts an extra `<tbody>` child as a side effect of\n          // `.innerHTML` parsing. Optimistically continue down this\n          // branch, but not before examining the other siblings.\n          firstChildren.push(child.firstChild);\n        }\n\n        child = child.nextSibling;\n      }\n\n      if (targetChild) {\n        // Emptying firstChildren/findComponentRootReusableArray is\n        // not necessary for correctness, but it helps the GC reclaim\n        // any nodes that were left at the end of the search.\n        firstChildren.length = 0;\n\n        return targetChild;\n      }\n    }\n\n    firstChildren.length = 0;\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      false,\n      'findComponentRoot(..., %s): Unable to find element. This probably ' +\n      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +\n      'usually due to forgetting a <tbody> when using tables, nesting tags ' +\n      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +\n      'parent. ' +\n      'Try inspecting the child nodes of the element with React ID `%s`.',\n      targetID,\n      ReactMount.getID(ancestorNode)\n    ) : invariant(false));\n  },\n\n  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      container && (\n        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)\n      ),\n      'mountComponentIntoNode(...): Target container is not valid.'\n    ) : invariant(container && (\n      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)\n    )));\n\n    if (shouldReuseMarkup) {\n      var rootElement = getReactRootElementInContainer(container);\n      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {\n        return;\n      } else {\n        var checksum = rootElement.getAttribute(\n          ReactMarkupChecksum.CHECKSUM_ATTR_NAME\n        );\n        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n\n        var rootMarkup = rootElement.outerHTML;\n        rootElement.setAttribute(\n          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,\n          checksum\n        );\n\n        var diffIndex = firstDifferenceIndex(markup, rootMarkup);\n        var difference = ' (client) ' +\n          markup.substring(diffIndex - 20, diffIndex + 20) +\n          '\\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);\n\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          container.nodeType !== DOC_NODE_TYPE,\n          'You\\'re trying to render a component to the document using ' +\n          'server rendering but the checksum was invalid. This usually ' +\n          'means you rendered a different component type or props on ' +\n          'the client from the one on the server, or your render() ' +\n          'methods are impure. React cannot handle this case due to ' +\n          'cross-browser quirks by rendering at the document root. You ' +\n          'should look for environment dependent code in your components ' +\n          'and ensure the props are the same client and server side:\\n%s',\n          difference\n        ) : invariant(container.nodeType !== DOC_NODE_TYPE));\n\n        if (\"production\" !== process.env.NODE_ENV) {\n          (\"production\" !== process.env.NODE_ENV ? warning(\n            false,\n            'React attempted to reuse markup in a container but the ' +\n            'checksum was invalid. This generally means that you are ' +\n            'using server rendering and the markup generated on the ' +\n            'server was not what the client was expecting. React injected ' +\n            'new markup to compensate which works but you have lost many ' +\n            'of the benefits of server rendering. Instead, figure out ' +\n            'why the markup being generated is different on the client ' +\n            'or server:\\n%s',\n            difference\n          ) : null);\n        }\n      }\n    }\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      container.nodeType !== DOC_NODE_TYPE,\n      'You\\'re trying to render a component to the document but ' +\n        'you didn\\'t use server rendering. We can\\'t do this ' +\n        'without using server rendering due to cross-browser quirks. ' +\n        'See React.renderToString() for server rendering.'\n    ) : invariant(container.nodeType !== DOC_NODE_TYPE));\n\n    setInnerHTML(container, markup);\n  },\n\n  /**\n   * React ID utilities.\n   */\n\n  getReactRootID: getReactRootID,\n\n  getID: getID,\n\n  setID: setID,\n\n  getNode: getNode,\n\n  getNodeFromInstance: getNodeFromInstance,\n\n  purgeID: purgeID\n};\n\nReactPerf.measureMethods(ReactMount, 'ReactMount', {\n  _renderNewRootComponent: '_renderNewRootComponent',\n  _mountImageIntoNode: '_mountImageIntoNode'\n});\n\nmodule.exports = ReactMount;\n\n}).call(this,require('_process'))\n\n},{\"./DOMProperty\":\"react/lib/DOMProperty\",\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactElementValidator\":\"react/lib/ReactElementValidator\",\"./ReactEmptyComponent\":\"react/lib/ReactEmptyComponent\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./ReactMarkupChecksum\":\"react/lib/ReactMarkupChecksum\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./ReactReconciler\":\"react/lib/ReactReconciler\",\"./ReactUpdateQueue\":\"react/lib/ReactUpdateQueue\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./containsNode\":\"react/lib/containsNode\",\"./emptyObject\":\"react/lib/emptyObject\",\"./getReactRootElementInContainer\":\"react/lib/getReactRootElementInContainer\",\"./instantiateReactComponent\":\"react/lib/instantiateReactComponent\",\"./invariant\":\"react/lib/invariant\",\"./setInnerHTML\":\"react/lib/setInnerHTML\",\"./shouldUpdateReactComponent\":\"react/lib/shouldUpdateReactComponent\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactMultiChildUpdateTypes\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChildUpdateTypes\n */\n\n'use strict';\n\nvar keyMirror = require(\"./keyMirror\");\n\n/**\n * When a component's children are updated, a series of update configuration\n * objects are created in order to batch and serialize the required changes.\n *\n * Enumerates all the possible types of update configurations.\n *\n * @internal\n */\nvar ReactMultiChildUpdateTypes = keyMirror({\n  INSERT_MARKUP: null,\n  MOVE_EXISTING: null,\n  REMOVE_NODE: null,\n  TEXT_CONTENT: null\n});\n\nmodule.exports = ReactMultiChildUpdateTypes;\n\n},{\"./keyMirror\":\"react/lib/keyMirror\"}],\"react/lib/ReactMultiChild\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require(\"./ReactComponentEnvironment\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar ReactReconciler = require(\"./ReactReconciler\");\nvar ReactChildReconciler = require(\"./ReactChildReconciler\");\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    textContent: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    textContent: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(\n      updateQueue,\n      markupQueue\n    );\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function(nestedChildren, transaction, context) {\n      var children = ReactChildReconciler.instantiateChildren(\n        nestedChildren, transaction, context\n      );\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(\n            child,\n            rootID,\n            transaction,\n            context\n          );\n          child._mountIndex = index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function(nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        // TODO: The setTextContent operation should be enough\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function(nextNestedChildren, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildren, transaction, context);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function(nextNestedChildren, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var nextChildren = ReactChildReconciler.updateChildren(\n        prevChildren, nextNestedChildren, transaction, context\n      );\n      this._renderedChildren = nextChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChildByName(prevChild, name);\n          }\n          // The child must be instantiated before it's mounted.\n          this._mountChildByNameAtIndex(\n            nextChild, name, nextIndex, transaction, context\n          );\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) &&\n            !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChildByName(prevChildren[name], name);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function() {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function(child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function(child, mountImage) {\n      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function(child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function(textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function(\n      child,\n      name,\n      index,\n      transaction,\n      context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(\n        child,\n        rootID,\n        transaction,\n        context\n      );\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child by name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @param {string} name Name of the child in `this._renderedChildren`.\n     * @private\n     */\n    _unmountChildByName: function(child, name) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;\n\n},{\"./ReactChildReconciler\":\"react/lib/ReactChildReconciler\",\"./ReactComponentEnvironment\":\"react/lib/ReactComponentEnvironment\",\"./ReactMultiChildUpdateTypes\":\"react/lib/ReactMultiChildUpdateTypes\",\"./ReactReconciler\":\"react/lib/ReactReconciler\"}],\"react/lib/ReactNativeComponent\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeComponent\n */\n\n'use strict';\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\nvar autoGenerateWrapperClass = null;\nvar genericComponentClass = null;\n// This registry keeps track of wrapper classes around native tags\nvar tagToComponentClass = {};\nvar textComponentClass = null;\n\nvar ReactNativeComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function(componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function(componentClass) {\n    textComponentClass = componentClass;\n  },\n  // This accepts a keyed object with classes as values. Each key represents a\n  // tag. That particular tag will use this class instead of the generic one.\n  injectComponentClasses: function(componentClasses) {\n    assign(tagToComponentClass, componentClasses);\n  },\n  // Temporary hack since we expect DOM refs to behave like composites,\n  // for this release.\n  injectAutoWrapper: function(wrapperFactory) {\n    autoGenerateWrapperClass = wrapperFactory;\n  }\n};\n\n/**\n * Get a composite component wrapper class for a specific tag.\n *\n * @param {ReactElement} element The tag for which to get the class.\n * @return {function} The React class constructor function.\n */\nfunction getComponentClassForElement(element) {\n  if (typeof element.type === 'function') {\n    return element.type;\n  }\n  var tag = element.type;\n  var componentClass = tagToComponentClass[tag];\n  if (componentClass == null) {\n    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);\n  }\n  return componentClass;\n}\n\n/**\n * Get a native internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\nfunction createInternalComponent(element) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    genericComponentClass,\n    'There is no registered component for the tag %s',\n    element.type\n  ) : invariant(genericComponentClass));\n  return new genericComponentClass(element.type, element.props);\n}\n\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactNativeComponent = {\n  getComponentClassForElement: getComponentClassForElement,\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactNativeComponentInjection\n};\n\nmodule.exports = ReactNativeComponent;\n\n}).call(this,require('_process'))\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactOwner\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactOwner\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n * ReactOwners are capable of storing references to owned components.\n *\n * All components are capable of //being// referenced by owner components, but\n * only ReactOwner components are capable of //referencing// owned components.\n * The named reference is known as a \"ref\".\n *\n * Refs are available when mounted and updated during reconciliation.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return (\n *         <div onClick={this.handleClick}>\n *           <CustomComponent ref=\"custom\" />\n *         </div>\n *       );\n *     },\n *     handleClick: function() {\n *       this.refs.custom.handleClick();\n *     },\n *     componentDidMount: function() {\n *       this.refs.custom.initialize();\n *     }\n *   });\n *\n * Refs should rarely be used. When refs are used, they should only be done to\n * control data that is not handled by React's data flow.\n *\n * @class ReactOwner\n */\nvar ReactOwner = {\n\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid owner.\n   * @final\n   */\n  isValidOwner: function(object) {\n    return !!(\n      (object &&\n      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')\n    );\n  },\n\n  /**\n   * Adds a component by ref to an owner component.\n   *\n   * @param {ReactComponent} component Component to reference.\n   * @param {string} ref Name by which to refer to the component.\n   * @param {ReactOwner} owner Component on which to record the ref.\n   * @final\n   * @internal\n   */\n  addComponentAsRefTo: function(component, ref, owner) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ReactOwner.isValidOwner(owner),\n      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +\n      'usually means that you\\'re trying to add a ref to a component that ' +\n      'doesn\\'t have an owner (that is, was not created inside of another ' +\n      'component\\'s `render` method). Try rendering this component inside of ' +\n      'a new top-level component which will hold the ref.'\n    ) : invariant(ReactOwner.isValidOwner(owner)));\n    owner.attachRef(ref, component);\n  },\n\n  /**\n   * Removes a component by ref from an owner component.\n   *\n   * @param {ReactComponent} component Component to dereference.\n   * @param {string} ref Name of the ref to remove.\n   * @param {ReactOwner} owner Component on which the ref is recorded.\n   * @final\n   * @internal\n   */\n  removeComponentAsRefFrom: function(component, ref, owner) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ReactOwner.isValidOwner(owner),\n      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +\n      'usually means that you\\'re trying to remove a ref to a component that ' +\n      'doesn\\'t have an owner (that is, was not created inside of another ' +\n      'component\\'s `render` method). Try rendering this component inside of ' +\n      'a new top-level component which will hold the ref.'\n    ) : invariant(ReactOwner.isValidOwner(owner)));\n    // Check that `component` is still the current ref because we do not want to\n    // detach the ref if another component stole it.\n    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {\n      owner.detachRef(ref);\n    }\n  }\n\n};\n\nmodule.exports = ReactOwner;\n\n}).call(this,require('_process'))\n\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactPerf\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * @param {object} object\n   * @param {string} objectName\n   * @param {object<string>} methodNames\n   */\n  measureMethods: function(object, objectName, methodNames) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      for (var key in methodNames) {\n        if (!methodNames.hasOwnProperty(key)) {\n          continue;\n        }\n        object[key] = ReactPerf.measure(\n          objectName,\n          methodNames[key],\n          object[key]\n        );\n      }\n    }\n  },\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function(objName, fnName, func) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var measuredFunc = null;\n      var wrapper = function() {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n          return measuredFunc.apply(this, arguments);\n        }\n        return func.apply(this, arguments);\n      };\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n    return func;\n  },\n\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function(measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports = ReactPerf;\n\n}).call(this,require('_process'))\n\n},{\"_process\":1}],\"react/lib/ReactPropTransferer\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTransferer\n */\n\n'use strict';\n\nvar assign = require(\"./Object.assign\");\nvar emptyFunction = require(\"./emptyFunction\");\nvar joinClasses = require(\"./joinClasses\");\n\n/**\n * Creates a transfer strategy that will merge prop values using the supplied\n * `mergeStrategy`. If a prop was previously unset, this just sets it.\n *\n * @param {function} mergeStrategy\n * @return {function}\n */\nfunction createTransferStrategy(mergeStrategy) {\n  return function(props, key, value) {\n    if (!props.hasOwnProperty(key)) {\n      props[key] = value;\n    } else {\n      props[key] = mergeStrategy(props[key], value);\n    }\n  };\n}\n\nvar transferStrategyMerge = createTransferStrategy(function(a, b) {\n  // `merge` overrides the first object's (`props[key]` above) keys using the\n  // second object's (`value`) keys. An object's style's existing `propA` would\n  // get overridden. Flip the order here.\n  return assign({}, b, a);\n});\n\n/**\n * Transfer strategies dictate how props are transferred by `transferPropsTo`.\n * NOTE: if you add any more exceptions to this list you should be sure to\n * update `cloneWithProps()` accordingly.\n */\nvar TransferStrategies = {\n  /**\n   * Never transfer `children`.\n   */\n  children: emptyFunction,\n  /**\n   * Transfer the `className` prop by merging them.\n   */\n  className: createTransferStrategy(joinClasses),\n  /**\n   * Transfer the `style` prop (which is an object) by merging them.\n   */\n  style: transferStrategyMerge\n};\n\n/**\n * Mutates the first argument by transferring the properties from the second\n * argument.\n *\n * @param {object} props\n * @param {object} newProps\n * @return {object}\n */\nfunction transferInto(props, newProps) {\n  for (var thisKey in newProps) {\n    if (!newProps.hasOwnProperty(thisKey)) {\n      continue;\n    }\n\n    var transferStrategy = TransferStrategies[thisKey];\n\n    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {\n      transferStrategy(props, thisKey, newProps[thisKey]);\n    } else if (!props.hasOwnProperty(thisKey)) {\n      props[thisKey] = newProps[thisKey];\n    }\n  }\n  return props;\n}\n\n/**\n * ReactPropTransferer are capable of transferring props to another component\n * using a `transferPropsTo` method.\n *\n * @class ReactPropTransferer\n */\nvar ReactPropTransferer = {\n\n  /**\n   * Merge two props objects using TransferStrategies.\n   *\n   * @param {object} oldProps original props (they take precedence)\n   * @param {object} newProps new props to merge in\n   * @return {object} a new object containing both sets of props merged.\n   */\n  mergeProps: function(oldProps, newProps) {\n    return transferInto(assign({}, oldProps), newProps);\n  }\n\n};\n\nmodule.exports = ReactPropTransferer;\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./emptyFunction\":\"react/lib/emptyFunction\",\"./joinClasses\":\"react/lib/joinClasses\"}],\"react/lib/ReactPropTypeLocationNames\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypeLocationNames\n */\n\n'use strict';\n\nvar ReactPropTypeLocationNames = {};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n}\n\nmodule.exports = ReactPropTypeLocationNames;\n\n}).call(this,require('_process'))\n\n},{\"_process\":1}],\"react/lib/ReactPropTypeLocations\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypeLocations\n */\n\n'use strict';\n\nvar keyMirror = require(\"./keyMirror\");\n\nvar ReactPropTypeLocations = keyMirror({\n  prop: null,\n  context: null,\n  childContext: null\n});\n\nmodule.exports = ReactPropTypeLocations;\n\n},{\"./keyMirror\":\"react/lib/keyMirror\"}],\"react/lib/ReactPropTypes\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTypes\n */\n\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactFragment = require(\"./ReactFragment\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\n\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Collection of methods that allow declaration and validation of props that are\n * supplied to React components. Example usage:\n *\n *   var Props = require('ReactPropTypes');\n *   var MyArticle = React.createClass({\n *     propTypes: {\n *       // An optional string prop named \"description\".\n *       description: Props.string,\n *\n *       // A required enum prop named \"category\".\n *       category: Props.oneOf(['News','Photos']).isRequired,\n *\n *       // A prop named \"dialog\" that requires an instance of Dialog.\n *       dialog: Props.instanceOf(Dialog).isRequired\n *     },\n *     render: function() { ... }\n *   });\n *\n * A more formal specification of how these methods are used:\n *\n *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n *   decl := ReactPropTypes.{type}(.isRequired)?\n *\n * Each and every declaration produces a function with the same signature. This\n * allows the creation of custom validation functions. For example:\n *\n *  var MyLink = React.createClass({\n *    propTypes: {\n *      // An optional string or URI prop named \"href\".\n *      href: function(props, propName, componentName) {\n *        var propValue = props[propName];\n *        if (propValue != null && typeof propValue !== 'string' &&\n *            !(propValue instanceof URI)) {\n *          return new Error(\n *            'Expected a string or an URI for ' + propName + ' in ' +\n *            componentName\n *          );\n *        }\n *      }\n *    },\n *    render: function() {...}\n *  });\n *\n * @internal\n */\n\nvar ANONYMOUS = '<<anonymous>>';\n\nvar elementTypeChecker = createElementTypeChecker();\nvar nodeTypeChecker = createNodeChecker();\n\nvar ReactPropTypes = {\n  array: createPrimitiveTypeChecker('array'),\n  bool: createPrimitiveTypeChecker('boolean'),\n  func: createPrimitiveTypeChecker('function'),\n  number: createPrimitiveTypeChecker('number'),\n  object: createPrimitiveTypeChecker('object'),\n  string: createPrimitiveTypeChecker('string'),\n\n  any: createAnyTypeChecker(),\n  arrayOf: createArrayOfTypeChecker,\n  element: elementTypeChecker,\n  instanceOf: createInstanceTypeChecker,\n  node: nodeTypeChecker,\n  objectOf: createObjectOfTypeChecker,\n  oneOf: createEnumTypeChecker,\n  oneOfType: createUnionTypeChecker,\n  shape: createShapeTypeChecker\n};\n\nfunction createChainableTypeChecker(validate) {\n  function checkType(isRequired, props, propName, componentName, location) {\n    componentName = componentName || ANONYMOUS;\n    if (props[propName] == null) {\n      var locationName = ReactPropTypeLocationNames[location];\n      if (isRequired) {\n        return new Error(\n          (\"Required \" + locationName + \" `\" + propName + \"` was not specified in \") +\n          (\"`\" + componentName + \"`.\")\n        );\n      }\n      return null;\n    } else {\n      return validate(props, propName, componentName, location);\n    }\n  }\n\n  var chainedCheckType = checkType.bind(null, false);\n  chainedCheckType.isRequired = checkType.bind(null, true);\n\n  return chainedCheckType;\n}\n\nfunction createPrimitiveTypeChecker(expectedType) {\n  function validate(props, propName, componentName, location) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== expectedType) {\n      var locationName = ReactPropTypeLocationNames[location];\n      // `propValue` being instance of, say, date/regexp, pass the 'object'\n      // check, but we can offer a more precise error message here rather than\n      // 'of type `object`'.\n      var preciseType = getPreciseType(propValue);\n\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` of type `\" + preciseType + \"` \") +\n        (\"supplied to `\" + componentName + \"`, expected `\" + expectedType + \"`.\")\n      );\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createAnyTypeChecker() {\n  return createChainableTypeChecker(emptyFunction.thatReturns(null));\n}\n\nfunction createArrayOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location) {\n    var propValue = props[propName];\n    if (!Array.isArray(propValue)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var propType = getPropType(propValue);\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` of type \") +\n        (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected an array.\")\n      );\n    }\n    for (var i = 0; i < propValue.length; i++) {\n      var error = typeChecker(propValue, i, componentName, location);\n      if (error instanceof Error) {\n        return error;\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createElementTypeChecker() {\n  function validate(props, propName, componentName, location) {\n    if (!ReactElement.isValidElement(props[propName])) {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` supplied to \") +\n        (\"`\" + componentName + \"`, expected a ReactElement.\")\n      );\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createInstanceTypeChecker(expectedClass) {\n  function validate(props, propName, componentName, location) {\n    if (!(props[propName] instanceof expectedClass)) {\n      var locationName = ReactPropTypeLocationNames[location];\n      var expectedClassName = expectedClass.name || ANONYMOUS;\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` supplied to \") +\n        (\"`\" + componentName + \"`, expected instance of `\" + expectedClassName + \"`.\")\n      );\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createEnumTypeChecker(expectedValues) {\n  function validate(props, propName, componentName, location) {\n    var propValue = props[propName];\n    for (var i = 0; i < expectedValues.length; i++) {\n      if (propValue === expectedValues[i]) {\n        return null;\n      }\n    }\n\n    var locationName = ReactPropTypeLocationNames[location];\n    var valuesString = JSON.stringify(expectedValues);\n    return new Error(\n      (\"Invalid \" + locationName + \" `\" + propName + \"` of value `\" + propValue + \"` \") +\n      (\"supplied to `\" + componentName + \"`, expected one of \" + valuesString + \".\")\n    );\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createObjectOfTypeChecker(typeChecker) {\n  function validate(props, propName, componentName, location) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== 'object') {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` of type \") +\n        (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected an object.\")\n      );\n    }\n    for (var key in propValue) {\n      if (propValue.hasOwnProperty(key)) {\n        var error = typeChecker(propValue, key, componentName, location);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createUnionTypeChecker(arrayOfTypeCheckers) {\n  function validate(props, propName, componentName, location) {\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (checker(props, propName, componentName, location) == null) {\n        return null;\n      }\n    }\n\n    var locationName = ReactPropTypeLocationNames[location];\n    return new Error(\n      (\"Invalid \" + locationName + \" `\" + propName + \"` supplied to \") +\n      (\"`\" + componentName + \"`.\")\n    );\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createNodeChecker() {\n  function validate(props, propName, componentName, location) {\n    if (!isNode(props[propName])) {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` supplied to \") +\n        (\"`\" + componentName + \"`, expected a ReactNode.\")\n      );\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction createShapeTypeChecker(shapeTypes) {\n  function validate(props, propName, componentName, location) {\n    var propValue = props[propName];\n    var propType = getPropType(propValue);\n    if (propType !== 'object') {\n      var locationName = ReactPropTypeLocationNames[location];\n      return new Error(\n        (\"Invalid \" + locationName + \" `\" + propName + \"` of type `\" + propType + \"` \") +\n        (\"supplied to `\" + componentName + \"`, expected `object`.\")\n      );\n    }\n    for (var key in shapeTypes) {\n      var checker = shapeTypes[key];\n      if (!checker) {\n        continue;\n      }\n      var error = checker(propValue, key, componentName, location);\n      if (error) {\n        return error;\n      }\n    }\n    return null;\n  }\n  return createChainableTypeChecker(validate);\n}\n\nfunction isNode(propValue) {\n  switch (typeof propValue) {\n    case 'number':\n    case 'string':\n    case 'undefined':\n      return true;\n    case 'boolean':\n      return !propValue;\n    case 'object':\n      if (Array.isArray(propValue)) {\n        return propValue.every(isNode);\n      }\n      if (propValue === null || ReactElement.isValidElement(propValue)) {\n        return true;\n      }\n      propValue = ReactFragment.extractIfFragment(propValue);\n      for (var k in propValue) {\n        if (!isNode(propValue[k])) {\n          return false;\n        }\n      }\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Equivalent of `typeof` but with special handling for array and regexp.\nfunction getPropType(propValue) {\n  var propType = typeof propValue;\n  if (Array.isArray(propValue)) {\n    return 'array';\n  }\n  if (propValue instanceof RegExp) {\n    // Old webkits (at least until Android 4.0) return 'function' rather than\n    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n    // passes PropTypes.object.\n    return 'object';\n  }\n  return propType;\n}\n\n// This handles more types than `getPropType`. Only used for error messages.\n// See `createPrimitiveTypeChecker`.\nfunction getPreciseType(propValue) {\n  var propType = getPropType(propValue);\n  if (propType === 'object') {\n    if (propValue instanceof Date) {\n      return 'date';\n    } else if (propValue instanceof RegExp) {\n      return 'regexp';\n    }\n  }\n  return propType;\n}\n\nmodule.exports = ReactPropTypes;\n\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactFragment\":\"react/lib/ReactFragment\",\"./ReactPropTypeLocationNames\":\"react/lib/ReactPropTypeLocationNames\",\"./emptyFunction\":\"react/lib/emptyFunction\"}],\"react/lib/ReactPutListenerQueue\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPutListenerQueue\n */\n\n'use strict';\n\nvar PooledClass = require(\"./PooledClass\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\n\nvar assign = require(\"./Object.assign\");\n\nfunction ReactPutListenerQueue() {\n  this.listenersToPut = [];\n}\n\nassign(ReactPutListenerQueue.prototype, {\n  enqueuePutListener: function(rootNodeID, propKey, propValue) {\n    this.listenersToPut.push({\n      rootNodeID: rootNodeID,\n      propKey: propKey,\n      propValue: propValue\n    });\n  },\n\n  putListeners: function() {\n    for (var i = 0; i < this.listenersToPut.length; i++) {\n      var listenerToPut = this.listenersToPut[i];\n      ReactBrowserEventEmitter.putListener(\n        listenerToPut.rootNodeID,\n        listenerToPut.propKey,\n        listenerToPut.propValue\n      );\n    }\n  },\n\n  reset: function() {\n    this.listenersToPut.length = 0;\n  },\n\n  destructor: function() {\n    this.reset();\n  }\n});\n\nPooledClass.addPoolingTo(ReactPutListenerQueue);\n\nmodule.exports = ReactPutListenerQueue;\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\"}],\"react/lib/ReactReconcileTransaction\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconcileTransaction\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CallbackQueue = require(\"./CallbackQueue\");\nvar PooledClass = require(\"./PooledClass\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar ReactPutListenerQueue = require(\"./ReactPutListenerQueue\");\nvar Transaction = require(\"./Transaction\");\n\nvar assign = require(\"./Object.assign\");\n\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\n   * the reconciliation.\n   */\n  initialize: function() {\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of\n   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`\n   *   restores the previous value.\n   */\n  close: function(previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n\n/**\n * Provides a queue for collecting `componentDidMount` and\n * `componentDidUpdate` callbacks during the the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function() {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function() {\n    this.reactMountReady.notifyAll();\n  }\n};\n\nvar PUT_LISTENER_QUEUEING = {\n  initialize: function() {\n    this.putListenerQueue.reset();\n  },\n\n  close: function() {\n    this.putListenerQueue.putListeners();\n  }\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [\n  PUT_LISTENER_QUEUEING,\n  SELECTION_RESTORATION,\n  EVENT_SUPPRESSION,\n  ON_DOM_READY_QUEUEING\n];\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\nfunction ReactReconcileTransaction() {\n  this.reinitializeTransaction();\n  // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactTextComponent` checks it in `mountComponent`.`\n  this.renderToStaticMarkup = false;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.putListenerQueue = ReactPutListenerQueue.getPooled();\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap proceedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function() {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function() {\n    return this.reactMountReady;\n  },\n\n  getPutListenerQueue: function() {\n    return this.putListenerQueue;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be resused.\n   */\n  destructor: function() {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n\n    ReactPutListenerQueue.release(this.putListenerQueue);\n    this.putListenerQueue = null;\n  }\n};\n\n\nassign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);\n\nPooledClass.addPoolingTo(ReactReconcileTransaction);\n\nmodule.exports = ReactReconcileTransaction;\n\n},{\"./CallbackQueue\":\"react/lib/CallbackQueue\",\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\",\"./ReactInputSelection\":\"react/lib/ReactInputSelection\",\"./ReactPutListenerQueue\":\"react/lib/ReactPutListenerQueue\",\"./Transaction\":\"react/lib/Transaction\"}],\"react/lib/ReactReconciler\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconciler\n */\n\n'use strict';\n\nvar ReactRef = require(\"./ReactRef\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\n\n/**\n * Helper to call ReactRef.attachRefs with this composite component, split out\n * to avoid allocations in the transaction mount-ready queue.\n */\nfunction attachRefs() {\n  ReactRef.attachRefs(this, this._currentElement);\n}\n\nvar ReactReconciler = {\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function(internalInstance, rootID, transaction, context) {\n    var markup = internalInstance.mountComponent(rootID, transaction, context);\n    if (\"production\" !== process.env.NODE_ENV) {\n      ReactElementValidator.checkAndWarnForMutatedProps(\n        internalInstance._currentElement\n      );\n    }\n    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function(internalInstance) {\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);\n    internalInstance.unmountComponent();\n  },\n\n  /**\n   * Update a component using a new element.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @internal\n   */\n  receiveComponent: function(\n    internalInstance, nextElement, transaction, context\n  ) {\n    var prevElement = internalInstance._currentElement;\n\n    if (nextElement === prevElement && nextElement._owner != null) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for an element created outside a composite to be\n      // deeply mutated and reused.\n      return;\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);\n    }\n\n    var refsChanged = ReactRef.shouldUpdateRefs(\n      prevElement,\n      nextElement\n    );\n\n    if (refsChanged) {\n      ReactRef.detachRefs(internalInstance, prevElement);\n    }\n\n    internalInstance.receiveComponent(nextElement, transaction, context);\n\n    if (refsChanged) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n  },\n\n  /**\n   * Flush any dirty changes in a component.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function(\n    internalInstance,\n    transaction\n  ) {\n    internalInstance.performUpdateIfNecessary(transaction);\n  }\n\n};\n\nmodule.exports = ReactReconciler;\n\n}).call(this,require('_process'))\n\n},{\"./ReactElementValidator\":\"react/lib/ReactElementValidator\",\"./ReactRef\":\"react/lib/ReactRef\",\"_process\":1}],\"react/lib/ReactRef\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactRef\n */\n\n'use strict';\n\nvar ReactOwner = require(\"./ReactOwner\");\n\nvar ReactRef = {};\n\nfunction attachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\n\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\n\nReactRef.attachRefs = function(instance, element) {\n  var ref = element.ref;\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\n\nReactRef.shouldUpdateRefs = function(prevElement, nextElement) {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n\n  return (\n    nextElement._owner !== prevElement._owner ||\n    nextElement.ref !== prevElement.ref\n  );\n};\n\nReactRef.detachRefs = function(instance, element) {\n  var ref = element.ref;\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\n\nmodule.exports = ReactRef;\n\n},{\"./ReactOwner\":\"react/lib/ReactOwner\"}],\"react/lib/ReactRootIndex\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactRootIndex\n * @typechecks\n */\n\n'use strict';\n\nvar ReactRootIndexInjection = {\n  /**\n   * @param {function} _createReactRootIndex\n   */\n  injectCreateReactRootIndex: function(_createReactRootIndex) {\n    ReactRootIndex.createReactRootIndex = _createReactRootIndex;\n  }\n};\n\nvar ReactRootIndex = {\n  createReactRootIndex: null,\n  injection: ReactRootIndexInjection\n};\n\nmodule.exports = ReactRootIndex;\n\n},{}],\"react/lib/ReactServerRenderingTransaction\":[function(require,module,exports){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactServerRenderingTransaction\n * @typechecks\n */\n\n'use strict';\n\nvar PooledClass = require(\"./PooledClass\");\nvar CallbackQueue = require(\"./CallbackQueue\");\nvar ReactPutListenerQueue = require(\"./ReactPutListenerQueue\");\nvar Transaction = require(\"./Transaction\");\n\nvar assign = require(\"./Object.assign\");\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks\n * during the performing of the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function() {\n    this.reactMountReady.reset();\n  },\n\n  close: emptyFunction\n};\n\nvar PUT_LISTENER_QUEUEING = {\n  initialize: function() {\n    this.putListenerQueue.reset();\n  },\n\n  close: emptyFunction\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [\n  PUT_LISTENER_QUEUEING,\n  ON_DOM_READY_QUEUEING\n];\n\n/**\n * @class ReactServerRenderingTransaction\n * @param {boolean} renderToStaticMarkup\n */\nfunction ReactServerRenderingTransaction(renderToStaticMarkup) {\n  this.reinitializeTransaction();\n  this.renderToStaticMarkup = renderToStaticMarkup;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.putListenerQueue = ReactPutListenerQueue.getPooled();\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array} Empty list of operation wrap proceedures.\n   */\n  getTransactionWrappers: function() {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function() {\n    return this.reactMountReady;\n  },\n\n  getPutListenerQueue: function() {\n    return this.putListenerQueue;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be resused.\n   */\n  destructor: function() {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n\n    ReactPutListenerQueue.release(this.putListenerQueue);\n    this.putListenerQueue = null;\n  }\n};\n\n\nassign(\n  ReactServerRenderingTransaction.prototype,\n  Transaction.Mixin,\n  Mixin\n);\n\nPooledClass.addPoolingTo(ReactServerRenderingTransaction);\n\nmodule.exports = ReactServerRenderingTransaction;\n\n},{\"./CallbackQueue\":\"react/lib/CallbackQueue\",\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./ReactPutListenerQueue\":\"react/lib/ReactPutListenerQueue\",\"./Transaction\":\"react/lib/Transaction\",\"./emptyFunction\":\"react/lib/emptyFunction\"}],\"react/lib/ReactServerRendering\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule ReactServerRendering\n */\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactMarkupChecksum = require(\"./ReactMarkupChecksum\");\nvar ReactServerRenderingTransaction =\n  require(\"./ReactServerRenderingTransaction\");\n\nvar emptyObject = require(\"./emptyObject\");\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar invariant = require(\"./invariant\");\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup\n */\nfunction renderToString(element) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    ReactElement.isValidElement(element),\n    'renderToString(): You must pass a valid ReactElement.'\n  ) : invariant(ReactElement.isValidElement(element)));\n\n  var transaction;\n  try {\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(false);\n\n    return transaction.perform(function() {\n      var componentInstance = instantiateReactComponent(element, null);\n      var markup =\n        componentInstance.mountComponent(id, transaction, emptyObject);\n      return ReactMarkupChecksum.addChecksumToMarkup(markup);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n  }\n}\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup, without the extra React ID and checksum\n * (for generating static pages)\n */\nfunction renderToStaticMarkup(element) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    ReactElement.isValidElement(element),\n    'renderToStaticMarkup(): You must pass a valid ReactElement.'\n  ) : invariant(ReactElement.isValidElement(element)));\n\n  var transaction;\n  try {\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(true);\n\n    return transaction.perform(function() {\n      var componentInstance = instantiateReactComponent(element, null);\n      return componentInstance.mountComponent(id, transaction, emptyObject);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n  }\n}\n\nmodule.exports = {\n  renderToString: renderToString,\n  renderToStaticMarkup: renderToStaticMarkup\n};\n\n}).call(this,require('_process'))\n\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./ReactMarkupChecksum\":\"react/lib/ReactMarkupChecksum\",\"./ReactServerRenderingTransaction\":\"react/lib/ReactServerRenderingTransaction\",\"./emptyObject\":\"react/lib/emptyObject\",\"./instantiateReactComponent\":\"react/lib/instantiateReactComponent\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ReactStateSetters\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactStateSetters\n */\n\n'use strict';\n\nvar ReactStateSetters = {\n  /**\n   * Returns a function that calls the provided function, and uses the result\n   * of that to set the component's state.\n   *\n   * @param {ReactCompositeComponent} component\n   * @param {function} funcReturningState Returned callback uses this to\n   *                                      determine how to update state.\n   * @return {function} callback that when invoked uses funcReturningState to\n   *                    determined the object literal to setState.\n   */\n  createStateSetter: function(component, funcReturningState) {\n    return function(a, b, c, d, e, f) {\n      var partialState = funcReturningState.call(component, a, b, c, d, e, f);\n      if (partialState) {\n        component.setState(partialState);\n      }\n    };\n  },\n\n  /**\n   * Returns a single-argument callback that can be used to update a single\n   * key in the component's state.\n   *\n   * Note: this is memoized function, which makes it inexpensive to call.\n   *\n   * @param {ReactCompositeComponent} component\n   * @param {string} key The key in the state that you should update.\n   * @return {function} callback of 1 argument which calls setState() with\n   *                    the provided keyName and callback argument.\n   */\n  createStateKeySetter: function(component, key) {\n    // Memoize the setters.\n    var cache = component.__keySetters || (component.__keySetters = {});\n    return cache[key] || (cache[key] = createStateKeySetter(component, key));\n  }\n};\n\nfunction createStateKeySetter(component, key) {\n  // Partial state is allocated outside of the function closure so it can be\n  // reused with every call, avoiding memory allocation when this function\n  // is called.\n  var partialState = {};\n  return function stateKeySetter(value) {\n    partialState[key] = value;\n    component.setState(partialState);\n  };\n}\n\nReactStateSetters.Mixin = {\n  /**\n   * Returns a function that calls the provided function, and uses the result\n   * of that to set the component's state.\n   *\n   * For example, these statements are equivalent:\n   *\n   *   this.setState({x: 1});\n   *   this.createStateSetter(function(xValue) {\n   *     return {x: xValue};\n   *   })(1);\n   *\n   * @param {function} funcReturningState Returned callback uses this to\n   *                                      determine how to update state.\n   * @return {function} callback that when invoked uses funcReturningState to\n   *                    determined the object literal to setState.\n   */\n  createStateSetter: function(funcReturningState) {\n    return ReactStateSetters.createStateSetter(this, funcReturningState);\n  },\n\n  /**\n   * Returns a single-argument callback that can be used to update a single\n   * key in the component's state.\n   *\n   * For example, these statements are equivalent:\n   *\n   *   this.setState({x: 1});\n   *   this.createStateKeySetter('x')(1);\n   *\n   * Note: this is memoized function, which makes it inexpensive to call.\n   *\n   * @param {string} key The key in the state that you should update.\n   * @return {function} callback of 1 argument which calls setState() with\n   *                    the provided keyName and callback argument.\n   */\n  createStateKeySetter: function(key) {\n    return ReactStateSetters.createStateKeySetter(this, key);\n  }\n};\n\nmodule.exports = ReactStateSetters;\n\n},{}],\"react/lib/ReactTestUtils\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTestUtils\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar React = require(\"./React\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar assign = require(\"./Object.assign\");\nvar emptyObject = require(\"./emptyObject\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nfunction Event(suffix) {}\n\n/**\n * @class ReactTestUtils\n */\n\n/**\n * Todo: Support the entire DOM.scry query syntax. For now, these simple\n * utilities will suffice for testing purposes.\n * @lends ReactTestUtils\n */\nvar ReactTestUtils = {\n  renderIntoDocument: function(instance) {\n    var div = document.createElement('div');\n    // None of our tests actually require attaching the container to the\n    // DOM, and doing so creates a mess that we rely on test isolation to\n    // clean up, so we're going to stop honoring the name of this method\n    // (and probably rename it eventually) if no problems arise.\n    // document.documentElement.appendChild(div);\n    return React.render(instance, div);\n  },\n\n  isElement: function(element) {\n    return ReactElement.isValidElement(element);\n  },\n\n  isElementOfType: function(inst, convenienceConstructor) {\n    return (\n      ReactElement.isValidElement(inst) &&\n      inst.type === convenienceConstructor\n    );\n  },\n\n  isDOMComponent: function(inst) {\n    // TODO: Fix this heuristic. It's just here because composites can currently\n    // pretend to be DOM components.\n    return !!(inst && inst.tagName && inst.getDOMNode);\n  },\n\n  isDOMComponentElement: function(inst) {\n    return !!(inst &&\n              ReactElement.isValidElement(inst) &&\n              !!inst.tagName);\n  },\n\n  isCompositeComponent: function(inst) {\n    return typeof inst.render === 'function' &&\n           typeof inst.setState === 'function';\n  },\n\n  isCompositeComponentWithType: function(inst, type) {\n    return !!(ReactTestUtils.isCompositeComponent(inst) &&\n             (inst.constructor === type));\n  },\n\n  isCompositeComponentElement: function(inst) {\n    if (!ReactElement.isValidElement(inst)) {\n      return false;\n    }\n    // We check the prototype of the type that will get mounted, not the\n    // instance itself. This is a future proof way of duck typing.\n    var prototype = inst.type.prototype;\n    return (\n      typeof prototype.render === 'function' &&\n      typeof prototype.setState === 'function'\n    );\n  },\n\n  isCompositeComponentElementWithType: function(inst, type) {\n    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&\n             (inst.constructor === type));\n  },\n\n  getRenderedChildOfCompositeComponent: function(inst) {\n    if (!ReactTestUtils.isCompositeComponent(inst)) {\n      return null;\n    }\n    var internalInstance = ReactInstanceMap.get(inst);\n    return internalInstance._renderedComponent.getPublicInstance();\n  },\n\n  findAllInRenderedTree: function(inst, test) {\n    if (!inst) {\n      return [];\n    }\n    var ret = test(inst) ? [inst] : [];\n    if (ReactTestUtils.isDOMComponent(inst)) {\n      var internalInstance = ReactInstanceMap.get(inst);\n      var renderedChildren = internalInstance\n        ._renderedComponent\n        ._renderedChildren;\n      var key;\n      for (key in renderedChildren) {\n        if (!renderedChildren.hasOwnProperty(key)) {\n          continue;\n        }\n        if (!renderedChildren[key].getPublicInstance) {\n          continue;\n        }\n        ret = ret.concat(\n          ReactTestUtils.findAllInRenderedTree(\n            renderedChildren[key].getPublicInstance(),\n            test\n          )\n        );\n      }\n    } else if (ReactTestUtils.isCompositeComponent(inst)) {\n      ret = ret.concat(\n        ReactTestUtils.findAllInRenderedTree(\n          ReactTestUtils.getRenderedChildOfCompositeComponent(inst),\n          test\n        )\n      );\n    }\n    return ret;\n  },\n\n  /**\n   * Finds all instance of components in the rendered tree that are DOM\n   * components with the class name matching `className`.\n   * @return an array of all the matches.\n   */\n  scryRenderedDOMComponentsWithClass: function(root, className) {\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {\n      var instClassName = inst.props.className;\n      return ReactTestUtils.isDOMComponent(inst) && (\n        (instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1)\n      );\n    });\n  },\n\n  /**\n   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactDOMComponent} The one match.\n   */\n  findRenderedDOMComponentWithClass: function(root, className) {\n    var all =\n      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match ' +\n        '(found: ' + all.length + ') for class:' + className\n      );\n    }\n    return all[0];\n  },\n\n\n  /**\n   * Finds all instance of components in the rendered tree that are DOM\n   * components with the tag name matching `tagName`.\n   * @return an array of all the matches.\n   */\n  scryRenderedDOMComponentsWithTag: function(root, tagName) {\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {\n      return ReactTestUtils.isDOMComponent(inst) &&\n            inst.tagName === tagName.toUpperCase();\n    });\n  },\n\n  /**\n   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactDOMComponent} The one match.\n   */\n  findRenderedDOMComponentWithTag: function(root, tagName) {\n    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match for tag:' + tagName);\n    }\n    return all[0];\n  },\n\n\n  /**\n   * Finds all instances of components with type equal to `componentType`.\n   * @return an array of all the matches.\n   */\n  scryRenderedComponentsWithType: function(root, componentType) {\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {\n      return ReactTestUtils.isCompositeComponentWithType(\n        inst,\n        componentType\n      );\n    });\n  },\n\n  /**\n   * Same as `scryRenderedComponentsWithType` but expects there to be one result\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactComponent} The one match.\n   */\n  findRenderedComponentWithType: function(root, componentType) {\n    var all = ReactTestUtils.scryRenderedComponentsWithType(\n      root,\n      componentType\n    );\n    if (all.length !== 1) {\n      throw new Error(\n        'Did not find exactly one match for componentType:' + componentType\n      );\n    }\n    return all[0];\n  },\n\n  /**\n   * Pass a mocked component module to this method to augment it with\n   * useful methods that allow it to be used as a dummy React component.\n   * Instead of rendering as usual, the component will become a simple\n   * <div> containing any provided children.\n   *\n   * @param {object} module the mock function object exported from a\n   *                        module that defines the component to be mocked\n   * @param {?string} mockTagName optional dummy root tag name to return\n   *                              from render method (overrides\n   *                              module.mockTagName if provided)\n   * @return {object} the ReactTestUtils object (for chaining)\n   */\n  mockComponent: function(module, mockTagName) {\n    mockTagName = mockTagName || module.mockTagName || \"div\";\n\n    module.prototype.render.mockImplementation(function() {\n      return React.createElement(\n        mockTagName,\n        null,\n        this.props.children\n      );\n    });\n\n    return this;\n  },\n\n  /**\n   * Simulates a top level event being dispatched from a raw event that occured\n   * on an `Element` node.\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`\n   * @param {!Element} node The dom to simulate an event occurring on.\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.\n   */\n  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {\n    fakeNativeEvent.target = node;\n    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(\n      topLevelType,\n      fakeNativeEvent\n    );\n  },\n\n  /**\n   * Simulates a top level event being dispatched from a raw event that occured\n   * on the `ReactDOMComponent` `comp`.\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.\n   * @param comp {!ReactDOMComponent}\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.\n   */\n  simulateNativeEventOnDOMComponent: function(\n      topLevelType,\n      comp,\n      fakeNativeEvent) {\n    ReactTestUtils.simulateNativeEventOnNode(\n      topLevelType,\n      comp.getDOMNode(),\n      fakeNativeEvent\n    );\n  },\n\n  nativeTouchData: function(x, y) {\n    return {\n      touches: [\n        {pageX: x, pageY: y}\n      ]\n    };\n  },\n\n  createRenderer: function() {\n    return new ReactShallowRenderer();\n  },\n\n  Simulate: null,\n  SimulateNative: {}\n};\n\n/**\n * @class ReactShallowRenderer\n */\nvar ReactShallowRenderer = function() {\n  this._instance = null;\n};\n\nReactShallowRenderer.prototype.getRenderOutput = function() {\n  return (\n    (this._instance && this._instance._renderedComponent &&\n     this._instance._renderedComponent._renderedOutput)\n    || null\n  );\n};\n\nvar NoopInternalComponent = function(element) {\n  this._renderedOutput = element;\n  this._currentElement = element === null || element === false ?\n    ReactEmptyComponent.emptyElement :\n    element;\n};\n\nNoopInternalComponent.prototype = {\n\n  mountComponent: function() {\n  },\n\n  receiveComponent: function(element) {\n    this._renderedOutput = element;\n    this._currentElement = element === null || element === false ?\n      ReactEmptyComponent.emptyElement :\n      element;\n  },\n\n  unmountComponent: function() {\n  }\n\n};\n\nvar ShallowComponentWrapper = function() { };\nassign(\n  ShallowComponentWrapper.prototype,\n  ReactCompositeComponent.Mixin, {\n    _instantiateReactComponent: function(element) {\n      return new NoopInternalComponent(element);\n    },\n    _replaceNodeWithMarkupByID: function() {},\n    _renderValidatedComponent:\n      ReactCompositeComponent.Mixin.\n        _renderValidatedComponentWithoutOwnerOrContext\n  }\n);\n\nReactShallowRenderer.prototype.render = function(element, context) {\n  if (!context) {\n    context = emptyObject;\n  }\n  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();\n  this._render(element, transaction, context);\n  ReactUpdates.ReactReconcileTransaction.release(transaction);\n};\n\nReactShallowRenderer.prototype.unmount = function() {\n  if (this._instance) {\n    this._instance.unmountComponent();\n  }\n};\n\nReactShallowRenderer.prototype._render = function(element, transaction, context) {\n  if (!this._instance) {\n    var rootID = ReactInstanceHandles.createReactRootID();\n    var instance = new ShallowComponentWrapper(element.type);\n    instance.construct(element);\n\n    instance.mountComponent(rootID, transaction, context);\n\n    this._instance = instance;\n  } else {\n    this._instance.receiveComponent(element, transaction, context);\n  }\n};\n\n/**\n * Exports:\n *\n * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`\n * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`\n * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`\n * - ... (All keys from event plugin `eventTypes` objects)\n */\nfunction makeSimulator(eventType) {\n  return function(domComponentOrNode, eventData) {\n    var node;\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {\n      node = domComponentOrNode.getDOMNode();\n    } else if (domComponentOrNode.tagName) {\n      node = domComponentOrNode;\n    }\n\n    var fakeNativeEvent = new Event();\n    fakeNativeEvent.target = node;\n    // We don't use SyntheticEvent.getPooled in order to not have to worry about\n    // properly destroying any properties assigned from `eventData` upon release\n    var event = new SyntheticEvent(\n      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],\n      ReactMount.getID(node),\n      fakeNativeEvent\n    );\n    assign(event, eventData);\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n\n    ReactUpdates.batchedUpdates(function() {\n      EventPluginHub.enqueueEvents(event);\n      EventPluginHub.processEventQueue();\n    });\n  };\n}\n\nfunction buildSimulators() {\n  ReactTestUtils.Simulate = {};\n\n  var eventType;\n  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {\n    /**\n     * @param {!Element || ReactDOMComponent} domComponentOrNode\n     * @param {?object} eventData Fake event data to use in SyntheticEvent.\n     */\n    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);\n  }\n}\n\n// Rebuild ReactTestUtils.Simulate whenever event plugins are injected\nvar oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;\nEventPluginHub.injection.injectEventPluginOrder = function() {\n  oldInjectEventPluginOrder.apply(this, arguments);\n  buildSimulators();\n};\nvar oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;\nEventPluginHub.injection.injectEventPluginsByName = function() {\n  oldInjectEventPlugins.apply(this, arguments);\n  buildSimulators();\n};\n\nbuildSimulators();\n\n/**\n * Exports:\n *\n * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`\n * - ... (All keys from `EventConstants.topLevelTypes`)\n *\n * Note: Top level event types are a subset of the entire set of handler types\n * (which include a broader set of \"synthetic\" events). For example, onDragDone\n * is a synthetic event. Except when testing an event plugin or React's event\n * handling code specifically, you probably want to use ReactTestUtils.Simulate\n * to dispatch synthetic events.\n */\n\nfunction makeNativeSimulator(eventType) {\n  return function(domComponentOrNode, nativeEventData) {\n    var fakeNativeEvent = new Event(eventType);\n    assign(fakeNativeEvent, nativeEventData);\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {\n      ReactTestUtils.simulateNativeEventOnDOMComponent(\n        eventType,\n        domComponentOrNode,\n        fakeNativeEvent\n      );\n    } else if (!!domComponentOrNode.tagName) {\n      // Will allow on actual dom nodes.\n      ReactTestUtils.simulateNativeEventOnNode(\n        eventType,\n        domComponentOrNode,\n        fakeNativeEvent\n      );\n    }\n  };\n}\n\nvar eventType;\nfor (eventType in topLevelTypes) {\n  // Event type is stored as 'topClick' - we transform that to 'click'\n  var convenienceName = eventType.indexOf('top') === 0 ?\n    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;\n  /**\n   * @param {!Element || ReactDOMComponent} domComponentOrNode\n   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.\n   */\n  ReactTestUtils.SimulateNative[convenienceName] =\n    makeNativeSimulator(eventType);\n}\n\nmodule.exports = ReactTestUtils;\n\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPluginHub\":\"react/lib/EventPluginHub\",\"./EventPropagators\":\"react/lib/EventPropagators\",\"./Object.assign\":\"react/lib/Object.assign\",\"./React\":\"react/lib/React\",\"./ReactBrowserEventEmitter\":\"react/lib/ReactBrowserEventEmitter\",\"./ReactCompositeComponent\":\"react/lib/ReactCompositeComponent\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactEmptyComponent\":\"react/lib/ReactEmptyComponent\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./SyntheticEvent\":\"react/lib/SyntheticEvent\",\"./emptyObject\":\"react/lib/emptyObject\"}],\"react/lib/ReactTransitionChildMapping\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule ReactTransitionChildMapping\n */\n\n'use strict';\n\nvar ReactChildren = require(\"./ReactChildren\");\nvar ReactFragment = require(\"./ReactFragment\");\n\nvar ReactTransitionChildMapping = {\n  /**\n   * Given `this.props.children`, return an object mapping key to child. Just\n   * simple syntactic sugar around ReactChildren.map().\n   *\n   * @param {*} children `this.props.children`\n   * @return {object} Mapping of key to child\n   */\n  getChildMapping: function(children) {\n    if (!children) {\n      return children;\n    }\n    return ReactFragment.extract(ReactChildren.map(children, function(child) {\n      return child;\n    }));\n  },\n\n  /**\n   * When you're adding or removing children some may be added or removed in the\n   * same render pass. We want to show *both* since we want to simultaneously\n   * animate elements in and out. This function takes a previous set of keys\n   * and a new set of keys and merges them with its best guess of the correct\n   * ordering. In the future we may expose some of the utilities in\n   * ReactMultiChild to make this easy, but for now React itself does not\n   * directly have this concept of the union of prevChildren and nextChildren\n   * so we implement it here.\n   *\n   * @param {object} prev prev children as returned from\n   * `ReactTransitionChildMapping.getChildMapping()`.\n   * @param {object} next next children as returned from\n   * `ReactTransitionChildMapping.getChildMapping()`.\n   * @return {object} a key set that contains all keys in `prev` and all keys\n   * in `next` in a reasonable order.\n   */\n  mergeChildMappings: function(prev, next) {\n    prev = prev || {};\n    next = next || {};\n\n    function getValueForKey(key) {\n      if (next.hasOwnProperty(key)) {\n        return next[key];\n      } else {\n        return prev[key];\n      }\n    }\n\n    // For each key of `next`, the list of keys to insert before that key in\n    // the combined list\n    var nextKeysPending = {};\n\n    var pendingKeys = [];\n    for (var prevKey in prev) {\n      if (next.hasOwnProperty(prevKey)) {\n        if (pendingKeys.length) {\n          nextKeysPending[prevKey] = pendingKeys;\n          pendingKeys = [];\n        }\n      } else {\n        pendingKeys.push(prevKey);\n      }\n    }\n\n    var i;\n    var childMapping = {};\n    for (var nextKey in next) {\n      if (nextKeysPending.hasOwnProperty(nextKey)) {\n        for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n          var pendingNextKey = nextKeysPending[nextKey][i];\n          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(\n            pendingNextKey\n          );\n        }\n      }\n      childMapping[nextKey] = getValueForKey(nextKey);\n    }\n\n    // Finally, add the keys which didn't appear before any key in `next`\n    for (i = 0; i < pendingKeys.length; i++) {\n      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n    }\n\n    return childMapping;\n  }\n};\n\nmodule.exports = ReactTransitionChildMapping;\n\n},{\"./ReactChildren\":\"react/lib/ReactChildren\",\"./ReactFragment\":\"react/lib/ReactFragment\"}],\"react/lib/ReactTransitionEvents\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTransitionEvents\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\n/**\n * EVENT_NAME_MAP is used to determine which event fired when a\n * transition/animation ends, based on the style property used to\n * define that event.\n */\nvar EVENT_NAME_MAP = {\n  transitionend: {\n    'transition': 'transitionend',\n    'WebkitTransition': 'webkitTransitionEnd',\n    'MozTransition': 'mozTransitionEnd',\n    'OTransition': 'oTransitionEnd',\n    'msTransition': 'MSTransitionEnd'\n  },\n\n  animationend: {\n    'animation': 'animationend',\n    'WebkitAnimation': 'webkitAnimationEnd',\n    'MozAnimation': 'mozAnimationEnd',\n    'OAnimation': 'oAnimationEnd',\n    'msAnimation': 'MSAnimationEnd'\n  }\n};\n\nvar endEvents = [];\n\nfunction detectEvents() {\n  var testEl = document.createElement('div');\n  var style = testEl.style;\n\n  // On some platforms, in particular some releases of Android 4.x,\n  // the un-prefixed \"animation\" and \"transition\" properties are defined on the\n  // style object but the events that fire will still be prefixed, so we need\n  // to check if the un-prefixed events are useable, and if not remove them\n  // from the map\n  if (!('AnimationEvent' in window)) {\n    delete EVENT_NAME_MAP.animationend.animation;\n  }\n\n  if (!('TransitionEvent' in window)) {\n    delete EVENT_NAME_MAP.transitionend.transition;\n  }\n\n  for (var baseEventName in EVENT_NAME_MAP) {\n    var baseEvents = EVENT_NAME_MAP[baseEventName];\n    for (var styleName in baseEvents) {\n      if (styleName in style) {\n        endEvents.push(baseEvents[styleName]);\n        break;\n      }\n    }\n  }\n}\n\nif (ExecutionEnvironment.canUseDOM) {\n  detectEvents();\n}\n\n// We use the raw {add|remove}EventListener() call because EventListener\n// does not know how to remove event listeners and we really should\n// clean up. Also, these events are not triggered in older browsers\n// so we should be A-OK here.\n\nfunction addEventListener(node, eventName, eventListener) {\n  node.addEventListener(eventName, eventListener, false);\n}\n\nfunction removeEventListener(node, eventName, eventListener) {\n  node.removeEventListener(eventName, eventListener, false);\n}\n\nvar ReactTransitionEvents = {\n  addEndEventListener: function(node, eventListener) {\n    if (endEvents.length === 0) {\n      // If CSS transitions are not supported, trigger an \"end animation\"\n      // event immediately.\n      window.setTimeout(eventListener, 0);\n      return;\n    }\n    endEvents.forEach(function(endEvent) {\n      addEventListener(node, endEvent, eventListener);\n    });\n  },\n\n  removeEndEventListener: function(node, eventListener) {\n    if (endEvents.length === 0) {\n      return;\n    }\n    endEvents.forEach(function(endEvent) {\n      removeEventListener(node, endEvent, eventListener);\n    });\n  }\n};\n\nmodule.exports = ReactTransitionEvents;\n\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\"}],\"react/lib/ReactTransitionGroup\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTransitionGroup\n */\n\n'use strict';\n\nvar React = require(\"./React\");\nvar ReactTransitionChildMapping = require(\"./ReactTransitionChildMapping\");\n\nvar assign = require(\"./Object.assign\");\nvar cloneWithProps = require(\"./cloneWithProps\");\nvar emptyFunction = require(\"./emptyFunction\");\n\nvar ReactTransitionGroup = React.createClass({\n  displayName: 'ReactTransitionGroup',\n\n  propTypes: {\n    component: React.PropTypes.any,\n    childFactory: React.PropTypes.func\n  },\n\n  getDefaultProps: function() {\n    return {\n      component: 'span',\n      childFactory: emptyFunction.thatReturnsArgument\n    };\n  },\n\n  getInitialState: function() {\n    return {\n      children: ReactTransitionChildMapping.getChildMapping(this.props.children)\n    };\n  },\n\n  componentWillMount: function() {\n    this.currentlyTransitioningKeys = {};\n    this.keysToEnter = [];\n    this.keysToLeave = [];\n  },\n\n  componentDidMount: function() {\n    var initialChildMapping = this.state.children;\n    for (var key in initialChildMapping) {\n      if (initialChildMapping[key]) {\n        this.performAppear(key);\n      }\n    }\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(\n      nextProps.children\n    );\n    var prevChildMapping = this.state.children;\n\n    this.setState({\n      children: ReactTransitionChildMapping.mergeChildMappings(\n        prevChildMapping,\n        nextChildMapping\n      )\n    });\n\n    var key;\n\n    for (key in nextChildMapping) {\n      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);\n      if (nextChildMapping[key] && !hasPrev &&\n          !this.currentlyTransitioningKeys[key]) {\n        this.keysToEnter.push(key);\n      }\n    }\n\n    for (key in prevChildMapping) {\n      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);\n      if (prevChildMapping[key] && !hasNext &&\n          !this.currentlyTransitioningKeys[key]) {\n        this.keysToLeave.push(key);\n      }\n    }\n\n    // If we want to someday check for reordering, we could do it here.\n  },\n\n  componentDidUpdate: function() {\n    var keysToEnter = this.keysToEnter;\n    this.keysToEnter = [];\n    keysToEnter.forEach(this.performEnter);\n\n    var keysToLeave = this.keysToLeave;\n    this.keysToLeave = [];\n    keysToLeave.forEach(this.performLeave);\n  },\n\n  performAppear: function(key) {\n    this.currentlyTransitioningKeys[key] = true;\n\n    var component = this.refs[key];\n\n    if (component.componentWillAppear) {\n      component.componentWillAppear(\n        this._handleDoneAppearing.bind(this, key)\n      );\n    } else {\n      this._handleDoneAppearing(key);\n    }\n  },\n\n  _handleDoneAppearing: function(key) {\n    var component = this.refs[key];\n    if (component.componentDidAppear) {\n      component.componentDidAppear();\n    }\n\n    delete this.currentlyTransitioningKeys[key];\n\n    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(\n      this.props.children\n    );\n\n    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {\n      // This was removed before it had fully appeared. Remove it.\n      this.performLeave(key);\n    }\n  },\n\n  performEnter: function(key) {\n    this.currentlyTransitioningKeys[key] = true;\n\n    var component = this.refs[key];\n\n    if (component.componentWillEnter) {\n      component.componentWillEnter(\n        this._handleDoneEntering.bind(this, key)\n      );\n    } else {\n      this._handleDoneEntering(key);\n    }\n  },\n\n  _handleDoneEntering: function(key) {\n    var component = this.refs[key];\n    if (component.componentDidEnter) {\n      component.componentDidEnter();\n    }\n\n    delete this.currentlyTransitioningKeys[key];\n\n    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(\n      this.props.children\n    );\n\n    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {\n      // This was removed before it had fully entered. Remove it.\n      this.performLeave(key);\n    }\n  },\n\n  performLeave: function(key) {\n    this.currentlyTransitioningKeys[key] = true;\n\n    var component = this.refs[key];\n    if (component.componentWillLeave) {\n      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));\n    } else {\n      // Note that this is somewhat dangerous b/c it calls setState()\n      // again, effectively mutating the component before all the work\n      // is done.\n      this._handleDoneLeaving(key);\n    }\n  },\n\n  _handleDoneLeaving: function(key) {\n    var component = this.refs[key];\n\n    if (component.componentDidLeave) {\n      component.componentDidLeave();\n    }\n\n    delete this.currentlyTransitioningKeys[key];\n\n    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(\n      this.props.children\n    );\n\n    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {\n      // This entered again before it fully left. Add it again.\n      this.performEnter(key);\n    } else {\n      var newChildren = assign({}, this.state.children);\n      delete newChildren[key];\n      this.setState({children: newChildren});\n    }\n  },\n\n  render: function() {\n    // TODO: we could get rid of the need for the wrapper node\n    // by cloning a single child\n    var childrenToRender = [];\n    for (var key in this.state.children) {\n      var child = this.state.children[key];\n      if (child) {\n        // You may need to apply reactive updates to a child as it is leaving.\n        // The normal React way to do it won't work since the child will have\n        // already been removed. In case you need this behavior you can provide\n        // a childFactory function to wrap every child, even the ones that are\n        // leaving.\n        childrenToRender.push(cloneWithProps(\n          this.props.childFactory(child),\n          {ref: key, key: key}\n        ));\n      }\n    }\n    return React.createElement(\n      this.props.component,\n      this.props,\n      childrenToRender\n    );\n  }\n});\n\nmodule.exports = ReactTransitionGroup;\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./React\":\"react/lib/React\",\"./ReactTransitionChildMapping\":\"react/lib/ReactTransitionChildMapping\",\"./cloneWithProps\":\"react/lib/cloneWithProps\",\"./emptyFunction\":\"react/lib/emptyFunction\"}],\"react/lib/ReactUpdateQueue\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactUpdateQueue\n */\n\n'use strict';\n\nvar ReactLifeCycle = require(\"./ReactLifeCycle\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\n\nfunction enqueueUpdate(internalInstance) {\n  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {\n    // If we're in a componentWillMount handler, don't enqueue a rerender\n    // because ReactUpdates assumes we're in a browser context (which is\n    // wrong for server rendering) and we're about to do a render anyway.\n    // See bug in #1740.\n    ReactUpdates.enqueueUpdate(internalInstance);\n  }\n}\n\nfunction getInternalInstanceReadyForUpdate(publicInstance, callerName) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    ReactCurrentOwner.current == null,\n    '%s(...): Cannot update during an existing state transition ' +\n    '(such as within `render`). Render methods should be a pure function ' +\n    'of props and state.',\n    callerName\n  ) : invariant(ReactCurrentOwner.current == null));\n\n  var internalInstance = ReactInstanceMap.get(publicInstance);\n  if (!internalInstance) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      // Only warn when we have a callerName. Otherwise we should be silent.\n      // We're probably calling from enqueueCallback. We don't want to warn\n      // there because we already warned for the corresponding lifecycle method.\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        !callerName,\n        '%s(...): Can only update a mounted or mounting component. ' +\n        'This usually means you called %s() on an unmounted ' +\n        'component. This is a no-op.',\n        callerName,\n        callerName\n      ) : null);\n    }\n    return null;\n  }\n\n  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {\n    return null;\n  }\n\n  return internalInstance;\n}\n\n/**\n * ReactUpdateQueue allows for state updates to be scheduled into a later\n * reconciliation step.\n */\nvar ReactUpdateQueue = {\n\n  /**\n   * Enqueue a callback that will be executed after all the pending updates\n   * have processed.\n   *\n   * @param {ReactClass} publicInstance The instance to use as `this` context.\n   * @param {?function} callback Called after state is updated.\n   * @internal\n   */\n  enqueueCallback: function(publicInstance, callback) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof callback === 'function',\n      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +\n      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +\n      'isn\\'t callable.'\n    ) : invariant(typeof callback === 'function'));\n    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);\n\n    // Previously we would throw an error if we didn't have an internal\n    // instance. Since we want to make it a no-op instead, we mirror the same\n    // behavior we have in other enqueue* methods.\n    // We also need to ignore callbacks in componentWillMount. See\n    // enqueueUpdates.\n    if (!internalInstance ||\n        internalInstance === ReactLifeCycle.currentlyMountingInstance) {\n      return null;\n    }\n\n    if (internalInstance._pendingCallbacks) {\n      internalInstance._pendingCallbacks.push(callback);\n    } else {\n      internalInstance._pendingCallbacks = [callback];\n    }\n    // TODO: The callback here is ignored when setState is called from\n    // componentWillMount. Either fix it or disallow doing so completely in\n    // favor of getInitialState. Alternatively, we can disallow\n    // componentWillMount during server-side rendering.\n    enqueueUpdate(internalInstance);\n  },\n\n  enqueueCallbackInternal: function(internalInstance, callback) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof callback === 'function',\n      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +\n      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +\n      'isn\\'t callable.'\n    ) : invariant(typeof callback === 'function'));\n    if (internalInstance._pendingCallbacks) {\n      internalInstance._pendingCallbacks.push(callback);\n    } else {\n      internalInstance._pendingCallbacks = [callback];\n    }\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldUpdateComponent`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @internal\n   */\n  enqueueForceUpdate: function(publicInstance) {\n    var internalInstance = getInternalInstanceReadyForUpdate(\n      publicInstance,\n      'forceUpdate'\n    );\n\n    if (!internalInstance) {\n      return;\n    }\n\n    internalInstance._pendingForceUpdate = true;\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @internal\n   */\n  enqueueReplaceState: function(publicInstance, completeState) {\n    var internalInstance = getInternalInstanceReadyForUpdate(\n      publicInstance,\n      'replaceState'\n    );\n\n    if (!internalInstance) {\n      return;\n    }\n\n    internalInstance._pendingStateQueue = [completeState];\n    internalInstance._pendingReplaceState = true;\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @internal\n   */\n  enqueueSetState: function(publicInstance, partialState) {\n    var internalInstance = getInternalInstanceReadyForUpdate(\n      publicInstance,\n      'setState'\n    );\n\n    if (!internalInstance) {\n      return;\n    }\n\n    var queue =\n      internalInstance._pendingStateQueue ||\n      (internalInstance._pendingStateQueue = []);\n    queue.push(partialState);\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Sets a subset of the props.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialProps Subset of the next props.\n   * @internal\n   */\n  enqueueSetProps: function(publicInstance, partialProps) {\n    var internalInstance = getInternalInstanceReadyForUpdate(\n      publicInstance,\n      'setProps'\n    );\n\n    if (!internalInstance) {\n      return;\n    }\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      internalInstance._isTopLevel,\n      'setProps(...): You called `setProps` on a ' +\n      'component with a parent. This is an anti-pattern since props will ' +\n      'get reactively updated when rendered. Instead, change the owner\\'s ' +\n      '`render` method to pass the correct value as props to the component ' +\n      'where it is created.'\n    ) : invariant(internalInstance._isTopLevel));\n\n    // Merge with the pending element if it exists, otherwise with existing\n    // element props.\n    var element = internalInstance._pendingElement ||\n                  internalInstance._currentElement;\n    var props = assign({}, element.props, partialProps);\n    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(\n      element,\n      props\n    );\n\n    enqueueUpdate(internalInstance);\n  },\n\n  /**\n   * Replaces all of the props.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} props New props.\n   * @internal\n   */\n  enqueueReplaceProps: function(publicInstance, props) {\n    var internalInstance = getInternalInstanceReadyForUpdate(\n      publicInstance,\n      'replaceProps'\n    );\n\n    if (!internalInstance) {\n      return;\n    }\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      internalInstance._isTopLevel,\n      'replaceProps(...): You called `replaceProps` on a ' +\n      'component with a parent. This is an anti-pattern since props will ' +\n      'get reactively updated when rendered. Instead, change the owner\\'s ' +\n      '`render` method to pass the correct value as props to the component ' +\n      'where it is created.'\n    ) : invariant(internalInstance._isTopLevel));\n\n    // Merge with the pending element if it exists, otherwise with existing\n    // element props.\n    var element = internalInstance._pendingElement ||\n                  internalInstance._currentElement;\n    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(\n      element,\n      props\n    );\n\n    enqueueUpdate(internalInstance);\n  },\n\n  enqueueElementInternal: function(internalInstance, newElement) {\n    internalInstance._pendingElement = newElement;\n    enqueueUpdate(internalInstance);\n  }\n\n};\n\nmodule.exports = ReactUpdateQueue;\n\n}).call(this,require('_process'))\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./ReactLifeCycle\":\"react/lib/ReactLifeCycle\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactUpdates\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactUpdates\n */\n\n'use strict';\n\nvar CallbackQueue = require(\"./CallbackQueue\");\nvar PooledClass = require(\"./PooledClass\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactReconciler = require(\"./ReactReconciler\");\nvar Transaction = require(\"./Transaction\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\n\nvar dirtyComponents = [];\nvar asapCallbackQueue = CallbackQueue.getPooled();\nvar asapEnqueued = false;\n\nvar batchingStrategy = null;\n\nfunction ensureInjected() {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    ReactUpdates.ReactReconcileTransaction && batchingStrategy,\n    'ReactUpdates: must inject a reconcile transaction class and batching ' +\n    'strategy'\n  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));\n}\n\nvar NESTED_UPDATES = {\n  initialize: function() {\n    this.dirtyComponentsLength = dirtyComponents.length;\n  },\n  close: function() {\n    if (this.dirtyComponentsLength !== dirtyComponents.length) {\n      // Additional updates were enqueued by componentDidUpdate handlers or\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run\n      // these new updates so that if A's componentDidUpdate calls setState on\n      // B, B will update before the callback A's updater provided when calling\n      // setState.\n      dirtyComponents.splice(0, this.dirtyComponentsLength);\n      flushBatchedUpdates();\n    } else {\n      dirtyComponents.length = 0;\n    }\n  }\n};\n\nvar UPDATE_QUEUEING = {\n  initialize: function() {\n    this.callbackQueue.reset();\n  },\n  close: function() {\n    this.callbackQueue.notifyAll();\n  }\n};\n\nvar TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];\n\nfunction ReactUpdatesFlushTransaction() {\n  this.reinitializeTransaction();\n  this.dirtyComponentsLength = null;\n  this.callbackQueue = CallbackQueue.getPooled();\n  this.reconcileTransaction =\n    ReactUpdates.ReactReconcileTransaction.getPooled();\n}\n\nassign(\n  ReactUpdatesFlushTransaction.prototype,\n  Transaction.Mixin, {\n  getTransactionWrappers: function() {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  destructor: function() {\n    this.dirtyComponentsLength = null;\n    CallbackQueue.release(this.callbackQueue);\n    this.callbackQueue = null;\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);\n    this.reconcileTransaction = null;\n  },\n\n  perform: function(method, scope, a) {\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`\n    // with this transaction's wrappers around it.\n    return Transaction.Mixin.perform.call(\n      this,\n      this.reconcileTransaction.perform,\n      this.reconcileTransaction,\n      method,\n      scope,\n      a\n    );\n  }\n});\n\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);\n\nfunction batchedUpdates(callback, a, b, c, d) {\n  ensureInjected();\n  batchingStrategy.batchedUpdates(callback, a, b, c, d);\n}\n\n/**\n * Array comparator for ReactComponents by mount ordering.\n *\n * @param {ReactComponent} c1 first component you're comparing\n * @param {ReactComponent} c2 second component you're comparing\n * @return {number} Return value usable by Array.prototype.sort().\n */\nfunction mountOrderComparator(c1, c2) {\n  return c1._mountOrder - c2._mountOrder;\n}\n\nfunction runBatchedUpdates(transaction) {\n  var len = transaction.dirtyComponentsLength;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    len === dirtyComponents.length,\n    'Expected flush transaction\\'s stored dirty-components length (%s) to ' +\n    'match dirty-components array length (%s).',\n    len,\n    dirtyComponents.length\n  ) : invariant(len === dirtyComponents.length));\n\n  // Since reconciling a component higher in the owner hierarchy usually (not\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile\n  // them before their children by sorting the array.\n  dirtyComponents.sort(mountOrderComparator);\n\n  for (var i = 0; i < len; i++) {\n    // If a component is unmounted before pending changes apply, it will still\n    // be here, but we assume that it has cleared its _pendingCallbacks and\n    // that performUpdateIfNecessary is a noop.\n    var component = dirtyComponents[i];\n\n    // If performUpdateIfNecessary happens to enqueue any new updates, we\n    // shouldn't execute the callbacks until the next render happens, so\n    // stash the callbacks first\n    var callbacks = component._pendingCallbacks;\n    component._pendingCallbacks = null;\n\n    ReactReconciler.performUpdateIfNecessary(\n      component,\n      transaction.reconcileTransaction\n    );\n\n    if (callbacks) {\n      for (var j = 0; j < callbacks.length; j++) {\n        transaction.callbackQueue.enqueue(\n          callbacks[j],\n          component.getPublicInstance()\n        );\n      }\n    }\n  }\n}\n\nvar flushBatchedUpdates = function() {\n  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents\n  // array and perform any updates enqueued by mount-ready handlers (i.e.,\n  // componentDidUpdate) but we need to check here too in order to catch\n  // updates enqueued by setState callbacks and asap calls.\n  while (dirtyComponents.length || asapEnqueued) {\n    if (dirtyComponents.length) {\n      var transaction = ReactUpdatesFlushTransaction.getPooled();\n      transaction.perform(runBatchedUpdates, null, transaction);\n      ReactUpdatesFlushTransaction.release(transaction);\n    }\n\n    if (asapEnqueued) {\n      asapEnqueued = false;\n      var queue = asapCallbackQueue;\n      asapCallbackQueue = CallbackQueue.getPooled();\n      queue.notifyAll();\n      CallbackQueue.release(queue);\n    }\n  }\n};\nflushBatchedUpdates = ReactPerf.measure(\n  'ReactUpdates',\n  'flushBatchedUpdates',\n  flushBatchedUpdates\n);\n\n/**\n * Mark a component as needing a rerender, adding an optional callback to a\n * list of functions which will be executed once the rerender occurs.\n */\nfunction enqueueUpdate(component) {\n  ensureInjected();\n\n  // Various parts of our code (such as ReactCompositeComponent's\n  // _renderValidatedComponent) assume that calls to render aren't nested;\n  // verify that that's the case. (This is called by each top-level update\n  // function, like setProps, setState, forceUpdate, etc.; creation and\n  // destruction of top-level components is guarded in ReactMount.)\n  (\"production\" !== process.env.NODE_ENV ? warning(\n    ReactCurrentOwner.current == null,\n    'enqueueUpdate(): Render methods should be a pure function of props ' +\n    'and state; triggering nested component updates from render is not ' +\n    'allowed. If necessary, trigger nested updates in ' +\n    'componentDidUpdate.'\n  ) : null);\n\n  if (!batchingStrategy.isBatchingUpdates) {\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);\n    return;\n  }\n\n  dirtyComponents.push(component);\n}\n\n/**\n * Enqueue a callback to be run at the end of the current batching cycle. Throws\n * if no updates are currently being performed.\n */\nfunction asap(callback, context) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    batchingStrategy.isBatchingUpdates,\n    'ReactUpdates.asap: Can\\'t enqueue an asap callback in a context where' +\n    'updates are not being batched.'\n  ) : invariant(batchingStrategy.isBatchingUpdates));\n  asapCallbackQueue.enqueue(callback, context);\n  asapEnqueued = true;\n}\n\nvar ReactUpdatesInjection = {\n  injectReconcileTransaction: function(ReconcileTransaction) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ReconcileTransaction,\n      'ReactUpdates: must provide a reconcile transaction class'\n    ) : invariant(ReconcileTransaction));\n    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;\n  },\n\n  injectBatchingStrategy: function(_batchingStrategy) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      _batchingStrategy,\n      'ReactUpdates: must provide a batching strategy'\n    ) : invariant(_batchingStrategy));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof _batchingStrategy.batchedUpdates === 'function',\n      'ReactUpdates: must provide a batchedUpdates() function'\n    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof _batchingStrategy.isBatchingUpdates === 'boolean',\n      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'\n    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));\n    batchingStrategy = _batchingStrategy;\n  }\n};\n\nvar ReactUpdates = {\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction: null,\n\n  batchedUpdates: batchedUpdates,\n  enqueueUpdate: enqueueUpdate,\n  flushBatchedUpdates: flushBatchedUpdates,\n  injection: ReactUpdatesInjection,\n  asap: asap\n};\n\nmodule.exports = ReactUpdates;\n\n}).call(this,require('_process'))\n\n},{\"./CallbackQueue\":\"react/lib/CallbackQueue\",\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./ReactReconciler\":\"react/lib/ReactReconciler\",\"./Transaction\":\"react/lib/Transaction\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/ReactWithAddons\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactWithAddons\n */\n\n/**\n * This module exists purely in the open source project, and is meant as a way\n * to create a separate standalone build of React. This build has \"addons\", or\n * functionality we've built and think might be useful but doesn't have a good\n * place to live inside React core.\n */\n\n'use strict';\n\nvar LinkedStateMixin = require(\"./LinkedStateMixin\");\nvar React = require(\"./React\");\nvar ReactComponentWithPureRenderMixin =\n  require(\"./ReactComponentWithPureRenderMixin\");\nvar ReactCSSTransitionGroup = require(\"./ReactCSSTransitionGroup\");\nvar ReactFragment = require(\"./ReactFragment\");\nvar ReactTransitionGroup = require(\"./ReactTransitionGroup\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar cx = require(\"./cx\");\nvar cloneWithProps = require(\"./cloneWithProps\");\nvar update = require(\"./update\");\n\nReact.addons = {\n  CSSTransitionGroup: ReactCSSTransitionGroup,\n  LinkedStateMixin: LinkedStateMixin,\n  PureRenderMixin: ReactComponentWithPureRenderMixin,\n  TransitionGroup: ReactTransitionGroup,\n\n  batchedUpdates: ReactUpdates.batchedUpdates,\n  classSet: cx,\n  cloneWithProps: cloneWithProps,\n  createFragment: ReactFragment.create,\n  update: update\n};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  React.addons.Perf = require(\"./ReactDefaultPerf\");\n  React.addons.TestUtils = require(\"./ReactTestUtils\");\n}\n\nmodule.exports = React;\n\n}).call(this,require('_process'))\n\n},{\"./LinkedStateMixin\":\"react/lib/LinkedStateMixin\",\"./React\":\"react/lib/React\",\"./ReactCSSTransitionGroup\":\"react/lib/ReactCSSTransitionGroup\",\"./ReactComponentWithPureRenderMixin\":\"react/lib/ReactComponentWithPureRenderMixin\",\"./ReactDefaultPerf\":\"react/lib/ReactDefaultPerf\",\"./ReactFragment\":\"react/lib/ReactFragment\",\"./ReactTestUtils\":\"react/lib/ReactTestUtils\",\"./ReactTransitionGroup\":\"react/lib/ReactTransitionGroup\",\"./ReactUpdates\":\"react/lib/ReactUpdates\",\"./cloneWithProps\":\"react/lib/cloneWithProps\",\"./cx\":\"react/lib/cx\",\"./update\":\"react/lib/update\",\"_process\":1}],\"react/lib/React\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule React\n */\n\n/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/\n\n'use strict';\n\nvar EventPluginUtils = require(\"./EventPluginUtils\");\nvar ReactChildren = require(\"./ReactChildren\");\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactClass = require(\"./ReactClass\");\nvar ReactContext = require(\"./ReactContext\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactElementValidator = require(\"./ReactElementValidator\");\nvar ReactDOM = require(\"./ReactDOM\");\nvar ReactDOMTextComponent = require(\"./ReactDOMTextComponent\");\nvar ReactDefaultInjection = require(\"./ReactDefaultInjection\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactPropTypes = require(\"./ReactPropTypes\");\nvar ReactReconciler = require(\"./ReactReconciler\");\nvar ReactServerRendering = require(\"./ReactServerRendering\");\n\nvar assign = require(\"./Object.assign\");\nvar findDOMNode = require(\"./findDOMNode\");\nvar onlyChild = require(\"./onlyChild\");\n\nReactDefaultInjection.inject();\n\nvar createElement = ReactElement.createElement;\nvar createFactory = ReactElement.createFactory;\nvar cloneElement = ReactElement.cloneElement;\n\nif (\"production\" !== process.env.NODE_ENV) {\n  createElement = ReactElementValidator.createElement;\n  createFactory = ReactElementValidator.createFactory;\n  cloneElement = ReactElementValidator.cloneElement;\n}\n\nvar render = ReactPerf.measure('React', 'render', ReactMount.render);\n\nvar React = {\n  Children: {\n    map: ReactChildren.map,\n    forEach: ReactChildren.forEach,\n    count: ReactChildren.count,\n    only: onlyChild\n  },\n  Component: ReactComponent,\n  DOM: ReactDOM,\n  PropTypes: ReactPropTypes,\n  initializeTouchEvents: function(shouldUseTouch) {\n    EventPluginUtils.useTouchEvents = shouldUseTouch;\n  },\n  createClass: ReactClass.createClass,\n  createElement: createElement,\n  cloneElement: cloneElement,\n  createFactory: createFactory,\n  createMixin: function(mixin) {\n    // Currently a noop. Will be used to validate and trace mixins.\n    return mixin;\n  },\n  constructAndRenderComponent: ReactMount.constructAndRenderComponent,\n  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,\n  findDOMNode: findDOMNode,\n  render: render,\n  renderToString: ReactServerRendering.renderToString,\n  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,\n  unmountComponentAtNode: ReactMount.unmountComponentAtNode,\n  isValidElement: ReactElement.isValidElement,\n  withContext: ReactContext.withContext,\n\n  // Hook for JSX spread, don't use this for anything else.\n  __spread: assign\n};\n\n// Inject the runtime into a devtools global hook regardless of browser.\n// Allows for debugging when the hook is injected on the page.\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({\n    CurrentOwner: ReactCurrentOwner,\n    InstanceHandles: ReactInstanceHandles,\n    Mount: ReactMount,\n    Reconciler: ReactReconciler,\n    TextComponent: ReactDOMTextComponent\n  });\n}\n\nif (\"production\" !== process.env.NODE_ENV) {\n  var ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {\n\n    // If we're in Chrome, look for the devtools marker and provide a download\n    // link if not installed.\n    if (navigator.userAgent.indexOf('Chrome') > -1) {\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n        console.debug(\n          'Download the React DevTools for a better development experience: ' +\n          'https://fb.me/react-devtools'\n        );\n      }\n    }\n\n    var expectedFeatures = [\n      // shims\n      Array.isArray,\n      Array.prototype.every,\n      Array.prototype.forEach,\n      Array.prototype.indexOf,\n      Array.prototype.map,\n      Date.now,\n      Function.prototype.bind,\n      Object.keys,\n      String.prototype.split,\n      String.prototype.trim,\n\n      // shams\n      Object_create,\n      Object_freeze\n    ];\n\n    for (var i = 0; i < expectedFeatures.length; i++) {\n      if (!expectedFeatures[i]) {\n        console.error(\n          'One or more ES5 shims expected by React are not available: ' +\n          'Add the es5-shim package with `meteor add es5-shim`'\n        );\n        break;\n      }\n    }\n  }\n}\n\nReact.version = '0.13.3';\n\nmodule.exports = React;\n\n}).call(this,require('_process'))\n\n},{\"./EventPluginUtils\":\"react/lib/EventPluginUtils\",\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactChildren\":\"react/lib/ReactChildren\",\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactComponent\":\"react/lib/ReactComponent\",\"./ReactContext\":\"react/lib/ReactContext\",\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactDOM\":\"react/lib/ReactDOM\",\"./ReactDOMTextComponent\":\"react/lib/ReactDOMTextComponent\",\"./ReactDefaultInjection\":\"react/lib/ReactDefaultInjection\",\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactElementValidator\":\"react/lib/ReactElementValidator\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./ReactMount\":\"react/lib/ReactMount\",\"./ReactPerf\":\"react/lib/ReactPerf\",\"./ReactPropTypes\":\"react/lib/ReactPropTypes\",\"./ReactReconciler\":\"react/lib/ReactReconciler\",\"./ReactServerRendering\":\"react/lib/ReactServerRendering\",\"./findDOMNode\":\"react/lib/findDOMNode\",\"./onlyChild\":\"react/lib/onlyChild\",\"_process\":1}],\"react/lib/SVGDOMPropertyConfig\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SVGDOMPropertyConfig\n */\n\n/*jslint bitwise: true*/\n\n'use strict';\n\nvar DOMProperty = require(\"./DOMProperty\");\n\nvar MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;\n\nvar SVGDOMPropertyConfig = {\n  Properties: {\n    clipPath: MUST_USE_ATTRIBUTE,\n    cx: MUST_USE_ATTRIBUTE,\n    cy: MUST_USE_ATTRIBUTE,\n    d: MUST_USE_ATTRIBUTE,\n    dx: MUST_USE_ATTRIBUTE,\n    dy: MUST_USE_ATTRIBUTE,\n    fill: MUST_USE_ATTRIBUTE,\n    fillOpacity: MUST_USE_ATTRIBUTE,\n    fontFamily: MUST_USE_ATTRIBUTE,\n    fontSize: MUST_USE_ATTRIBUTE,\n    fx: MUST_USE_ATTRIBUTE,\n    fy: MUST_USE_ATTRIBUTE,\n    gradientTransform: MUST_USE_ATTRIBUTE,\n    gradientUnits: MUST_USE_ATTRIBUTE,\n    markerEnd: MUST_USE_ATTRIBUTE,\n    markerMid: MUST_USE_ATTRIBUTE,\n    markerStart: MUST_USE_ATTRIBUTE,\n    offset: MUST_USE_ATTRIBUTE,\n    opacity: MUST_USE_ATTRIBUTE,\n    patternContentUnits: MUST_USE_ATTRIBUTE,\n    patternUnits: MUST_USE_ATTRIBUTE,\n    points: MUST_USE_ATTRIBUTE,\n    preserveAspectRatio: MUST_USE_ATTRIBUTE,\n    r: MUST_USE_ATTRIBUTE,\n    rx: MUST_USE_ATTRIBUTE,\n    ry: MUST_USE_ATTRIBUTE,\n    spreadMethod: MUST_USE_ATTRIBUTE,\n    stopColor: MUST_USE_ATTRIBUTE,\n    stopOpacity: MUST_USE_ATTRIBUTE,\n    stroke: MUST_USE_ATTRIBUTE,\n    strokeDasharray: MUST_USE_ATTRIBUTE,\n    strokeLinecap: MUST_USE_ATTRIBUTE,\n    strokeOpacity: MUST_USE_ATTRIBUTE,\n    strokeWidth: MUST_USE_ATTRIBUTE,\n    textAnchor: MUST_USE_ATTRIBUTE,\n    transform: MUST_USE_ATTRIBUTE,\n    version: MUST_USE_ATTRIBUTE,\n    viewBox: MUST_USE_ATTRIBUTE,\n    x1: MUST_USE_ATTRIBUTE,\n    x2: MUST_USE_ATTRIBUTE,\n    x: MUST_USE_ATTRIBUTE,\n    y1: MUST_USE_ATTRIBUTE,\n    y2: MUST_USE_ATTRIBUTE,\n    y: MUST_USE_ATTRIBUTE\n  },\n  DOMAttributeNames: {\n    clipPath: 'clip-path',\n    fillOpacity: 'fill-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    gradientTransform: 'gradientTransform',\n    gradientUnits: 'gradientUnits',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    patternContentUnits: 'patternContentUnits',\n    patternUnits: 'patternUnits',\n    preserveAspectRatio: 'preserveAspectRatio',\n    spreadMethod: 'spreadMethod',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strokeDasharray: 'stroke-dasharray',\n    strokeLinecap: 'stroke-linecap',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    textAnchor: 'text-anchor',\n    viewBox: 'viewBox'\n  }\n};\n\nmodule.exports = SVGDOMPropertyConfig;\n\n},{\"./DOMProperty\":\"react/lib/DOMProperty\"}],\"react/lib/SelectEventPlugin\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SelectEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar getActiveElement = require(\"./getActiveElement\");\nvar isTextInputElement = require(\"./isTextInputElement\");\nvar keyOf = require(\"./keyOf\");\nvar shallowEqual = require(\"./shallowEqual\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onSelect: null}),\n      captured: keyOf({onSelectCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topContextMenu,\n      topLevelTypes.topFocus,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topMouseDown,\n      topLevelTypes.topMouseUp,\n      topLevelTypes.topSelectionChange\n    ]\n  }\n};\n\nvar activeElement = null;\nvar activeElementID = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @param {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node &&\n      ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown ||\n      activeElement == null ||\n      activeElement !== getActiveElement()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = SyntheticEvent.getPooled(\n      eventTypes.select,\n      activeElementID,\n      nativeEvent\n    );\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(topLevelTarget) ||\n            topLevelTarget.contentEditable === 'true') {\n          activeElement = topLevelTarget;\n          activeElementID = topLevelTargetID;\n          lastSelection = null;\n        }\n        break;\n      case topLevelTypes.topBlur:\n        activeElement = null;\n        activeElementID = null;\n        lastSelection = null;\n        break;\n\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case topLevelTypes.topMouseDown:\n        mouseDown = true;\n        break;\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent);\n\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't).\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      case topLevelTypes.topSelectionChange:\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent);\n    }\n  }\n};\n\nmodule.exports = SelectEventPlugin;\n\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPropagators\":\"react/lib/EventPropagators\",\"./ReactInputSelection\":\"react/lib/ReactInputSelection\",\"./SyntheticEvent\":\"react/lib/SyntheticEvent\",\"./getActiveElement\":\"react/lib/getActiveElement\",\"./isTextInputElement\":\"react/lib/isTextInputElement\",\"./keyOf\":\"react/lib/keyOf\",\"./shallowEqual\":\"react/lib/shallowEqual\"}],\"react/lib/ServerReactRootIndex\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ServerReactRootIndex\n * @typechecks\n */\n\n'use strict';\n\n/**\n * Size of the reactRoot ID space. We generate random numbers for React root\n * IDs and if there's a collision the events and DOM update system will\n * get confused. In the future we need a way to generate GUIDs but for\n * now this will work on a smaller scale.\n */\nvar GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);\n\nvar ServerReactRootIndex = {\n  createReactRootIndex: function() {\n    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);\n  }\n};\n\nmodule.exports = ServerReactRootIndex;\n\n},{}],\"react/lib/SimpleEventPlugin\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SimpleEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginUtils = require(\"./EventPluginUtils\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar SyntheticClipboardEvent = require(\"./SyntheticClipboardEvent\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\nvar SyntheticFocusEvent = require(\"./SyntheticFocusEvent\");\nvar SyntheticKeyboardEvent = require(\"./SyntheticKeyboardEvent\");\nvar SyntheticMouseEvent = require(\"./SyntheticMouseEvent\");\nvar SyntheticDragEvent = require(\"./SyntheticDragEvent\");\nvar SyntheticTouchEvent = require(\"./SyntheticTouchEvent\");\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");\nvar SyntheticWheelEvent = require(\"./SyntheticWheelEvent\");\n\nvar getEventCharCode = require(\"./getEventCharCode\");\n\nvar invariant = require(\"./invariant\");\nvar keyOf = require(\"./keyOf\");\nvar warning = require(\"./warning\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  blur: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onBlur: true}),\n      captured: keyOf({onBlurCapture: true})\n    }\n  },\n  click: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onClick: true}),\n      captured: keyOf({onClickCapture: true})\n    }\n  },\n  contextMenu: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onContextMenu: true}),\n      captured: keyOf({onContextMenuCapture: true})\n    }\n  },\n  copy: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCopy: true}),\n      captured: keyOf({onCopyCapture: true})\n    }\n  },\n  cut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCut: true}),\n      captured: keyOf({onCutCapture: true})\n    }\n  },\n  doubleClick: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDoubleClick: true}),\n      captured: keyOf({onDoubleClickCapture: true})\n    }\n  },\n  drag: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDrag: true}),\n      captured: keyOf({onDragCapture: true})\n    }\n  },\n  dragEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragEnd: true}),\n      captured: keyOf({onDragEndCapture: true})\n    }\n  },\n  dragEnter: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragEnter: true}),\n      captured: keyOf({onDragEnterCapture: true})\n    }\n  },\n  dragExit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragExit: true}),\n      captured: keyOf({onDragExitCapture: true})\n    }\n  },\n  dragLeave: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragLeave: true}),\n      captured: keyOf({onDragLeaveCapture: true})\n    }\n  },\n  dragOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragOver: true}),\n      captured: keyOf({onDragOverCapture: true})\n    }\n  },\n  dragStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDragStart: true}),\n      captured: keyOf({onDragStartCapture: true})\n    }\n  },\n  drop: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onDrop: true}),\n      captured: keyOf({onDropCapture: true})\n    }\n  },\n  focus: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onFocus: true}),\n      captured: keyOf({onFocusCapture: true})\n    }\n  },\n  input: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onInput: true}),\n      captured: keyOf({onInputCapture: true})\n    }\n  },\n  keyDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onKeyDown: true}),\n      captured: keyOf({onKeyDownCapture: true})\n    }\n  },\n  keyPress: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onKeyPress: true}),\n      captured: keyOf({onKeyPressCapture: true})\n    }\n  },\n  keyUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onKeyUp: true}),\n      captured: keyOf({onKeyUpCapture: true})\n    }\n  },\n  load: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onLoad: true}),\n      captured: keyOf({onLoadCapture: true})\n    }\n  },\n  error: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onError: true}),\n      captured: keyOf({onErrorCapture: true})\n    }\n  },\n  // Note: We do not allow listening to mouseOver events. Instead, use the\n  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.\n  mouseDown: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseDown: true}),\n      captured: keyOf({onMouseDownCapture: true})\n    }\n  },\n  mouseMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseMove: true}),\n      captured: keyOf({onMouseMoveCapture: true})\n    }\n  },\n  mouseOut: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseOut: true}),\n      captured: keyOf({onMouseOutCapture: true})\n    }\n  },\n  mouseOver: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseOver: true}),\n      captured: keyOf({onMouseOverCapture: true})\n    }\n  },\n  mouseUp: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onMouseUp: true}),\n      captured: keyOf({onMouseUpCapture: true})\n    }\n  },\n  paste: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onPaste: true}),\n      captured: keyOf({onPasteCapture: true})\n    }\n  },\n  reset: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onReset: true}),\n      captured: keyOf({onResetCapture: true})\n    }\n  },\n  scroll: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onScroll: true}),\n      captured: keyOf({onScrollCapture: true})\n    }\n  },\n  submit: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onSubmit: true}),\n      captured: keyOf({onSubmitCapture: true})\n    }\n  },\n  touchCancel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onTouchCancel: true}),\n      captured: keyOf({onTouchCancelCapture: true})\n    }\n  },\n  touchEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onTouchEnd: true}),\n      captured: keyOf({onTouchEndCapture: true})\n    }\n  },\n  touchMove: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onTouchMove: true}),\n      captured: keyOf({onTouchMoveCapture: true})\n    }\n  },\n  touchStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onTouchStart: true}),\n      captured: keyOf({onTouchStartCapture: true})\n    }\n  },\n  wheel: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onWheel: true}),\n      captured: keyOf({onWheelCapture: true})\n    }\n  }\n};\n\nvar topLevelEventsToDispatchConfig = {\n  topBlur:        eventTypes.blur,\n  topClick:       eventTypes.click,\n  topContextMenu: eventTypes.contextMenu,\n  topCopy:        eventTypes.copy,\n  topCut:         eventTypes.cut,\n  topDoubleClick: eventTypes.doubleClick,\n  topDrag:        eventTypes.drag,\n  topDragEnd:     eventTypes.dragEnd,\n  topDragEnter:   eventTypes.dragEnter,\n  topDragExit:    eventTypes.dragExit,\n  topDragLeave:   eventTypes.dragLeave,\n  topDragOver:    eventTypes.dragOver,\n  topDragStart:   eventTypes.dragStart,\n  topDrop:        eventTypes.drop,\n  topError:       eventTypes.error,\n  topFocus:       eventTypes.focus,\n  topInput:       eventTypes.input,\n  topKeyDown:     eventTypes.keyDown,\n  topKeyPress:    eventTypes.keyPress,\n  topKeyUp:       eventTypes.keyUp,\n  topLoad:        eventTypes.load,\n  topMouseDown:   eventTypes.mouseDown,\n  topMouseMove:   eventTypes.mouseMove,\n  topMouseOut:    eventTypes.mouseOut,\n  topMouseOver:   eventTypes.mouseOver,\n  topMouseUp:     eventTypes.mouseUp,\n  topPaste:       eventTypes.paste,\n  topReset:       eventTypes.reset,\n  topScroll:      eventTypes.scroll,\n  topSubmit:      eventTypes.submit,\n  topTouchCancel: eventTypes.touchCancel,\n  topTouchEnd:    eventTypes.touchEnd,\n  topTouchMove:   eventTypes.touchMove,\n  topTouchStart:  eventTypes.touchStart,\n  topWheel:       eventTypes.wheel\n};\n\nfor (var type in topLevelEventsToDispatchConfig) {\n  topLevelEventsToDispatchConfig[type].dependencies = [type];\n}\n\nvar SimpleEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * Same as the default implementation, except cancels the event when return\n   * value is false. This behavior will be disabled in a future release.\n   *\n   * @param {object} Event to be dispatched.\n   * @param {function} Application-level callback.\n   * @param {string} domID DOM ID to pass to the callback.\n   */\n  executeDispatch: function(event, listener, domID) {\n    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);\n\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      typeof returnValue !== 'boolean',\n      'Returning `false` from an event handler is deprecated and will be ' +\n      'ignored in a future release. Instead, manually call ' +\n      'e.stopPropagation() or e.preventDefault(), as appropriate.'\n    ) : null);\n\n    if (returnValue === false) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  },\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];\n    if (!dispatchConfig) {\n      return null;\n    }\n    var EventConstructor;\n    switch (topLevelType) {\n      case topLevelTypes.topInput:\n      case topLevelTypes.topLoad:\n      case topLevelTypes.topError:\n      case topLevelTypes.topReset:\n      case topLevelTypes.topSubmit:\n        // HTML Events\n        // @see http://www.w3.org/TR/html5/index.html#events-0\n        EventConstructor = SyntheticEvent;\n        break;\n      case topLevelTypes.topKeyPress:\n        // FireFox creates a keypress event for function keys too. This removes\n        // the unwanted keypress events. Enter is however both printable and\n        // non-printable. One would expect Tab to be as well (but it isn't).\n        if (getEventCharCode(nativeEvent) === 0) {\n          return null;\n        }\n        /* falls through */\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        EventConstructor = SyntheticKeyboardEvent;\n        break;\n      case topLevelTypes.topBlur:\n      case topLevelTypes.topFocus:\n        EventConstructor = SyntheticFocusEvent;\n        break;\n      case topLevelTypes.topClick:\n        // Firefox creates a click event on right mouse clicks. This removes the\n        // unwanted click events.\n        if (nativeEvent.button === 2) {\n          return null;\n        }\n        /* falls through */\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topDoubleClick:\n      case topLevelTypes.topMouseDown:\n      case topLevelTypes.topMouseMove:\n      case topLevelTypes.topMouseOut:\n      case topLevelTypes.topMouseOver:\n      case topLevelTypes.topMouseUp:\n        EventConstructor = SyntheticMouseEvent;\n        break;\n      case topLevelTypes.topDrag:\n      case topLevelTypes.topDragEnd:\n      case topLevelTypes.topDragEnter:\n      case topLevelTypes.topDragExit:\n      case topLevelTypes.topDragLeave:\n      case topLevelTypes.topDragOver:\n      case topLevelTypes.topDragStart:\n      case topLevelTypes.topDrop:\n        EventConstructor = SyntheticDragEvent;\n        break;\n      case topLevelTypes.topTouchCancel:\n      case topLevelTypes.topTouchEnd:\n      case topLevelTypes.topTouchMove:\n      case topLevelTypes.topTouchStart:\n        EventConstructor = SyntheticTouchEvent;\n        break;\n      case topLevelTypes.topScroll:\n        EventConstructor = SyntheticUIEvent;\n        break;\n      case topLevelTypes.topWheel:\n        EventConstructor = SyntheticWheelEvent;\n        break;\n      case topLevelTypes.topCopy:\n      case topLevelTypes.topCut:\n      case topLevelTypes.topPaste:\n        EventConstructor = SyntheticClipboardEvent;\n        break;\n    }\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      EventConstructor,\n      'SimpleEventPlugin: Unhandled event type, `%s`.',\n      topLevelType\n    ) : invariant(EventConstructor));\n    var event = EventConstructor.getPooled(\n      dispatchConfig,\n      topLevelTargetID,\n      nativeEvent\n    );\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    return event;\n  }\n\n};\n\nmodule.exports = SimpleEventPlugin;\n\n}).call(this,require('_process'))\n\n},{\"./EventConstants\":\"react/lib/EventConstants\",\"./EventPluginUtils\":\"react/lib/EventPluginUtils\",\"./EventPropagators\":\"react/lib/EventPropagators\",\"./SyntheticClipboardEvent\":\"react/lib/SyntheticClipboardEvent\",\"./SyntheticDragEvent\":\"react/lib/SyntheticDragEvent\",\"./SyntheticEvent\":\"react/lib/SyntheticEvent\",\"./SyntheticFocusEvent\":\"react/lib/SyntheticFocusEvent\",\"./SyntheticKeyboardEvent\":\"react/lib/SyntheticKeyboardEvent\",\"./SyntheticMouseEvent\":\"react/lib/SyntheticMouseEvent\",\"./SyntheticTouchEvent\":\"react/lib/SyntheticTouchEvent\",\"./SyntheticUIEvent\":\"react/lib/SyntheticUIEvent\",\"./SyntheticWheelEvent\":\"react/lib/SyntheticWheelEvent\",\"./getEventCharCode\":\"react/lib/getEventCharCode\",\"./invariant\":\"react/lib/invariant\",\"./keyOf\":\"react/lib/keyOf\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/SyntheticClipboardEvent\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticClipboardEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\nvar ClipboardEventInterface = {\n  clipboardData: function(event) {\n    return (\n      'clipboardData' in event ?\n        event.clipboardData :\n        window.clipboardData\n    );\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);\n\nmodule.exports = SyntheticClipboardEvent;\n\n},{\"./SyntheticEvent\":\"react/lib/SyntheticEvent\"}],\"react/lib/SyntheticCompositionEvent\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticCompositionEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\n */\nvar CompositionEventInterface = {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticCompositionEvent(\n  dispatchConfig,\n  dispatchMarker,\n  nativeEvent) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticEvent.augmentClass(\n  SyntheticCompositionEvent,\n  CompositionEventInterface\n);\n\nmodule.exports = SyntheticCompositionEvent;\n\n},{\"./SyntheticEvent\":\"react/lib/SyntheticEvent\"}],\"react/lib/SyntheticDragEvent\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticDragEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticMouseEvent = require(\"./SyntheticMouseEvent\");\n\n/**\n * @interface DragEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar DragEventInterface = {\n  dataTransfer: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);\n\nmodule.exports = SyntheticDragEvent;\n\n},{\"./SyntheticMouseEvent\":\"react/lib/SyntheticMouseEvent\"}],\"react/lib/SyntheticEvent\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar PooledClass = require(\"./PooledClass\");\n\nvar assign = require(\"./Object.assign\");\nvar emptyFunction = require(\"./emptyFunction\");\nvar getEventTarget = require(\"./getEventTarget\");\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar EventInterface = {\n  type: null,\n  target: getEventTarget,\n  // currentTarget is set when dispatching; no use in copying it here\n  currentTarget: emptyFunction.thatReturnsNull,\n  eventPhase: null,\n  bubbles: null,\n  cancelable: null,\n  timeStamp: function(event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: null,\n  isTrusted: null\n};\n\n/**\n * Synthetic events are dispatched by event plugins, typically in response to a\n * top-level event delegation handler.\n *\n * These systems should generally use pooling to reduce the frequency of garbage\n * collection. The system should check `isPersistent` to determine whether the\n * event should be released into the pool after being dispatched. Users that\n * need a persisted event should invoke `persist`.\n *\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n * normalizing browser quirks. Subclasses do not necessarily have to implement a\n * DOM interface; custom application-specific events can also subclass this.\n *\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n */\nfunction SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  this.dispatchConfig = dispatchConfig;\n  this.dispatchMarker = dispatchMarker;\n  this.nativeEvent = nativeEvent;\n\n  var Interface = this.constructor.Interface;\n  for (var propName in Interface) {\n    if (!Interface.hasOwnProperty(propName)) {\n      continue;\n    }\n    var normalize = Interface[propName];\n    if (normalize) {\n      this[propName] = normalize(nativeEvent);\n    } else {\n      this[propName] = nativeEvent[propName];\n    }\n  }\n\n  var defaultPrevented = nativeEvent.defaultPrevented != null ?\n    nativeEvent.defaultPrevented :\n    nativeEvent.returnValue === false;\n  if (defaultPrevented) {\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;\n  } else {\n    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;\n  }\n  this.isPropagationStopped = emptyFunction.thatReturnsFalse;\n}\n\nassign(SyntheticEvent.prototype, {\n\n  preventDefault: function() {\n    this.defaultPrevented = true;\n    var event = this.nativeEvent;\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else {\n      event.returnValue = false;\n    }\n    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;\n  },\n\n  stopPropagation: function() {\n    var event = this.nativeEvent;\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else {\n      event.cancelBubble = true;\n    }\n    this.isPropagationStopped = emptyFunction.thatReturnsTrue;\n  },\n\n  /**\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding\n   * them back into the pool. This allows a way to hold onto a reference that\n   * won't be added back into the pool.\n   */\n  persist: function() {\n    this.isPersistent = emptyFunction.thatReturnsTrue;\n  },\n\n  /**\n   * Checks if this event should be released back into the pool.\n   *\n   * @return {boolean} True if this should not be released, false otherwise.\n   */\n  isPersistent: emptyFunction.thatReturnsFalse,\n\n  /**\n   * `PooledClass` looks for `destructor` on each instance it releases.\n   */\n  destructor: function() {\n    var Interface = this.constructor.Interface;\n    for (var propName in Interface) {\n      this[propName] = null;\n    }\n    this.dispatchConfig = null;\n    this.dispatchMarker = null;\n    this.nativeEvent = null;\n  }\n\n});\n\nSyntheticEvent.Interface = EventInterface;\n\n/**\n * Helper to reduce boilerplate when creating subclasses.\n *\n * @param {function} Class\n * @param {?object} Interface\n */\nSyntheticEvent.augmentClass = function(Class, Interface) {\n  var Super = this;\n\n  var prototype = Object_create(Super.prototype);\n  assign(prototype, Class.prototype);\n  Class.prototype = prototype;\n  Class.prototype.constructor = Class;\n\n  Class.Interface = assign({}, Super.Interface, Interface);\n  Class.augmentClass = Super.augmentClass;\n\n  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);\n};\n\nPooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);\n\nmodule.exports = SyntheticEvent;\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./PooledClass\":\"react/lib/PooledClass\",\"./emptyFunction\":\"react/lib/emptyFunction\",\"./getEventTarget\":\"react/lib/getEventTarget\"}],\"react/lib/SyntheticFocusEvent\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticFocusEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");\n\n/**\n * @interface FocusEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar FocusEventInterface = {\n  relatedTarget: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);\n\nmodule.exports = SyntheticFocusEvent;\n\n},{\"./SyntheticUIEvent\":\"react/lib/SyntheticUIEvent\"}],\"react/lib/SyntheticInputEvent\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticInputEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\n *      /#events-inputevents\n */\nvar InputEventInterface = {\n  data: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticInputEvent(\n  dispatchConfig,\n  dispatchMarker,\n  nativeEvent) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticEvent.augmentClass(\n  SyntheticInputEvent,\n  InputEventInterface\n);\n\nmodule.exports = SyntheticInputEvent;\n\n},{\"./SyntheticEvent\":\"react/lib/SyntheticEvent\"}],\"react/lib/SyntheticKeyboardEvent\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticKeyboardEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");\n\nvar getEventCharCode = require(\"./getEventCharCode\");\nvar getEventKey = require(\"./getEventKey\");\nvar getEventModifierState = require(\"./getEventModifierState\");\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar KeyboardEventInterface = {\n  key: getEventKey,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function(event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    return 0;\n  },\n  keyCode: function(event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function(event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);\n\nmodule.exports = SyntheticKeyboardEvent;\n\n},{\"./SyntheticUIEvent\":\"react/lib/SyntheticUIEvent\",\"./getEventCharCode\":\"react/lib/getEventCharCode\",\"./getEventKey\":\"react/lib/getEventKey\",\"./getEventModifierState\":\"react/lib/getEventModifierState\"}],\"react/lib/SyntheticMouseEvent\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticMouseEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");\nvar ViewportMetrics = require(\"./ViewportMetrics\");\n\nvar getEventModifierState = require(\"./getEventModifierState\");\n\n/**\n * @interface MouseEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar MouseEventInterface = {\n  screenX: null,\n  screenY: null,\n  clientX: null,\n  clientY: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  getModifierState: getEventModifierState,\n  button: function(event) {\n    // Webkit, Firefox, IE9+\n    // which:  1 2 3\n    // button: 0 1 2 (standard)\n    var button = event.button;\n    if ('which' in event) {\n      return button;\n    }\n    // IE<9\n    // which:  undefined\n    // button: 0 0 0\n    // button: 1 4 2 (onmouseup)\n    return button === 2 ? 2 : button === 4 ? 1 : 0;\n  },\n  buttons: null,\n  relatedTarget: function(event) {\n    return event.relatedTarget || (\n      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))\n    );\n  },\n  // \"Proprietary\" Interface.\n  pageX: function(event) {\n    return 'pageX' in event ?\n      event.pageX :\n      event.clientX + ViewportMetrics.currentScrollLeft;\n  },\n  pageY: function(event) {\n    return 'pageY' in event ?\n      event.pageY :\n      event.clientY + ViewportMetrics.currentScrollTop;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);\n\nmodule.exports = SyntheticMouseEvent;\n\n},{\"./SyntheticUIEvent\":\"react/lib/SyntheticUIEvent\",\"./ViewportMetrics\":\"react/lib/ViewportMetrics\",\"./getEventModifierState\":\"react/lib/getEventModifierState\"}],\"react/lib/SyntheticTouchEvent\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticTouchEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require(\"./SyntheticUIEvent\");\n\nvar getEventModifierState = require(\"./getEventModifierState\");\n\n/**\n * @interface TouchEvent\n * @see http://www.w3.org/TR/touch-events/\n */\nvar TouchEventInterface = {\n  touches: null,\n  targetTouches: null,\n  changedTouches: null,\n  altKey: null,\n  metaKey: null,\n  ctrlKey: null,\n  shiftKey: null,\n  getModifierState: getEventModifierState\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);\n\nmodule.exports = SyntheticTouchEvent;\n\n},{\"./SyntheticUIEvent\":\"react/lib/SyntheticUIEvent\",\"./getEventModifierState\":\"react/lib/getEventModifierState\"}],\"react/lib/SyntheticUIEvent\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticUIEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar getEventTarget = require(\"./getEventTarget\");\n\n/**\n * @interface UIEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar UIEventInterface = {\n  view: function(event) {\n    if (event.view) {\n      return event.view;\n    }\n\n    var target = getEventTarget(event);\n    if (target != null && target.window === target) {\n      // target is a window object\n      return target;\n    }\n\n    var doc = target.ownerDocument;\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n    if (doc) {\n      return doc.defaultView || doc.parentWindow;\n    } else {\n      return window;\n    }\n  },\n  detail: function(event) {\n    return event.detail || 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticEvent}\n */\nfunction SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);\n\nmodule.exports = SyntheticUIEvent;\n\n},{\"./SyntheticEvent\":\"react/lib/SyntheticEvent\",\"./getEventTarget\":\"react/lib/getEventTarget\"}],\"react/lib/SyntheticWheelEvent\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SyntheticWheelEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticMouseEvent = require(\"./SyntheticMouseEvent\");\n\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar WheelEventInterface = {\n  deltaX: function(event) {\n    return (\n      'deltaX' in event ? event.deltaX :\n      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n      'wheelDeltaX' in event ? -event.wheelDeltaX : 0\n    );\n  },\n  deltaY: function(event) {\n    return (\n      'deltaY' in event ? event.deltaY :\n      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n      'wheelDeltaY' in event ? -event.wheelDeltaY :\n      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n      'wheelDelta' in event ? -event.wheelDelta : 0\n    );\n  },\n  deltaZ: null,\n\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: null\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticMouseEvent}\n */\nfunction SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {\n  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);\n}\n\nSyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);\n\nmodule.exports = SyntheticWheelEvent;\n\n},{\"./SyntheticMouseEvent\":\"react/lib/SyntheticMouseEvent\"}],\"react/lib/Transaction\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Transaction\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n * `Transaction` creates a black box that is able to wrap any method such that\n * certain invariants are maintained before and after the method is invoked\n * (Even if an exception is thrown while invoking the wrapped method). Whoever\n * instantiates a transaction can provide enforcers of the invariants at\n * creation time. The `Transaction` class itself will supply one additional\n * automatic invariant for you - the invariant that any transaction instance\n * should not be run while it is already being run. You would typically create a\n * single instance of a `Transaction` for reuse multiple times, that potentially\n * is used to wrap several different methods. Wrappers are extremely simple -\n * they only require implementing two methods.\n *\n * <pre>\n *                       wrappers (injected at creation time)\n *                                      +        +\n *                                      |        |\n *                    +-----------------|--------|--------------+\n *                    |                 v        |              |\n *                    |      +---------------+   |              |\n *                    |   +--|    wrapper1   |---|----+         |\n *                    |   |  +---------------+   v    |         |\n *                    |   |          +-------------+  |         |\n *                    |   |     +----|   wrapper2  |--------+   |\n *                    |   |     |    +-------------+  |     |   |\n *                    |   |     |                     |     |   |\n *                    |   v     v                     v     v   | wrapper\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained\n * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | +---+ +---+   +---------+   +---+ +---+ |\n *                    |  initialize                    close    |\n *                    +-----------------------------------------+\n * </pre>\n *\n * Use cases:\n * - Preserving the input selection ranges before/after reconciliation.\n *   Restoring selection even in the event of an unexpected error.\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,\n *   while guaranteeing that afterwards, the event system is reactivated.\n * - Flushing a queue of collected DOM mutations to the main UI thread after a\n *   reconciliation takes place in a worker thread.\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new\n *   content.\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).\n * - (Future use case): Layout calculations before and after DOM updates.\n *\n * Transactional plugin API:\n * - A module that has an `initialize` method that returns any precomputation.\n * - and a `close` method that accepts the precomputation. `close` is invoked\n *   when the wrapped process is completed, or has failed.\n *\n * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules\n * that implement `initialize` and `close`.\n * @return {Transaction} Single transaction for reuse in thread.\n *\n * @class Transaction\n */\nvar Mixin = {\n  /**\n   * Sets up this instance so that it is prepared for collecting metrics. Does\n   * so such that this setup method may be used on an instance that is already\n   * initialized, in a way that does not consume additional memory upon reuse.\n   * That can be useful if you decide to make your subclass of this mixin a\n   * \"PooledClass\".\n   */\n  reinitializeTransaction: function() {\n    this.transactionWrappers = this.getTransactionWrappers();\n    if (!this.wrapperInitData) {\n      this.wrapperInitData = [];\n    } else {\n      this.wrapperInitData.length = 0;\n    }\n    this._isInTransaction = false;\n  },\n\n  _isInTransaction: false,\n\n  /**\n   * @abstract\n   * @return {Array<TransactionWrapper>} Array of transaction wrappers.\n   */\n  getTransactionWrappers: null,\n\n  isInTransaction: function() {\n    return !!this._isInTransaction;\n  },\n\n  /**\n   * Executes the function within a safety window. Use this for the top level\n   * methods that result in large amounts of computation/mutations that would\n   * need to be safety checked.\n   *\n   * @param {function} method Member of scope to call.\n   * @param {Object} scope Scope to invoke from.\n   * @param {Object?=} args... Arguments to pass to the method (optional).\n   *                           Helps prevent need to bind in many cases.\n   * @return Return value from `method`.\n   */\n  perform: function(method, scope, a, b, c, d, e, f) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      !this.isInTransaction(),\n      'Transaction.perform(...): Cannot initialize a transaction when there ' +\n      'is already an outstanding transaction.'\n    ) : invariant(!this.isInTransaction()));\n    var errorThrown;\n    var ret;\n    try {\n      this._isInTransaction = true;\n      // Catching errors makes debugging more difficult, so we start with\n      // errorThrown set to true before setting it to false after calling\n      // close -- if it's still set to true in the finally block, it means\n      // one of these calls threw.\n      errorThrown = true;\n      this.initializeAll(0);\n      ret = method.call(scope, a, b, c, d, e, f);\n      errorThrown = false;\n    } finally {\n      try {\n        if (errorThrown) {\n          // If `method` throws, prefer to show that stack trace over any thrown\n          // by invoking `closeAll`.\n          try {\n            this.closeAll(0);\n          } catch (err) {\n          }\n        } else {\n          // Since `method` didn't throw, we don't want to silence the exception\n          // here.\n          this.closeAll(0);\n        }\n      } finally {\n        this._isInTransaction = false;\n      }\n    }\n    return ret;\n  },\n\n  initializeAll: function(startIndex) {\n    var transactionWrappers = this.transactionWrappers;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      try {\n        // Catching errors makes debugging more difficult, so we start with the\n        // OBSERVED_ERROR state before overwriting it with the real return value\n        // of initialize -- if it's still set to OBSERVED_ERROR in the finally\n        // block, it means wrapper.initialize threw.\n        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;\n        this.wrapperInitData[i] = wrapper.initialize ?\n          wrapper.initialize.call(this) :\n          null;\n      } finally {\n        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {\n          // The initializer for wrapper i threw an error; initialize the\n          // remaining wrappers but silence any exceptions from them to ensure\n          // that the first error is the one to bubble up.\n          try {\n            this.initializeAll(i + 1);\n          } catch (err) {\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into\n   * them the respective return values of `this.transactionWrappers.init[i]`\n   * (`close`rs that correspond to initializers that failed will not be\n   * invoked).\n   */\n  closeAll: function(startIndex) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      this.isInTransaction(),\n      'Transaction.closeAll(): Cannot close transaction when none are open.'\n    ) : invariant(this.isInTransaction()));\n    var transactionWrappers = this.transactionWrappers;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      var initData = this.wrapperInitData[i];\n      var errorThrown;\n      try {\n        // Catching errors makes debugging more difficult, so we start with\n        // errorThrown set to true before setting it to false after calling\n        // close -- if it's still set to true in the finally block, it means\n        // wrapper.close threw.\n        errorThrown = true;\n        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {\n          wrapper.close.call(this, initData);\n        }\n        errorThrown = false;\n      } finally {\n        if (errorThrown) {\n          // The closer for wrapper i threw an error; close the remaining\n          // wrappers but silence any exceptions from them to ensure that the\n          // first error is the one to bubble up.\n          try {\n            this.closeAll(i + 1);\n          } catch (e) {\n          }\n        }\n      }\n    }\n    this.wrapperInitData.length = 0;\n  }\n};\n\nvar Transaction = {\n\n  Mixin: Mixin,\n\n  /**\n   * Token to look for to determine if an error occured.\n   */\n  OBSERVED_ERROR: {}\n\n};\n\nmodule.exports = Transaction;\n\n}).call(this,require('_process'))\n\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/ViewportMetrics\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ViewportMetrics\n */\n\n'use strict';\n\nvar ViewportMetrics = {\n\n  currentScrollLeft: 0,\n\n  currentScrollTop: 0,\n\n  refreshScrollValues: function(scrollPosition) {\n    ViewportMetrics.currentScrollLeft = scrollPosition.x;\n    ViewportMetrics.currentScrollTop = scrollPosition.y;\n  }\n\n};\n\nmodule.exports = ViewportMetrics;\n\n},{}],\"react/lib/accumulateInto\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n *\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    next != null,\n    'accumulateInto(...): Accumulated items must not be null or undefined.'\n  ) : invariant(next != null));\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  var currentIsArray = Array.isArray(current);\n  var nextIsArray = Array.isArray(next);\n\n  if (currentIsArray && nextIsArray) {\n    current.push.apply(current, next);\n    return current;\n  }\n\n  if (currentIsArray) {\n    current.push(next);\n    return current;\n  }\n\n  if (nextIsArray) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nmodule.exports = accumulateInto;\n\n}).call(this,require('_process'))\n\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/adler32\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule adler32\n */\n\n/* jslint bitwise:true */\n\n'use strict';\n\nvar MOD = 65521;\n\n// This is a clean-room implementation of adler32 designed for detecting\n// if markup is not what we expect it to be. It does not need to be\n// cryptographically strong, only reasonably good at detecting if markup\n// generated on the server is different than that on the client.\nfunction adler32(data) {\n  var a = 1;\n  var b = 0;\n  for (var i = 0; i < data.length; i++) {\n    a = (a + data.charCodeAt(i)) % MOD;\n    b = (b + a) % MOD;\n  }\n  return a | (b << 16);\n}\n\nmodule.exports = adler32;\n\n},{}],\"react/lib/camelizeStyleName\":[function(require,module,exports){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule camelizeStyleName\n * @typechecks\n */\n\n\"use strict\";\n\nvar camelize = require(\"./camelize\");\n\nvar msPattern = /^-ms-/;\n\n/**\n * Camelcases a hyphenated CSS property name, for example:\n *\n *   > camelizeStyleName('background-color')\n *   < \"backgroundColor\"\n *   > camelizeStyleName('-moz-transition')\n *   < \"MozTransition\"\n *   > camelizeStyleName('-ms-transition')\n *   < \"msTransition\"\n *\n * As Andi Smith suggests\n * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n * is converted to lowercase `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelizeStyleName(string) {\n  return camelize(string.replace(msPattern, 'ms-'));\n}\n\nmodule.exports = camelizeStyleName;\n\n},{\"./camelize\":\"react/lib/camelize\"}],\"react/lib/camelize\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule camelize\n * @typechecks\n */\n\nvar _hyphenPattern = /-(.)/g;\n\n/**\n * Camelcases a hyphenated string, for example:\n *\n *   > camelize('background-color')\n *   < \"backgroundColor\"\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelize(string) {\n  return string.replace(_hyphenPattern, function(_, character) {\n    return character.toUpperCase();\n  });\n}\n\nmodule.exports = camelize;\n\n},{}],\"react/lib/cloneWithProps\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule cloneWithProps\n */\n\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactPropTransferer = require(\"./ReactPropTransferer\");\n\nvar keyOf = require(\"./keyOf\");\nvar warning = require(\"./warning\");\n\nvar CHILDREN_PROP = keyOf({children: null});\n\n/**\n * Sometimes you want to change the props of a child passed to you. Usually\n * this is to add a CSS class.\n *\n * @param {ReactElement} child child element you'd like to clone\n * @param {object} props props you'd like to modify. className and style will be\n * merged automatically.\n * @return {ReactElement} a clone of child with props merged in.\n */\nfunction cloneWithProps(child, props) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      !child.ref,\n      'You are calling cloneWithProps() on a child with a ref. This is ' +\n      'dangerous because you\\'re creating a new child which will not be ' +\n      'added as a ref to its parent.'\n    ) : null);\n  }\n\n  var newProps = ReactPropTransferer.mergeProps(props, child.props);\n\n  // Use `child.props.children` if it is provided.\n  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&\n      child.props.hasOwnProperty(CHILDREN_PROP)) {\n    newProps.children = child.props.children;\n  }\n\n  // The current API doesn't retain _owner and _context, which is why this\n  // doesn't use ReactElement.cloneAndReplaceProps.\n  return ReactElement.createElement(child.type, newProps);\n}\n\nmodule.exports = cloneWithProps;\n\n}).call(this,require('_process'))\n\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactPropTransferer\":\"react/lib/ReactPropTransferer\",\"./keyOf\":\"react/lib/keyOf\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/containsNode\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule containsNode\n * @typechecks\n */\n\nvar isTextNode = require(\"./isTextNode\");\n\n/*jslint bitwise:true */\n\n/**\n * Checks if a given DOM node contains or is another DOM node.\n *\n * @param {?DOMNode} outerNode Outer DOM node.\n * @param {?DOMNode} innerNode Inner DOM node.\n * @return {boolean} True if `outerNode` contains or is `innerNode`.\n */\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode === innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if (outerNode.contains) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = containsNode;\n\n},{\"./isTextNode\":\"react/lib/isTextNode\"}],\"react/lib/createArrayFromMixed\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createArrayFromMixed\n * @typechecks\n */\n\nvar toArray = require(\"./toArray\");\n\n/**\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * It will return false for other array-like objects like Filelist.\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return (\n    // not null/false\n    !!obj &&\n    // arrays are objects, NodeLists are functions in Safari\n    (typeof obj == 'object' || typeof obj == 'function') &&\n    // quacks like an array\n    ('length' in obj) &&\n    // not window\n    !('setInterval' in obj) &&\n    // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    (typeof obj.nodeType != 'number') &&\n    (\n      // a real array\n      (// HTMLCollection/NodeList\n      (Array.isArray(obj) ||\n      // arguments\n      ('callee' in obj) || 'item' in obj))\n    )\n  );\n}\n\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFromMixed = require('createArrayFromMixed');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFromMixed(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * If you need to convert an array-like object, like `arguments`, into an array\n * use toArray instead.\n *\n * @param {*} obj\n * @return {array}\n */\nfunction createArrayFromMixed(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports = createArrayFromMixed;\n\n},{\"./toArray\":\"react/lib/toArray\"}],\"react/lib/createFullPageComponent\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createFullPageComponent\n * @typechecks\n */\n\n'use strict';\n\n// Defeat circular references by requiring this directly.\nvar ReactClass = require(\"./ReactClass\");\nvar ReactElement = require(\"./ReactElement\");\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Create a component that will throw an exception when unmounted.\n *\n * Components like <html> <head> and <body> can't be removed or added\n * easily in a cross-browser way, however it's valuable to be able to\n * take advantage of React's reconciliation for styling and <title>\n * management. So we just document it and throw in dangerous cases.\n *\n * @param {string} tag The tag to wrap\n * @return {function} convenience constructor of new component\n */\nfunction createFullPageComponent(tag) {\n  var elementFactory = ReactElement.createFactory(tag);\n\n  var FullPageComponent = ReactClass.createClass({\n    tagName: tag.toUpperCase(),\n    displayName: 'ReactFullPageComponent' + tag,\n\n    componentWillUnmount: function() {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        false,\n        '%s tried to unmount. Because of cross-browser quirks it is ' +\n        'impossible to unmount some top-level components (eg <html>, <head>, ' +\n        'and <body>) reliably and efficiently. To fix this, have a single ' +\n        'top-level component that never unmounts render these elements.',\n        this.constructor.displayName\n      ) : invariant(false));\n    },\n\n    render: function() {\n      return elementFactory(this.props);\n    }\n  });\n\n  return FullPageComponent;\n}\n\nmodule.exports = createFullPageComponent;\n\n}).call(this,require('_process'))\n\n},{\"./ReactClass\":\"react/lib/ReactClass\",\"./ReactElement\":\"react/lib/ReactElement\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/createNodesFromMarkup\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createNodesFromMarkup\n * @typechecks\n */\n\n/*jslint evil: true, sub: true */\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar createArrayFromMixed = require(\"./createArrayFromMixed\");\nvar getMarkupWrap = require(\"./getMarkupWrap\");\nvar invariant = require(\"./invariant\");\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode =\n  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  (\"production\" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));\n  var nodeName = getNodeName(markup);\n\n  var wrap = nodeName && getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n\n    var wrapDepth = wrap[0];\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n  if (scripts.length) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      handleScript,\n      'createNodesFromMarkup(...): Unexpected <script> element rendered.'\n    ) : invariant(handleScript));\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = createArrayFromMixed(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;\n\n}).call(this,require('_process'))\n\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./createArrayFromMixed\":\"react/lib/createArrayFromMixed\",\"./getMarkupWrap\":\"react/lib/getMarkupWrap\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/cx\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule cx\n */\n\n/**\n * This function is used to mark string literals representing CSS class names\n * so that they can be transformed statically. This allows for modularization\n * and minification of CSS class names.\n *\n * In static_upstream, this function is actually implemented, but it should\n * eventually be replaced with something more descriptive, and the transform\n * that is used in the main stack should be ported for use elsewhere.\n *\n * @param string|object className to modularize, or an object of key/values.\n *                      In the object case, the values are conditions that\n *                      determine if the className keys should be included.\n * @param [string ...]  Variable list of classNames in the string case.\n * @return string       Renderable space-separated CSS className.\n */\n\n'use strict';\nvar warning = require(\"./warning\");\n\nvar warned = false;\n\nfunction cx(classNames) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      warned,\n      'React.addons.classSet will be deprecated in a future version. See ' +\n      'http://fb.me/react-addons-classset'\n    ) : null);\n    warned = true;\n  }\n\n  if (typeof classNames == 'object') {\n    return Object.keys(classNames).filter(function(className) {\n      return classNames[className];\n    }).join(' ');\n  } else {\n    return Array.prototype.join.call(arguments, ' ');\n  }\n}\n\nmodule.exports = cx;\n\n}).call(this,require('_process'))\n\n},{\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/dangerousStyleValue\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule dangerousStyleValue\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CSSProperty = require(\"./CSSProperty\");\n\nvar isUnitlessNumber = CSSProperty.isUnitlessNumber;\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n\n  var isNonNumeric = isNaN(value);\n  if (isNonNumeric || value === 0 ||\n      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {\n    return '' + value; // cast to string\n  }\n\n  if (typeof value === 'string') {\n    value = value.trim();\n  }\n  return value + 'px';\n}\n\nmodule.exports = dangerousStyleValue;\n\n},{\"./CSSProperty\":\"react/lib/CSSProperty\"}],\"react/lib/emptyFunction\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule emptyFunction\n */\n\nfunction makeEmptyFunction(arg) {\n  return function() {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nfunction emptyFunction() {}\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function() { return this; };\nemptyFunction.thatReturnsArgument = function(arg) { return arg; };\n\nmodule.exports = emptyFunction;\n\n},{}],\"react/lib/emptyObject\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule emptyObject\n */\n\n\"use strict\";\n\nvar emptyObject = {};\n\nif (\"production\" !== process.env.NODE_ENV) {\n  Object_freeze(emptyObject);\n}\n\nmodule.exports = emptyObject;\n\n}).call(this,require('_process'))\n\n},{\"_process\":1}],\"react/lib/escapeTextContentForBrowser\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule escapeTextContentForBrowser\n */\n\n'use strict';\n\nvar ESCAPE_LOOKUP = {\n  '&': '&amp;',\n  '>': '&gt;',\n  '<': '&lt;',\n  '\"': '&quot;',\n  '\\'': '&#x27;'\n};\n\nvar ESCAPE_REGEX = /[&><\"']/g;\n\nfunction escaper(match) {\n  return ESCAPE_LOOKUP[match];\n}\n\n/**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */\nfunction escapeTextContentForBrowser(text) {\n  return ('' + text).replace(ESCAPE_REGEX, escaper);\n}\n\nmodule.exports = escapeTextContentForBrowser;\n\n},{}],\"react/lib/findDOMNode\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule findDOMNode\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactInstanceMap = require(\"./ReactInstanceMap\");\nvar ReactMount = require(\"./ReactMount\");\n\nvar invariant = require(\"./invariant\");\nvar isNode = require(\"./isNode\");\nvar warning = require(\"./warning\");\n\n/**\n * Returns the DOM node rendered by this element.\n *\n * @param {ReactComponent|DOMElement} componentOrElement\n * @return {DOMElement} The root node of this element.\n */\nfunction findDOMNode(componentOrElement) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    var owner = ReactCurrentOwner.current;\n    if (owner !== null) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        owner._warnedAboutRefsInRender,\n        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +\n        'render() should be a pure function of props and state. It should ' +\n        'never access something that requires stale data from the previous ' +\n        'render, such as refs. Move this logic to componentDidMount and ' +\n        'componentDidUpdate instead.',\n        owner.getName() || 'A component'\n      ) : null);\n      owner._warnedAboutRefsInRender = true;\n    }\n  }\n  if (componentOrElement == null) {\n    return null;\n  }\n  if (isNode(componentOrElement)) {\n    return componentOrElement;\n  }\n  if (ReactInstanceMap.has(componentOrElement)) {\n    return ReactMount.getNodeFromInstance(componentOrElement);\n  }\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    componentOrElement.render == null ||\n    typeof componentOrElement.render !== 'function',\n    'Component (with keys: %s) contains `render` method ' +\n    'but is not mounted in the DOM',\n    Object.keys(componentOrElement)\n  ) : invariant(componentOrElement.render == null ||\n  typeof componentOrElement.render !== 'function'));\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    false,\n    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',\n    Object.keys(componentOrElement)\n  ) : invariant(false));\n}\n\nmodule.exports = findDOMNode;\n\n}).call(this,require('_process'))\n\n},{\"./ReactCurrentOwner\":\"react/lib/ReactCurrentOwner\",\"./ReactInstanceMap\":\"react/lib/ReactInstanceMap\",\"./ReactMount\":\"react/lib/ReactMount\",\"./invariant\":\"react/lib/invariant\",\"./isNode\":\"react/lib/isNode\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/flattenChildren\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule flattenChildren\n */\n\n'use strict';\n\nvar traverseAllChildren = require(\"./traverseAllChildren\");\nvar warning = require(\"./warning\");\n\n/**\n * @param {function} traverseContext Context passed through traversal.\n * @param {?ReactComponent} child React child component.\n * @param {!string} name String name of key path to child.\n */\nfunction flattenSingleChildIntoContext(traverseContext, child, name) {\n  // We found a component instance.\n  var result = traverseContext;\n  var keyUnique = !result.hasOwnProperty(name);\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      keyUnique,\n      'flattenChildren(...): Encountered two children with the same key, ' +\n      '`%s`. Child keys must be unique; when two children share a key, only ' +\n      'the first child will be used.',\n      name\n    ) : null);\n  }\n  if (keyUnique && child != null) {\n    result[name] = child;\n  }\n}\n\n/**\n * Flattens children that are typically specified as `props.children`. Any null\n * children will not be included in the resulting object.\n * @return {!object} flattened children keyed by name.\n */\nfunction flattenChildren(children) {\n  if (children == null) {\n    return children;\n  }\n  var result = {};\n  traverseAllChildren(children, flattenSingleChildIntoContext, result);\n  return result;\n}\n\nmodule.exports = flattenChildren;\n\n}).call(this,require('_process'))\n\n},{\"./traverseAllChildren\":\"react/lib/traverseAllChildren\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/focusNode\":[function(require,module,exports){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule focusNode\n */\n\n\"use strict\";\n\n/**\n * @param {DOMElement} node input/textarea to focus\n */\nfunction focusNode(node) {\n  // IE8 can throw \"Can't move focus to the control because it is invisible,\n  // not enabled, or of a type that does not accept the focus.\" for all kinds of\n  // reasons that are too expensive and fragile to test.\n  try {\n    node.focus();\n  } catch(e) {\n  }\n}\n\nmodule.exports = focusNode;\n\n},{}],\"react/lib/forEachAccumulated\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule forEachAccumulated\n */\n\n'use strict';\n\n/**\n * @param {array} an \"accumulation\" of items which is either an Array or\n * a single item. Useful when paired with the `accumulate` module. This is a\n * simple utility that allows us to reason about a collection of items, but\n * handling the case when there is exactly one item (and we do not need to\n * allocate an array).\n */\nvar forEachAccumulated = function(arr, cb, scope) {\n  if (Array.isArray(arr)) {\n    arr.forEach(cb, scope);\n  } else if (arr) {\n    cb.call(scope, arr);\n  }\n};\n\nmodule.exports = forEachAccumulated;\n\n},{}],\"react/lib/getActiveElement\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getActiveElement\n * @typechecks\n */\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document body is not yet defined.\n */\nfunction getActiveElement() /*?DOMElement*/ {\n  try {\n    return document.activeElement || document.body;\n  } catch (e) {\n    return document.body;\n  }\n}\n\nmodule.exports = getActiveElement;\n\n},{}],\"react/lib/getEventCharCode\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventCharCode\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * `charCode` represents the actual \"character code\" and is safe to use with\n * `String.fromCharCode`. As such, only keys that correspond to printable\n * characters produce a valid `charCode`, the only exception to this is Enter.\n * The Tab-key is considered non-printable and does not have a `charCode`,\n * presumably because it does not produce a tab-character in browsers.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `charCode` property.\n */\nfunction getEventCharCode(nativeEvent) {\n  var charCode;\n  var keyCode = nativeEvent.keyCode;\n\n  if ('charCode' in nativeEvent) {\n    charCode = nativeEvent.charCode;\n\n    // FF does not set `charCode` for the Enter-key, check against `keyCode`.\n    if (charCode === 0 && keyCode === 13) {\n      charCode = 13;\n    }\n  } else {\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.\n    charCode = keyCode;\n  }\n\n  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.\n  // Must not discard the (non-)printable Enter-key.\n  if (charCode >= 32 || charCode === 13) {\n    return charCode;\n  }\n\n  return 0;\n}\n\nmodule.exports = getEventCharCode;\n\n},{}],\"react/lib/getEventKey\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventKey\n * @typechecks static-only\n */\n\n'use strict';\n\nvar getEventCharCode = require(\"./getEventCharCode\");\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey = {\n  'Esc': 'Escape',\n  'Spacebar': ' ',\n  'Left': 'ArrowLeft',\n  'Up': 'ArrowUp',\n  'Right': 'ArrowRight',\n  'Down': 'ArrowDown',\n  'Del': 'Delete',\n  'Win': 'OS',\n  'Menu': 'ContextMenu',\n  'Apps': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'MozPrintableKey': 'Unidentified'\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar translateToKey = {\n  8: 'Backspace',\n  9: 'Tab',\n  12: 'Clear',\n  13: 'Enter',\n  16: 'Shift',\n  17: 'Control',\n  18: 'Alt',\n  19: 'Pause',\n  20: 'CapsLock',\n  27: 'Escape',\n  32: ' ',\n  33: 'PageUp',\n  34: 'PageDown',\n  35: 'End',\n  36: 'Home',\n  37: 'ArrowLeft',\n  38: 'ArrowUp',\n  39: 'ArrowRight',\n  40: 'ArrowDown',\n  45: 'Insert',\n  46: 'Delete',\n  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',\n  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',\n  144: 'NumLock',\n  145: 'ScrollLock',\n  224: 'Meta'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\nmodule.exports = getEventKey;\n\n},{\"./getEventCharCode\":\"react/lib/getEventCharCode\"}],\"react/lib/getEventModifierState\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventModifierState\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * Translation from modifier key to the associated property in the event.\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\n */\n\nvar modifierKeyToProp = {\n  'Alt': 'altKey',\n  'Control': 'ctrlKey',\n  'Meta': 'metaKey',\n  'Shift': 'shiftKey'\n};\n\n// IE8 does not implement getModifierState so we simply map it to the only\n// modifier keys exposed by the event itself, does not support Lock-keys.\n// Currently, all major browsers except Chrome seems to support Lock-keys.\nfunction modifierStateGetter(keyArg) {\n  /*jshint validthis:true */\n  var syntheticEvent = this;\n  var nativeEvent = syntheticEvent.nativeEvent;\n  if (nativeEvent.getModifierState) {\n    return nativeEvent.getModifierState(keyArg);\n  }\n  var keyProp = modifierKeyToProp[keyArg];\n  return keyProp ? !!nativeEvent[keyProp] : false;\n}\n\nfunction getEventModifierState(nativeEvent) {\n  return modifierStateGetter;\n}\n\nmodule.exports = getEventModifierState;\n\n},{}],\"react/lib/getEventTarget\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventTarget\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * Gets the target node from a native browser event by accounting for\n * inconsistencies in browser DOM APIs.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {DOMEventTarget} Target node.\n */\nfunction getEventTarget(nativeEvent) {\n  var target = nativeEvent.target || nativeEvent.srcElement || window;\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).\n  // @see http://www.quirksmode.org/js/events_properties.html\n  return target.nodeType === 3 ? target.parentNode : target;\n}\n\nmodule.exports = getEventTarget;\n\n},{}],\"react/lib/getIteratorFn\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getIteratorFn\n * @typechecks static-only\n */\n\n'use strict';\n\n/* global Symbol */\nvar ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n/**\n * Returns the iterator method function contained on the iterable object.\n *\n * Be sure to invoke the function with the iterable as context:\n *\n *     var iteratorFn = getIteratorFn(myIterable);\n *     if (iteratorFn) {\n *       var iterator = iteratorFn.call(myIterable);\n *       ...\n *     }\n *\n * @param {?object} maybeIterable\n * @return {?function}\n */\nfunction getIteratorFn(maybeIterable) {\n  var iteratorFn = maybeIterable && (\n    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])\n  );\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n}\n\nmodule.exports = getIteratorFn;\n\n},{}],\"react/lib/getMarkupWrap\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getMarkupWrap\n */\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Dummy container used to detect which wraps are necessary.\n */\nvar dummyNode =\n  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Some browsers cannot use `innerHTML` to render certain elements standalone,\n * so we wrap them, render the wrapped nodes, then extract the desired node.\n *\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').\n */\nvar shouldWrap = {\n  // Force wrapping for SVG elements because if they get created inside a <div>,\n  // they will be initialized in the wrong namespace (and will not display).\n  'circle': true,\n  'clipPath': true,\n  'defs': true,\n  'ellipse': true,\n  'g': true,\n  'line': true,\n  'linearGradient': true,\n  'path': true,\n  'polygon': true,\n  'polyline': true,\n  'radialGradient': true,\n  'rect': true,\n  'stop': true,\n  'text': true\n};\n\nvar selectWrap = [1, '<select multiple=\"true\">', '</select>'];\nvar tableWrap = [1, '<table>', '</table>'];\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nvar svgWrap = [1, '<svg>', '</svg>'];\n\nvar markupWrap = {\n  '*': [1, '?<div>', '</div>'],\n\n  'area': [1, '<map>', '</map>'],\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\n  'legend': [1, '<fieldset>', '</fieldset>'],\n  'param': [1, '<object>', '</object>'],\n  'tr': [2, '<table><tbody>', '</tbody></table>'],\n\n  'optgroup': selectWrap,\n  'option': selectWrap,\n\n  'caption': tableWrap,\n  'colgroup': tableWrap,\n  'tbody': tableWrap,\n  'tfoot': tableWrap,\n  'thead': tableWrap,\n\n  'td': trWrap,\n  'th': trWrap,\n\n  'circle': svgWrap,\n  'clipPath': svgWrap,\n  'defs': svgWrap,\n  'ellipse': svgWrap,\n  'g': svgWrap,\n  'line': svgWrap,\n  'linearGradient': svgWrap,\n  'path': svgWrap,\n  'polygon': svgWrap,\n  'polyline': svgWrap,\n  'radialGradient': svgWrap,\n  'rect': svgWrap,\n  'stop': svgWrap,\n  'text': svgWrap\n};\n\n/**\n * Gets the markup wrap configuration for the supplied `nodeName`.\n *\n * NOTE: This lazily detects which wraps are necessary for the current browser.\n *\n * @param {string} nodeName Lowercase `nodeName`.\n * @return {?array} Markup wrap configuration, if applicable.\n */\nfunction getMarkupWrap(nodeName) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));\n  if (!markupWrap.hasOwnProperty(nodeName)) {\n    nodeName = '*';\n  }\n  if (!shouldWrap.hasOwnProperty(nodeName)) {\n    if (nodeName === '*') {\n      dummyNode.innerHTML = '<link />';\n    } else {\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';\n    }\n    shouldWrap[nodeName] = !dummyNode.firstChild;\n  }\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;\n}\n\n\nmodule.exports = getMarkupWrap;\n\n}).call(this,require('_process'))\n\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/getNodeForCharacterOffset\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getNodeForCharacterOffset\n */\n\n'use strict';\n\n/**\n * Given any node return the first leaf node without children.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {DOMElement|DOMTextNode}\n */\nfunction getLeafNode(node) {\n  while (node && node.firstChild) {\n    node = node.firstChild;\n  }\n  return node;\n}\n\n/**\n * Get the next sibling within a container. This will walk up the\n * DOM if a node's siblings have been exhausted.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {?DOMElement|DOMTextNode}\n */\nfunction getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    node = node.parentNode;\n  }\n}\n\n/**\n * Get object describing the nodes which contain characters at offset.\n *\n * @param {DOMElement|DOMTextNode} root\n * @param {number} offset\n * @return {?object}\n */\nfunction getNodeForCharacterOffset(root, offset) {\n  var node = getLeafNode(root);\n  var nodeStart = 0;\n  var nodeEnd = 0;\n\n  while (node) {\n    if (node.nodeType === 3) {\n      nodeEnd = nodeStart + node.textContent.length;\n\n      if (nodeStart <= offset && nodeEnd >= offset) {\n        return {\n          node: node,\n          offset: offset - nodeStart\n        };\n      }\n\n      nodeStart = nodeEnd;\n    }\n\n    node = getLeafNode(getSiblingNode(node));\n  }\n}\n\nmodule.exports = getNodeForCharacterOffset;\n\n},{}],\"react/lib/getReactRootElementInContainer\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getReactRootElementInContainer\n */\n\n'use strict';\n\nvar DOC_NODE_TYPE = 9;\n\n/**\n * @param {DOMElement|DOMDocument} container DOM element that may contain\n *                                           a React component\n * @return {?*} DOM element that may have the reactRoot ID, or null.\n */\nfunction getReactRootElementInContainer(container) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType === DOC_NODE_TYPE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\nmodule.exports = getReactRootElementInContainer;\n\n},{}],\"react/lib/getTextContentAccessor\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getTextContentAccessor\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar contentKey = null;\n\n/**\n * Gets the key used to access text content on a DOM node.\n *\n * @return {?string} Key used to access text content.\n * @internal\n */\nfunction getTextContentAccessor() {\n  if (!contentKey && ExecutionEnvironment.canUseDOM) {\n    // Prefer textContent to innerText because many browsers support both but\n    // SVG <text> elements don't support innerText even when <div> does.\n    contentKey = 'textContent' in document.documentElement ?\n      'textContent' :\n      'innerText';\n  }\n  return contentKey;\n}\n\nmodule.exports = getTextContentAccessor;\n\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\"}],\"react/lib/getUnboundedScrollPosition\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getUnboundedScrollPosition\n * @typechecks\n */\n\n\"use strict\";\n\n/**\n * Gets the scroll position of the supplied element or window.\n *\n * The return values are unbounded, unlike `getScrollPosition`. This means they\n * may be negative or exceed the element boundaries (which is possible using\n * inertial scrolling).\n *\n * @param {DOMWindow|DOMElement} scrollable\n * @return {object} Map with `x` and `y` keys.\n */\nfunction getUnboundedScrollPosition(scrollable) {\n  if (scrollable === window) {\n    return {\n      x: window.pageXOffset || document.documentElement.scrollLeft,\n      y: window.pageYOffset || document.documentElement.scrollTop\n    };\n  }\n  return {\n    x: scrollable.scrollLeft,\n    y: scrollable.scrollTop\n  };\n}\n\nmodule.exports = getUnboundedScrollPosition;\n\n},{}],\"react/lib/hyphenateStyleName\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule hyphenateStyleName\n * @typechecks\n */\n\n\"use strict\";\n\nvar hyphenate = require(\"./hyphenate\");\n\nvar msPattern = /^ms-/;\n\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenateStyleName(string) {\n  return hyphenate(string).replace(msPattern, '-ms-');\n}\n\nmodule.exports = hyphenateStyleName;\n\n},{\"./hyphenate\":\"react/lib/hyphenate\"}],\"react/lib/hyphenate\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule hyphenate\n * @typechecks\n */\n\nvar _uppercasePattern = /([A-Z])/g;\n\n/**\n * Hyphenates a camelcased string, for example:\n *\n *   > hyphenate('backgroundColor')\n *   < \"background-color\"\n *\n * For CSS style names, use `hyphenateStyleName` instead which works properly\n * with all vendor prefixes, including `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenate(string) {\n  return string.replace(_uppercasePattern, '-$1').toLowerCase();\n}\n\nmodule.exports = hyphenate;\n\n},{}],\"react/lib/instantiateReactComponent\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule instantiateReactComponent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\n\n// To avoid a cyclic dependency, we create the final class in this module\nvar ReactCompositeComponentWrapper = function() { };\nassign(\n  ReactCompositeComponentWrapper.prototype,\n  ReactCompositeComponent.Mixin,\n  {\n    _instantiateReactComponent: instantiateReactComponent\n  }\n);\n\n/**\n * Check if the type reference is a known internal type. I.e. not a user\n * provided composite type.\n *\n * @param {function} type\n * @return {boolean} Returns true if this is a valid internal type.\n */\nfunction isInternalComponentType(type) {\n  return (\n    typeof type === 'function' &&\n    typeof type.prototype !== 'undefined' &&\n    typeof type.prototype.mountComponent === 'function' &&\n    typeof type.prototype.receiveComponent === 'function'\n  );\n}\n\n/**\n * Given a ReactNode, create an instance that will actually be mounted.\n *\n * @param {ReactNode} node\n * @param {*} parentCompositeType The composite type that resolved this.\n * @return {object} A new instance of the element's constructor.\n * @protected\n */\nfunction instantiateReactComponent(node, parentCompositeType) {\n  var instance;\n\n  if (node === null || node === false) {\n    node = ReactEmptyComponent.emptyElement;\n  }\n\n  if (typeof node === 'object') {\n    var element = node;\n    if (\"production\" !== process.env.NODE_ENV) {\n      (\"production\" !== process.env.NODE_ENV ? warning(\n        element && (typeof element.type === 'function' ||\n                    typeof element.type === 'string'),\n        'Only functions or strings can be mounted as React components.'\n      ) : null);\n    }\n\n    // Special case string values\n    if (parentCompositeType === element.type &&\n        typeof element.type === 'string') {\n      // Avoid recursion if the wrapper renders itself.\n      instance = ReactNativeComponent.createInternalComponent(element);\n      // All native components are currently wrapped in a composite so we're\n      // safe to assume that this is what we should instantiate.\n    } else if (isInternalComponentType(element.type)) {\n      // This is temporarily available for custom components that are not string\n      // represenations. I.e. ART. Once those are updated to use the string\n      // representation, we can drop this code path.\n      instance = new element.type(element);\n    } else {\n      instance = new ReactCompositeComponentWrapper();\n    }\n  } else if (typeof node === 'string' || typeof node === 'number') {\n    instance = ReactNativeComponent.createInstanceForText(node);\n  } else {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      false,\n      'Encountered invalid React node of type %s',\n      typeof node\n    ) : invariant(false));\n  }\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      typeof instance.construct === 'function' &&\n      typeof instance.mountComponent === 'function' &&\n      typeof instance.receiveComponent === 'function' &&\n      typeof instance.unmountComponent === 'function',\n      'Only React Components can be mounted.'\n    ) : null);\n  }\n\n  // Sets up the instance. This can probably just move into the constructor now.\n  instance.construct(node);\n\n  // These two fields are used by the DOM and ART diffing algorithms\n  // respectively. Instead of using expandos on components, we should be\n  // storing the state needed by the diffing algorithms elsewhere.\n  instance._mountIndex = 0;\n  instance._mountImage = null;\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    instance._isOwnerNecessary = false;\n    instance._warnedAboutRefsInRender = false;\n  }\n\n  // Internal instances should fully constructed at this point, so they should\n  // not get any new fields added to them at this point.\n  if (\"production\" !== process.env.NODE_ENV) {\n    if (Object.preventExtensions) {\n      Object.preventExtensions(instance);\n    }\n  }\n\n  return instance;\n}\n\nmodule.exports = instantiateReactComponent;\n\n}).call(this,require('_process'))\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./ReactCompositeComponent\":\"react/lib/ReactCompositeComponent\",\"./ReactEmptyComponent\":\"react/lib/ReactEmptyComponent\",\"./ReactNativeComponent\":\"react/lib/ReactNativeComponent\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/invariant\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n\"use strict\";\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        'Invariant Violation: ' +\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n\n}).call(this,require('_process'))\n\n},{\"_process\":1}],\"react/lib/isEventSupported\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isEventSupported\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar useHasFeature;\nif (ExecutionEnvironment.canUseDOM) {\n  useHasFeature =\n    document.implementation &&\n    document.implementation.hasFeature &&\n    // always returns true in newer browsers as per the standard.\n    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature\n    document.implementation.hasFeature('', '') !== true;\n}\n\n/**\n * Checks if an event is supported in the current execution environment.\n *\n * NOTE: This will not work correctly for non-generic events such as `change`,\n * `reset`, `load`, `error`, and `select`.\n *\n * Borrows from Modernizr.\n *\n * @param {string} eventNameSuffix Event name, e.g. \"click\".\n * @param {?boolean} capture Check if the capture phase is supported.\n * @return {boolean} True if the event is supported.\n * @internal\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nfunction isEventSupported(eventNameSuffix, capture) {\n  if (!ExecutionEnvironment.canUseDOM ||\n      capture && !('addEventListener' in document)) {\n    return false;\n  }\n\n  var eventName = 'on' + eventNameSuffix;\n  var isSupported = eventName in document;\n\n  if (!isSupported) {\n    var element = document.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof element[eventName] === 'function';\n  }\n\n  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {\n    // This is the only way to test support for the `wheel` event in IE9+.\n    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');\n  }\n\n  return isSupported;\n}\n\nmodule.exports = isEventSupported;\n\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\"}],\"react/lib/isNode\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isNode\n * @typechecks\n */\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM node.\n */\nfunction isNode(object) {\n  return !!(object && (\n    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&\n    typeof object.nodeType === 'number' &&\n    typeof object.nodeName === 'string'))\n  ));\n}\n\nmodule.exports = isNode;\n\n},{}],\"react/lib/isTextInputElement\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isTextInputElement\n */\n\n'use strict';\n\n/**\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n */\nvar supportedInputTypes = {\n  'color': true,\n  'date': true,\n  'datetime': true,\n  'datetime-local': true,\n  'email': true,\n  'month': true,\n  'number': true,\n  'password': true,\n  'range': true,\n  'search': true,\n  'tel': true,\n  'text': true,\n  'time': true,\n  'url': true,\n  'week': true\n};\n\nfunction isTextInputElement(elem) {\n  return elem && (\n    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')\n  );\n}\n\nmodule.exports = isTextInputElement;\n\n},{}],\"react/lib/isTextNode\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule isTextNode\n * @typechecks\n */\n\nvar isNode = require(\"./isNode\");\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM text node.\n */\nfunction isTextNode(object) {\n  return isNode(object) && object.nodeType == 3;\n}\n\nmodule.exports = isTextNode;\n\n},{\"./isNode\":\"react/lib/isNode\"}],\"react/lib/joinClasses\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule joinClasses\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * Combines multiple className strings into one.\n * http://jsperf.com/joinclasses-args-vs-array\n *\n * @param {...?string} classes\n * @return {string}\n */\nfunction joinClasses(className/*, ... */) {\n  if (!className) {\n    className = '';\n  }\n  var nextClass;\n  var argLength = arguments.length;\n  if (argLength > 1) {\n    for (var ii = 1; ii < argLength; ii++) {\n      nextClass = arguments[ii];\n      if (nextClass) {\n        className = (className ? className + ' ' : '') + nextClass;\n      }\n    }\n  }\n  return className;\n}\n\nmodule.exports = joinClasses;\n\n},{}],\"react/lib/keyMirror\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyMirror\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Constructs an enumeration with keys equal to their value.\n *\n * For example:\n *\n *   var COLORS = keyMirror({blue: null, red: null});\n *   var myColor = COLORS.blue;\n *   var isColorValid = !!COLORS[myColor];\n *\n * The last line could not be performed if the values of the generated enum were\n * not equal to their keys.\n *\n *   Input:  {key1: val1, key2: val2}\n *   Output: {key1: key1, key2: key2}\n *\n * @param {object} obj\n * @return {object}\n */\nvar keyMirror = function(obj) {\n  var ret = {};\n  var key;\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    obj instanceof Object && !Array.isArray(obj),\n    'keyMirror(...): Argument must be an object.'\n  ) : invariant(obj instanceof Object && !Array.isArray(obj)));\n  for (key in obj) {\n    if (!obj.hasOwnProperty(key)) {\n      continue;\n    }\n    ret[key] = key;\n  }\n  return ret;\n};\n\nmodule.exports = keyMirror;\n\n}).call(this,require('_process'))\n\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/keyOf\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule keyOf\n */\n\n/**\n * Allows extraction of a minified key. Let's the build system minify keys\n * without loosing the ability to dynamically use key strings as values\n * themselves. Pass in an object with a single key/val pair and it will return\n * you the string key of that single record. Suppose you want to grab the\n * value for a key 'className' inside of an object. Key/val minification may\n * have aliased that key to be 'xa12'. keyOf({className: null}) will return\n * 'xa12' in that case. Resolve keys you want to use once at startup time, then\n * reuse those resolutions.\n */\nvar keyOf = function(oneKeyObj) {\n  var key;\n  for (key in oneKeyObj) {\n    if (!oneKeyObj.hasOwnProperty(key)) {\n      continue;\n    }\n    return key;\n  }\n  return null;\n};\n\n\nmodule.exports = keyOf;\n\n},{}],\"react/lib/mapObject\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule mapObject\n */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Executes the provided `callback` once for each enumerable own property in the\n * object and constructs a new object from the results. The `callback` is\n * invoked with three arguments:\n *\n *  - the property value\n *  - the property name\n *  - the object being traversed\n *\n * Properties that are added after the call to `mapObject` will not be visited\n * by `callback`. If the values of existing properties are changed, the value\n * passed to `callback` will be the value at the time `mapObject` visits them.\n * Properties that are deleted before being visited are not visited.\n *\n * @grep function objectMap()\n * @grep function objMap()\n *\n * @param {?object} object\n * @param {function} callback\n * @param {*} context\n * @return {?object}\n */\nfunction mapObject(object, callback, context) {\n  if (!object) {\n    return null;\n  }\n  var result = {};\n  for (var name in object) {\n    if (hasOwnProperty.call(object, name)) {\n      result[name] = callback.call(context, object[name], name, object);\n    }\n  }\n  return result;\n}\n\nmodule.exports = mapObject;\n\n},{}],\"react/lib/memoizeStringOnly\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule memoizeStringOnly\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * Memoizes the return value of a function that accepts one string argument.\n *\n * @param {function} callback\n * @return {function}\n */\nfunction memoizeStringOnly(callback) {\n  var cache = {};\n  return function(string) {\n    if (!cache.hasOwnProperty(string)) {\n      cache[string] = callback.call(this, string);\n    }\n    return cache[string];\n  };\n}\n\nmodule.exports = memoizeStringOnly;\n\n},{}],\"react/lib/onlyChild\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule onlyChild\n */\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection. The current implementation of this\n * function assumes that a single child gets passed without a wrapper, but the\n * purpose of this helper function is to abstract away the particular structure\n * of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactComponent} The first and only `ReactComponent` contained in the\n * structure.\n */\nfunction onlyChild(children) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    ReactElement.isValidElement(children),\n    'onlyChild must be passed a children with exactly one child.'\n  ) : invariant(ReactElement.isValidElement(children)));\n  return children;\n}\n\nmodule.exports = onlyChild;\n\n}).call(this,require('_process'))\n\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/performanceNow\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule performanceNow\n * @typechecks\n */\n\nvar performance = require(\"./performance\");\n\n/**\n * Detect if we can use `window.performance.now()` and gracefully fallback to\n * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now\n * because of Facebook's testing infrastructure.\n */\nif (!performance || !performance.now) {\n  performance = Date;\n}\n\nvar performanceNow = performance.now.bind(performance);\n\nmodule.exports = performanceNow;\n\n},{\"./performance\":\"react/lib/performance\"}],\"react/lib/performance\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule performance\n * @typechecks\n */\n\n\"use strict\";\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar performance;\n\nif (ExecutionEnvironment.canUseDOM) {\n  performance =\n    window.performance ||\n    window.msPerformance ||\n    window.webkitPerformance;\n}\n\nmodule.exports = performance || {};\n\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\"}],\"react/lib/quoteAttributeValueForBrowser\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule quoteAttributeValueForBrowser\n */\n\n'use strict';\n\nvar escapeTextContentForBrowser = require(\"./escapeTextContentForBrowser\");\n\n/**\n * Escapes attribute value to prevent scripting attacks.\n *\n * @param {*} value Value to escape.\n * @return {string} An escaped string.\n */\nfunction quoteAttributeValueForBrowser(value) {\n  return '\"' + escapeTextContentForBrowser(value) + '\"';\n}\n\nmodule.exports = quoteAttributeValueForBrowser;\n\n},{\"./escapeTextContentForBrowser\":\"react/lib/escapeTextContentForBrowser\"}],\"react/lib/setInnerHTML\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setInnerHTML\n */\n\n/* globals MSApp */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;\n\n/**\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\n * even in IE8.\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML = function(node, html) {\n  node.innerHTML = html;\n};\n\n// Win8 apps: Allow all html to be inserted\nif (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n  setInnerHTML = function(node, html) {\n    MSApp.execUnsafeLocalFunction(function() {\n      node.innerHTML = html;\n    });\n  };\n}\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8: When updating a just created node with innerHTML only leading\n  // whitespace is removed. When updating an existing node with innerHTML\n  // whitespace in root TextNodes is also collapsed.\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n  // Feature detection; only IE8 is known to behave improperly like this.\n  var testElement = document.createElement('div');\n  testElement.innerHTML = ' ';\n  if (testElement.innerHTML === '') {\n    setInnerHTML = function(node, html) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      // TODO: What to do on a detached node?\n      if (node.parentNode) {\n        node.parentNode.replaceChild(node, node);\n      }\n\n      // We also implement a workaround for non-visible tags disappearing into\n      // thin air on IE8, this only happens if there is no visible text\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\n      // and simply check if any non-visible tags appear in the source.\n      if (WHITESPACE_TEST.test(html) ||\n          html[0] === '<' && NONVISIBLE_TEST.test(html)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        node.innerHTML = '\\uFEFF' + html;\n\n        // deleteData leaves an empty `TextNode` which offsets the index of all\n        // children. Definitely want to avoid this.\n        var textNode = node.firstChild;\n        if (textNode.data.length === 1) {\n          node.removeChild(textNode);\n        } else {\n          textNode.deleteData(0, 1);\n        }\n      } else {\n        node.innerHTML = html;\n      }\n    };\n  }\n}\n\nmodule.exports = setInnerHTML;\n\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\"}],\"react/lib/setTextContent\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setTextContent\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar escapeTextContentForBrowser = require(\"./escapeTextContentForBrowser\");\nvar setInnerHTML = require(\"./setInnerHTML\");\n\n/**\n * Set the textContent property of a node, ensuring that whitespace is preserved\n * even in IE8. innerText is a poor substitute for textContent and, among many\n * issues, inserts <br> instead of the literal newline chars. innerHTML behaves\n * as it should.\n *\n * @param {DOMElement} node\n * @param {string} text\n * @internal\n */\nvar setTextContent = function(node, text) {\n  node.textContent = text;\n};\n\nif (ExecutionEnvironment.canUseDOM) {\n  if (!('textContent' in document.documentElement)) {\n    setTextContent = function(node, text) {\n      setInnerHTML(node, escapeTextContentForBrowser(text));\n    };\n  }\n}\n\nmodule.exports = setTextContent;\n\n},{\"./ExecutionEnvironment\":\"react/lib/ExecutionEnvironment\",\"./escapeTextContentForBrowser\":\"react/lib/escapeTextContentForBrowser\",\"./setInnerHTML\":\"react/lib/setInnerHTML\"}],\"react/lib/shallowEqual\":[function(require,module,exports){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shallowEqual\n */\n\n'use strict';\n\n/**\n * Performs equality by iterating through keys on an object and returning\n * false when any key has values which are not strictly equal between\n * objA and objB. Returns true when the values of all keys are strictly equal.\n *\n * @return {boolean}\n */\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n  var key;\n  // Test for A's keys different from B.\n  for (key in objA) {\n    if (objA.hasOwnProperty(key) &&\n        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {\n      return false;\n    }\n  }\n  // Test for B's keys missing from A.\n  for (key in objB) {\n    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = shallowEqual;\n\n},{}],\"react/lib/shouldUpdateReactComponent\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule shouldUpdateReactComponent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar warning = require(\"./warning\");\n\n/**\n * Given a `prevElement` and `nextElement`, determines if the existing\n * instance should be updated as opposed to being destroyed or replaced by a new\n * instance. Both arguments are elements. This ensures that this logic can\n * operate on stateless trees without any backing instance.\n *\n * @param {?object} prevElement\n * @param {?object} nextElement\n * @return {boolean} True if the existing instance should be updated.\n * @protected\n */\nfunction shouldUpdateReactComponent(prevElement, nextElement) {\n  if (prevElement != null && nextElement != null) {\n    var prevType = typeof prevElement;\n    var nextType = typeof nextElement;\n    if (prevType === 'string' || prevType === 'number') {\n      return (nextType === 'string' || nextType === 'number');\n    } else {\n      if (nextType === 'object' &&\n          prevElement.type === nextElement.type &&\n          prevElement.key === nextElement.key) {\n        var ownersMatch = prevElement._owner === nextElement._owner;\n        var prevName = null;\n        var nextName = null;\n        var nextDisplayName = null;\n        if (\"production\" !== process.env.NODE_ENV) {\n          if (!ownersMatch) {\n            if (prevElement._owner != null &&\n                prevElement._owner.getPublicInstance() != null &&\n                prevElement._owner.getPublicInstance().constructor != null) {\n              prevName =\n                prevElement._owner.getPublicInstance().constructor.displayName;\n            }\n            if (nextElement._owner != null &&\n                nextElement._owner.getPublicInstance() != null &&\n                nextElement._owner.getPublicInstance().constructor != null) {\n              nextName =\n                nextElement._owner.getPublicInstance().constructor.displayName;\n            }\n            if (nextElement.type != null &&\n                nextElement.type.displayName != null) {\n              nextDisplayName = nextElement.type.displayName;\n            }\n            if (nextElement.type != null && typeof nextElement.type === 'string') {\n              nextDisplayName = nextElement.type;\n            }\n            if (typeof nextElement.type !== 'string' ||\n                nextElement.type === 'input' ||\n                nextElement.type === 'textarea') {\n              if ((prevElement._owner != null &&\n                  prevElement._owner._isOwnerNecessary === false) ||\n                  (nextElement._owner != null &&\n                  nextElement._owner._isOwnerNecessary === false)) {\n                if (prevElement._owner != null) {\n                  prevElement._owner._isOwnerNecessary = true;\n                }\n                if (nextElement._owner != null) {\n                  nextElement._owner._isOwnerNecessary = true;\n                }\n                (\"production\" !== process.env.NODE_ENV ? warning(\n                  false,\n                  '<%s /> is being rendered by both %s and %s using the same ' +\n                  'key (%s) in the same place. Currently, this means that ' +\n                  'they don\\'t preserve state. This behavior should be very ' +\n                  'rare so we\\'re considering deprecating it. Please contact ' +\n                  'the React team and explain your use case so that we can ' +\n                  'take that into consideration.',\n                  nextDisplayName || 'Unknown Component',\n                  prevName || '[Unknown]',\n                  nextName || '[Unknown]',\n                  prevElement.key\n                ) : null);\n              }\n            }\n          }\n        }\n        return ownersMatch;\n      }\n    }\n  }\n  return false;\n}\n\nmodule.exports = shouldUpdateReactComponent;\n\n}).call(this,require('_process'))\n\n},{\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/toArray\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule toArray\n * @typechecks\n */\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Convert array-like objects to arrays.\n *\n * This API assumes the caller knows the contents of the data type. For less\n * well defined inputs use createArrayFromMixed.\n *\n * @param {object|function|filelist} obj\n * @return {array}\n */\nfunction toArray(obj) {\n  var length = obj.length;\n\n  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in\n  // old versions of Safari).\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    !Array.isArray(obj) &&\n    (typeof obj === 'object' || typeof obj === 'function'),\n    'toArray: Array-like object expected'\n  ) : invariant(!Array.isArray(obj) &&\n  (typeof obj === 'object' || typeof obj === 'function')));\n\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof length === 'number',\n    'toArray: Object needs a length property'\n  ) : invariant(typeof length === 'number'));\n\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    length === 0 ||\n    (length - 1) in obj,\n    'toArray: Object should have keys for indices'\n  ) : invariant(length === 0 ||\n  (length - 1) in obj));\n\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\n  // without method will throw during the slice call and skip straight to the\n  // fallback.\n  if (obj.hasOwnProperty) {\n    try {\n      return Array.prototype.slice.call(obj);\n    } catch (e) {\n      // IE < 9 does not support Array#slice on collections objects\n    }\n  }\n\n  // Fall back to copying key by key. This assumes all keys have a value,\n  // so will not preserve sparsely populated inputs.\n  var ret = Array(length);\n  for (var ii = 0; ii < length; ii++) {\n    ret[ii] = obj[ii];\n  }\n  return ret;\n}\n\nmodule.exports = toArray;\n\n}).call(this,require('_process'))\n\n},{\"./invariant\":\"react/lib/invariant\",\"_process\":1}],\"react/lib/traverseAllChildren\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule traverseAllChildren\n */\n\n'use strict';\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactFragment = require(\"./ReactFragment\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\n\nvar getIteratorFn = require(\"./getIteratorFn\");\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\n\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;\nvar SUBSEPARATOR = ':';\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nvar userProvidedKeyEscaperLookup = {\n  '=': '=0',\n  '.': '=1',\n  ':': '=2'\n};\n\nvar userProvidedKeyEscapeRegex = /[=.:]/g;\n\nvar didWarnAboutMaps = false;\n\nfunction userProvidedKeyEscaper(match) {\n  return userProvidedKeyEscaperLookup[match];\n}\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  if (component && component.key != null) {\n    // Explicit key\n    return wrapUserProvidedKey(component.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\n/**\n * Escape a component key so that it is safe to use in a reactid.\n *\n * @param {*} key Component key to be escaped.\n * @return {string} An escaped string.\n */\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(\n    userProvidedKeyEscapeRegex,\n    userProvidedKeyEscaper\n  );\n}\n\n/**\n * Wrap a `key` value explicitly provided by the user to distinguish it from\n * implicitly-generated keys generated by a component's index in its parent.\n *\n * @param {string} key Value of a user-provided `key` attribute\n * @return {string}\n */\nfunction wrapUserProvidedKey(key) {\n  return '$' + escapeUserProvidedKey(key);\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!number} indexSoFar Number of children encountered until this point.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(\n  children,\n  nameSoFar,\n  indexSoFar,\n  callback,\n  traverseContext\n) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  if (children === null ||\n      type === 'string' ||\n      type === 'number' ||\n      ReactElement.isValidElement(children)) {\n    callback(\n      traverseContext,\n      children,\n      // If it's the only child, treat the name as if it was wrapped in an array\n      // so that it's consistent if the number of children grows.\n      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,\n      indexSoFar\n    );\n    return 1;\n  }\n\n  var child, nextName, nextIndex;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = (\n        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +\n        getComponentKey(child, i)\n      );\n      nextIndex = indexSoFar + subtreeCount;\n      subtreeCount += traverseAllChildrenImpl(\n        child,\n        nextName,\n        nextIndex,\n        callback,\n        traverseContext\n      );\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n    if (iteratorFn) {\n      var iterator = iteratorFn.call(children);\n      var step;\n      if (iteratorFn !== children.entries) {\n        var ii = 0;\n        while (!(step = iterator.next()).done) {\n          child = step.value;\n          nextName = (\n            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +\n            getComponentKey(child, ii++)\n          );\n          nextIndex = indexSoFar + subtreeCount;\n          subtreeCount += traverseAllChildrenImpl(\n            child,\n            nextName,\n            nextIndex,\n            callback,\n            traverseContext\n          );\n        }\n      } else {\n        if (\"production\" !== process.env.NODE_ENV) {\n          (\"production\" !== process.env.NODE_ENV ? warning(\n            didWarnAboutMaps,\n            'Using Maps as children is not yet fully supported. It is an ' +\n            'experimental feature that might be removed. Convert it to a ' +\n            'sequence / iterable of keyed ReactElements instead.'\n          ) : null);\n          didWarnAboutMaps = true;\n        }\n        // Iterator will provide entry [k,v] tuples rather than values.\n        while (!(step = iterator.next()).done) {\n          var entry = step.value;\n          if (entry) {\n            child = entry[1];\n            nextName = (\n              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +\n              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +\n              getComponentKey(child, 0)\n            );\n            nextIndex = indexSoFar + subtreeCount;\n            subtreeCount += traverseAllChildrenImpl(\n              child,\n              nextName,\n              nextIndex,\n              callback,\n              traverseContext\n            );\n          }\n        }\n      }\n    } else if (type === 'object') {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        children.nodeType !== 1,\n        'traverseAllChildren(...): Encountered an invalid child; DOM ' +\n        'elements are not valid children of React components.'\n      ) : invariant(children.nodeType !== 1));\n      var fragment = ReactFragment.extract(children);\n      for (var key in fragment) {\n        if (fragment.hasOwnProperty(key)) {\n          child = fragment[key];\n          nextName = (\n            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +\n            wrapUserProvidedKey(key) + SUBSEPARATOR +\n            getComponentKey(child, 0)\n          );\n          nextIndex = indexSoFar + subtreeCount;\n          subtreeCount += traverseAllChildrenImpl(\n            child,\n            nextName,\n            nextIndex,\n            callback,\n            traverseContext\n          );\n        }\n      }\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);\n}\n\nmodule.exports = traverseAllChildren;\n\n}).call(this,require('_process'))\n\n},{\"./ReactElement\":\"react/lib/ReactElement\",\"./ReactFragment\":\"react/lib/ReactFragment\",\"./ReactInstanceHandles\":\"react/lib/ReactInstanceHandles\",\"./getIteratorFn\":\"react/lib/getIteratorFn\",\"./invariant\":\"react/lib/invariant\",\"./warning\":\"react/lib/warning\",\"_process\":1}],\"react/lib/update\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule update\n */\n\n /* global hasOwnProperty:true */\n\n'use strict';\n\nvar assign = require(\"./Object.assign\");\nvar keyOf = require(\"./keyOf\");\nvar invariant = require(\"./invariant\");\nvar hasOwnProperty = {}.hasOwnProperty;\n\nfunction shallowCopy(x) {\n  if (Array.isArray(x)) {\n    return x.concat();\n  } else if (x && typeof x === 'object') {\n    return assign(new x.constructor(), x);\n  } else {\n    return x;\n  }\n}\n\nvar COMMAND_PUSH = keyOf({$push: null});\nvar COMMAND_UNSHIFT = keyOf({$unshift: null});\nvar COMMAND_SPLICE = keyOf({$splice: null});\nvar COMMAND_SET = keyOf({$set: null});\nvar COMMAND_MERGE = keyOf({$merge: null});\nvar COMMAND_APPLY = keyOf({$apply: null});\n\nvar ALL_COMMANDS_LIST = [\n  COMMAND_PUSH,\n  COMMAND_UNSHIFT,\n  COMMAND_SPLICE,\n  COMMAND_SET,\n  COMMAND_MERGE,\n  COMMAND_APPLY\n];\n\nvar ALL_COMMANDS_SET = {};\n\nALL_COMMANDS_LIST.forEach(function(command) {\n  ALL_COMMANDS_SET[command] = true;\n});\n\nfunction invariantArrayCase(value, spec, command) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    Array.isArray(value),\n    'update(): expected target of %s to be an array; got %s.',\n    command,\n    value\n  ) : invariant(Array.isArray(value)));\n  var specValue = spec[command];\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    Array.isArray(specValue),\n    'update(): expected spec of %s to be an array; got %s. ' +\n    'Did you forget to wrap your parameter in an array?',\n    command,\n    specValue\n  ) : invariant(Array.isArray(specValue)));\n}\n\nfunction update(value, spec) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof spec === 'object',\n    'update(): You provided a key path to update() that did not contain one ' +\n    'of %s. Did you forget to include {%s: ...}?',\n    ALL_COMMANDS_LIST.join(', '),\n    COMMAND_SET\n  ) : invariant(typeof spec === 'object'));\n\n  if (hasOwnProperty.call(spec, COMMAND_SET)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Object.keys(spec).length === 1,\n      'Cannot have more than one key in an object with %s',\n      COMMAND_SET\n    ) : invariant(Object.keys(spec).length === 1));\n\n    return spec[COMMAND_SET];\n  }\n\n  var nextValue = shallowCopy(value);\n\n  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {\n    var mergeObj = spec[COMMAND_MERGE];\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      mergeObj && typeof mergeObj === 'object',\n      'update(): %s expects a spec of type \\'object\\'; got %s',\n      COMMAND_MERGE,\n      mergeObj\n    ) : invariant(mergeObj && typeof mergeObj === 'object'));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      nextValue && typeof nextValue === 'object',\n      'update(): %s expects a target of type \\'object\\'; got %s',\n      COMMAND_MERGE,\n      nextValue\n    ) : invariant(nextValue && typeof nextValue === 'object'));\n    assign(nextValue, spec[COMMAND_MERGE]);\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {\n    invariantArrayCase(value, spec, COMMAND_PUSH);\n    spec[COMMAND_PUSH].forEach(function(item) {\n      nextValue.push(item);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {\n    invariantArrayCase(value, spec, COMMAND_UNSHIFT);\n    spec[COMMAND_UNSHIFT].forEach(function(item) {\n      nextValue.unshift(item);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Array.isArray(value),\n      'Expected %s target to be an array; got %s',\n      COMMAND_SPLICE,\n      value\n    ) : invariant(Array.isArray(value)));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Array.isArray(spec[COMMAND_SPLICE]),\n      'update(): expected spec of %s to be an array of arrays; got %s. ' +\n      'Did you forget to wrap your parameters in an array?',\n      COMMAND_SPLICE,\n      spec[COMMAND_SPLICE]\n    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));\n    spec[COMMAND_SPLICE].forEach(function(args) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        Array.isArray(args),\n        'update(): expected spec of %s to be an array of arrays; got %s. ' +\n        'Did you forget to wrap your parameters in an array?',\n        COMMAND_SPLICE,\n        spec[COMMAND_SPLICE]\n      ) : invariant(Array.isArray(args)));\n      nextValue.splice.apply(nextValue, args);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof spec[COMMAND_APPLY] === 'function',\n      'update(): expected spec of %s to be a function; got %s.',\n      COMMAND_APPLY,\n      spec[COMMAND_APPLY]\n    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));\n    nextValue = spec[COMMAND_APPLY](nextValue);\n  }\n\n  for (var k in spec) {\n    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n      nextValue[k] = update(value[k], spec[k]);\n    }\n  }\n\n  return nextValue;\n}\n\nmodule.exports = update;\n\n}).call(this,require('_process'))\n\n},{\"./Object.assign\":\"react/lib/Object.assign\",\"./invariant\":\"react/lib/invariant\",\"./keyOf\":\"react/lib/keyOf\",\"_process\":1}],\"react/lib/warning\":[function(require,module,exports){\n(function (process){\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule warning\n */\n\n\"use strict\";\n\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (\"production\" !== process.env.NODE_ENV) {\n  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || /^[s\\W]*$/.test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});\n      console.warn(message);\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n\n}).call(this,require('_process'))\n\n},{\"./emptyFunction\":\"react/lib/emptyFunction\",\"_process\":1}],\"react\":[function(require,module,exports){\nmodule.exports = require('./lib/React');\n\n},{\"./lib/React\":\"react/lib/React\"}]},{},[2])\n//# sourceMappingURL=react-runtime-dev/react.browserify.js\n","React.require = require;\nReactDev = React;\n"]}}]